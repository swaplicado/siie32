/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mitm.data.SDataItem;
import erp.mmfg.data.SDataRequisition;
import erp.mmfg.data.SDataRequisitionEntry;
import erp.mmfg.data.SDataRequisitionEntryRow;
import erp.mmfg.data.SDataRequisitionPurchaseOrder;
import erp.mod.SModSysConsts;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormRequisition extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mbps.data.SDataBizPartner moBizPartner;
    private erp.mbps.data.SDataBizPartnerCategory moBizPartnerCategory;
    private erp.mitm.data.SDataItem moItem;
    private erp.mmfg.data.SDataRequisition moRequisition;
    private erp.mmfg.data.SDataRequisitionEntry moRequisitionEntry;
    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.data.SDataDpsEntry moDpsEntry;

    private erp.lib.form.SFormField moFieldTimestamp;
    private erp.lib.form.SFormField moFieldFkBizPartnerId;
    private erp.lib.form.SFormField moFieldFkStatusId;
    private erp.lib.form.SFormField moFieldFkTypeId;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moRequisitionEntriesPane;

    private java.util.Vector<erp.mmfg.data.SDataRequisitionEntry> mvRequisitionEntries;
    private java.util.Vector<erp.mmfg.data.SDataRequisitionPurchaseOrder>  mvPurchaseOrder;

    /** Creates new form SFormElement */
    public SFormRequisition(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_REQ;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlFkBizPartnerId = new javax.swing.JLabel();
        jcbFkBizPartnerId = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jbFkBizPartnerId = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jlTimestamp = new javax.swing.JLabel();
        jtfTimestamp = new javax.swing.JFormattedTextField();
        jPanel8 = new javax.swing.JPanel();
        jlFkStatusId = new javax.swing.JLabel();
        jcbFkStatusId = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        jlFkTypeId = new javax.swing.JLabel();
        jcbFkTypeId = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jpFilter = new javax.swing.JPanel();
        jbPurchaseOrder = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Requisición");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 5, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jlFkBizPartnerId.setText("Proveedor: *");
        jlFkBizPartnerId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlFkBizPartnerId);

        jcbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jcbFkBizPartnerId);

        jLabel1.setPreferredSize(new java.awt.Dimension(2, 23));
        jPanel7.add(jLabel1);

        jbFkBizPartnerId.setText("jButton1");
        jbFkBizPartnerId.setToolTipText("Seleccionar proveedor");
        jbFkBizPartnerId.setFocusable(false);
        jbFkBizPartnerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbFkBizPartnerId);

        jPanel2.add(jPanel7);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jlTimestamp.setText("Fecha documento:");
        jlTimestamp.setPreferredSize(new java.awt.Dimension(100, 14));
        jPanel3.add(jlTimestamp);

        jtfTimestamp.setText("DELIVERY DATE");
        jtfTimestamp.setEnabled(false);
        jtfTimestamp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfTimestamp);

        jPanel2.add(jPanel3);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jlFkStatusId.setText("Estado:");
        jlFkStatusId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlFkStatusId);

        jcbFkStatusId.setEditable(true);
        jcbFkStatusId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Seleccionar estado)" }));
        jcbFkStatusId.setEnabled(false);
        jcbFkStatusId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jcbFkStatusId);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jlFkTypeId.setText("Tipo:");
        jlFkTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlFkTypeId);

        jcbFkTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Seleccionar tipo)" }));
        jcbFkTypeId.setEnabled(false);
        jcbFkTypeId.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(jcbFkTypeId);

        jPanel2.add(jPanel9);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Ítems"));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 53));
        jPanel6.setLayout(new java.awt.BorderLayout());

        jpFilter.setPreferredSize(new java.awt.Dimension(779, 23));
        jpFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbPurchaseOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbPurchaseOrder.setToolTipText("Generar órdenes de compra");
        jbPurchaseOrder.setFocusable(false);
        jbPurchaseOrder.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbPurchaseOrder);

        jPanel6.add(jpFilter, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(538, 466));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm oColsRequisitionEntries[];

        mvFields = new Vector<SFormField>();
        mvRequisitionEntries = new Vector<SDataRequisitionEntry>();

        moRequisitionEntriesPane = new STablePane(miClient);
        moRequisitionEntriesPane.setDoubleClickAction(this, "publicActionEdit");
        jPanel6.add(moRequisitionEntriesPane, BorderLayout.CENTER);

        moFieldTimestamp = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfTimestamp, jlTimestamp);
        moFieldFkBizPartnerId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkBizPartnerId, jlFkBizPartnerId);
        moFieldFkStatusId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkStatusId, jlFkStatusId);
        moFieldFkTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkTypeId, jlFkTypeId);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldTimestamp);
        mvFields.add(moFieldIsDeleted);

        jbFkBizPartnerId.addActionListener(this);
        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPurchaseOrder.addActionListener(this);

        i = 0;
        oColsRequisitionEntries = new STableColumnForm[4];
        oColsRequisitionEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        oColsRequisitionEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", STableConstants.WIDTH_ITEM_3X);
        oColsRequisitionEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY_2X);
        oColsRequisitionEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "", STableConstants.WIDTH_UNIT_SYMBOL);
        for (i = 0; i < oColsRequisitionEntries.length; i++) {
            moRequisitionEntriesPane.addTableColumn(oColsRequisitionEntries[i]);
        }
        moRequisitionEntriesPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);

        SFormUtilities.createActionMap(rootPane, this, "publicActionEdit", "modify", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkBizPartnerId.requestFocus();
        }
    }

    private void actionRequisitionEntryEdit() {
        int index = moRequisitionEntriesPane.getTable().getSelectedRow();
        SFormRequisitionEntry oRequisitionEntryForm = new SFormRequisitionEntry(miClient);
        SDataRequisitionEntry oRequisitionEntryData = null;
        SDataRequisitionEntryRow oRequisitionEntryRow = null;

        oRequisitionEntryForm.formReset();
        oRequisitionEntryForm.formRefreshCatalogues();
        if (index != -1) {
            oRequisitionEntryData = (SDataRequisitionEntry) moRequisitionEntriesPane.getTableRow(index).getData();
            oRequisitionEntryForm.setRegistry(oRequisitionEntryData);
            oRequisitionEntryForm.setVisible(true);
            if (oRequisitionEntryForm.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                oRequisitionEntryData = (SDataRequisitionEntry) oRequisitionEntryForm.getRegistry();
                moRequisitionEntriesPane.setTableRow(oRequisitionEntryRow = new SDataRequisitionEntryRow(oRequisitionEntryData), index);
                moRequisitionEntriesPane.renderTableRows();
            }
        }
    }

    private void actionFkBizPartnerId() {
        miClient.pickOption(SDataConstants.BPSX_BP_SUP, moFieldFkBizPartnerId, moFieldFkBizPartnerId.getKey());
    }

    private void actionGeneratePurchaseOrder() {
        boolean b = true;

        SServerRequest oRequest = null;
        SServerResponse oResponse = null;

        // Validate that the requisition materials has not purchase orders:

        if (validateRequisitionMaterials("La requisiciones de materiales ya tienen órdenes de compra generadas.")) {

            // Save purchase order:

            if (getRegistryPurchaseOrder()) {

                try {
                    oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                    oRequest.setPacket(moDps);
                    oResponse = miClient.getSessionXXX().request(oRequest);

                    if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                        b = false;
                        throw new Exception(oResponse.getMessage());
                    }
                    else {
                        if (oResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                            b = false;
                            throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
                        }
                        else {
                            moDps = (SDataDps) oResponse.getPacket();
                        }
                    }
                }
                catch (Exception e) {
                    miClient.showMsgBoxWarning("Error al guardar la orden de compra.");
                    b = false;
                }

                // Save requisition materials vs. purchase order:

                for (int i=0; i<mvRequisitionEntries.size() && b; i++) {
                    for (int j=0; j<moDps.getDbmsDpsEntries().size(); j++) {

                        moRequisitionEntry = mvRequisitionEntries.get(i);
                        moDpsEntry = moDps.getDbmsDpsEntries().get(j);

                        if (moRequisitionEntry.getFkItemId() == moDpsEntry.getFkItemId()) {

                            try {
                                oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                                oRequest.setPacket(getRegistryRequisitionMaterialsPurchaseOrder(
                                        moRequisitionEntry.getPkReqYearId(), moRequisitionEntry.getPkReqId(), moRequisitionEntry.getPkEntryId(),
                                        moDpsEntry.getPkYearId(), moDpsEntry.getPkDocId(), moDpsEntry.getPkEntryId(), moRequisitionEntry.getQuantity()));
                                oResponse = miClient.getSessionXXX().request(oRequest);

                                if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                                    b = false;
                                    throw new Exception(oResponse.getMessage());
                                }
                                else {
                                    if (oResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                                        b = false;
                                        throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
                                    }
                                }
                            }
                            catch (Exception e) {
                                miClient.showMsgBoxWarning("Error al guardar la orden de compra.");
                                b = false;
                            }
                            break;
                        }
                    }
                }

                if (b) {
                    miClient.showMsgBoxInformation("Las órdenes de compra han sido generadas.");

                    // Update the status and type of requisition of materials:

                    moFieldFkStatusId.setKey(new int[] { SDataConstantsSys.MFGS_ST_ORD_CLS });
                    moFieldFkTypeId.setKey(new int[] { SDataConstantsSys.MFGS_TP_REQ_SAL });
                }
            }
        }
    }

    private erp.mmfg.data.SDataRequisitionPurchaseOrder getRegistryRequisitionMaterialsPurchaseOrder(int nPkReqYearId, int nPkReqId, int nPkReqEntryId, int nPkDpsYearId, int nPkDpsId,int nPkDpsEntryId, double dQty) {
        SDataRequisitionPurchaseOrder oRequisitionPurchaseOrder = new SDataRequisitionPurchaseOrder();

        oRequisitionPurchaseOrder.setPkReqYearId(nPkReqYearId);
        oRequisitionPurchaseOrder.setPkReqId(nPkReqId);
        oRequisitionPurchaseOrder.setPkReqEntryId(nPkReqEntryId);
        oRequisitionPurchaseOrder.setPkDpsYearId(nPkDpsYearId);
        oRequisitionPurchaseOrder.setPkDpsDocId(nPkDpsId);
        oRequisitionPurchaseOrder.setPkDpsEntryId(nPkDpsEntryId);
        oRequisitionPurchaseOrder.setQuantity(dQty);

        return oRequisitionPurchaseOrder;
    }

    private boolean getRegistryPurchaseOrder() {
        boolean b = true;
        String item = "";

        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { moRequisition.getFkBizPartnerId() }, SLibConstants.EXEC_MODE_VERBOSE);

        if (moBizPartner == null) {
            miClient.showMsgBoxWarning("No se encontro el proveedor.");
            b = false;
        }
        else {
            // Create purchase order:

            createPurchaseOrder();

            moDps.getDbmsDpsEntries().removeAllElements();
            for (int i=0; i < mvRequisitionEntries.size(); i++) {

                // Read requisition entry:

                moRequisitionEntry = mvRequisitionEntries.get(i);
                if (moRequisitionEntry == null) {
                    miClient.showMsgBoxWarning("No se pudo leer la entrada de la requisición.");
                    b = false;
                    break;
                }

                // Read item:

                moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moRequisitionEntry.getFkItemId() }, SLibConstants.EXEC_MODE_VERBOSE);
                if (moItem == null) {
                    miClient.showMsgBoxWarning("No se pudo leer el ítem.");
                    b = false;
                    break;
                }

                // Assign date delivery document:

                try {
                    if (moDps.getDateDocDelivery_n() == null) {
                        moDps.setDateDocDelivery_n(SDataUtilities.obtainLeadtimeByItem(miClient, moRequisition.getPkYearId(), moRequisition.getPkReqId(), moItem.getPkItemId()));
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }

                // Create requisition and requisition entry:

                moDpsEntry = new SDataDpsEntry();
                moDpsEntry.setPkYearId(miClient.getSessionXXX().getWorkingYear());
                moDpsEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                moDpsEntry.setFkDpsAdjustmentTypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[0]);
                moDpsEntry.setFkDpsAdjustmentSubtypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[1]);
                moDpsEntry.setFkDpsEntryTypeId(SDataConstantsSys.TRNS_TP_DPS_ETY_ORDY);
                moDpsEntry.setFkItemId(moRequisitionEntry.getFkItemId());

                // Item concept:
                /*
                if (moDps.getFkLanguajeId() != miClient.getSessionXXX().getParamsErp().getFkLanguageId()) {
                    for (SDataItemForeignLanguageDescription description : moItem.getDbmsItemForeignLanguageDescriptions()) {
                        if (moDps.getFkLanguajeId() == description.getPkLanguageId()) {
                            item = description.getItemShort();
                            break;
                        }
                    }
                }

                if (item.length() == 0) {
                    item = moItem.getItemShort();
                }
                */

                moDpsEntry.setConceptKey(moItem.getKey());
                moDpsEntry.setConcept(moItem.getItem());
                moDpsEntry.setLength(moItem.getLength());
                moDpsEntry.setSurface(moItem.getSurface());
                moDpsEntry.setVolume(moItem.getVolume());
                moDpsEntry.setMass(moItem.getMass());
                moDpsEntry.setWeightPackagingExtra(0);
                moDpsEntry.setWeightGross(moItem.getWeightGross());
                moDpsEntry.setWeightDelivery(moItem.getWeightDelivery());
                moDpsEntry.setSurplusPercentage(0);
                moDpsEntry.setOperationsType(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
                moDpsEntry.setFkItemRefId_n(moRequisitionEntry.getFkItemId());
                moDpsEntry.setFkCostCenterId_n("");
                moDpsEntry.setIsInventoriable(moItem.getIsInventoriable());
                moDpsEntry.setIsDeleted(false);
                moDpsEntry.setQuantity(moRequisitionEntry.getQuantity());
                moDpsEntry.setFkItemId(moRequisitionEntry.getFkItemId());

                calculateTotal();

                moDps.getDbmsDpsEntries().add(moDpsEntry);
            }
        }

        return b;
    }

    private void createPurchaseOrder() {
        double rate = 0;

        moBizPartnerCategory = moBizPartner.getDbmsCategorySettingsSup();

        moDps = new SDataDps();

        moDps.setPkYearId(miClient.getSessionXXX().getWorkingYear());
        moDps.setPkDocId(0);
        moDps.setDate(miClient.getSessionXXX().getWorkingDate());
        moDps.setDateDoc(miClient.getSessionXXX().getWorkingDate());
        moDps.setDateStartCredit(miClient.getSessionXXX().getWorkingDate());
        moDps.setNumberSeries("");
        moDps.setNumber("");
        moDps.setIsRegistryNew(true);
        moDps.setIsLinked(false);
        moDps.setIsClosed(false);
        moDps.setIsAudited(false);
        moDps.setIsAuthorized(false);
        moDps.setIsSystem(false);
        moDps.setIsDeleted(false);
        moDps.setFkDpsCategoryId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[0]);
        moDps.setFkDpsClassId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[1]);
        moDps.setFkDpsTypeId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[2]);
        moDps.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        moDps.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        moDps.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_PENDING);
        moDps.setFkDpsAnnulationTypeId(SModSysConsts.TRNU_TP_DPS_ANN_NA);
        moDps.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        moDps.setFkUserEditId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserDeleteId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());
        moDps.setFkBizPartnerId_r(moBizPartner.getPkBizPartnerId());
        moDps.setFkBizPartnerBranchId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId() : 0);
        moDps.setFkBizPartnerBranchAddressId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddressOfficial().getPkAddressId() : 0);
        moDps.setFkBizPartnerAltId_r(moBizPartner.getPkBizPartnerId());
        moDps.setFkBizPartnerBranchAltId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId() : 0);
        moDps.setFkBizPartnerBranchAddressAltId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddressOfficial().getPkAddressId() : 0);
        moDps.setFkPaymentSystemTypeId(1);
        moDps.setFkTaxIdentityEmisorTypeId(moBizPartner.getFkTaxIdentityId());
        moDps.setFkTaxIdentityReceptorTypeId(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getFkTaxIdentityId());
        moDps.resetRecord();
        moDps.setIsRecordAutomatic(true);

        // Document's series:

        obtainNextNumber();

        // Document's payment type:

        if (moBizPartnerCategory.getEffectiveCreditTypeId() == SDataConstantsSys.BPSS_TP_CRED_CRED_NO) {
            moDps.setFkPaymentTypeId(SDataConstantsSys.TRNS_TP_PAY_CASH);
        }
        else {
            moDps.setFkPaymentTypeId(SDataConstantsSys.TRNS_TP_PAY_CREDIT);
        }

        // Document's language:

        if (moBizPartnerCategory.getFkLanguageId_n() == SLibConstants.UNDEFINED) {
            moDps.setFkLanguajeId(miClient.getSessionXXX().getParamsErp().getFkLanguageId());
        }
        else {
            moDps.setFkLanguajeId(moBizPartnerCategory.getFkLanguageId_n());
        }

        // Document's currency:

        if (moBizPartnerCategory.getFkCurrencyId_n() == SLibConstants.UNDEFINED) {
            moDps.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
        }
        else {
            moDps.setFkCurrencyId(moBizPartnerCategory.getFkCurrencyId_n());

            try {
                rate = SDataUtilities.obtainExchangeRate(miClient, moBizPartnerCategory.getFkCurrencyId_n(), miClient.getSessionXXX().getWorkingDate());
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            moDps.setExchangeRate(rate);
        }
    }

    private void obtainNextNumber() {
        int numNew = 0;
        int numMin = 0;
        int numMax = 0;
        int numNext = 0;

        Vector<SFormComponentItem> componentItems = null;
        Vector<SFormComponentItem> componentItemsDps = new Vector<SFormComponentItem>();

        try {
            componentItems = miClient.getSessionXXX().getCurrentCompanyBranch().getDnsForDps();

            for (SFormComponentItem componentItem : componentItems) {
                if (SLibUtilities.compareKeys(new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId(), moDps.getFkDpsTypeId() }, componentItem.getPrimaryKey())) {
                    componentItemsDps.add(componentItem);
                }
            }

            numMin = ((int[]) ((SFormComponentItem) componentItemsDps.get(0)).getComplement())[0];
            numMax = ((int[]) ((SFormComponentItem) componentItemsDps.get(0)).getComplement())[1];
            numNext = SDataUtilities.obtainNextNumberForDps(miClient, "", new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId(), moDps.getFkDpsTypeId() });
            if (numNext <= numMin) {
                numNew = numMin;
            }
            else if (numMax == -1 || numNext <= numMax) {
                numNew = numNext;
            }
            else {
                throw new Exception("El rango de folios válido para la serie '" + "" + "' es del " + numMin + " al " + numMax + ".");
            }

            moDps.setNumber("" + numNew);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

    }

    private void calculateTotal() {
        Object[] aux = null;

        SDataBizPartnerBranch oParamBizPartnerBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { moDps.getFkBizPartnerBranchId() }, SLibConstants.EXEC_MODE_VERBOSE);

        // Unitary discount settings:

        if (moItem.getIsFreeDiscountUnitary()) {
            moDpsEntry.setIsDiscountUnitaryPercentage(false);
            moDpsEntry.setOriginalDiscountUnitaryCy(0d);
        }

        // Entry discount settings:

        if (moItem.getIsFreeDiscountEntry()) {
            moDpsEntry.setIsDiscountEntryPercentage(false);
            moDpsEntry.setDiscountEntryCy(0d);
        }

        // Document discount settings:

        if (!moDps.getIsDiscountDocApplying() || moItem.getIsFreeDiscountDoc()) {
            moDpsEntry.setIsDiscountDocApplying(false);
            moDpsEntry.setDiscountDocCy(0d);
        }

        // Obtain item price with discount included or with discount separate:

        try {
            //dItemPrice = SDataUtilities.obtainItemPrice(miClient, moBizPartner.getPkBizPartnerId(), moItem.getPkItemId(), moDps.getDateDoc());
            aux = SDataUtilities.obtainLastPriceForSupplierItem(miClient, moItem.getPkItemId(), "" + moBizPartner.getPkBizPartnerId());

            // Check document currency:

            if (SLibUtilities.compareKeys(new int[] { moDps.getFkCurrencyId() }, new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {
                moDpsEntry.setOriginalPriceUnitaryCy((Double) aux[2]);
                moDpsEntry.setDiscountUnitaryCy((Double) aux[3]);
            }
            else {
                moDpsEntry.setOriginalPriceUnitaryCy(moDps.getExchangeRate() != 0 ? (Double) aux[2]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalDiscountUnitaryCy(moDps.getExchangeRate() != 0 ? (Double) aux[3]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalPriceUnitarySystemCy(moDps.getExchangeRate() != 0 ? (Double) aux[2]/moDps.getExchangeRate() : 0); // XXX
            }
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        moDpsEntry.setOriginalQuantity(moRequisitionEntry.getQuantity());
        moDpsEntry.setIsDiscountUnitaryPercentageSystem(false); // XXX
        moDpsEntry.setDiscountUnitaryPercentage(0);
        moDpsEntry.setDiscountUnitaryPercentageSystem(0); // XXX
        moDpsEntry.setDiscountEntryPercentage(0);
        moDpsEntry.setOriginalDiscountUnitarySystemCy(0); // XXX
        moDpsEntry.setIsTaxesAutomaticApplying(true);

        // Calculate DPS entry's value:

        moDpsEntry.setFkItemId(moItem.getPkItemId());
        moDpsEntry.setFkUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkOriginalUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkTaxRegionId(oParamBizPartnerBranch.getFkTaxRegionId_n() != 0 ? oParamBizPartnerBranch.getFkTaxRegionId_n() : miClient.getSessionXXX().getParamsCompany().getFkDefaultTaxRegionId_n());
        moDpsEntry.setDbmsFkItemGenericId(moItem.getFkItemGenericId());

        moDpsEntry.calculateTotal(miClient, moDps.getDate(),
                moDps.getFkTaxIdentityEmisorTypeId(), moDps.getFkTaxIdentityReceptorTypeId(),
                moDps.getIsDiscountDocPercentage(), moDps.getDiscountDocPercentage(), moDps.getExchangeRate());

        if (moItem.getDbmsDataItemGeneric().getIsLengthApplying() && !moItem.getIsLengthVariable() && !moItem.getDbmsDataItemGeneric().getIsLengthVariable()) {
            moDpsEntry.setLength(moDpsEntry.getQuantity() * moItem.getLength());
        }
        if (moItem.getDbmsDataItemGeneric().getIsMassApplying() && !moItem.getIsMassVariable() && !moItem.getDbmsDataItemGeneric().getIsMassVariable()) {
            moDpsEntry.setMass(moDpsEntry.getQuantity() * moItem.getMass());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightGrossApplying()) {
            moDpsEntry.setWeightGross(moDpsEntry.getQuantity() * moItem.getWeightGross());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightDeliveryApplying()) {
            moDpsEntry.setWeightDelivery(moDpsEntry.getQuantity() * moItem.getWeightDelivery());
        }

        // End purchase order:
    }

    /*
    private void calculateTotal() {
        double dItemPrice[] = null;

        SDataBizPartnerBranch oParamBizPartnerBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { moDps.getFkBizPartnerBranchId() }, SLibConstants.EXEC_MODE_VERBOSE);

        // Unitary discount settings:

        if (moItem.getIsFreeDiscountUnitary()) {
            moDpsEntry.setIsDiscountUnitaryPercentage(false);
            moDpsEntry.setOriginalDiscountUnitaryCy(0d);
        }

        // Entry discount settings:

        if (moItem.getIsFreeDiscountEntry()) {
            moDpsEntry.setIsDiscountEntryPercentage(false);
            moDpsEntry.setDiscountEntryCy(0d);
        }

        // Document discount settings:

        if (!moDps.getIsDiscountDocApplying() || moItem.getIsFreeDiscountDoc()) {
            moDpsEntry.setIsDiscountDocApplying(false);
            moDpsEntry.setDiscountDocCy(0d);
        }

        // Obtain item price with discount included or with discount separate:

        try {
            dItemPrice = SDataUtilities.obtainItemPrice(miClient, moBizPartner.getPkBizPartnerId(), moItem.getPkItemId(), moDps.getDateDoc());
            aux = SDataUtilities.obtainLastPriceForSupplierItem(miClient, moItem.getPkItemId(), "" + moBizPartner.getPkBizPartnerId());

            // Check document currency:

            if (SLibUtilities.compareKeys(new int[] { moDps.getFkCurrencyId() }, new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {
                moDpsEntry.setOriginalPriceUnitaryCy(dItemPrice[0]);
                moDpsEntry.setDiscountUnitaryCy(dItemPrice[1]);
            }
            else {
                moDpsEntry.setOriginalPriceUnitaryCy(moDps.getExchangeRate() != 0 ? dItemPrice[0]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalDiscountUnitaryCy(moDps.getExchangeRate() != 0 ? dItemPrice[1]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalPriceUnitarySystemCy(moDps.getExchangeRate() != 0 ? dItemPrice[1]/moDps.getExchangeRate() : 0); // XXX
            }
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        moDpsEntry.setOriginalQuantity(moRequisitionEntry.getQuantity());
        moDpsEntry.setIsDiscountUnitaryPercentageSystem(false);   // XXX
        moDpsEntry.setDiscountUnitaryPercentage(0);
        moDpsEntry.setDiscountUnitaryPercentageSystem(0);         // XXX
        moDpsEntry.setDiscountEntryPercentage(0);
        moDpsEntry.setOriginalDiscountUnitarySystemCy(0);        // XXX
        moDpsEntry.setIsTaxesAutomaticApplying(true);

        // Calculate DPS entry's value:

        moDpsEntry.setFkItemId(moItem.getPkItemId());
        moDpsEntry.setFkUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkOriginalUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkTaxRegionId(oParamBizPartnerBranch.getFkTaxRegionId());
        moDpsEntry.setDbmsFkItemGenericId(moItem.getFkItemGenericId());

        moDpsEntry.calculateTotal(miClient, moDps.getDate(),
                moDps.getFkTaxIdentityEmisorTypeId(), moDps.getFkTaxIdentityReceptorTypeId(),
                moDps.getIsDiscountDocPercentage(), moDps.getDiscountDocPercentage(), moDps.getExchangeRate());

        if (moItem.getDbmsDataItemGeneric().getIsLengthApplying() && !moItem.getIsLengthVariable() && !moItem.getDbmsDataItemGeneric().getIsLengthVariable()) {
            moDpsEntry.setLength(moDpsEntry.getQuantity() * moItem.getLength());
        }
        if (moItem.getDbmsDataItemGeneric().getIsMassApplying() && !moItem.getIsMassVariable() && !moItem.getDbmsDataItemGeneric().getIsMassVariable()) {
            moDpsEntry.setMass(moDpsEntry.getQuantity() * moItem.getMass());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightGrossApplying()) {
            moDpsEntry.setWeightGross(moDpsEntry.getQuantity() * moItem.getWeightGross());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightDeliveryApplying()) {
            moDpsEntry.setWeightDelivery(moDpsEntry.getQuantity() * moItem.getWeightDelivery());
        }
    }
    */

    private boolean validateRequisitionMaterials(java.lang.String sMsg) {
        boolean b = true;

        try {
           b = SDataUtilities.checkRequisitionMatPurchaseOrder(miClient, moRequisition.getPkYearId(), moRequisition.getPkReqId());
        }
        catch(Exception e) {
            b = false;
            System.out.println(e);
        }

        if (!b) {
            miClient.showMsgBoxInformation(sMsg);
        }

        return b;
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionEdit() {
        actionRequisitionEntryEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkBizPartnerId;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPurchaseOrder;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkBizPartnerId;
    private javax.swing.JComboBox jcbFkStatusId;
    private javax.swing.JComboBox jcbFkTypeId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlFkBizPartnerId;
    private javax.swing.JLabel jlFkStatusId;
    private javax.swing.JLabel jlFkTypeId;
    private javax.swing.JLabel jlTimestamp;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JFormattedTextField jtfTimestamp;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moBizPartner = null;
        moBizPartnerCategory = null;
        moItem = null;
        moRequisition = null;
        moRequisitionEntry = null;
        moDps = null;
        moDpsEntry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moRequisitionEntriesPane.createTable(null);
        moRequisitionEntriesPane.clearTableRows();

        mvRequisitionEntries.clear();

        jckIsDeleted.setEnabled(false);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId, SDataConstants.BPSX_BP_SUP);
        SFormUtilities.populateComboBox(miClient, jcbFkStatusId, SDataConstants.MFGS_ST_ORD);
        SFormUtilities.populateComboBox(miClient, jcbFkTypeId, SDataConstants.MFGS_TP_REQ);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        // Validate that the requisition of materials has not purchase orders:

        if (!validation.getIsError() && moFieldIsDeleted.getBoolean() && !validateRequisitionMaterials("No se puede eliminar la requisición, porque tiene órdenes de compra generadas.")) {
            validation.setIsError(true);
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataRequisitionEntryRow dataRequisitionEntryRow = null;

        moRequisition = (SDataRequisition) registry;

        moFieldTimestamp.setFieldValue(moRequisition.getDate());
        moFieldFkBizPartnerId.setFieldValue(new int[] { moRequisition.getFkBizPartnerId() });
        moFieldFkStatusId.setFieldValue(new int[] { moRequisition.getFkStatusId() });
        moFieldFkTypeId.setFieldValue(new int[] { moRequisition.getFkTypeId() });
        moFieldIsDeleted.setFieldValue(moRequisition.getIsDeleted());

        for (i = 0; i < moRequisition.getDbmsRequisitionEntry().size(); i++) {
            dataRequisitionEntryRow = new SDataRequisitionEntryRow(moRequisition.getDbmsRequisitionEntry().get(i));
            moRequisitionEntriesPane.addTableRow(dataRequisitionEntryRow);
        }
        mvRequisitionEntries = moRequisition.getDbmsRequisitionEntry();

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moRequisition == null) {
            moRequisition = new SDataRequisition();
            moRequisition.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moRequisition.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moRequisition.setFkBizPartnerId(moFieldFkBizPartnerId.getKeyAsIntArray()[0]);
        moRequisition.setFkStatusId(moFieldFkStatusId.getKeyAsIntArray()[0]);
        moRequisition.setFkTypeId(moFieldFkTypeId.getKeyAsIntArray()[0]);
        moRequisition.setIsDeleted(moFieldIsDeleted.getBoolean());

        moRequisition.getDbmsRequisitionEntry().removeAllElements();
        for (int i = 0; i < moRequisitionEntriesPane.getTableGuiRowCount(); i++) {
            moRequisition.getDbmsRequisitionEntry().add((SDataRequisitionEntry) moRequisitionEntriesPane.getTableRow(i).getData());
        }

        return moRequisition;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkBizPartnerId) {
                actionFkBizPartnerId();
            }
            else if (button == jbPurchaseOrder) {
                if (miClient.showMsgBoxConfirm("¿Esta seguro(a) de generar de generar las órdenes de compra?") == JOptionPane.YES_OPTION) {
                    actionGeneratePurchaseOrder();
                }
            }
        }
    }
}
