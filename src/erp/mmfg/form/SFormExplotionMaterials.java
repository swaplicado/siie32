/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mmfg.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mitm.data.SDataItem;
import erp.mmfg.data.SDataExplotionMaterials;
import erp.mmfg.data.SDataExplotionMaterialsEntry;
import erp.mmfg.data.SDataExplotionMaterialsEntryRow;
import erp.mmfg.data.SDataExplotionMaterialsRequisition;
import erp.mmfg.data.SDataProductionOrder;
import erp.mmfg.data.SDataRequisition;
import erp.mmfg.data.SDataRequisitionEntry;
import erp.mmfg.data.SDataRequisitionPurchaseOrder;
import erp.mod.SModSysConsts;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Néstor Ávalos
 */
public class SFormExplotionMaterials extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmfg.data.SDataExplotionMaterials moExplotionMaterials;
    private erp.lib.form.SFormField moFieldReference;
    private erp.lib.form.SFormField moFieldComments;
    private erp.lib.form.SFormField moFieldDateDocument;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.form.SFormField moFieldDbmsProductionOrderInitial;
    private erp.lib.form.SFormField moFieldDbmsProductionOrderEnd;
    private erp.mbps.data.SDataBizPartner moBizPartner;
    private erp.mbps.data.SDataBizPartnerCategory moBizPartnerCategory;
    private erp.mitm.data.SDataItem moItem;
    private erp.mmfg.data.SDataRequisition moRequisition;
    private erp.mmfg.data.SDataRequisitionEntry moRequisitionEntry;
    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.data.SDataDpsEntry moDpsEntry;

    private erp.server.SServerRequest moRequest = null;
    private erp.server.SServerResponse moResponse = null;

    private erp.lib.table.STablePane moExplotionMaterialsEntriesPane;

    private java.util.Vector<erp.mmfg.data.SDataExplotionMaterialsEntry> mvExplotionMaterialsEntries;
    private java.util.Vector<erp.mmfg.data.SDataRequisition> mvRequisition;
    private java.util.Vector<erp.mmfg.data.SDataRequisitionEntry> mvRequisitionEntries;

    private int mnPkExpYearId;
    private int mnPkExpId;

    /** Creates new form SFormElement */
    public SFormExplotionMaterials(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MFG_EXP;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        jtfReference = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jtfWarehouse = new javax.swing.JTextField();
        jtfWarehouseCode = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlDateDocument = new javax.swing.JLabel();
        jtfDateDocument = new javax.swing.JFormattedTextField();
        jbDateDocument = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDbmsProductionOrderInitial = new javax.swing.JLabel();
        jtfDbmsProductionOrderInitial = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlDbmsProductionOrderEnd = new javax.swing.JLabel();
        jtfDbmsProductionOrderEnd = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlComments = new javax.swing.JLabel();
        jtfComments = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jpFilter = new javax.swing.JPanel();
        jbViewNew = new javax.swing.JButton();
        jbViewModify = new javax.swing.JButton();
        jbViewDelete = new javax.swing.JButton();
        jsEntry2 = new javax.swing.JSeparator();
        jbRequisition = new javax.swing.JButton();
        jbPurchaseOrder = new javax.swing.JButton();
        jsEntry01 = new javax.swing.JSeparator();
        jPanel24 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Explosión de materiales");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(8, 1, 5, 2));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia: *");
        jlReference.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel3.add(jlReference);

        jtfReference.setText("REFERENCE");
        jtfReference.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(jtfReference);

        jPanel2.add(jPanel3);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel11.add(jlWarehouse);

        jtfCompanyBranch.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("TEXT");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jtfCompanyBranch);

        jtfCompanyBranchCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("CODE");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel11.add(jtfCompanyBranchCode);

        jtfWarehouse.setBackground(java.awt.Color.lightGray);
        jtfWarehouse.setEditable(false);
        jtfWarehouse.setText("TEXT");
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel11.add(jtfWarehouse);

        jtfWarehouseCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseCode.setEditable(false);
        jtfWarehouseCode.setText("CODE");
        jtfWarehouseCode.setFocusable(false);
        jtfWarehouseCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jPanel11.add(jtfWarehouseCode);

        jPanel2.add(jPanel11);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDocument.setText("Fecha evaluación:");
        jlDateDocument.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel9.add(jlDateDocument);

        jtfDateDocument.setEditable(false);
        jtfDateDocument.setText("DATE DOCUMENT");
        jtfDateDocument.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfDateDocument);

        jbDateDocument.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateDocument.setToolTipText("Seleccionar fecha");
        jbDateDocument.setEnabled(false);
        jbDateDocument.setFocusable(false);
        jbDateDocument.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbDateDocument);

        jPanel2.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsProductionOrderInitial.setText("Orden de producción inicial:");
        jlDbmsProductionOrderInitial.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel5.add(jlDbmsProductionOrderInitial);

        jtfDbmsProductionOrderInitial.setEditable(false);
        jtfDbmsProductionOrderInitial.setText("PRODUCTION ORDER INITIAL");
        jtfDbmsProductionOrderInitial.setFocusable(false);
        jtfDbmsProductionOrderInitial.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel5.add(jtfDbmsProductionOrderInitial);

        jPanel2.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDbmsProductionOrderEnd.setText("Orden de producción final:");
        jlDbmsProductionOrderEnd.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel7.add(jlDbmsProductionOrderEnd);

        jtfDbmsProductionOrderEnd.setEditable(false);
        jtfDbmsProductionOrderEnd.setText("PRODUCTION ORDER FINAL");
        jtfDbmsProductionOrderEnd.setFocusable(false);
        jtfDbmsProductionOrderEnd.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel7.add(jtfDbmsProductionOrderEnd);

        jPanel2.add(jPanel7);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlComments.setText("Comentarios:");
        jlComments.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel10.add(jlComments);

        jtfComments.setEditable(false);
        jtfComments.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfComments.setText("COMMENTS");
        jtfComments.setFocusable(false);
        jtfComments.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel10.add(jtfComments);

        jPanel2.add(jPanel10);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Ítems"));
        jPanel6.setPreferredSize(new java.awt.Dimension(100, 53));
        jPanel6.setLayout(new java.awt.BorderLayout(0, 1));

        jpFilter.setPreferredSize(new java.awt.Dimension(779, 23));
        jpFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbViewNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbViewNew.setToolTipText("Nuevo");
        jbViewNew.setEnabled(false);
        jbViewNew.setFocusable(false);
        jbViewNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbViewNew);

        jbViewModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbViewModify.setToolTipText("Modificar");
        jbViewModify.setEnabled(false);
        jbViewModify.setFocusable(false);
        jbViewModify.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbViewModify);

        jbViewDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbViewDelete.setToolTipText("Eliminar");
        jbViewDelete.setEnabled(false);
        jbViewDelete.setFocusable(false);
        jbViewDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbViewDelete);

        jsEntry2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpFilter.add(jsEntry2);

        jbRequisition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbRequisition.setToolTipText("Generar requisiciones");
        jbRequisition.setFocusable(false);
        jbRequisition.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbRequisition);

        jbPurchaseOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbPurchaseOrder.setToolTipText("Generar pedidos");
        jbPurchaseOrder.setFocusable(false);
        jbPurchaseOrder.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbPurchaseOrder);

        jsEntry01.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry01.setPreferredSize(new java.awt.Dimension(3, 23));
        jpFilter.add(jsEntry01);

        jPanel24.setPreferredSize(new java.awt.Dimension(840, 23));
        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel24.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel24.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jPanel24.add(jbRefresh);

        jpFilter.add(jPanel24);

        jPanel6.add(jpFilter, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-988)/2, (screenSize.height-634)/2, 988, 634);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jbRefreshActionPerformed

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm oColsExplotionMaterialsEntries[];

        mvFields = new Vector<SFormField>();
        mvExplotionMaterialsEntries = new Vector<SDataExplotionMaterialsEntry>();

        moExplotionMaterialsEntriesPane = new STablePane(miClient);
        moExplotionMaterialsEntriesPane.setDoubleClickAction(this, "publicActionEdit");
        jPanel6.add(moExplotionMaterialsEntriesPane, BorderLayout.CENTER);

        moFieldReference = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfReference, jlReference);
        moFieldReference.setLengthMax(15);
        moFieldComments = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfComments, jlComments);
        moFieldComments.setLengthMax(255);
        moFieldDateDocument = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDateDocument, jlDateDocument);
        moFieldDateDocument.setPickerButton(jbDateDocument);
        moFieldDbmsProductionOrderInitial = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsProductionOrderInitial, jlDbmsProductionOrderInitial);
        moFieldDbmsProductionOrderEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDbmsProductionOrderEnd, jlDbmsProductionOrderEnd);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldReference);
        mvFields.add(moFieldComments);
        mvFields.add(moFieldDateDocument);
        mvFields.add(moFieldDbmsProductionOrderInitial);
        mvFields.add(moFieldDbmsProductionOrderEnd);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDateDocument.addActionListener(this);
        jbRequisition.addActionListener(this);
        jbPurchaseOrder.addActionListener(this);

        jbSeek.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jtfSeek.addActionListener(this);

        i = 0;
        oColsExplotionMaterialsEntries = new STableColumnForm[12];
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 200);
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Proveedor", 140);
        oColsExplotionMaterialsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Necs. brutas", STableConstants.WIDTH_QUANTITY_2X);
        oColsExplotionMaterialsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        oColsExplotionMaterialsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Stock seguridad", STableConstants.WIDTH_QUANTITY_2X);
        oColsExplotionMaterialsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        oColsExplotionMaterialsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Disponible", STableConstants.WIDTH_QUANTITY_2X);
        oColsExplotionMaterialsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        oColsExplotionMaterialsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Backorder", STableConstants.WIDTH_QUANTITY_2X);
        oColsExplotionMaterialsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        oColsExplotionMaterialsEntries[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Necs. netas", STableConstants.WIDTH_QUANTITY_2X);
        oColsExplotionMaterialsEntries[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "F. leadtime", STableConstants.WIDTH_DATE);
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "F. entrega", STableConstants.WIDTH_DATE);
        oColsExplotionMaterialsEntries[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Lotes", 120);
        for (i = 0; i < oColsExplotionMaterialsEntries.length; i++) {
            moExplotionMaterialsEntriesPane.addTableColumn(oColsExplotionMaterialsEntries[i]);
        }
        moExplotionMaterialsEntriesPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);

        SFormUtilities.createActionMap(rootPane, this, "publicActionEdit", "modify", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionView", "view", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfReference.requestFocus();
        }
    }

    private void actionSetDateDocument() {
        miClient.getGuiDatePickerXXX().formReset();
        miClient.getGuiDatePickerXXX().setDate(moFieldDateDocument.getDate());
        miClient.getGuiDatePickerXXX().setVisible(true);

        if (miClient.getGuiDatePickerXXX().getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moFieldDateDocument.setDate(miClient.getGuiDatePickerXXX().getGuiDate());
            jtfDateDocument.requestFocus();
        }
    }

    private boolean actionGenerateRequisition(boolean bPurchaseOrder) {
        boolean b = true;

        SServerRequest oRequest = null;
        SServerResponse oResponse = null;

        // Validate that the requisition materials has not purchase orders:

        if (validateRequisitionMaterials("Las requisiciones de materiales ya tienen órdenes de compra generadas.")) {

            // Delete records from table 'mfg_exp_req' (bom vs requisition):

            if (deleteRecordsExplotionMaterialsRequisition()) {

                // Validate that bom has supplier:

                for (int i=0; i < mvExplotionMaterialsEntries.size(); i++) {

                    if (mvExplotionMaterialsEntries.get(i).getFkBizPartnerId_n() <= 0) {
                        miClient.showMsgBoxWarning("El ítem '" + mvExplotionMaterialsEntries.get(i).getDbmsItem() + "' no tiene un proveedor asignado.");
                        b = false;
                        break;
                    }
                }

                if (b) {
                    getRegistryRequisition(bPurchaseOrder);

                    // Save requisition:

                    for (int i=0; i<mvRequisition.size(); i++) {

                        try {

                            oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                            oRequest.setPacket(mvRequisition.get(i));
                            oResponse = miClient.getSessionXXX().request(oRequest);

                            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                                throw new Exception(oResponse.getMessage());
                            }
                            else {
                                if (oResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                                    throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
                                }
                                else {
                                    mvRequisition.set(i, (SDataRequisition) oResponse.getPacket());
                                }
                            }
                        }
                        catch (Exception e) {
                            miClient.showMsgBoxWarning("Error al guardar la orden de producción.");
                            break;
                        }

                        // Save explotion of materials vs. requisition materials:

                        try {
                            oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                            oRequest.setPacket(getRegistryExplotionMaterialsRequisition(mnPkExpYearId, mnPkExpId, ((SDataRequisition) mvRequisition.get(i)).getPkYearId(), ((SDataRequisition) mvRequisition.get(i)).getPkReqId()));
                            oResponse = miClient.getSessionXXX().request(oRequest);

                            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                                throw new Exception(oResponse.getMessage());
                            }
                            else {
                                if (oResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                                    throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
                                }
                            }
                        }
                        catch (Exception e) {
                            miClient.showMsgBoxWarning("Error al guardar la orden de producción.");
                            break;
                        }
                    }

                    if (b && !bPurchaseOrder) {
                        miClient.showMsgBoxInformation("Las requisiciones de materiales han sido generadas.");
                    }
                }
            }
        }

        return b;
    }

    private erp.mmfg.data.SDataExplotionMaterialsRequisition getRegistryExplotionMaterialsRequisition(int nPkExpYearId, int nPkExpId, int nPkReqYearId, int nPkReqId) {
        SDataExplotionMaterialsRequisition oExpMatReqMat = new SDataExplotionMaterialsRequisition();
        oExpMatReqMat.setPkExpYearId(nPkExpYearId);
        oExpMatReqMat.setPkExpId(nPkExpId);
        oExpMatReqMat.setPkReqYearId(nPkReqYearId);
        oExpMatReqMat.setPkReqId(nPkReqId);
        oExpMatReqMat.setDbmsIsDelRequisition(true);

        return oExpMatReqMat;
    }

    private boolean validateRequisitionMaterials(java.lang.String sMsg) {
        boolean b = true;

        try {
            b = SDataUtilities.checkRequisitionMatExplotionMat(miClient, mnPkExpYearId, mnPkExpId, false);
        }
        catch(Exception e) {
            System.out.println(e);
        }

        if (!b) {
            miClient.showMsgBoxInformation(sMsg);
        }

        return b;
    }

    private boolean deleteRecordsExplotionMaterialsRequisition() {
        boolean b = true;

        SServerRequest oRequest = null;
        SServerResponse oResponse = null;

        try {
            oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_DELETE);
            oRequest.setPacket(getRegistryExplotionMaterialsRequisition(mnPkExpYearId, mnPkExpId, 0, 0));
            oResponse = miClient.getSessionXXX().request(oRequest);

            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                throw new Exception(oResponse.getMessage());
            }
            else {
                if (oResponse.getResultType() != SLibConstants.DB_ACTION_DELETE_OK) {
                    b = false;
                    throw new Exception(SLibConstants.MSG_ERR_DB_REG_DELETE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
                }
            }
        }
        catch (Exception e) {
            b = false;
            System.out.println(e);
        }

        if (!b) {
            miClient.showMsgBoxInformation("La requisiciones de materiales tiene órdenes de compra generadas.");
        }

        return b;
    }

    private boolean getRegistryRequisition(boolean bPurchaseOrder) {

        boolean bRequisition = true;

        SDataExplotionMaterialsEntry oExpMatEntry = null;
        SDataRequisition oRequisition = null;
        SDataRequisitionEntry oRequisitionEntry = null;

        mvRequisition = new Vector<SDataRequisition>();

        // Get items that are buy with the same supplier:

        for (int i=0; i < mvExplotionMaterialsEntries.size(); i++) {

            oExpMatEntry = mvExplotionMaterialsEntries.get(i);

            // Check if net requirement is diferent of 0:

            if ((Double) oExpMatEntry.getNet() != 0) {

                // Look up supplier into requisitions:

                bRequisition = true;
                for (int j=0; j<mvRequisition.size(); j++) {

                    oRequisition = mvRequisition.get(j);
                    if (oExpMatEntry.getFkBizPartnerId_n() == oRequisition.getFkBizPartnerId()) {

                        // Add requisition entry to requisition:

                        oRequisitionEntry = new SDataRequisitionEntry();

                        oRequisitionEntry.setQuantity(oExpMatEntry.getNet());
                        oRequisitionEntry.setFkItemId(oExpMatEntry.getPkItemId());

                        oRequisition.getDbmsRequisitionEntry().add(oRequisitionEntry);
                        mvRequisition.set(j, oRequisition);

                        bRequisition = false;
                        break;
                    }
                }
            }
            else{
                bRequisition = false;
            }

            // Create requisition and requisition entry:

            if (bRequisition) {

                oRequisition = new SDataRequisition();
                oRequisition.setPkYearId(miClient.getSessionXXX().getWorkingYear());
                oRequisition.setDate(miClient.getSessionXXX().getWorkingDate());
                oRequisition.setFkBizPartnerId(oExpMatEntry.getFkBizPartnerId_n());
                oRequisition.setFkStatusId(!bPurchaseOrder ? SDataConstantsSys.MFGS_ST_ORD_NEW : SDataConstantsSys.MFGS_ST_ORD_CLS);
                oRequisition.setFkTypeId(!bPurchaseOrder ? SDataConstantsSys.MFGS_TP_REQ_REQ : SDataConstantsSys.MFGS_TP_REQ_SAL);
                oRequisition.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

                oRequisitionEntry = new SDataRequisitionEntry();
                oRequisitionEntry.setQuantity(oExpMatEntry.getNet());
                oRequisitionEntry.setFkItemId(oExpMatEntry.getPkItemId());

                oRequisition.getDbmsRequisitionEntry().add(oRequisitionEntry);
                mvRequisition.add(oRequisition);
            }
        }

        return bRequisition;

        // End requisition
    }

    private void actionGeneratePurchaseOrder() {
        boolean b = true;

        if (actionGenerateRequisition(true)) {

            for (int iReq=0; iReq<mvRequisition.size() && b; iReq++) {

                // Get requisition entries:

                moRequisition = mvRequisition.get(iReq);
                mvRequisitionEntries = moRequisition.getDbmsRequisitionEntry();

                // Save purchase order:

                if (getRegistryPurchaseOrder()) {

                    try {
                        moRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                        moRequest.setPacket(moDps);
                        moResponse = miClient.getSessionXXX().request(moRequest);

                        if (moResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                            throw new Exception(moResponse.getMessage());
                        }
                        else {
                            if (moResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                                throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (moResponse.getMessage().length() == 0 ? "" : "\n" + moResponse.getMessage()));
                            }
                            else {
                                moDps = (SDataDps) moResponse.getPacket();
                            }
                        }
                    }
                    catch (Exception e) {
                        miClient.showMsgBoxWarning("Error al guardar la orden de compra.");
                        b = false;
                    }

                    // Save requisition materials vs. purchase order:

                    for (int i=0; i<mvRequisitionEntries.size() && b; i++) {
                        for (int j=0; j<moDps.getDbmsDpsEntries().size(); j++) {

                            moRequisitionEntry = mvRequisitionEntries.get(i);
                            moDpsEntry = moDps.getDbmsDpsEntries().get(j);

                            if (moRequisitionEntry.getFkItemId() == moDpsEntry.getFkItemId()) {

                                try {
                                    moRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
                                    moRequest.setPacket(getRegistryRequisitionMaterialsPurchaseOrder(
                                            moRequisitionEntry.getPkReqYearId(), moRequisitionEntry.getPkReqId(), moRequisitionEntry.getPkEntryId(),
                                            moDpsEntry.getPkYearId(), moDpsEntry.getPkDocId(), moDpsEntry.getPkEntryId(), moRequisitionEntry.getQuantity()));
                                    moResponse = miClient.getSessionXXX().request(moRequest);

                                    if (moResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                                        b = false;
                                        throw new Exception(moResponse.getMessage());
                                    }
                                    else {
                                        if (moResponse.getResultType() != SLibConstants.DB_ACTION_SAVE_OK) {
                                            b = false;
                                            throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (moResponse.getMessage().length() == 0 ? "" : "\n" + moResponse.getMessage()));
                                        }
                                    }
                                }
                                catch (Exception e) {
                                    miClient.showMsgBoxWarning("Error al guardar la orden de compra.");
                                    b = false;
                                }
                                break;
                            }
                        }
                    }
                }
            }

            if (b) {
                miClient.showMsgBoxInformation("Las órdenes de compra han sido generadas.");
            }
        }
    }

    private erp.mmfg.data.SDataRequisitionPurchaseOrder getRegistryRequisitionMaterialsPurchaseOrder(int nPkReqYearId, int nPkReqId, int nPkReqEntryId, int nPkDpsYearId, int nPkDpsId,int nPkDpsEntryId, double dQty) {
        SDataRequisitionPurchaseOrder oRequisitionPurchaseOrder = new SDataRequisitionPurchaseOrder();

        oRequisitionPurchaseOrder.setPkReqYearId(nPkReqYearId);
        oRequisitionPurchaseOrder.setPkReqId(nPkReqId);
        oRequisitionPurchaseOrder.setPkReqEntryId(nPkReqEntryId);
        oRequisitionPurchaseOrder.setPkDpsYearId(nPkDpsYearId);
        oRequisitionPurchaseOrder.setPkDpsDocId(nPkDpsId);
        oRequisitionPurchaseOrder.setPkDpsEntryId(nPkDpsEntryId);
        oRequisitionPurchaseOrder.setQuantity(dQty);

        return oRequisitionPurchaseOrder;
    }

    private boolean getRegistryPurchaseOrder() {
        boolean b = true;
        String item = "";

        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { moRequisition.getFkBizPartnerId() }, SLibConstants.EXEC_MODE_VERBOSE);

        if (moBizPartner == null) {
            miClient.showMsgBoxWarning("No se encontro el proveedor.");
            b = false;
        }
        else {
            // Create purchase order:

            createPurchaseOrder();

            moDps.getDbmsDpsEntries().removeAllElements();
            for (int i=0; i < mvRequisitionEntries.size(); i++) {

                // Read requisition entry:

                moRequisitionEntry = mvRequisitionEntries.get(i);
                if (moRequisitionEntry == null) {
                    miClient.showMsgBoxWarning("No se pudo leer la entrada de la requisición.");
                    b = false;
                    break;
                }

                // Read item:

                moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moRequisitionEntry.getFkItemId() }, SLibConstants.EXEC_MODE_VERBOSE);
                if (moItem == null) {
                    miClient.showMsgBoxWarning("No se pudo leer el ítem.");
                    b = false;
                    break;
                }

                // Assign date delivery document:

                try {
                    if (moDps.getDateDocDelivery_n() == null) {
                        moDps.setDateDocDelivery_n(SDataUtilities.obtainLeadtimeByItem(miClient, moRequisition.getPkYearId(), moRequisition.getPkReqId(), moItem.getPkItemId()));
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }

                // Create requisition and requisition entry:

                moDpsEntry = new SDataDpsEntry();
                moDpsEntry.setPkYearId(miClient.getSessionXXX().getWorkingYear());
                moDpsEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                moDpsEntry.setFkDpsAdjustmentTypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[0]);
                moDpsEntry.setFkDpsAdjustmentSubtypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[1]);
                moDpsEntry.setFkDpsEntryTypeId(SDataConstantsSys.TRNS_TP_DPS_ETY_ORDY);
                moDpsEntry.setFkItemId(moRequisitionEntry.getFkItemId());

                // Item concept:
                /*
                if (moDps.getFkLanguajeId() != miClient.getSessionXXX().getParamsErp().getFkLanguageId()) {
                    for (SDataItemForeignLanguage description : moItem.getDbmsItemForeignLanguageDescriptions()) {
                        if (moDps.getFkLanguajeId() == description.getPkLanguageId()) {
                            item = description.getItemShort();
                            break;
                        }
                    }
                }

                if (item.length() == 0) {
                    item = moItem.getItemShort();
                }
                */

                moDpsEntry.setConceptKey(moItem.getKey());
                moDpsEntry.setConcept(moItem.getItem());
                moDpsEntry.setLength(moItem.getLength());
                moDpsEntry.setSurface(moItem.getSurface());
                moDpsEntry.setVolume(moItem.getVolume());
                moDpsEntry.setMass(moItem.getMass());
                moDpsEntry.setWeightGross(moItem.getWeightGross());
                moDpsEntry.setWeightDelivery(moItem.getWeightDelivery());
                moDpsEntry.setSurplusPercentage(0);
                moDpsEntry.setOperationsType(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
                moDpsEntry.setFkItemRefId_n(moRequisitionEntry.getFkItemId());
                moDpsEntry.setFkCostCenterId_n("");
                moDpsEntry.setIsInventoriable(moItem.getIsInventoriable());
                moDpsEntry.setIsDeleted(false);
                moDpsEntry.setQuantity(moRequisitionEntry.getQuantity());
                moDpsEntry.setFkItemId(moRequisitionEntry.getFkItemId());

                calculateTotal();

                moDps.getDbmsDpsEntries().add(moDpsEntry);
            }
        }

        return b;
    }

    private void createPurchaseOrder() {
        double rate = 0;

        moBizPartnerCategory = moBizPartner.getDbmsCategorySettingsSup();

        moDps = new SDataDps();

        moDps.setPkYearId(miClient.getSessionXXX().getWorkingYear());
        moDps.setPkDocId(0);
        moDps.setDate(miClient.getSessionXXX().getWorkingDate());
        moDps.setDateDoc(miClient.getSessionXXX().getWorkingDate());
        moDps.setDateStartCredit(miClient.getSessionXXX().getWorkingDate());
        moDps.setDateDocDelivery_n(null);
        moDps.setNumberSeries("");
        moDps.setNumber("");
        moDps.setIsRegistryNew(true);
        moDps.setIsLinked(false);
        moDps.setIsClosed(false);
        moDps.setIsAudited(false);
        moDps.setIsAuthorized(false);
        moDps.setIsSystem(false);
        moDps.setIsDeleted(false);
        moDps.setFkDpsCategoryId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[0]);
        moDps.setFkDpsClassId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[1]);
        moDps.setFkDpsTypeId(SDataConstantsSys.TRNU_TP_DPS_PUR_ORD[2]);
        moDps.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        moDps.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        moDps.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_PENDING);
        moDps.setFkDpsAnnulationTypeId(SModSysConsts.TRNU_TP_DPS_ANN_NA);
        moDps.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        moDps.setFkUserEditId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkUserDeleteId(SDataConstantsSys.USRX_USER_NA);
        moDps.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());
        moDps.setFkBizPartnerId_r(moBizPartner.getPkBizPartnerId());
        moDps.setFkBizPartnerBranchId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId() : 0);
        moDps.setFkBizPartnerBranchAddressId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddressOfficial().getPkAddressId() : 0);
        moDps.setFkBizPartnerAltId_r(moBizPartner.getPkBizPartnerId());
        moDps.setFkBizPartnerBranchAltId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId() : 0);
        moDps.setFkBizPartnerBranchAddressAltId(moBizPartner.getDbmsBizPartnerBranches().size() > 0 ? moBizPartner.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddressOfficial().getPkAddressId() : 0);
        moDps.setFkPaymentSystemTypeId(1);
        moDps.setFkTaxIdentityEmisorTypeId(moBizPartner.getFkTaxIdentityId());
        moDps.setFkTaxIdentityReceptorTypeId(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getFkTaxIdentityId());
        moDps.resetRecord();

        moDps.setIsRecordAutomatic(true);

        // Document's series:

        obtainNextNumber();

        // Document's payment type:

        if (moBizPartnerCategory.getEffectiveCreditTypeId() == SDataConstantsSys.BPSS_TP_CRED_CRED_NO) {
            moDps.setFkPaymentTypeId(SDataConstantsSys.TRNS_TP_PAY_CASH);
        }
        else {
            moDps.setFkPaymentTypeId(SDataConstantsSys.TRNS_TP_PAY_CREDIT);
            moDps.setDaysOfCredit(moBizPartnerCategory.getEffectiveDaysOfCredit());
        }

        // Document's language:

        if (moBizPartnerCategory.getFkLanguageId_n() == SLibConstants.UNDEFINED) {
            moDps.setFkLanguajeId(miClient.getSessionXXX().getParamsErp().getFkLanguageId());
        }
        else {
            moDps.setFkLanguajeId(moBizPartnerCategory.getFkLanguageId_n());
        }

        // Document's currency:

        if (moBizPartnerCategory.getFkCurrencyId_n() == SLibConstants.UNDEFINED) {
            moDps.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
        }
        else {
            moDps.setFkCurrencyId(moBizPartnerCategory.getFkCurrencyId_n());

            try {
                rate = SDataUtilities.obtainExchangeRate(miClient, moBizPartnerCategory.getFkCurrencyId_n(), miClient.getSessionXXX().getWorkingDate());
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            moDps.setExchangeRate(rate);
        }
    }

    private void obtainNextNumber() {
        int numNew = 0;
        int numMin = 0;
        int numMax = 0;
        int numNext = 0;

        Vector<SFormComponentItem> componentItems = null;
        Vector<SFormComponentItem> componentItemsDps = new Vector<SFormComponentItem>();

        try {
            componentItems = miClient.getSessionXXX().getCurrentCompanyBranch().getDnsForDps();

            for (SFormComponentItem componentItem : componentItems) {
                if (SLibUtilities.compareKeys(new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId(), moDps.getFkDpsTypeId() }, componentItem.getPrimaryKey())) {
                    componentItemsDps.add(componentItem);
                }
            }

            numMin = ((int[]) ((SFormComponentItem) componentItemsDps.get(0)).getComplement())[0];
            numMax = ((int[]) ((SFormComponentItem) componentItemsDps.get(0)).getComplement())[1];
            numNext = SDataUtilities.obtainNextNumberForDps(miClient, "", new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId(), moDps.getFkDpsTypeId() });
            if (numNext <= numMin) {
                numNew = numMin;
            }
            else if (numMax == -1 || numNext <= numMax) {
                numNew = numNext;
            }
            else {
                throw new Exception("El rango de folios válido para la serie '" + "" + "' es del " + numMin + " al " + numMax + ".");
            }

            moDps.setNumber("" + numNew);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

    }

    private void calculateTotal() {
        Object[] aux = null;

        SDataBizPartnerBranch oParamBizPartnerBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { moDps.getFkBizPartnerBranchId() }, SLibConstants.EXEC_MODE_VERBOSE);

        // Unitary discount settings:

        if (moItem.getIsFreeDiscountUnitary()) {
            moDpsEntry.setIsDiscountUnitaryPercentage(false);
            moDpsEntry.setOriginalDiscountUnitaryCy(0d);
        }

        // Entry discount settings:

        if (moItem.getIsFreeDiscountEntry()) {
            moDpsEntry.setIsDiscountEntryPercentage(false);
            moDpsEntry.setDiscountEntryCy(0d);
        }

        // Document discount settings:

        if (!moDps.getIsDiscountDocApplying() || moItem.getIsFreeDiscountDoc()) {
            moDpsEntry.setIsDiscountDocApplying(false);
            moDpsEntry.setDiscountDocCy(0d);
        }

        // Obtain item price with discount included or with discount separate:

        try {
            //dItemPrice = SDataUtilities.obtainItemPrice(miClient, moBizPartner.getPkBizPartnerId(), moItem.getPkItemId(), moDps.getDateDoc());
            aux = SDataUtilities.obtainLastPriceForSupplierItem(miClient, moItem.getPkItemId(), "" + moBizPartner.getPkBizPartnerId());

            // Check document currency:

            if (SLibUtilities.compareKeys(new int[] { moDps.getFkCurrencyId() }, new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() })) {
                moDpsEntry.setOriginalPriceUnitaryCy((Double) aux[2]);
                moDpsEntry.setDiscountUnitaryCy((Double) aux[3]);
            }
            else {
                moDpsEntry.setOriginalPriceUnitaryCy(moDps.getExchangeRate() != 0 ? (Double) aux[2]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalDiscountUnitaryCy(moDps.getExchangeRate() != 0 ? (Double) aux[3]/moDps.getExchangeRate() : 0);
                moDpsEntry.setOriginalPriceUnitarySystemCy(moDps.getExchangeRate() != 0 ? (Double) aux[2]/moDps.getExchangeRate() : 0); // XXX
            }
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        moDpsEntry.setOriginalQuantity(moRequisitionEntry.getQuantity());
        moDpsEntry.setIsDiscountUnitaryPercentageSystem(false); // XXX
        moDpsEntry.setDiscountUnitaryPercentage(0);
        moDpsEntry.setDiscountUnitaryPercentageSystem(0); // XXX
        moDpsEntry.setDiscountEntryPercentage(0);
        moDpsEntry.setOriginalDiscountUnitarySystemCy(0); // XXX
        moDpsEntry.setIsTaxesAutomaticApplying(true);

        // Calculate DPS entry's value:

        moDpsEntry.setFkItemId(moItem.getPkItemId());
        moDpsEntry.setFkUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkOriginalUnitId(moItem.getFkUnitId());
        moDpsEntry.setFkTaxRegionId(oParamBizPartnerBranch.getFkTaxRegionId_n() != 0 ? oParamBizPartnerBranch.getFkTaxRegionId_n() : miClient.getSessionXXX().getParamsCompany().getFkDefaultTaxRegionId_n());
        moDpsEntry.setDbmsFkItemGenericId(moItem.getFkItemGenericId());

        moDpsEntry.calculateTotal(miClient, moDps.getDate(),
                moDps.getFkTaxIdentityEmisorTypeId(), moDps.getFkTaxIdentityReceptorTypeId(),
                moDps.getIsDiscountDocPercentage(), moDps.getDiscountDocPercentage(), moDps.getExchangeRate());

        if (moItem.getDbmsDataItemGeneric().getIsLengthApplying() && !moItem.getIsLengthVariable() && !moItem.getDbmsDataItemGeneric().getIsLengthVariable()) {
            moDpsEntry.setLength(moDpsEntry.getQuantity() * moItem.getLength());
        }
        if (moItem.getDbmsDataItemGeneric().getIsMassApplying() && !moItem.getIsMassVariable() && !moItem.getDbmsDataItemGeneric().getIsMassVariable()) {
            moDpsEntry.setMass(moDpsEntry.getQuantity() * moItem.getMass());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightGrossApplying()) {
            moDpsEntry.setWeightGross(moDpsEntry.getQuantity() * moItem.getWeightGross());
        }
        if (moItem.getDbmsDataItemGeneric().getIsWeightDeliveryApplying()) {
            moDpsEntry.setWeightDelivery(moDpsEntry.getQuantity() * moItem.getWeightDelivery());
        }

        // End purchase order:
    }

    private void actionExplotionMaterialsEntryEdit() {
        int index = moExplotionMaterialsEntriesPane.getTable().getSelectedRow();
        SFormExplotionMaterialsEntry oFormExplotionMaterialsEntry = new SFormExplotionMaterialsEntry(miClient);
        SDataExplotionMaterialsEntry oDataExplotionMaterialsEntry = null;
        SDataExplotionMaterialsEntryRow oExplotionMaterialsEntryRow = null;

        oFormExplotionMaterialsEntry.formReset();
        oFormExplotionMaterialsEntry.formRefreshCatalogues();
        if (index != -1) {
            oDataExplotionMaterialsEntry = (SDataExplotionMaterialsEntry) moExplotionMaterialsEntriesPane.getTableRow(index).getData();
            oFormExplotionMaterialsEntry.setRegistry(oDataExplotionMaterialsEntry);
            oFormExplotionMaterialsEntry.setVisible(true);
            if (oFormExplotionMaterialsEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                oDataExplotionMaterialsEntry = (SDataExplotionMaterialsEntry) oFormExplotionMaterialsEntry.getRegistry();
                moExplotionMaterialsEntriesPane.setTableRow(oExplotionMaterialsEntryRow = new SDataExplotionMaterialsEntryRow(oDataExplotionMaterialsEntry), index);
                moExplotionMaterialsEntriesPane.renderTableRows();
            }
            moExplotionMaterialsEntriesPane.setTableRowSelection(index);
        }
    }

    private boolean validateExplotionMaterials(java.lang.String sMsg) {
        boolean b = true;

        try {
            b = SDataUtilities.checkRequisitionMatExplotionMat(miClient, mnPkExpYearId, mnPkExpId, true);
        }
        catch(Exception e) {
            System.out.println(e);
        }

        if (!b) {
            miClient.showMsgBoxInformation(sMsg);
        }

        return b;
    }

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moExplotionMaterialsEntriesPane, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moExplotionMaterialsEntriesPane, getTitle());
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionEdit() {
        actionExplotionMaterialsEntryEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateDocument;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPurchaseOrder;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbRequisition;
    private javax.swing.JButton jbSeek;
    private javax.swing.JButton jbViewDelete;
    private javax.swing.JButton jbViewModify;
    private javax.swing.JButton jbViewNew;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlComments;
    private javax.swing.JLabel jlDateDocument;
    private javax.swing.JLabel jlDbmsProductionOrderEnd;
    private javax.swing.JLabel jlDbmsProductionOrderInitial;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JSeparator jsEntry01;
    private javax.swing.JSeparator jsEntry2;
    private javax.swing.JTextField jtfComments;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JFormattedTextField jtfDateDocument;
    private javax.swing.JTextField jtfDbmsProductionOrderEnd;
    private javax.swing.JTextField jtfDbmsProductionOrderInitial;
    private javax.swing.JTextField jtfReference;
    private javax.swing.JTextField jtfSeek;
    private javax.swing.JTextField jtfWarehouse;
    private javax.swing.JTextField jtfWarehouseCode;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moExplotionMaterials = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moExplotionMaterialsEntriesPane.createTable(null);
        moExplotionMaterialsEntriesPane.clearTableRows();

        mvExplotionMaterialsEntries.clear();

        mnPkExpYearId = 0;
        mnPkExpId = 0;

        jbSeek.setEnabled(true);
        jbRefresh.setEnabled(true);
        jbExportCsv.setEnabled(true);
        jtfSeek.setEnabled(true);
        jtfSeek.setEditable(true);
        jtfSeek.setText("");

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String sMove = "";

        SFormValidation validation = new SFormValidation();
        SDataExplotionMaterialsEntry oExplotionMaterialsEntry = null;
        SDataProductionOrder oProductionOrder = null;

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        // Validate that the explotion of materials has not requisitions of materials:

        if (!validation.getIsError() && moFieldIsDeleted.getBoolean() && !validateExplotionMaterials("No se puede eliminar la explosión de materiales, porque tiene requisiciones de materiales generadas.")) {
            validation.setIsError(true);
        }

        // Validate lot type:

        if (!validation.getIsError()) {

            for (int i = 0; i < moExplotionMaterialsEntriesPane.getTableGuiRowCount(); i++) {
                oExplotionMaterialsEntry = (SDataExplotionMaterialsEntry) moExplotionMaterialsEntriesPane.getTableRow(i).getData();

                moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { oExplotionMaterialsEntry.getPkItemId() }, SLibConstants.EXEC_MODE_SILENT);
            }
        }

        // Validate that production order hasn´t inventory moves:

        if (!validation.getIsError() && moFieldIsDeleted.getBoolean()) {
            for (int i = 0; i < moExplotionMaterials.getDbmsProductionsOrders().size(); i++) {
                oProductionOrder = (SDataProductionOrder) SDataUtilities.readRegistry(miClient, SDataConstants.MFG_ORD,
                        new int[] { moExplotionMaterials.getDbmsProductionsOrders().get(i).getPkYearId(), moExplotionMaterials.getDbmsProductionsOrders().get(i).getPkOrdId() }, SLibConstants.EXEC_MODE_SILENT);
                try {
                    sMove = SDataUtilities.checkProductionOrderExternalRelations(miClient, oProductionOrder.getPkYearId(), oProductionOrder.getPkOrdId());
                    /*sProductionOrderNumber = oProductionOrder.getPkYearId() + "-".concat(("" + oProductionOrder.getPkOrdId()).length() == 1 ? "00000" + ("" + oProductionOrder.getPkOrdId()) :
                                     ("" + oProductionOrder.getPkOrdId()).length() == 2 ? "0000" + ("" + oProductionOrder.getPkOrdId()) :
                                     ("" + oProductionOrder.getPkOrdId()).length() == 3 ? "000" + ("" + oProductionOrder.getPkOrdId()) :
                                     ("" + oProductionOrder.getPkOrdId()).length() == 4 ? "00" + ("" + oProductionOrder.getPkOrdId()) :
                                     ("" + oProductionOrder.getPkOrdId()).length() == 5 ? "0" + ("" + oProductionOrder.getPkOrdId()) : ("" + oProductionOrder.getPkOrdId())); */
                    if (sMove.length()>0) {
                        validation.setMessage("No se puede eliminar la explosión de materiales, porque la orden de producción '" + oProductionOrder.getDbmsNumber() + "' " + sMove);
                        validation.setComponent(moFieldIsDeleted.getComponent());
                        break;
                    }
                    else {
                        if (oProductionOrder.getFkOrdStatusId() >= SDataConstantsSys.MFGS_ST_ORD_PROC) {
                            validation.setMessage("No se puede eliminar la explosión de materiales, porque la orden de producción '" + oProductionOrder.getDbmsNumber() + "' está '" + oProductionOrder.getDbmsProductionOrderStatus() + "'.");
                            validation.setComponent(moFieldIsDeleted.getComponent());
                            break;
                        }
                    }
                }
                catch (Exception e) {
                    System.out.println(e);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataExplotionMaterialsEntryRow oDataExplotionMaterialsEntryRow = null;

        moExplotionMaterials = (SDataExplotionMaterials) registry;

        mnPkExpYearId = moExplotionMaterials.getPkYearId();
        mnPkExpId = moExplotionMaterials.getPkExpId();
        moFieldReference.setFieldValue(moExplotionMaterials.getReference());
        moFieldComments.setFieldValue(moExplotionMaterials.getComments());
        moFieldDateDocument.setFieldValue(moExplotionMaterials.getDateDocument());
        moFieldDbmsProductionOrderInitial.setFieldValue(moExplotionMaterials.getDbmsProductionOrderInitial());
        moFieldDbmsProductionOrderEnd.setFieldValue(moExplotionMaterials.getDbmsProductionOrderEnd());
        moFieldIsDeleted.setFieldValue(moExplotionMaterials.getIsDeleted());

        jtfCompanyBranch.setText(moExplotionMaterials.getDbmsCompanyBranch());
        jtfCompanyBranchCode.setText(moExplotionMaterials.getDbmsCompanyBranchCode());
        jtfWarehouse.setText(moExplotionMaterials.getDbmsWarehouse());
        jtfWarehouseCode.setText(moExplotionMaterials.getDbmsWarehouseCode());

        for (i = 0; i < moExplotionMaterials.getDbmsExplotionMaterialsEntry().size(); i++) {
            oDataExplotionMaterialsEntryRow = new SDataExplotionMaterialsEntryRow(moExplotionMaterials.getDbmsExplotionMaterialsEntry().get(i));
            moExplotionMaterialsEntriesPane.addTableRow(oDataExplotionMaterialsEntryRow);
        }
        mvExplotionMaterialsEntries = moExplotionMaterials.getDbmsExplotionMaterialsEntry();

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moExplotionMaterials == null) {
            moExplotionMaterials = new SDataExplotionMaterials();
            moExplotionMaterials.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moExplotionMaterials.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moExplotionMaterials.setReference(moFieldReference.getString());
        moExplotionMaterials.setComments(moFieldComments.getString());
        moExplotionMaterials.setDateDocument(moFieldDateDocument.getDate());
        moExplotionMaterials.setIsDeleted(moFieldIsDeleted.getBoolean());
        moExplotionMaterials.setDbmsIsExplotion(false);

        moExplotionMaterials.getDbmsExplotionMaterialsEntry().removeAllElements();
        for (int i = 0; i < moExplotionMaterialsEntriesPane.getTableGuiRowCount(); i++) {
            moExplotionMaterials.getDbmsExplotionMaterialsEntry().add((SDataExplotionMaterialsEntry) moExplotionMaterialsEntriesPane.getTableRow(i).getData());
        }

        return moExplotionMaterials;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRequisition) {
                if (miClient.showMsgBoxConfirm("¿Esta seguro(a) de generar las requisiciones de materiales?") == JOptionPane.YES_OPTION) {
                    actionGenerateRequisition(false);
                }
            }
            else if (button == jbPurchaseOrder) {
                if (miClient.showMsgBoxConfirm("¿Esta seguro(a) de generar de generar las órdenes de compra?") == JOptionPane.YES_OPTION) {
                    actionGeneratePurchaseOrder();
                }
            }
            else if (button == jbDateDocument) {
                actionSetDateDocument();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
