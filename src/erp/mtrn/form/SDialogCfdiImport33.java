/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogCfdiImport33.java
 *
 * Created on 14/05/2020, 04:40:00 PM
 */

package erp.mtrn.form;

import cfd.ver33.DCfdi33Catalogs;
import cfd.ver33.DElementConcepto;
import cfd.ver33.DElementConceptoImpuestoRetencion;
import cfd.ver33.DElementConceptoImpuestoTraslado;
import cfd.ver33.DElementConceptoImpuestos;
import cfd.ver40.DCfdi40Catalogs;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.form.SFormOptionPicker;
import erp.form.SFormOptionPickerItems;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataCostCenter;
import erp.mfin.data.SDataTax;
import erp.mfin.data.SDataTaxRegion;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataMatchingItemBizPartnerConcept;
import erp.mitm.data.SDataUnit;
import erp.mitm.data.SItemUtilities;
import erp.mod.SModSysConsts;
import erp.mod.bps.db.SBpsUtils;
import erp.mtrn.data.SCfdUtils;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsCfd;
import erp.mtrn.data.SDataDpsEntry;
import erp.mtrn.data.SDataDpsEntryTax;
import erp.mtrn.data.SDataDpsEntryTaxRow;
import erp.mtrn.data.SDataEntryDpsDpsLink;
import erp.mtrn.data.SRowCfdiImport33;
import erp.mtrn.data.SRowCfdiTaxImport33;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogCfdiImport33 extends javax.swing.JDialog implements java.awt.event.ActionListener, javax.swing.event.ListSelectionListener, javax.swing.event.CellEditorListener {
    
    private static final int ITEM_MAIN = 1;
    private static final int ITEM_REF = 2;
    private static final int COL_ITEM_NAME = 8;
    private static final int COL_FACT_CONV = 11;
    private static final int UUID_FIRST_SECC_LENGHT = 8;
    
    private final erp.client.SClientInterface miClient;
    private int mnIdCur;
    private int mnFormResult;
    private boolean mbFirstTime;
    private final boolean mbWithPurchaseOrder;
    private erp.lib.table.STablePane moConceptTablePane; 
    private erp.lib.table.STablePane moCfdiTaxesTablePane; 
    private erp.lib.table.STablePane moSiieTaxesTablePane; 

    private cfd.ver33.DElementComprobante moComprobante;
    private final SDataDps moPurchaseOrder;
    private SDataDps moDpsNew;
    private SDataBizPartner moBizPartnerEmisor;
    private SDataBizPartner moBizPartnerReceptor;
    private SFormOptionPickerItems moPickerItems;
    private SFormOptionPicker moPickerUnit;
    private SFormOptionPicker moPickerTaxRegion;
    private SFormOptionPicker moPickerCostCenter;
    
    private SFormField moFieldTaxRegionDps; 
    private SFormOptionPicker moPickerOpsType;
    private final File moCfdiFile;
    private SDialogCfdiPurchaseOrder33 moDialogCfdiPurchaseOrder;
    
    SRowCfdiImport33 moRowCfdiCopy;

    /** Creates new form SDialogDpsLink
     * @param client
     * @param purchaseOrder
     * @param cfdi
     */
    public SDialogCfdiImport33(erp.client.SClientInterface client, SDataDps purchaseOrder, File cfdi) {
        super(client.getFrame(), true);
        miClient = client;
        moPurchaseOrder = purchaseOrder;
        mbWithPurchaseOrder = moPurchaseOrder != null;
        moCfdiFile = cfdi;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpCfdiImport = new javax.swing.JPanel();
        jpCfdiData = new javax.swing.JPanel();
        jpCfdiHeader = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlNameEmisor = new javax.swing.JLabel();
        jtfNameEmisor = new javax.swing.JTextField();
        jlRfcEmisor = new javax.swing.JLabel();
        jtfRfcEmisor = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlInvoiceCfdi = new javax.swing.JLabel();
        jtfInvoiceCfdi = new javax.swing.JTextField();
        jtfPaymentType = new javax.swing.JTextField();
        jlDateCfdi = new javax.swing.JLabel();
        jtfDateCfdi = new javax.swing.JTextField();
        jpImportAdditionalData = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlTaxesRegion = new javax.swing.JLabel();
        jcbTaxesRegion = new javax.swing.JComboBox();
        jbTaxesRegion = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jlPurchaseOrderNumber = new javax.swing.JLabel();
        jtfPurchaseOrderNumber = new javax.swing.JTextField();
        jlPurchaseOrderDate = new javax.swing.JLabel();
        jtfPurchaseOrderDate = new javax.swing.JTextField();
        jpCfdiConcepts = new javax.swing.JPanel();
        jpCfdiConceptsGrid = new javax.swing.JPanel();
        jpCfdiConceptsGridCommands = new javax.swing.JPanel();
        jbCopyRow = new javax.swing.JButton();
        jbPasteRow = new javax.swing.JButton();
        jlCopyRowInfo = new javax.swing.JLabel();
        jpCfdiConceptsData = new javax.swing.JPanel();
        jpCfdiConceptsDataNorth = new javax.swing.JPanel();
        jpCfdiConceptSetup = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jbSelectItem = new javax.swing.JButton();
        jbOpsType = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jbChangeUnit = new javax.swing.JButton();
        jbCostCenter = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jbChangeTaxesRegion = new javax.swing.JButton();
        jbSelectReferenceItem = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jlIsItemNameEditable = new javax.swing.JLabel();
        jpCfdiConceptPurchaseOrder = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbSelectPurchaseOrder = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jlPoBefore = new javax.swing.JLabel();
        jlPoAfter = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jlPoOriginalQuantity = new javax.swing.JLabel();
        jtfPoOriginalQuantity = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlPoEntry = new javax.swing.JLabel();
        jtfPoEntry = new javax.swing.JTextField();
        jlPoProcessedQuantity = new javax.swing.JLabel();
        jtfPoProcessedQuantity = new javax.swing.JTextField();
        jtfPoProcessedQuantityCurrent = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlPoSurplusPct = new javax.swing.JLabel();
        jtfPoSurplusPct = new javax.swing.JTextField();
        jlPoPendingQuantity = new javax.swing.JLabel();
        jtfPoPendingQuantity = new javax.swing.JTextField();
        jtfPoPendingQuantityCurrent = new javax.swing.JTextField();
        jpCfdiConceptsDataCenter = new javax.swing.JPanel();
        jpCfdiConceptTaxes = new javax.swing.JPanel();
        jpCfdiTaxes = new javax.swing.JPanel();
        jpSiieTaxes = new javax.swing.JPanel();
        jpCfdiTotal = new javax.swing.JPanel();
        jPanel = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jlSubtotal = new javax.swing.JLabel();
        jtfSubtotal = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jlChargedTaxes = new javax.swing.JLabel();
        jtfChargedTaxes = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlProvSubtotal = new javax.swing.JLabel();
        jtfProvSubtotal = new javax.swing.JTextField();
        jlRetainedTaxes = new javax.swing.JLabel();
        jtfRetainedTaxes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlDiscountDoc = new javax.swing.JLabel();
        jtfDiscountDoc = new javax.swing.JTextField();
        jlTotal = new javax.swing.JLabel();
        jtfTotal = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vinculación de documento de compras-ventas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpCfdiImport.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpCfdiImport.setLayout(new java.awt.BorderLayout());

        jpCfdiData.setLayout(new java.awt.BorderLayout());

        jpCfdiHeader.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos generales del CFDI:"));
        jpCfdiHeader.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameEmisor.setText("Emisor:");
        jlNameEmisor.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlNameEmisor);

        jtfNameEmisor.setEditable(false);
        jtfNameEmisor.setFocusable(false);
        jtfNameEmisor.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel6.add(jtfNameEmisor);

        jlRfcEmisor.setText("  RFC:");
        jlRfcEmisor.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jlRfcEmisor);

        jtfRfcEmisor.setEditable(false);
        jtfRfcEmisor.setFocusable(false);
        jtfRfcEmisor.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jtfRfcEmisor);

        jpCfdiHeader.add(jPanel6);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlInvoiceCfdi.setText("Folio CFDI:");
        jlInvoiceCfdi.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlInvoiceCfdi);

        jtfInvoiceCfdi.setEditable(false);
        jtfInvoiceCfdi.setFocusable(false);
        jtfInvoiceCfdi.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jtfInvoiceCfdi);

        jtfPaymentType.setEditable(false);
        jtfPaymentType.setFocusable(false);
        jtfPaymentType.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel12.add(jtfPaymentType);

        jlDateCfdi.setText("  Fecha CFDI:");
        jlDateCfdi.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlDateCfdi);

        jtfDateCfdi.setEditable(false);
        jtfDateCfdi.setFocusable(false);
        jtfDateCfdi.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jtfDateCfdi);

        jpCfdiHeader.add(jPanel12);

        jpCfdiData.add(jpCfdiHeader, java.awt.BorderLayout.CENTER);

        jpImportAdditionalData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos adicionales de empate:"));
        jpImportAdditionalData.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTaxesRegion.setText("Región imptos.:*");
        jlTaxesRegion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlTaxesRegion);

        jcbTaxesRegion.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jcbTaxesRegion);

        jbTaxesRegion.setText("...");
        jbTaxesRegion.setToolTipText("Seleccionar región de impuestos");
        jbTaxesRegion.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbTaxesRegion);

        jpImportAdditionalData.add(jPanel8);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPurchaseOrderNumber.setText("Folio OC:");
        jlPurchaseOrderNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlPurchaseOrderNumber);

        jtfPurchaseOrderNumber.setEditable(false);
        jtfPurchaseOrderNumber.setEnabled(false);
        jtfPurchaseOrderNumber.setFocusable(false);
        jtfPurchaseOrderNumber.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel13.add(jtfPurchaseOrderNumber);

        jlPurchaseOrderDate.setText("  Fecha OC:");
        jlPurchaseOrderDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlPurchaseOrderDate);

        jtfPurchaseOrderDate.setEditable(false);
        jtfPurchaseOrderDate.setEnabled(false);
        jtfPurchaseOrderDate.setFocusable(false);
        jtfPurchaseOrderDate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfPurchaseOrderDate);

        jpImportAdditionalData.add(jPanel13);

        jpCfdiData.add(jpImportAdditionalData, java.awt.BorderLayout.EAST);

        jpCfdiImport.add(jpCfdiData, java.awt.BorderLayout.NORTH);

        jpCfdiConcepts.setBorder(javax.swing.BorderFactory.createTitledBorder("Conceptos del CFDI:"));
        jpCfdiConcepts.setLayout(new java.awt.BorderLayout(0, 5));

        jpCfdiConceptsGrid.setName(""); // NOI18N
        jpCfdiConceptsGrid.setLayout(new java.awt.BorderLayout(0, 5));

        jpCfdiConceptsGridCommands.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbCopyRow.setText("Copiar datos del renglón");
        jbCopyRow.setPreferredSize(new java.awt.Dimension(150, 23));
        jpCfdiConceptsGridCommands.add(jbCopyRow);

        jbPasteRow.setText("Pegar datos del renglón");
        jbPasteRow.setPreferredSize(new java.awt.Dimension(150, 23));
        jpCfdiConceptsGridCommands.add(jbPasteRow);
        jpCfdiConceptsGridCommands.add(jlCopyRowInfo);

        jpCfdiConceptsGrid.add(jpCfdiConceptsGridCommands, java.awt.BorderLayout.SOUTH);

        jpCfdiConcepts.add(jpCfdiConceptsGrid, java.awt.BorderLayout.CENTER);

        jpCfdiConceptsData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jpCfdiConceptsData.setPreferredSize(new java.awt.Dimension(100, 275));
        jpCfdiConceptsData.setLayout(new java.awt.BorderLayout());

        jpCfdiConceptsDataNorth.setLayout(new java.awt.BorderLayout());

        jpCfdiConceptSetup.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de empate del concepto del CFDI:"));
        jpCfdiConceptSetup.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbSelectItem.setText("Elegir ítem");
        jbSelectItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jbSelectItem);

        jbOpsType.setText("Elegir tipo operación");
        jbOpsType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jbOpsType);

        jpCfdiConceptSetup.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbChangeUnit.setText("Elegir unidad");
        jbChangeUnit.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jbChangeUnit);

        jbCostCenter.setText("Elegir centro costo");
        jbCostCenter.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jbCostCenter);

        jpCfdiConceptSetup.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbChangeTaxesRegion.setText("Elegir región impuestos");
        jbChangeTaxesRegion.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbChangeTaxesRegion.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jbChangeTaxesRegion);

        jbSelectReferenceItem.setText("Elegir ítem referencia");
        jbSelectReferenceItem.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSelectReferenceItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jbSelectReferenceItem);

        jpCfdiConceptSetup.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel17.add(jlIsItemNameEditable);

        jpCfdiConceptSetup.add(jPanel17);

        jpCfdiConceptsDataNorth.add(jpCfdiConceptSetup, java.awt.BorderLayout.CENTER);

        jpCfdiConceptPurchaseOrder.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida de la OC del concepto del CFDI:"));
        jpCfdiConceptPurchaseOrder.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbSelectPurchaseOrder.setText("Elegir partida OC");
        jbSelectPurchaseOrder.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jbSelectPurchaseOrder);

        jLabel2.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel7.add(jLabel2);

        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jLabel1);

        jlPoBefore.setText("Antes:");
        jlPoBefore.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel7.add(jlPoBefore);

        jlPoAfter.setText("Ahora:");
        jlPoAfter.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel7.add(jlPoAfter);

        jpCfdiConceptPurchaseOrder.add(jPanel7);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel3.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel14.add(jLabel3);

        jlPoOriginalQuantity.setText(" Cant. original:");
        jlPoOriginalQuantity.setMinimumSize(new java.awt.Dimension(125, 16));
        jlPoOriginalQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlPoOriginalQuantity);

        jtfPoOriginalQuantity.setEditable(false);
        jtfPoOriginalQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoOriginalQuantity.setText("999,999,999.9999");
        jtfPoOriginalQuantity.setFocusable(false);
        jtfPoOriginalQuantity.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel14.add(jtfPoOriginalQuantity);

        jpCfdiConceptPurchaseOrder.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPoEntry.setText("No. de partida:");
        jlPoEntry.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPoEntry);

        jtfPoEntry.setEditable(false);
        jtfPoEntry.setText("1");
        jtfPoEntry.setFocusable(false);
        jtfPoEntry.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfPoEntry);

        jlPoProcessedQuantity.setText(" Cant. procesada:");
        jlPoProcessedQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPoProcessedQuantity);

        jtfPoProcessedQuantity.setEditable(false);
        jtfPoProcessedQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoProcessedQuantity.setText("999,999,999.9999");
        jtfPoProcessedQuantity.setFocusable(false);
        jtfPoProcessedQuantity.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel9.add(jtfPoProcessedQuantity);

        jtfPoProcessedQuantityCurrent.setEditable(false);
        jtfPoProcessedQuantityCurrent.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoProcessedQuantityCurrent.setText("999,999,999.9999");
        jtfPoProcessedQuantityCurrent.setFocusable(false);
        jtfPoProcessedQuantityCurrent.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel9.add(jtfPoProcessedQuantityCurrent);

        jpCfdiConceptPurchaseOrder.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPoSurplusPct.setText("% excedente:");
        jlPoSurplusPct.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlPoSurplusPct);

        jtfPoSurplusPct.setEditable(false);
        jtfPoSurplusPct.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoSurplusPct.setText("0.0000%");
        jtfPoSurplusPct.setFocusable(false);
        jtfPoSurplusPct.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfPoSurplusPct);

        jlPoPendingQuantity.setText(" Cant. pendiente:");
        jlPoPendingQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlPoPendingQuantity);

        jtfPoPendingQuantity.setEditable(false);
        jtfPoPendingQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoPendingQuantity.setText("999,999,999.9999");
        jtfPoPendingQuantity.setFocusable(false);
        jtfPoPendingQuantity.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel10.add(jtfPoPendingQuantity);

        jtfPoPendingQuantityCurrent.setEditable(false);
        jtfPoPendingQuantityCurrent.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPoPendingQuantityCurrent.setText("999,999,999.9999");
        jtfPoPendingQuantityCurrent.setFocusable(false);
        jtfPoPendingQuantityCurrent.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel10.add(jtfPoPendingQuantityCurrent);

        jpCfdiConceptPurchaseOrder.add(jPanel10);

        jpCfdiConceptsDataNorth.add(jpCfdiConceptPurchaseOrder, java.awt.BorderLayout.EAST);

        jpCfdiConceptsData.add(jpCfdiConceptsDataNorth, java.awt.BorderLayout.NORTH);

        jpCfdiConceptsDataCenter.setLayout(new java.awt.BorderLayout());

        jpCfdiConceptTaxes.setLayout(new java.awt.GridLayout(1, 2));

        jpCfdiTaxes.setBorder(javax.swing.BorderFactory.createTitledBorder("Imptos. del concepto del CFDI:"));
        jpCfdiTaxes.setLayout(new java.awt.BorderLayout());
        jpCfdiConceptTaxes.add(jpCfdiTaxes);

        jpSiieTaxes.setBorder(javax.swing.BorderFactory.createTitledBorder("Imptos. de la partida del documento:"));
        jpSiieTaxes.setLayout(new java.awt.BorderLayout());
        jpCfdiConceptTaxes.add(jpSiieTaxes);

        jpCfdiConceptsDataCenter.add(jpCfdiConceptTaxes, java.awt.BorderLayout.CENTER);

        jpCfdiTotal.setBorder(javax.swing.BorderFactory.createTitledBorder("Total del CFDI:"));
        jpCfdiTotal.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("TEXT");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel.add(jtfCurrency);

        jLabel6.setPreferredSize(new java.awt.Dimension(55, 25));
        jPanel.add(jLabel6);

        jlSubtotal.setText("  Subtotal:");
        jlSubtotal.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel.add(jlSubtotal);

        jtfSubtotal.setEditable(false);
        jtfSubtotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSubtotal.setText("999,999,999.99");
        jtfSubtotal.setFocusable(false);
        jtfSubtotal.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel.add(jtfSubtotal);

        jpCfdiTotal.add(jPanel);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExchangeRate.setText("Tipo de cambio:");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel1.add(jlExchangeRate);

        jtfExchangeRate.setEditable(false);
        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("999.9999");
        jtfExchangeRate.setFocusable(false);
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jtfExchangeRate);

        jlChargedTaxes.setText("  Imptos. trasladados:");
        jlChargedTaxes.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel1.add(jlChargedTaxes);

        jtfChargedTaxes.setEditable(false);
        jtfChargedTaxes.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfChargedTaxes.setText("999,999,999.99");
        jtfChargedTaxes.setFocusable(false);
        jtfChargedTaxes.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jtfChargedTaxes);

        jpCfdiTotal.add(jPanel1);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProvSubtotal.setText("Subtotal provisional:");
        jlProvSubtotal.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlProvSubtotal);

        jtfProvSubtotal.setEditable(false);
        jtfProvSubtotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfProvSubtotal.setText("999,999,999.99");
        jtfProvSubtotal.setFocusable(false);
        jtfProvSubtotal.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(jtfProvSubtotal);

        jlRetainedTaxes.setText("  Imptos. retenidos:");
        jlRetainedTaxes.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlRetainedTaxes);

        jtfRetainedTaxes.setEditable(false);
        jtfRetainedTaxes.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfRetainedTaxes.setText("999,999,999.99");
        jtfRetainedTaxes.setFocusable(false);
        jtfRetainedTaxes.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(jtfRetainedTaxes);

        jpCfdiTotal.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDiscountDoc.setText("Descuento:");
        jlDiscountDoc.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlDiscountDoc);

        jtfDiscountDoc.setEditable(false);
        jtfDiscountDoc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDiscountDoc.setText("999,999,999.99");
        jtfDiscountDoc.setFocusable(false);
        jtfDiscountDoc.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel4.add(jtfDiscountDoc);

        jlTotal.setText("  Total:");
        jlTotal.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlTotal);

        jtfTotal.setEditable(false);
        jtfTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotal.setText("999,999,999.99");
        jtfTotal.setFocusable(false);
        jtfTotal.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel4.add(jtfTotal);

        jpCfdiTotal.add(jPanel4);

        jpCfdiConceptsDataCenter.add(jpCfdiTotal, java.awt.BorderLayout.EAST);

        jpCfdiConceptsData.add(jpCfdiConceptsDataCenter, java.awt.BorderLayout.CENTER);

        jpCfdiConcepts.add(jpCfdiConceptsData, java.awt.BorderLayout.SOUTH);

        jpCfdiImport.add(jpCfdiConcepts, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpCfdiImport, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(1040, 708));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moConceptTablePane.getTable().requestFocus();
        }
    }
    
    @SuppressWarnings("unchecked")
    private void initComponentsExtra() {
        // Tabla general (conceptos):
        int i = 0;
        STableColumnForm[] columns;
        
        moConceptTablePane = new STablePane(miClient);
        jpCfdiConceptsGrid.add(moConceptTablePane, BorderLayout.CENTER);
       
        columns = new STableColumnForm[24];
        // CFDI:
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. identificación", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Descripción", 250);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "ProdServ", STableConstants.WIDTH_ITEM_KEY);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY_2X);
        columns[i].setCellRenderer(SGridUtils.getCellRendererNumberQuantity());
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue8D);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_NUM_SMALLINT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad SAT", STableConstants.WIDTH_VALUE);
        // SIIE:
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código ítem", STableConstants.WIDTH_ITEM_KEY);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
        columns[i++].setEditable(true);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "ProdServ SAT", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad ítem", STableConstants.WIDTH_NUM_SMALLINT);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Factor conversión", STableConstants.WIDTH_QUANTITY_2X);
        columns[i].setCellRenderer(SGridUtils.CellRendererValue8D);
        columns[i++].setEditable(true);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad equivalente", STableConstants.WIDTH_QUANTITY_2X);
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue8D);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_NUM_SMALLINT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad SAT", STableConstants.WIDTH_VALUE);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Región impuestos", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo operación", STableConstants.WIDTH_ITEM);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave centro costo", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código ítem referencia", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem referencia", 250);
        // CFDI (complemento):
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor unitario $", STableConstants.WIDTH_QUANTITY_2X);
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue8D);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Importe $", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue2D);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Descuento $", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(SGridUtils.CellRendererValue2D);
        
        for (i = 0; i < columns.length; i++) {
            moConceptTablePane.addTableColumn(columns[i]);
        }
        
        // Tabla impuestos CFDI
        
        int j = 0;
        STableColumnForm[] taxColumns;
        
        moCfdiTaxesTablePane = new STablePane(miClient);
        jpCfdiTaxes.add(moCfdiTaxesTablePane, BorderLayout.CENTER);

        taxColumns = new STableColumnForm[3];
        taxColumns[j++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto", STableConstants.WIDTH_VALUE);
        taxColumns[j++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto (SAT)", STableConstants.WIDTH_VALUE);
        taxColumns[j] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tasa o cuota", STableConstants.WIDTH_NUM_INTEGER);
        
        for (j = 0; j < taxColumns.length; j++) {
            moCfdiTaxesTablePane.addTableColumn(taxColumns[j]);
        }
        
        // Tabla impuestos SIIE:
        
        int k = 0;
        STableColumnForm[] taxSiieColumns;
        
        moSiieTaxesTablePane = new STablePane(miClient);
        jpSiieTaxes.add(moSiieTaxesTablePane, BorderLayout.CENTER);

        taxSiieColumns = new STableColumnForm[9];
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto", 200);
        taxSiieColumns[k] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Tasa", STableConstants.WIDTH_PERCENTAGE);
        taxSiieColumns[k++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());
        taxSiieColumns[k] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor u.", STableConstants.WIDTH_VALUE_UNITARY);
        taxSiieColumns[k++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto $", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto mon $", STableConstants.WIDTH_VALUE);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto", 150);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cálculo impuesto", 150);
        taxSiieColumns[k++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Aplicación impuesto", 150);
        for (k = 0; k < taxSiieColumns.length; k++) {
            moSiieTaxesTablePane.addTableColumn(taxSiieColumns[k]);
        }
        
        // Listeners:
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbCopyRow.addActionListener(this);
        jbPasteRow.addActionListener(this);
        jbSelectItem.addActionListener(this);
        jbChangeUnit.addActionListener(this);
        jbTaxesRegion.addActionListener(this); 
        jbChangeTaxesRegion.addActionListener(this);
        jbSelectPurchaseOrder.addActionListener(this);
        jbOpsType.addActionListener(this); 
        jbCostCenter.addActionListener(this);
        jbSelectReferenceItem.addActionListener(this);
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        SFormUtilities.populateComboBox(miClient, jcbTaxesRegion, SDataConstants.FINU_TAX_REG);
        
        // Activar o desactivar componentes:
        
        jcbTaxesRegion.setEnabled(!mbWithPurchaseOrder);
        jbTaxesRegion.setEnabled(!mbWithPurchaseOrder);
        jbCopyRow.setEnabled(!mbWithPurchaseOrder);
        jbPasteRow.setEnabled(false);
        jbSelectItem.setEnabled(!mbWithPurchaseOrder);
        jbChangeUnit.setEnabled(false);
        jbChangeTaxesRegion.setEnabled(false);
        jbOpsType.setEnabled(false);
        jbCostCenter.setEnabled(false);
        jbSelectReferenceItem.setEnabled(false); 
        jbSelectPurchaseOrder.setEnabled(mbWithPurchaseOrder);
        jtfPurchaseOrderNumber.setEditable(mbWithPurchaseOrder);
        jtfPurchaseOrderDate.setEditable(mbWithPurchaseOrder);
        jlPurchaseOrderNumber.setEnabled(mbWithPurchaseOrder);
        jlPurchaseOrderDate.setEnabled(mbWithPurchaseOrder);
        jlPoEntry.setEnabled(mbWithPurchaseOrder);
        jlPoSurplusPct.setEnabled(mbWithPurchaseOrder);
        jlPoOriginalQuantity.setEnabled(mbWithPurchaseOrder);
        jlPoProcessedQuantity.setEnabled(mbWithPurchaseOrder);
        jlPoPendingQuantity.setEnabled(mbWithPurchaseOrder);
        jlPoBefore.setEnabled(mbWithPurchaseOrder);
        jlPoAfter.setEnabled(mbWithPurchaseOrder);
        
        // Borrar texto de las casillas:
        
        jtfPoEntry.setText("");
        jtfPoSurplusPct.setText("");
        jtfPoOriginalQuantity.setText("");
        jtfPoProcessedQuantity.setText("");
        jtfPoPendingQuantity.setText("");
        jtfPoProcessedQuantityCurrent.setText("");
        jtfPoPendingQuantityCurrent.setText("");
        
        // Field con la información de la región de impuestos
        
        moFieldTaxRegionDps = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbTaxesRegion, jlTaxesRegion);
        moFieldTaxRegionDps.setPickerButton(jbTaxesRegion);
        
        moRowCfdiCopy = null;
    }
    
    /**
     * Asigna los valores del comprobante CFDI a la forma para realizar el empate de los conceptos con los conceptos del CFDI.
     * @param comprobante CFDI.
     */
    public void setComprobante(cfd.ver33.DElementComprobante comprobante) {
        moComprobante = comprobante;
        
        jtfRfcEmisor.setText(comprobante.getEltEmisor().getAttRfc().getString());
        jtfNameEmisor.setText(comprobante.getEltEmisor().getAttNombre().getString());
        jtfInvoiceCfdi.setText(comprobante.getAttSerie().getString().isEmpty() && comprobante.getAttFolio().getString().isEmpty() ?
                "SIN FOLIO" : !comprobante.getAttSerie().getString().isEmpty() ?
                comprobante.getAttSerie().getString() + "-" + comprobante.getAttFolio().getString() :
                comprobante.getAttFolio().getString());
        jtfPaymentType.setText(comprobante.getAttMetodoPago().getString());
        jtfDateCfdi.setText(SLibUtils.DbmsDateFormatDatetime.format(comprobante.getAttFecha().getDatetime()));
        jtfCurrency.setText(comprobante.getAttMoneda().getString());
        jtfExchangeRate.setText(SLibUtils.getDecimalFormatExchangeRate().format(comprobante.getAttTipoCambio().getDouble() == 0 ? 
                1 : comprobante.getAttTipoCambio().getDouble()));
        jtfProvSubtotal.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getAttSubTotal().getDouble()));
        jtfDiscountDoc.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getAttDescuento().getDouble()));
        jtfSubtotal.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getAttSubTotal().getDouble() - comprobante.getAttDescuento().getDouble()));
        jtfChargedTaxes.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getEltOpcImpuestos() == null ? 
                0 : comprobante.getEltOpcImpuestos().getAttTotalImpuestosTraslados().getDouble()));
        jtfRetainedTaxes.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getEltOpcImpuestos() == null ?
                0 : comprobante.getEltOpcImpuestos().getAttTotalImpuestosRetenidos().getDouble()));
        jtfTotal.setText(SLibUtils.getDecimalFormatAmount().format(comprobante.getAttTotal().getDouble()));

        jtfRfcEmisor.setCaretPosition(0); 
        jtfNameEmisor.setCaretPosition(0);
        jtfInvoiceCfdi.setCaretPosition(0);
        jtfDateCfdi.setCaretPosition(0);
        jtfCurrency.setCaretPosition(0);
        jtfExchangeRate.setCaretPosition(0);
        jtfProvSubtotal.setCaretPosition(0);
        jtfDiscountDoc.setCaretPosition(0);
        jtfSubtotal.setCaretPosition(0);
        jtfChargedTaxes.setCaretPosition(0);
        jtfRetainedTaxes.setCaretPosition(0);
        jtfTotal.setCaretPosition(0);
        
        int bizPartnerIdEmisor = SBpsUtils.getBizParterIdByFiscalId(miClient.getSession().getStatement(), comprobante.getEltEmisor().getAttRfc().getString(), "", SDataConstantsSys.BPSS_CT_BP_SUP);
        moBizPartnerEmisor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { bizPartnerIdEmisor }, SLibConstants.EXEC_MODE_SILENT);
        
        if (moBizPartnerEmisor.getDbmsBizPartnerBranches() != null) {
            SFormUtilities.locateComboBoxItem(jcbTaxesRegion, new int[] { moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getFkTaxRegionId_n() != 0 ? 
                    moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getFkTaxRegionId_n() : miClient.getSessionXXX().getParamsCompany().getFkDefaultTaxRegionId_n() });          
        } 
        
        try {
            String sql = "SELECT id_cur FROM erp.cfgu_cur WHERE cur_key = '" + moComprobante.getAttMoneda().getString() + "'";
            try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                if (resultSet.next()) {
                    mnIdCur = resultSet.getInt(1);
                }
            }
        }
        catch (Exception e){
            SLibUtils.printException(this, e);
        }
        
        if (mbWithPurchaseOrder) {
            // Ya existe una orden de compra:
            
            moBizPartnerReceptor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { moPurchaseOrder.getFkBizPartnerId_r() }, SLibConstants.EXEC_MODE_SILENT);
            
            jtfPurchaseOrderNumber.setText(moPurchaseOrder.getComprobanteFolio());
            jtfPurchaseOrderDate.setText(SLibUtils.DbmsDateFormatDatetime.format(moPurchaseOrder.getComprobanteFecha()));

            jtfPurchaseOrderNumber.setCaretPosition(0);
            jtfPurchaseOrderDate.setCaretPosition(0);
        }
        else {
            // No existe una orden de compra:
            
            int bizPartnerIdReceptor = SBpsUtils.getBizParterIdByFiscalId(miClient.getSession().getStatement(), comprobante.getEltReceptor().getAttRfc().getString(), "", 0); 
            
            moBizPartnerReceptor = (SDataBizPartner) SDataUtilities.readRegistry(miClient, 
                SDataConstants.BPSU_BP, new int[] { bizPartnerIdReceptor }, SLibConstants.EXEC_MODE_SILENT);
        }
        
        populateTables();        
    }

    private void populateTables() {
        moConceptTablePane.createTable(this);
        
        for (int i = 0; i < moComprobante.getEltConceptos().getEltConceptos().size(); i++) {
            SRowCfdiImport33 row = new SRowCfdiImport33(miClient, moComprobante.getEltConceptos().getEltConceptos().get(i), i+1);
            loadPredefinedMatchedData(row);
            moConceptTablePane.addTableRow(row);
        }
        
        moConceptTablePane.renderTableRows();
        moConceptTablePane.setTableRowSelection(0);
        moConceptTablePane.getTable().getColumnModel().getColumn(COL_FACT_CONV).setCellEditor(moConceptTablePane.getTable().getDefaultEditor(Number.class));
        moConceptTablePane.getTable().getColumnModel().getColumn(COL_ITEM_NAME).setCellEditor(moConceptTablePane.getTable().getDefaultEditor(Number.class));
        moConceptTablePane.getTable().getColumnModel().getColumn(COL_FACT_CONV).getCellEditor().addCellEditorListener(this);
        moConceptTablePane.getTable().getColumnModel().getColumn(COL_ITEM_NAME).getCellEditor().addCellEditorListener(this);
        moConceptTablePane.getTable().getTableHeader().setReorderingAllowed(false);
        
        setCfdiTaxesTableValues(0);
        setSiieTaxesTableValues((SRowCfdiImport33) moConceptTablePane.getSelectedTableRow());
    }
    
    private void loadPredefinedMatchedData(SRowCfdiImport33 rowCfdiImport) { // Carga los datos empatados con anterioridad.
        /*
        Se busca si ya hay datos de empate para el No. de identificación y el ID. del emisor,
        si se obtiene un 0 significa que no hay datos de empate anteriores.
        */
        
        DElementConcepto concepto = rowCfdiImport.getConcepto();
        int matchId = SItemUtilities.getMatchItemBizPartnerId(miClient, concepto.getAttNoIdentificacion().getString(), concepto.getAttClaveProdServ().getString(), moBizPartnerEmisor.getPkBizPartnerId());
        
        if (matchId != 0) {
            // Se cargan los datos del empate anterior:
            
            SDataMatchingItemBizPartnerConcept match = new SDataMatchingItemBizPartnerConcept();
            match.read(matchId, miClient.getSession().getStatement());
            
            SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient,
                SDataConstants.ITMU_ITEM, new int[] { match.getFkItemId() }, SLibConstants.EXEC_MODE_SILENT);
            SDataUnit unit = (SDataUnit) SDataUtilities.readRegistry(miClient, 
                SDataConstants.ITMU_UNIT, new int [] { match.getFkUnitId() }, SLibConstants.EXEC_MODE_SILENT);
            SDataTaxRegion taxRegion = new SDataTaxRegion();
            taxRegion.read(new int [] { match.getFkTaxRegionId() }, miClient.getSession().getStatement());
            SDataItem refItem = (SDataItem) SDataUtilities.readRegistry(miClient,
                SDataConstants.ITMU_ITEM, new int[] { match.getFkItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
            SDataCostCenter cc = (SDataCostCenter) SDataUtilities.readRegistry(miClient,
                SDataConstants.FIN_CC, new String[] { match.getFkCostCenterId_n() }, SLibConstants.EXEC_MODE_SILENT);
           
            // Se asignan los valores:
            rowCfdiImport.setItem(item);
            rowCfdiImport.setUnit(unit);
            rowCfdiImport.setTaxRegion(taxRegion);
            rowCfdiImport.setOperationTypePk(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
            rowCfdiImport.setCostCenter(cc);
            rowCfdiImport.setReferenceItem(refItem);
            rowCfdiImport.setConvFactor(match.getFactorConversion());
            
            // En caso de que se requiera, se asigna un item de referencia:
            if (item.getDbmsDataItemGeneric().getIsItemReferenceRequired() && rowCfdiImport.getReferenceItem() == null) {
                refItem = (SDataItem) SDataUtilities.readRegistry(miClient,
                        SDataConstants.ITMU_ITEM, new int[] { item.getDbmsFkDefaultItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
                rowCfdiImport.setReferenceItem(refItem);
            }
            
            rowCfdiImport.prepareTableRow();
            setSiieTaxes(rowCfdiImport);
        }
    }
       
    private void actionOk() {
        formValidate();
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbChangeTaxesRegion;
    private javax.swing.JButton jbChangeUnit;
    private javax.swing.JButton jbCopyRow;
    private javax.swing.JButton jbCostCenter;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbOpsType;
    private javax.swing.JButton jbPasteRow;
    private javax.swing.JButton jbSelectItem;
    private javax.swing.JButton jbSelectPurchaseOrder;
    private javax.swing.JButton jbSelectReferenceItem;
    private javax.swing.JButton jbTaxesRegion;
    private javax.swing.JComboBox jcbTaxesRegion;
    private javax.swing.JLabel jlChargedTaxes;
    private javax.swing.JLabel jlCopyRowInfo;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDateCfdi;
    private javax.swing.JLabel jlDiscountDoc;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlInvoiceCfdi;
    private javax.swing.JLabel jlIsItemNameEditable;
    private javax.swing.JLabel jlNameEmisor;
    private javax.swing.JLabel jlPoAfter;
    private javax.swing.JLabel jlPoBefore;
    private javax.swing.JLabel jlPoEntry;
    private javax.swing.JLabel jlPoOriginalQuantity;
    private javax.swing.JLabel jlPoPendingQuantity;
    private javax.swing.JLabel jlPoProcessedQuantity;
    private javax.swing.JLabel jlPoSurplusPct;
    private javax.swing.JLabel jlProvSubtotal;
    private javax.swing.JLabel jlPurchaseOrderDate;
    private javax.swing.JLabel jlPurchaseOrderNumber;
    private javax.swing.JLabel jlRetainedTaxes;
    private javax.swing.JLabel jlRfcEmisor;
    private javax.swing.JLabel jlSubtotal;
    private javax.swing.JLabel jlTaxesRegion;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JPanel jpCfdiConceptPurchaseOrder;
    private javax.swing.JPanel jpCfdiConceptSetup;
    private javax.swing.JPanel jpCfdiConceptTaxes;
    private javax.swing.JPanel jpCfdiConcepts;
    private javax.swing.JPanel jpCfdiConceptsData;
    private javax.swing.JPanel jpCfdiConceptsDataCenter;
    private javax.swing.JPanel jpCfdiConceptsDataNorth;
    private javax.swing.JPanel jpCfdiConceptsGrid;
    private javax.swing.JPanel jpCfdiConceptsGridCommands;
    private javax.swing.JPanel jpCfdiData;
    private javax.swing.JPanel jpCfdiHeader;
    private javax.swing.JPanel jpCfdiImport;
    private javax.swing.JPanel jpCfdiTaxes;
    private javax.swing.JPanel jpCfdiTotal;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpImportAdditionalData;
    private javax.swing.JPanel jpSiieTaxes;
    private javax.swing.JTextField jtfChargedTaxes;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfDateCfdi;
    private javax.swing.JTextField jtfDiscountDoc;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfInvoiceCfdi;
    private javax.swing.JTextField jtfNameEmisor;
    private javax.swing.JTextField jtfPaymentType;
    private javax.swing.JTextField jtfPoEntry;
    private javax.swing.JTextField jtfPoOriginalQuantity;
    private javax.swing.JTextField jtfPoPendingQuantity;
    private javax.swing.JTextField jtfPoPendingQuantityCurrent;
    private javax.swing.JTextField jtfPoProcessedQuantity;
    private javax.swing.JTextField jtfPoProcessedQuantityCurrent;
    private javax.swing.JTextField jtfPoSurplusPct;
    private javax.swing.JTextField jtfProvSubtotal;
    private javax.swing.JTextField jtfPurchaseOrderDate;
    private javax.swing.JTextField jtfPurchaseOrderNumber;
    private javax.swing.JTextField jtfRetainedTaxes;
    private javax.swing.JTextField jtfRfcEmisor;
    private javax.swing.JTextField jtfSubtotal;
    private javax.swing.JTextField jtfTotal;
    // End of variables declaration//GEN-END:variables

    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    private void setCfdiTaxesTableValues(int selectedRow) { 
        moCfdiTaxesTablePane.createTable();
        moCfdiTaxesTablePane.clearTableRows();
        
        cfd.ver33.DElementConceptoImpuestos oImpuestos = moComprobante.getEltConceptos().getEltConceptos().get(selectedRow).getEltOpcConceptoImpuestos();
        if (oImpuestos != null) {
            if (oImpuestos.getEltOpcImpuestosTrasladados() != null) {
                for (int i = 0; i < oImpuestos.getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados().size(); i++) {
                    moCfdiTaxesTablePane.addTableRow(new SRowCfdiTaxImport33(oImpuestos, SModSysConsts.FINS_TP_TAX_CHARGED, i));
                }
            }
            if (oImpuestos.getEltOpcImpuestosRetenciones() != null) {
                for (int i = 0; i < oImpuestos.getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones().size(); i++) {
                    moCfdiTaxesTablePane.addTableRow(new SRowCfdiTaxImport33(oImpuestos, SModSysConsts.FINS_TP_TAX_RETAINED, i));
                }
            }
            
            moCfdiTaxesTablePane.renderTableRows();
            moCfdiTaxesTablePane.setTableRowSelection(0);
        }
    }
    
    private void setEnabledButtons(SRowCfdiImport33 rowCfdiImport) { 
        if (rowCfdiImport != null) {
            if (!mbWithPurchaseOrder){
                jbChangeUnit.setEnabled(rowCfdiImport.getItem() != null);
                jbChangeTaxesRegion.setEnabled(rowCfdiImport.getItem() != null); 
                jbOpsType.setEnabled(rowCfdiImport.getItem() != null); 
                jbCostCenter.setEnabled(rowCfdiImport.getItem() != null);
            }
            jbSelectReferenceItem.setEnabled(rowCfdiImport.getItem()!= null && rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired());
        }
        else {
            jbChangeUnit.setEnabled(false);
            jbChangeTaxesRegion.setEnabled(false); 
            jbOpsType.setEnabled(false); 
            jbCostCenter.setEnabled(false);
            jbSelectReferenceItem.setEnabled(false);
        }    
    }
    
    private void setSiieTaxes(SRowCfdiImport33 rowCfdiImport) {
        try {
            rowCfdiImport.setDpsEntry();
            calculateTotalDpsEntry(rowCfdiImport); 
            setSiieTaxesTableValues(rowCfdiImport);
            
            DElementConceptoImpuestos impuestos = rowCfdiImport.getConcepto().getEltOpcConceptoImpuestos();
            if (impuestos != null) {
                if (impuestos.getEltOpcImpuestosTrasladados() != null) {
                    ArrayList<cfd.ver33.DElementConceptoImpuestoTraslado> trasladado = impuestos.getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados();
                    for (int i = 0; trasladado.size() > i; i++){ 
                        SDataTax tax = SCfdUtils.obtainTaxCharged(miClient, trasladado.get(i));
                        if (tax != null){
                            for(int j = 0; j < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); j++){
                                SDataDpsEntryTax dpsEntryTax = rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j);
                                if (dpsEntryTax.getPkTaxBasicId() == tax.getPkTaxBasicId() &&
                                        dpsEntryTax.getPkTaxId() == tax.getPkTaxId() &&
                                        SLibUtils.DecimalFormatPercentage4D.format(dpsEntryTax.getPercentage()).equals(
                                                SLibUtils.DecimalFormatPercentage4D.format(trasladado.get(i).getAttTasaOCuota().getDouble())) &&
                                        dpsEntryTax.getFkTaxTypeId() == SModSysConsts.FINS_TP_TAX_CHARGED && 
                                        dpsEntryTax.getFkTaxCalculationTypeId() == SModSysConsts.FINS_TP_TAX_CAL_RATE) {
                                    rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j).setTaxCy(trasladado.get(i).getAttImporte().getDouble());
                                    rowCfdiImport.addTaxChargedMatched(trasladado.get(i)); 
                                }
                            }
                        }
                    }
                }
                
                if (impuestos.getEltOpcImpuestosRetenciones() != null) {
                    ArrayList<cfd.ver33.DElementConceptoImpuestoRetencion> retencion = impuestos.getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones();
                    for (int i = 0; retencion.size() > i ; i++) {                
                        SDataTax tax = SCfdUtils.obtainTaxRetained(miClient, retencion.get(i));
                        if (tax != null){
                            for (int j = 0; j < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); j++){
                                SDataDpsEntryTax dpsEntryTax = rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j);
                                if (dpsEntryTax.getPkTaxBasicId() == tax.getPkTaxBasicId() &&
                                        dpsEntryTax.getPkTaxId() == tax.getPkTaxId() &&
                                        SLibUtils.DecimalFormatPercentage4D.format(dpsEntryTax.getPercentage()).equals(
                                                SLibUtils.DecimalFormatPercentage4D.format(retencion.get(i).getAttTasaOCuota().getDouble())) &&
                                        dpsEntryTax.getFkTaxTypeId() == SModSysConsts.FINS_TP_TAX_RETAINED && 
                                        dpsEntryTax.getFkTaxCalculationTypeId() == SModSysConsts.FINS_TP_TAX_CAL_RATE) {
                                    rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(j).setTaxCy(retencion.get(i).getAttImporte().getDouble());
                                    rowCfdiImport.addTaxRetainedMatched(retencion.get(i));
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }
    
    private void calculateTotalDpsEntry(SRowCfdiImport33 rowCfdiImport){
        rowCfdiImport.calculateTotalDpsEntry(moComprobante.getAttFecha().getDatetime(), moBizPartnerEmisor.getFkBizPartnerIdentityTypeId(),
                moBizPartnerReceptor.getFkBizPartnerIdentityTypeId(), miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : moComprobante.getAttTipoCambio().getDouble());
    }
    
    private void setSiieTaxesTableValues(SRowCfdiImport33 rowCfdiImport) { 
        moSiieTaxesTablePane.createTable();
        moSiieTaxesTablePane.clearTableRows();
        
        if (rowCfdiImport.getDpsEntry() != null && rowCfdiImport.getDpsEntry().getDbmsEntryTaxes() != null) {
            for (int i = 0; i < rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().size(); i++) {
                moSiieTaxesTablePane.addTableRow(new SDataDpsEntryTaxRow(rowCfdiImport.getDpsEntry().getDbmsEntryTaxes().get(i)));
            }
        }
        
        moSiieTaxesTablePane.renderTableRows();
        moSiieTaxesTablePane.setTableRowSelection(0);
    }
    
    private void setPurchaseOrderPanelValues() {
        jtfPoEntry.setText("");
        jtfPoSurplusPct.setText("");
        
        jtfPoOriginalQuantity.setText("");
        jtfPoProcessedQuantity.setText("");
        jtfPoPendingQuantity.setText("");
        
        jtfPoProcessedQuantityCurrent.setText("");
        jtfPoPendingQuantityCurrent.setText("");
        
        SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
        
        if (rowCfdiImport != null && rowCfdiImport.getEntryDpsDpsLink() != null) {
            SDataEntryDpsDpsLink entryDpsDpsLink = rowCfdiImport.getEntryDpsDpsLink();
            
            jtfPoEntry.setText(SLibUtils.DecimalFormatValue0D.format(entryDpsDpsLink.getSortingPosition()));
            jtfPoSurplusPct.setText(SLibUtils.DecimalFormatPercentage2D.format(entryDpsDpsLink.getSurplusPercentage()));

            jtfPoOriginalQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsDpsLink.getQuantity()));
            jtfPoProcessedQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsDpsLink.getQuantityLinked()));
            jtfPoPendingQuantity.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsDpsLink.getQuantity() - entryDpsDpsLink.getQuantityLinked()));
            
            double processedQuantityCurrent = 0;
            for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
                SRowCfdiImport33 auxRowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getTableRow(i);
                
                if (auxRowCfdiImport.getEntryDpsDpsLink() != null) {
                    if (SLibUtils.compareKeys(entryDpsDpsLink.getDpsEntryKey(), auxRowCfdiImport.getEntryDpsDpsLink().getDpsEntryKey())) {
                        processedQuantityCurrent += auxRowCfdiImport.getEntryDpsDpsLink().getQuantityToLink();
                    } 
                }
            }
            
            jtfPoProcessedQuantityCurrent.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsDpsLink.getQuantityLinked() + processedQuantityCurrent));
            jtfPoPendingQuantityCurrent.setText(SLibUtils.DecimalFormatValue2D.format(entryDpsDpsLink.getQuantity() - entryDpsDpsLink.getQuantityLinked() - processedQuantityCurrent)); 
        }
    }
    
    private void actionCopyRow() {
        if (jbCopyRow.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                moRowCfdiCopy = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                jbPasteRow.setEnabled(true);
                jlCopyRowInfo.setText("Datos del renglón " + (selectedRow + 1) + " copiados");
            }
        }
    }
    
    private void actionPasteRow() {
        if (jbPasteRow.isEnabled() && moRowCfdiCopy != null) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                rowCfdiImport.setItem(moRowCfdiCopy.getItem());
                rowCfdiImport.setOperationTypePk(moRowCfdiCopy.getOperationTypePk());
                rowCfdiImport.setUnit(moRowCfdiCopy.getUnit());
                rowCfdiImport.setCostCenter(moRowCfdiCopy.getCostCenter());
                rowCfdiImport.setTaxRegion(moRowCfdiCopy.getTaxRegion()); 
                rowCfdiImport.setReferenceItem(moRowCfdiCopy.getReferenceItem());
                rowCfdiImport.setConvFactor(moRowCfdiCopy.getConvFactor());
                rowCfdiImport.prepareTableRow(); 
                moConceptTablePane.renderTableRows();
                moConceptTablePane.setTableRowSelection(selectedRow);
                setSiieTaxes(rowCfdiImport);
                moRowCfdiCopy = null;
                jbPasteRow.setEnabled(false);
                jlCopyRowInfo.setText(""); 
            }
        }
    }
    
    private void actionTaxesRegion() {
        miClient.pickOption(SDataConstants.FINU_TAX_REG, moFieldTaxRegionDps, null);
    }

    /**
     * 
     * @param choiceOfItem Indica el ítem deseado: ITEM_MAIN o ITEM_REF.
     */
    private void actionSelectItem(int choiceOfItem) { 
        if (choiceOfItem == 1 ? jbSelectItem.isEnabled() : jbSelectReferenceItem.isEnabled()) {
            if (jcbTaxesRegion.getSelectedIndex() <= 0) {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlTaxesRegion) + "'.");
                jcbTaxesRegion.requestFocus();
            }
            else {
                int selectedRow = moConceptTablePane.getTable().getSelectedRow();
                
                if (selectedRow == -1) {
                    miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
                }
                else {
                    SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                    
                    if (moPickerItems == null) {
                        moPickerItems = SFormOptionPickerItems.createOptionPicker(miClient, SDataConstants.ITMX_ITEM_IOG, moPickerItems);
                    }
                    moPickerItems.formReset();
                    if (choiceOfItem == ITEM_MAIN) {
                        moPickerItems.setFilterKey(SDataConstantsSys.ITMS_CL_ITEM_PUR_CON);
                    }
                    moPickerItems.formRefreshOptionPane();
                    moPickerItems.setSelectedPrimaryKey(rowCfdiImport.getItem() != null ? new int [] { rowCfdiImport.getItem().getPkItemId() } : null);
                    moPickerItems.setFormVisible(true); 

                    if (moPickerItems.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                        SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient,
                                SDataConstants.ITMU_ITEM, (int[]) moPickerItems.getSelectedPrimaryKey(), SLibConstants.EXEC_MODE_SILENT);
                        
                        if (choiceOfItem == ITEM_MAIN) {
                            rowCfdiImport.setItem(item);
                            
                            // Se busca si el ítem principal requiere un ítem de refefencia, de ser así, se asigna.
                            if (rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired()) {
                                SDataItem refItem = (SDataItem) SDataUtilities.readRegistry(miClient,
                                    SDataConstants.ITMU_ITEM, new int[] { rowCfdiImport.getItem().getDbmsFkDefaultItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
                                rowCfdiImport.setReferenceItem(refItem);
                            }
                            
                            // Se asigna la unidad del ítem principal.
                            rowCfdiImport.setUnit(item.getDbmsDataUnit());
                            
                            // Si hay una región de impuestos seleccionada en el combobox, se le asigna esa región de impuestos.
                            if (jcbTaxesRegion.getSelectedIndex() > 0) {
                                SDataTaxRegion taxRegion = new SDataTaxRegion();
                                taxRegion.read(((SFormComponentItem) jcbTaxesRegion.getSelectedItem()).getPrimaryKey(), miClient.getSession().getStatement());
                                rowCfdiImport.setTaxRegion(taxRegion);
                            }
                            
                            // Se asigna tipo de operación por defecto.
                            if (rowCfdiImport.getOperationTypePk() == 0){
                                rowCfdiImport.setOperationTypePk(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
                            }
                            
                            // Se obtiene y se asigna el centro de costo definido para el ítem principal.
                            rowCfdiImport.setCostCenter(getCostCenterByItem(item));
                        }
                        else { // Es ítem de referencia.
                            rowCfdiImport.setReferenceItem(item);
                        }
                        
                        rowCfdiImport.prepareTableRow();
                        moConceptTablePane.renderTableRows();
                        moConceptTablePane.setTableRowSelection(selectedRow);
                    }
                    
                    setSiieTaxes(rowCfdiImport);
                }
            }
        }
    }

    private void actionChangeUnit() {
        if (jbChangeUnit.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {    
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                SDataItem item = rowCfdiImport.getItem();
                if (moPickerUnit == null) {
                    moPickerUnit = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.ITMU_UNIT, moPickerUnit);
                }
                moPickerUnit.formReset();
                moPickerUnit.setFilterKey(new int[] { item.getDbmsDataItemGeneric().getFkUnitTypeId() });
                moPickerUnit.formRefreshOptionPane();
                moPickerUnit.setSelectedPrimaryKey(rowCfdiImport.getUnit() != null ? new int [] { rowCfdiImport.getUnit().getPkUnitId() } : null);
                moPickerUnit.setFormVisible(true); 

                int[] key;
                if (moPickerUnit.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = (int[]) moPickerUnit.getSelectedPrimaryKey();
                    SDataUnit unit = (SDataUnit) SDataUtilities.readRegistry(miClient,
                        SDataConstants.ITMU_UNIT, key, SLibConstants.EXEC_MODE_SILENT);

                    rowCfdiImport.setUnit(unit);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                    moConceptTablePane.setTableRowSelection(selectedRow);
                }
                setSiieTaxes(rowCfdiImport);
            }
        }
    }

    private void actionChangeTaxesRegion() {
        if (jbChangeTaxesRegion.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                if (moPickerTaxRegion == null) {
                    moPickerTaxRegion = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.FINU_TAX_REG, moPickerTaxRegion);
                }
                moPickerTaxRegion.formReset();
                moPickerTaxRegion.formRefreshOptionPane();
                moPickerTaxRegion.setSelectedPrimaryKey(moFieldTaxRegionDps.getKey());
                moPickerTaxRegion.setFormVisible(true); 

                int[] key;
                if (moPickerTaxRegion.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = (int[]) moPickerTaxRegion.getSelectedPrimaryKey();
                    SDataTaxRegion taxRegion = new SDataTaxRegion();
                    taxRegion.read(key, miClient.getSession().getStatement());

                    rowCfdiImport.setTaxRegion(taxRegion);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                    moConceptTablePane.setTableRowSelection(selectedRow);
                }
                setSiieTaxes(rowCfdiImport);
            }
        }
    }
    
    private void actionOpsType() {
        if (jbOpsType.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                if (moPickerOpsType == null) {
                    moPickerOpsType = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.TRNX_OPE_TYPE, moPickerOpsType);
                }
                moPickerOpsType.formReset();
                moPickerOpsType.setFilterKey(SDataConstantsSys.TRNX_TP_DPS_DOC);
                moPickerOpsType.formRefreshOptionPane();
                moPickerOpsType.setFormVisible(true);
                Object[] keyObject;
                if (moPickerOpsType.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    keyObject = (Object[]) moPickerOpsType.getSelectedPrimaryKey();
                    Long key = (Long) keyObject[0];
                    rowCfdiImport.setOperationTypePk(key.intValue());
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                    moConceptTablePane.setTableRowSelection(selectedRow);
                }
                setSiieTaxes(rowCfdiImport);
            }
        }
    }
    
    private void actionCostCenter() {
        if (jbCostCenter.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                if (moPickerCostCenter == null) {        
                    moPickerCostCenter = SFormOptionPicker.createOptionPicker(miClient, SDataConstants.FIN_CC, moPickerCostCenter);
                }
                moPickerCostCenter.formReset();
                moPickerCostCenter.formRefreshOptionPane();
                try {
                    moPickerCostCenter.setSelectedPrimaryKey(SDataUtilities.obtainCostCenterItem(miClient, rowCfdiImport.getItem().getPkItemId()));
                }
                catch (Exception e){
                    SLibUtils.printException(this, e);
                }
                moPickerCostCenter.setFormVisible(true); 

                Object key;
                if (moPickerCostCenter.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    key = moPickerCostCenter.getSelectedPrimaryKey();
                    SDataCostCenter costCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient,
                            SDataConstants.FIN_CC, key, SLibConstants.EXEC_MODE_SILENT);
                    rowCfdiImport.setCostCenter(costCenter);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                    moConceptTablePane.setTableRowSelection(selectedRow);
                }
                setSiieTaxes(rowCfdiImport);
            }
        }
    }
    
    private void actionSelectPurchaseOrder() {
        if (jbSelectPurchaseOrder.isEnabled()) {
            int selectedRow = moConceptTablePane.getTable().getSelectedRow();
            if (selectedRow == -1) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF); 
            }
            else {
                SRowCfdiImport33 rowCfdiImport = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
                
                if (moDialogCfdiPurchaseOrder == null) {
                    moDialogCfdiPurchaseOrder = new SDialogCfdiPurchaseOrder33(miClient);
                }
                moDialogCfdiPurchaseOrder.setValue(SDataConstants.TRN_DPS, moPurchaseOrder);
                
                HashMap<String, Double> purchaseOrderEntries = new HashMap<>(); // key: PK of entry of purchase order as a String; value: total quantity already assigned from entry
                
                for (SGridRow row : moConceptTablePane.getTableModel().getTableRows()) {
                    SRowCfdiImport33 rci = (SRowCfdiImport33) row; // variable de conveniencia
                    if (rci != rowCfdiImport && rci.getEntryDpsDpsLink() != null) {
                        String key = SLibUtils.textKey(rci.getEntryDpsDpsLink().getDpsEntryKey());
                        Double quantityToLink = purchaseOrderEntries.get(key);
                        if (quantityToLink == null) {
                            quantityToLink = rci.getEntryDpsDpsLink().getQuantityToLink();
                        }
                        else {
                            quantityToLink += rci.getEntryDpsDpsLink().getQuantityToLink();
                        }
                        purchaseOrderEntries.put(key, quantityToLink);
                    }
                }
                
                moDialogCfdiPurchaseOrder.setValue(SDialogCfdiPurchaseOrder33.VALUE_TYPE_PURCHASE_ORDER_ENTRIES, purchaseOrderEntries);
                moDialogCfdiPurchaseOrder.setValue(SDialogCfdiPurchaseOrder33.VALUE_TYPE_ROW_CFDI, rowCfdiImport);
                
                moDialogCfdiPurchaseOrder.setFormVisible(true);
                
                if (moDialogCfdiPurchaseOrder.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                    SDataEntryDpsDpsLink entryDpsDpsLink = (SDataEntryDpsDpsLink) moDialogCfdiPurchaseOrder.getValue(SDialogCfdiPurchaseOrder33.VALUE_TYPE_ENTRY_DPS_DPS_LINK);
                    rowCfdiImport.setEntryDpsDpsLink(entryDpsDpsLink); 
                    
                    rowCfdiImport.setConvFactor((double) moDialogCfdiPurchaseOrder.getValue(SDialogCfdiPurchaseOrder33.VALUE_TYPE_FACTOR_CONV));
                    setMatchDataByPurchaseOrder(rowCfdiImport, (SDataDpsEntry) moDialogCfdiPurchaseOrder.getValue(SDataConstants.TRN_DPS_ETY));
                    setSiieTaxes(rowCfdiImport);
                    rowCfdiImport.prepareTableRow();
                    moConceptTablePane.renderTableRows();
                    moConceptTablePane.setTableRowSelection(selectedRow);
                    setPurchaseOrderPanelValues();
                }
            }
        }
    }
    
    private void setMatchDataByPurchaseOrder(SRowCfdiImport33 rowCfdiImport, SDataDpsEntry dpsEntry){
        SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient,
            SDataConstants.ITMU_ITEM, new int [] { dpsEntry.getFkItemId() }, SLibConstants.EXEC_MODE_SILENT);
        rowCfdiImport.setItem(item);
        
        // Se busca si el ítem principal requiere un ítem de refefencia, de ser así, se asigna.
        if (rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired()) {
            SDataItem itemRef = (SDataItem) SDataUtilities.readRegistry(miClient,
                SDataConstants.ITMU_ITEM, new int[] { rowCfdiImport.getItem().getDbmsFkDefaultItemRefId_n() }, SLibConstants.EXEC_MODE_SILENT);
            rowCfdiImport.setReferenceItem(itemRef);
        }
        
        // Se asigna la unidad que viene el el dpsEntry.
        SDataUnit unit = (SDataUnit) SDataUtilities.readRegistry(miClient, 
                SDataConstants.ITMU_UNIT, new int [] { dpsEntry.getFkOriginalUnitId() }, SLibConstants.EXEC_MODE_SILENT);
        rowCfdiImport.setUnit(unit);
        
        // Si hay una región de impuestos seleccionada en el combobox, se le asigna esa región de impuestos.
        if (jcbTaxesRegion.getSelectedIndex() > 0) {
            SDataTaxRegion taxRegion = new SDataTaxRegion();
            taxRegion.read(((SFormComponentItem) jcbTaxesRegion.getSelectedItem()).getPrimaryKey(), miClient.getSession().getStatement());
            rowCfdiImport.setTaxRegion(taxRegion);
        }
        
        // Se asigna tipo de operación por defecto.
        if (rowCfdiImport.getOperationTypePk() == 0){
            rowCfdiImport.setOperationTypePk(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
        }
        
        // Se obtiene y se asigna el centro de costo definido para el ítem principal.
        rowCfdiImport.setCostCenter(getCostCenterByItem(item));
    }
    
    private SDataCostCenter getCostCenterByItem(SDataItem item){
        SDataCostCenter costCenter = null;
        
        try {
            String[] pkcc = { SDataUtilities.obtainCostCenterItem(miClient, item.getPkItemId()) };
            if (!pkcc[0].equals("")) {
                costCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient,
                    SDataConstants.FIN_CC, pkcc , SLibConstants.EXEC_MODE_SILENT);
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
        
        return costCenter;
    }
    
    private void updateNameItem() {
        if (((SRowCfdiImport33) moConceptTablePane.getSelectedTableRow()).getItem().getDbmsDataItemGeneric().getIsItemNameEditable()) {
            String concept = ((String) moConceptTablePane.getSelectedTableRow().getValues().get(COL_ITEM_NAME)); 
            concept = SLibUtils.textLeft(SLibUtils.textTrim(concept.toUpperCase()), SFormDpsEntry.CONCEPT_LENGTH_MAX);
            SRowCfdiImport33 row = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
            row.getItem().setItem(concept);
            row.getDpsEntry().setConcept(concept);
            row.prepareTableRow();
        }
        else {
            miClient.showMsgBoxInformation("El concepto que esta tratando modificar no es editable.");
        }
        int selectedRow = moConceptTablePane.getTable().getSelectedRow();
        moConceptTablePane.renderTableRows();
        moConceptTablePane.setTableRowSelection(selectedRow);
    }
    
    private void updateConvFact() { 
        SRowCfdiImport33 row = (SRowCfdiImport33) moConceptTablePane.getSelectedTableRow();
        row.setConvFactor((double) moConceptTablePane.getSelectedTableRow().getValues().get(COL_FACT_CONV));
        row.prepareTableRow();
        
        int selectedRow = moConceptTablePane.getTable().getSelectedRow();
        moConceptTablePane.renderTableRows();
        moConceptTablePane.setTableRowSelection(selectedRow);
    }
    
    private void setIsItemNameEditable(SRowCfdiImport33 rowCfdiImport) {
        if (rowCfdiImport != null && rowCfdiImport.getItem() != null) {
            jlIsItemNameEditable.setText(rowCfdiImport.getItem().getDbmsDataItemGeneric().getIsItemNameEditable() ? "El concepto es editable" : "El concepto no es editable");
        }
        else {
            jlIsItemNameEditable.setText("El renglón aun no tiene asignado un ítem");
        }
    }
    
    private void formValidate() { 
        int selectRow = 0;
        SFormValidation validation = new SFormValidation();
        
        ROWS:
        for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
            selectRow = i;
            SRowCfdiImport33 row = (SRowCfdiImport33) moConceptTablePane.getTableRow(i); // variable de conveniencia
            DElementConcepto concepto = row.getConcepto(); // variable de conveniencia
            String descripcion = (concepto.getAttNoIdentificacion().getString().isEmpty() ? "" : concepto.getAttNoIdentificacion().getString() + " - ") +
                    concepto.getAttDescripcion().getString();
            String rowMsg = "El concepto del renglón #" + (i + 1) + ", \"" + descripcion + "\", ";
            boolean isItemRefReq = row.getItem().getDbmsDataItemGeneric().getIsItemReferenceRequired();
            
            if (mbWithPurchaseOrder && row.getEntryDpsDpsLink() == null) {
                validation.setMessage(rowMsg + "no tiene asignada una partida de la OC.");
                break;
            }
            else if (row.getItem() == null) {
                validation.setMessage(rowMsg + "no tiene asignado un ítem.");
                break;
            }
            else if (isItemRefReq && row.getReferenceItem() == null) {
                validation.setMessage(rowMsg + "no tiene asignado un ítem de referencia.");
                break;
            }
            else if (isItemRefReq && row.getReferenceItem().getPkItemId() == row.getItem().getPkItemId()) {
                validation.setMessage(rowMsg + "tiene asignado el mismo ítem de referencia que el ítem principal.");
                break;
            }
            else if (row.getUnit() == null) {
                validation.setMessage(rowMsg + "no tiene asignada una unidad.");
                break;
            }
            else if (row.getTaxRegion() == null) {
                validation.setMessage(rowMsg + "no tiene asignada una región de impuestos.");
                break;
            }
            else if (row.getOperationTypePk() == 0) {
                validation.setMessage(rowMsg + "no tiene asignado un tipo de operación.");
                break;
            }
            else if (row.getCostCenter() == null) {
                validation.setMessage(rowMsg + "no tiene asignado un centro de costo.");
                break;
            }
            else if (row.getConvFactor() == 0.0) {
                validation.setMessage(rowMsg + "no tiene factor de conversión especificado.");
                break;
            }
            else {
                if (concepto.getEltOpcConceptoImpuestos() != null) {
                    if (concepto.getEltOpcConceptoImpuestos().getEltOpcImpuestosTrasladados() != null) {
                        ArrayList<cfd.ver33.DElementConceptoImpuestoTraslado> traslados = concepto.getEltOpcConceptoImpuestos().getEltOpcImpuestosTrasladados().getEltImpuestoTrasladados();
                        TAXES:
                        for (DElementConceptoImpuestoTraslado traslado : traslados) {
                            if (!row.getTaxChargedMatched().contains(traslado)) {
                                validation.setMessage(rowMsg + "no tiene empatado el impuesto:\n" 
                                        + "Impuesto: " + DCfdi33Catalogs.Impuesto.get(traslado.getAttImpuesto().getString()) + ".\n"
                                        + "Tipo: trasladado. \n"
                                        + "Factor: " + traslado.getAttTipoFactor().getString() + " de "
                                        + SLibUtils.DecimalFormatPercentage2D.format(traslado.getAttTasaOCuota().getDouble()) + ".");
                                break ROWS;
                            }
                        }
                    }
                    
                    if (concepto.getEltOpcConceptoImpuestos().getEltOpcImpuestosRetenciones() != null) {
                        ArrayList<cfd.ver33.DElementConceptoImpuestoRetencion> retenciones = concepto.getEltOpcConceptoImpuestos().getEltOpcImpuestosRetenciones().getEltImpuestoRetenciones();
                        TAXES:
                        for (DElementConceptoImpuestoRetencion retencion : retenciones) {
                            if (!row.getTaxRetainedMatched().contains(retencion)) { 
                                validation.setMessage(rowMsg + "no tiene empatado el impuesto:\n"
                                        + "Impuesto: " + DCfdi33Catalogs.Impuesto.get(retencion.getAttImpuesto().getString()) + ".\n"
                                        + "Tipo: retenido. \n"
                                        + "Factor: " +retencion.getAttTipoFactor().getString() + " de "
                                        + SLibUtils.DecimalFormatPercentage2D.format(retencion.getAttTasaOCuota().getDouble()) + ".");
                                break ROWS;
                            }
                        }
                    }
                }
            }
        }
        
        if (!validation.getIsError()) {
            for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
                selectRow = i;
                SRowCfdiImport33 row = (SRowCfdiImport33) moConceptTablePane.getTableRow(i); // variable de conveniencia
                DElementConcepto concepto = row.getConcepto(); // variable de conveniencia
                String descripcion = (concepto.getAttNoIdentificacion().getString().isEmpty() ? "" : concepto.getAttNoIdentificacion().getString() + " - ") +
                        concepto.getAttDescripcion().getString();
                String rowMsg = "El factor de conversión del renglón #" + (i + 1) + ", concepto \"" + descripcion + "\", ";
                
                if (mbWithPurchaseOrder && row.getConvFactor() != 1) {
                    if (miClient.showMsgBoxConfirm(rowMsg + "es diferente de 1.0,\n"
                            + "pero está asignado a una partida de la OC.\n"
                            + "¿Esta seguro que el factor de conversión es correcto?") != JOptionPane.YES_OPTION) {
                        validation.setMessage("Poner el factor de conversión del renglón #" + (i + 1) + " igual a 1.0.");
                        break;
                    }
                }
                
                if (!validation.getIsError()) {
                    if (row.getClaveUnidadCfdi().equals(row.getClaveUnidadSiie())) {
                        if (row.getConvFactor() != 1) {
                            if (miClient.showMsgBoxConfirm(rowMsg + "es diferente de 1.0,\n"
                                    + "pero las unidades SAT del concepto y del ítem seleccionado son iguales.\n"
                                    + "¿Esta seguro que el factor de conversión es correcto?") != JOptionPane.YES_OPTION) {
                                validation.setMessage("Poner el factor de conversión del renglón #" + (i + 1) + " igual a 1.0.");
                                break;
                            }
                        }
                    }
                    else {
                        if (row.getConvFactor() == 1) {
                            if (miClient.showMsgBoxConfirm(rowMsg + "es igual a 1.0,\n"
                                    + "pero las unidades SAT del concepto y del ítem seleccionado son diferentes.\n"
                                    + "¿Esta seguro que el factor de conversión es correcto?") != JOptionPane.YES_OPTION) {
                                validation.setMessage("Poner el factor de conversión del renglón #" + (i + 1) + " diferente a 1.0.");
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        if (!validation.getIsError()) {
            moDpsNew = createNewDps();
            setDpsData();
        }
        else { 
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            moConceptTablePane.setTableRowSelection(selectRow);
            if (!validation.getMessage().isEmpty()) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
    }

    private SDataDps createNewDps() {
        SDataDps dps = new SDataDps();

        dps.setPkYearId(miClient.getSessionXXX().getWorkingYear());
        dps.setPkDocId(0);
        dps.setDate(miClient.getSessionXXX().getWorkingDate());
        dps.setDateDoc(miClient.getSessionXXX().getWorkingDate());
        dps.setDateStartCredit(miClient.getSessionXXX().getWorkingDate());
        dps.setNumberSeries("");
        dps.setNumber("");
        dps.setApprovalYear(0);
        dps.setApprovalNumber(0);
        dps.setIsRegistryNew(true);
        dps.setIsLinked(false);
        dps.setIsClosed(false);
        dps.setIsClosedCommissions(false);
        dps.setIsAudited(false);
        dps.setIsAuthorized(false);
        dps.setIsSystem(false);
        dps.setIsDeleted(false);
        dps.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);
        dps.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        dps.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA);
        dps.setFkDpsAnnulationTypeId(SModSysConsts.TRNU_TP_DPS_ANN_NA);
        dps.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserClosedCommissionsId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserShippedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserDpsDeliveryAckId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        dps.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());

        dps.resetRecord();

        dps.setFkPaymentTypeId(SLibConstants.UNDEFINED);
        dps.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);
        dps.setDateDocDelivery_n(null);
        dps.setDateDocLapsing_n(null);
        dps.setDateShipment_n(null);
        dps.setDateDelivery_n(null);
        dps.setShipments(0);
        dps.setFkIncotermId(SModSysConsts.LOGS_INC_NA);
        dps.setFkSpotSourceId_n(0);
        dps.setFkSpotDestinyId_n(0);
        dps.setFkModeOfTransportationTypeId(SModSysConsts.LOGS_TP_MOT_NA);
        dps.setFkCarrierTypeId(SModSysConsts.LOGS_TP_CAR_NA);
        dps.setFkCarrierId_n(0);
        dps.setFkVehicleTypeId_n(0);
        dps.setFkVehicleId_n(0);
        dps.setDriver("");
        dps.setPlate("");
        dps.setTicket("");
        
        SDataDpsCfd dpsCfd = dps.getDbmsDataDpsCfd();

        if (dpsCfd == null) {
            dpsCfd = new SDataDpsCfd();
            dps.setDbmsDataDpsCfd(dpsCfd);
        }

        dpsCfd.setIsRegistryNew(true); // force entries to be treated as new

        return dps;
    }

    private void setDpsData() {
        if (moDpsNew.getIsRegistryNew()) {
            moDpsNew.setPkYearId(SLibTimeUtilities.digestYear(moComprobante.getAttFecha().getDatetime())[0]);
            moDpsNew.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDpsNew.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }
        
        String uuid = "";
        cfd.ver33.DElementTimbreFiscalDigital tfd = moComprobante.getEltOpcComplementoTimbreFiscalDigital();
        if (tfd != null) {
            uuid = tfd.getAttUUID().getString().toUpperCase();
        }

        moDpsNew.setDate(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateDoc(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateStartCredit(moComprobante.getAttFecha().getDatetime());
        moDpsNew.setDateShipment_n(null);
        moDpsNew.setDateDelivery_n(null);
        moDpsNew.setDateDocLapsing_n(null);
        moDpsNew.setDateDocDelivery_n(null);
        moDpsNew.setNumberSeries(moComprobante.getAttSerie() != null ? moComprobante.getAttSerie().getString() : "");
        moDpsNew.setNumber(moComprobante.getAttFolio() != null ? !moComprobante.getAttFolio().getString().isEmpty() ? 
                moComprobante.getAttFolio().getString() : SLibUtils.textLeft(uuid, UUID_FIRST_SECC_LENGHT) : "");
        moDpsNew.setNumberReference("");
        moDpsNew.setCommissionsReference("");
        moDpsNew.setApprovalYear(0);
        moDpsNew.setApprovalNumber(0);
        moDpsNew.setDaysOfCredit(moComprobante.getAttMetodoPago().getString().equals(
                DCfdi40Catalogs.MDP_PUE) ? 0 : moBizPartnerReceptor.getDbmsCategorySettingsSup().getDaysOfCredit());
        moDpsNew.setIsDiscountDocApplying(moComprobante.getAttDescuento().getDouble() != 0);
        moDpsNew.setIsDiscountDocPercentage(false);
        moDpsNew.setDiscountDocPercentage(0);
        
        /*
        moDpsNew.setSubtotalProvisional_r(...);
        moDpsNew.setDiscountDoc_r(...);
        moDpsNew.setSubtotal_r(...);
        moDpsNew.setTaxCharged_r(...);
        moDpsNew.setTaxRetained_r(...);
        moDpsNew.setTotal_r(...);
        moDpsNew.setCommissions_r(...);
        */
        
        moDpsNew.setExchangeRate(miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : moComprobante.getAttTipoCambio().getDouble());
        moDpsNew.setExchangeRateSystem(miClient.getSession().getSessionCustom().isLocalCurrency(
                new int[] { mnIdCur }) ? 1 : moComprobante.getAttTipoCambio().getDouble());
        
        moDpsNew.setSubtotalProvisionalCy_r(moComprobante.getAttSubTotal().getDouble());
        moDpsNew.setDiscountDocCy_r(moComprobante.getAttDescuento() == null ? 0 : moComprobante.getAttDescuento().getDouble());
        moDpsNew.setSubtotalCy_r(moDpsNew.getSubtotalProvisionalCy_r() - moDpsNew.getDiscountDocCy_r());
        moDpsNew.setTaxChargedCy_r(moComprobante.getEltOpcImpuestos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosTraslados() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosTraslados().getDouble()); 
        moDpsNew.setTaxRetainedCy_r(moComprobante.getEltOpcImpuestos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosRetenidos() == null ? 0 : moComprobante.getEltOpcImpuestos().getAttTotalImpuestosRetenidos().getDouble());
        moDpsNew.setTotalCy_r(moComprobante.getAttTotal().getDouble());
        
        moDpsNew.setCommissionsCy_r(0);

        moDpsNew.setDriver("");
        moDpsNew.setPlate("");
        moDpsNew.setTicket("");
        moDpsNew.setShipments(0);
        moDpsNew.setPayments(0);
        moDpsNew.setPaymentMethod("");
        moDpsNew.setPaymentAccount("");
        moDpsNew.setAutomaticAuthorizationRejection(0);
        
        moDpsNew.setIsPublic(false);
        moDpsNew.setIsLinked(false);
        moDpsNew.setIsClosed(false);
        moDpsNew.setIsClosedCommissions(false);
        moDpsNew.setIsShipped(false);
        moDpsNew.setIsDpsDeliveryAck(false);
        moDpsNew.setIsRebill(false);
        moDpsNew.setIsAudited(false);
        moDpsNew.setIsAuthorized(false);
        moDpsNew.setIsRecordAutomatic(true);
        moDpsNew.setIsCopy(false);
        moDpsNew.setIsCopied(false);
        moDpsNew.setIsSystem(false);
        moDpsNew.setIsDeleted(false);  // when document was deleted, user can reactivate it on save

        moDpsNew.setFkDpsCategoryId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[0]);
        moDpsNew.setFkDpsClassId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[1]);
        moDpsNew.setFkDpsTypeId(SDataConstantsSys.TRNU_TP_DPS_PUR_INV[2]);
        moDpsNew.setFkPaymentTypeId(moComprobante.getAttMetodoPago().getString().equals(
                DCfdi40Catalogs.MDP_PUE) ? SDataConstantsSys.TRNS_TP_PAY_CASH : SDataConstantsSys.TRNS_TP_PAY_CREDIT);
        moDpsNew.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);   // XXX remove ASAP (Sergio Flores, 2017-08-09)!
        moDpsNew.setFkDpsStatusId(SDataConstantsSys.TRNS_ST_DPS_EMITED);   // all saved documents have "emited" status
        moDpsNew.setFkDpsValidityStatusId(SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
        moDpsNew.setFkDpsAuthorizationStatusId(SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA);
        moDpsNew.setFkDpsAnnulationTypeId(SDataConstantsSys.TRNU_TP_DPS_ANN_NA);
        moDpsNew.setFkDpsNatureId(SDataConstantsSys.TRNU_DPS_NAT_DEF);   // all saved documents have "default" nature
        
        moDpsNew.setFkCompanyBranchId(miClient.getSessionXXX().getCurrentCompanyBranchId());
        moDpsNew.setFkFunctionalAreaId(SModSysConsts.CFGU_FUNC_NON);
        moDpsNew.setFkBizPartnerId_r(moBizPartnerEmisor.getPkBizPartnerId());
        moDpsNew.setFkBizPartnerBranchId(moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId());
        moDpsNew.setFkBizPartnerBranchAddressId(moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddresses().get(0).getPkAddressId());
        
        moDpsNew.setFkBizPartnerAltId_r(moBizPartnerEmisor.getPkBizPartnerId()); 
        moDpsNew.setFkBizPartnerBranchAltId(moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId());
        moDpsNew.setFkBizPartnerBranchAddressAltId(moBizPartnerEmisor.getDbmsBizPartnerBranches().get(0).getDbmsBizPartnerBranchAddresses().get(0).getPkAddressId());
        
        moDpsNew.setFkBizPartnerAddresseeId_n(0);
        moDpsNew.setFkAddresseeBizPartnerId_nr(0);
        moDpsNew.setFkAddresseeBizPartnerBranchId_n(0);
        moDpsNew.setFkAddresseeBizPartnerBranchAddressId_n(0);
        moDpsNew.setFkContactBizPartnerBranchId_n(0);
        moDpsNew.setFkContactContactId_n(0);
        
        moDpsNew.setFkTaxIdentityEmisorTypeId(moBizPartnerEmisor.getFkTaxIdentityId());
        moDpsNew.setFkTaxIdentityReceptorTypeId(moBizPartnerReceptor.getFkTaxIdentityId());
        moDpsNew.setFkLanguajeId(moBizPartnerEmisor.getDbmsCategorySettingsSup().getFkLanguageId_n() == SLibConsts.UNDEFINED ? 
                miClient.getSessionXXX().getParamsErp().getFkLanguageId() : moBizPartnerEmisor.getDbmsCategorySettingsSup().getFkLanguageId_n());
        moDpsNew.setFkCurrencyId(mnIdCur);
        
        moDpsNew.setFkSalesAgentId_n(0);
        moDpsNew.setFkSalesAgentBizPartnerId_n(0);
        moDpsNew.setFkSalesSupervisorId_n(0);
        moDpsNew.setFkSalesSupervisorBizPartnerId_n(0);
        
        moDpsNew.setFkIncotermId(SModSysConsts.LOGS_INC_NA); //NA
        moDpsNew.setFkSpotSourceId_n(0);
        moDpsNew.setFkSpotDestinyId_n(0);
        moDpsNew.setFkModeOfTransportationTypeId(SModSysConsts.LOGS_TP_MOT_NA);
        moDpsNew.setFkCarrierTypeId(SModSysConsts.LOGS_TP_CAR_NA); //NA
        moDpsNew.setFkCarrierId_n(0);
        moDpsNew.setFkVehicleTypeId_n(0);
        moDpsNew.setFkVehicleId_n(0);
        moDpsNew.setFkSourceYearId_n(0);
        moDpsNew.setFkSourceDocId_n(0);
        moDpsNew.setFkMfgYearId_n(0);
        moDpsNew.setFkMfgOrderId_n(0);
        
        moDpsNew.setFkUserLinkedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserClosedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserClosedCommissionsId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserShippedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserDpsDeliveryAckId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserAuditedId(SDataConstantsSys.USRX_USER_NA);
        moDpsNew.setFkUserAuthorizedId(SDataConstantsSys.USRX_USER_NA);
        
        moDpsNew.setAuxKeepDpsData(true);
        moDpsNew.setAuxKeepExchangeRate(true); 
        moDpsNew.setAuxFileXmlAbsolutePath(moCfdiFile.getAbsolutePath());
        moDpsNew.setAuxFileXmlName(moCfdiFile.getName());
        
        moDpsNew.getDbmsDpsEntries().clear();
        for (int i = 0; i < moConceptTablePane.getTableGuiRowCount(); i++) {
            SRowCfdiImport33 row = (SRowCfdiImport33) moConceptTablePane.getTableRow(i);
            moDpsNew.getDbmsDpsEntries().add(row.getDpsEntry());
            saveItemMatchBizPartner(row);
        }
        
        try {
            moDpsNew.calculateTotal(miClient); 
        }
        catch (Exception e) {
            
        }
        
        setFormVisible(false);
    }
    
    private void saveItemMatchBizPartner(SRowCfdiImport33 rowCfdiImport) {
        try {
            SDataMatchingItemBizPartnerConcept match = new SDataMatchingItemBizPartnerConcept();
            int key = SItemUtilities.getMatchItemBizPartnerId(miClient, 
                rowCfdiImport.getConcepto().getAttNoIdentificacion().getString(), 
                rowCfdiImport.getConcepto().getAttClaveProdServ().getString(),
                moBizPartnerEmisor.getPkBizPartnerId(), 
                rowCfdiImport.getItem().getPkItemId());
            
            if (key == 0) {
                match.setConceptKey(rowCfdiImport.getConcepto().getAttNoIdentificacion().getString());
                match.setConceptProductService(rowCfdiImport.getConcepto().getAttClaveProdServ().getString());
                match.setFactorConversion(rowCfdiImport.getConvFactor());
                match.setUses(1);
                match.setUseFirst(miClient.getSession().getSystemDate());
                match.setUseLast(miClient.getSession().getSystemDate());
                match.setIsDeleted(false);
                match.setFkBizPartnerId(moBizPartnerEmisor.getPkBizPartnerId());
                match.setFkItemId(rowCfdiImport.getItem().getPkItemId());
                match.setFkUnitId(rowCfdiImport.getUnit().getPkUnitId());
                match.setFkTaxRegionId(rowCfdiImport.getTaxRegion().getPkTaxRegionId());
                match.setFkItemRefId_n(rowCfdiImport.getReferenceItem() == null ? 0 : rowCfdiImport.getReferenceItem().getPkItemId());
                match.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                match.setFkCostCenterId_n(rowCfdiImport.getCostCenter() == null ? "" : rowCfdiImport.getCostCenter().getPkCostCenterIdXXX());
            }
            else {
                match.read(key, miClient.getSession().getStatement());
                match.setFactorConversion(rowCfdiImport.getConvFactor());
                match.setUses(match.getUses() + 1);
                match.setUseLast(miClient.getSession().getSystemDate());
                match.setFkUnitId(rowCfdiImport.getUnit().getPkUnitId());
                match.setFkTaxRegionId(rowCfdiImport.getTaxRegion().getPkTaxRegionId());
                match.setFkItemRefId_n(rowCfdiImport.getReferenceItem() == null ? 0 : rowCfdiImport.getReferenceItem().getPkItemId());
                match.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                match.setFkCostCenterId_n(rowCfdiImport.getCostCenter() == null ? "" : rowCfdiImport.getCostCenter().getPkCostCenterIdXXX());
            }
            match.save(miClient.getSession().getStatement().getConnection());
        }
        catch (Exception e){
            SLibUtils.printException(this, e);
        }
    }
    
    /**
     * Devuelve el dps renderizado.
     * @return 
     */
    public SDataDps getDps() { return moDpsNew; }
    
    @Override
    public void valueChanged(ListSelectionEvent e) { 
        if (!e.getValueIsAdjusting()) {
            if (moConceptTablePane.getTable().getSelectedRow() > -1) {
                setCfdiTaxesTableValues(moConceptTablePane.getTable().getSelectedRow());
                setSiieTaxesTableValues((SRowCfdiImport33) moConceptTablePane.getSelectedTableRow());
                if (mbWithPurchaseOrder) {
                    setPurchaseOrderPanelValues();
                }
                setEnabledButtons((SRowCfdiImport33) moConceptTablePane.getSelectedTableRow());
                setIsItemNameEditable((SRowCfdiImport33) moConceptTablePane.getSelectedTableRow());
            }
            else {
                setEnabledButtons(null);
            }
        }
    }
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbCopyRow) {
                actionCopyRow();
            }
            else if (button == jbPasteRow) {
                actionPasteRow();
            }
            else if (button == jbTaxesRegion) {
                actionTaxesRegion();
            }
            else if (button == jbSelectItem) {
                actionSelectItem(ITEM_MAIN);
            }
            else if (button == jbChangeUnit) {
                actionChangeUnit();
            }
            else if (button == jbChangeTaxesRegion) {
                actionChangeTaxesRegion();
            }
            else if (button == jbOpsType) {
                actionOpsType();
            }
            else if (button == jbCostCenter) {
                actionCostCenter();
            }
            else if (button == jbSelectReferenceItem) {
                actionSelectItem(ITEM_REF);
            }
            else if (button == jbSelectPurchaseOrder) {
                actionSelectPurchaseOrder();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        if (moConceptTablePane.getTable().getSelectedColumn() == COL_ITEM_NAME) {
            updateNameItem();
        }
        else if (moConceptTablePane.getTable().getSelectedColumn() == COL_FACT_CONV) {
            updateConvFact();
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
    }
}
