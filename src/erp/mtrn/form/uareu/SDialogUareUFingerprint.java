/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogFilterDocumentType.java
 *
 */

package erp.mtrn.form.uareu;

import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.SwingUtilities;
import sa.lib.SLibConsts;

/**
 *
 * @author Sergio Flores, Claudio Peña
 */
public class SDialogUareUFingerprint extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {
    
    public static final int VALUE_FINGERPRINT = 1;
    public static final int VALUE_FINGERPRINT_USR = 2;
    public static final int MODE_ENROLLMENT = 1;
    public static final int MODE_VERIFICATION = 2;
    public static final int MODE_GET_FINGERPRINT_USR = 3;
    public static final String TEMPLATE_PROPERTY = "template";

    private final erp.client.SClientInterface miClient;
    private final int mnMode;
    private int mnFormResult;
    private boolean mbFirstTime;
    private int mnMaintUserId;

    private DPFPTemplate moFpTemplate;          // to handle fingerprints
    private DPFPCapture moFpCapture;            // to handle DigitalPersona device
    private DPFPEnrollment moFpEnrollment;      // to create fingerprint templates
    private DPFPVerification moFPVerification;  // to verify fingerprint templates
    
    /** Creates new form SDialogUareUFingerprint
     * @param client GUI client.
     * @param mode Dialog mode: MODE_ENROLLMENT or MODE_VERIFICATION.
     */
    public SDialogUareUFingerprint(erp.client.SClientInterface client, int mode) {
        super(client.getFrame(), true);
        miClient = client;
        mnMode = mode;
                 
        initComponents();
        initComponentsExtra();    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpFingerprint = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jtfMode = new javax.swing.JTextField();
        jspMessages = new javax.swing.JScrollPane();
        jtaMessages = new javax.swing.JTextArea();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DigitalPersona U.are.U 4500 Fingerprint Reader");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpFingerprint.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jtfMode.setEditable(false);
        jtfMode.setFocusable(false);
        jtfMode.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel2.add(jtfMode);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jtaMessages.setColumns(20);
        jtaMessages.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jtaMessages.setRows(5);
        jspMessages.setViewportView(jtaMessages);

        jPanel1.add(jspMessages, java.awt.BorderLayout.CENTER);

        jpFingerprint.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpFingerprint, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(492, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setEnabled(false);
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(496, 339));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        switch (mnMode) {
            case MODE_ENROLLMENT:
                jtfMode.setText("CREAR HUELLA DIGITAL");
                break;
            case MODE_VERIFICATION:
                jtfMode.setText("VERIFICAR HUELLA DIGITAL");
                break;
            default:
        }
        
        moFpCapture = DPFPGlobal.getCaptureFactory().createCapture();
        
        moFpCapture.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        appendMessage("Huella digital leída.");
                        processCapture(e.getSample());
                    }
                });
            }
        });

        moFpCapture.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        appendMessage("Lector de huella digital conectado.");
                    }
                });
            }

           @Override 
           public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        appendMessage("Lector de huella digital desconectado.");
                    }
                });
            }
        });

        moFpCapture.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        appendMessage("Error en lector de huella digital: " + e.getError());
                    }
                });
            }
        });
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }
    
    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            startFpReader();
        }
    }
    
    private void startFpReader() {
        switch (mnMode) {
            case MODE_ENROLLMENT:
                moFpEnrollment = DPFPGlobal.getEnrollmentFactory().createEnrollment();
                break;
            case MODE_VERIFICATION:
                moFPVerification = DPFPGlobal.getVerificationFactory().createVerification();
                break;
            default:
        }
        
        moFpCapture.startCapture();
        jtaMessages.setText("Lector de huella digital encendido.\n");
    }

    private void stopFpReader() {
        moFpCapture.stopCapture();
        appendMessage("Lector de huella digital apagado.");
    }

    private void appendMessage(String message) {
        jtaMessages.append(message + "\n");
    }

    private DPFPFeatureSet extractFeatures(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureSet featureSet = null;
        
        try {
            DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
            featureSet = extractor.createFeatureSet(sample, purpose);
        } 
        catch (DPFPImageQualityException e) {
            SLibUtilities.renderException(this, e);
        }
        
        return featureSet;
    }
    
    private boolean verifyAgainstDatabase(DPFPFeatureSet featureSet) throws Exception {
        boolean matchFound = false;
        moFPVerification = DPFPGlobal.getVerificationFactory().createVerification();
        // Consulta a la base de datos para obtener todas las plantillas
        String sql = "SELECT id_maint_user, fingerprint_n FROM trn_maint_user WHERE NOT b_del AND fingerprint_n IS NOT NULL";
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            while (resultSet.next()) {
                byte[] storedTemplateData = resultSet.getBytes("fingerprint_n");
                if (storedTemplateData != null) {
                    DPFPTemplate storedTemplate = DPFPGlobal.getTemplateFactory().createTemplate(storedTemplateData);
                    DPFPVerificationResult result = moFPVerification.verify(featureSet, storedTemplate);
                    if (result.isVerified()) {
                        appendMessage("Coincidencia encontrada con una huella registrada.");
                        mnMaintUserId = resultSet.getInt("id_maint_user");
                        matchFound = true;
                        break;
                    }
                }
            }
        }
        if (!matchFound) {
            appendMessage("No se encontró coincidencia con ninguna huella registrada.");
        }
        
        return matchFound;
    }
    
    public void processCapture(final DPFPSample sample) {
        switch (mnMode) {
            case MODE_ENROLLMENT:
                try {
                    DPFPFeatureSet featureSet = extractFeatures(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
                    
                    if (featureSet == null) {
                        throw new Exception("No fue posible obtener los atributos de la muestra de huella digital.");
                    }

                    moFpEnrollment.addFeatures(featureSet);
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
                finally {
                    switch(moFpEnrollment.getTemplateStatus()) {
                        case TEMPLATE_STATUS_READY:
                            moFpTemplate = moFpEnrollment.getTemplate();
                            miClient.showMsgBoxInformation("Plantilla de huella digital creada exitosamente.");
                            actionOk();
                            break;

                        case TEMPLATE_STATUS_FAILED:
                            miClient.showMsgBoxInformation("No fue posible crear la plantilla de huella digital.");
                            actionCancel();
                            break;

                        case TEMPLATE_STATUS_INSUFFICIENT:
                            if (moFpEnrollment.getFeaturesNeeded() != 0) {
                                appendMessage("Restan " + moFpEnrollment.getFeaturesNeeded() + " intentos de captura de huella digital para crear la plantilla.");
                            } 
                            break;

                        case TEMPLATE_STATUS_UNKNOWN:
                            appendMessage("Estatus desconocido del lector de huella digital.");
                            break;

                        default:
                            appendMessage(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }
                break;
                
            case MODE_VERIFICATION:
                try {
                    DPFPFeatureSet featureSet = extractFeatures(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
                    
                    if (featureSet == null) {
                        throw new Exception("No fue posible obtener los atributos de la muestra de huella digital.");
                    }

                    DPFPVerificationResult result = moFPVerification.verify(featureSet, moFpTemplate);

                    if (result.isVerified()) {
                        actionOk();
                    }
                    else {
                        miClient.showMsgBoxInformation("No fue posible verificar la huella digital.\nIntenta de nuevo.");
                    }
                } 
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
                break;
                
            case MODE_GET_FINGERPRINT_USR:
                try {
                    DPFPFeatureSet featureSet = extractFeatures(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
                    
                    if (featureSet == null) {
                        throw new Exception("No fue posible obtener los atributos de la muestra de huella digital.");
                    }
                    
                    // Comparar con todas las huellas en la base de datos
                    boolean matchFound = verifyAgainstDatabase(featureSet);
                    if (matchFound) {
                        actionOk();
                    }
                    else {
                        miClient.showMsgBoxInformation("No se encontró coincidencia con ninguna huella registrada.\nIntenta de nuevo.");
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
                
            default:
        }
    }

    /*
    * @param args the command line arguments
    */

    public void actionOk() {
        stopFpReader();
        mnFormResult = SLibConstants.FORM_RESULT_OK;
        setVisible(false);
    }

    public void actionCancel() {
        stopFpReader();
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpFingerprint;
    private javax.swing.JScrollPane jspMessages;
    private javax.swing.JTextArea jtaMessages;
    private javax.swing.JTextField jtfMode;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        
        moFpTemplate = null;
        moFpEnrollment = null;
        moFPVerification = null;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case VALUE_FINGERPRINT:
                moFpTemplate = DPFPGlobal.getTemplateFactory().createTemplate((byte[]) value);
                break;
            default:
                miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        Object value = null;
        
        switch (type) {
            case VALUE_FINGERPRINT:
                value = moFpTemplate.serialize();
                break;
                
            case VALUE_FINGERPRINT_USR:
                value = mnMaintUserId;
                break;
                
            default:
                miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
        
        return value;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }
 
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }           
        }
    }
}
