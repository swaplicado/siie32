/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogStockLots.java
 *
 * Created on 8/02/2012, 08:38:22 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableCellEditorDate;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mcfg.data.SDataParamsCompany;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mod.qlt.utils.SQltUtils;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataStockLot;
import erp.mtrn.data.STrnStockLotRow;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;

/**
 *
 * @author Sergio Flores, Uriel Castañeda, Sergio Flores
 */
public class SDialogStockLots extends javax.swing.JDialog implements ActionListener, CellEditorListener {

    private static final int ROWS = 256;
    private static final int COL_ROW = 0;
    private static final int COL_QTY = 1;
    private static final int COL_LOT = 2;
    private static final int COL_DATE_EXP = 3;

    private int mnFormResult;
    private int mnFormStatus;
    private int mnFormMode;
    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneLots;

    private int mnParamYear;
    private int mnParamIogCategoryId;
    private int[] manParamWarehouseKey;
    private int[] manParamIogKey_n;
    private double mdParamQuantity;
    private double mdQuantityTotal;
    private Date moMoveDate;
    private erp.mitm.data.SDataItem moParamItem;
    private erp.mitm.data.SDataUnit moParamUnit;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;
    private erp.lib.table.STableCellEditorDate moTableCellEditorDate;
    private erp.mtrn.data.SDataDps moParamDps;

    /**
     * Creates new form SDialogStockLots
     * @param client GUI client interface.
     * @param mode Dialog mode (quantity or extended quantity). Constants defined in SLibConstants (i.e. MODE_QTY, MODE_QTY_EXT).
     */
    public SDialogStockLots(erp.client.SClientInterface client, int mode) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormMode = mode;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpItem = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItemKey = new javax.swing.JTextField();
        jtfItem = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        jtfQuantity = new javax.swing.JTextField();
        jtfQuantityUnitSymbol = new javax.swing.JTextField();
        jlDiogCategory = new javax.swing.JLabel();
        jtfDiogCategory = new javax.swing.JTextField();
        jpLots = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbPickLot = new javax.swing.JButton();
        jbCleanLot = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jtfCurrentEntry = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlQuantityTotal = new javax.swing.JLabel();
        jtfQuantityTotal = new javax.swing.JTextField();
        jtfQuantityTotalUnitSymbol = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Captura de lotes");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpItem.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de los lotes:"));
        jpItem.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jlItem);

        jtfItemKey.setEditable(false);
        jtfItemKey.setText("TEXT");
        jtfItemKey.setFocusable(false);
        jtfItemKey.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jtfItemKey);

        jtfItem.setEditable(false);
        jtfItem.setText("TEXT");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel4.add(jtfItem);

        jpItem.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("Cantidad req.:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jlQuantity);

        jtfQuantity.setEditable(false);
        jtfQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantity.setText("0.00");
        jtfQuantity.setFocusable(false);
        jtfQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfQuantity);

        jtfQuantityUnitSymbol.setEditable(false);
        jtfQuantityUnitSymbol.setText("TEXT");
        jtfQuantityUnitSymbol.setFocusable(false);
        jtfQuantityUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel5.add(jtfQuantityUnitSymbol);

        jlDiogCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDiogCategory.setText("Categoría movimiento:");
        jlDiogCategory.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel5.add(jlDiogCategory);

        jtfDiogCategory.setEditable(false);
        jtfDiogCategory.setText("TEXT");
        jtfDiogCategory.setFocusable(false);
        jtfDiogCategory.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfDiogCategory);

        jpItem.add(jPanel5);

        getContentPane().add(jpItem, java.awt.BorderLayout.NORTH);

        jpLots.setBorder(javax.swing.BorderFactory.createTitledBorder("Lotes:"));
        jpLots.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbPickLot.setText("Elegir lote");
        jbPickLot.setToolTipText("Elegir lote [F5]");
        jbPickLot.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbPickLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbPickLot);

        jbCleanLot.setText("Limpiar lote");
        jbCleanLot.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbCleanLot);

        jbCleanAll.setText("Limpiar todo");
        jbCleanAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jbCleanAll);

        jPanel3.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jtfCurrentEntry.setEditable(false);
        jtfCurrentEntry.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfCurrentEntry.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfCurrentEntry.setText("Entry 0 of 0");
        jtfCurrentEntry.setFocusable(false);
        jtfCurrentEntry.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jtfCurrentEntry);

        jPanel3.add(jPanel6, java.awt.BorderLayout.WEST);

        jpLots.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpLots, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        jpControls.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlQuantityTotal.setText("Cantidad total:");
        jlQuantityTotal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlQuantityTotal);

        jtfQuantityTotal.setEditable(false);
        jtfQuantityTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityTotal.setText("0.00");
        jtfQuantityTotal.setFocusable(false);
        jtfQuantityTotal.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jtfQuantityTotal);

        jtfQuantityTotalUnitSymbol.setEditable(false);
        jtfQuantityTotalUnitSymbol.setText("TEXT");
        jtfQuantityTotalUnitSymbol.setFocusable(false);
        jtfQuantityTotalUnitSymbol.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel7.add(jtfQuantityTotalUnitSymbol);

        jpControls.add(jPanel7, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-568)/2, (screenSize.height-384)/2, 568, 384);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int col = 0;
        STableColumnForm[] columns = null;

        col = 0;
        columns = new STableColumnForm[4];
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);

        if (mnFormMode == SLibConstants.MODE_QTY_EXT) {
            columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY_2X);
            columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        }
        else {
            columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad", STableConstants.WIDTH_QUANTITY);
            columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        }

        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Lote", 150);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Caducidad", STableConstants.WIDTH_DATE);

        moPaneLots = new STablePane(miClient);
        jpLots.add(moPaneLots, BorderLayout.CENTER);

        for (STableColumnForm column : columns) {
            moPaneLots.addTableColumn(column);
        }

        moTableCellEditorDate = new STableCellEditorDate(miClient);

        moPaneLots.createTable();
        moPaneLots.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);
        moPaneLots.getTable().getDefaultEditor(String.class).addCellEditorListener(this);
        moPaneLots.getTable().setDefaultEditor(Date.class, moTableCellEditorDate);
        moPaneLots.getTable().getTableHeader().setReorderingAllowed(false);
        moPaneLots.getTable().getTableHeader().setResizingAllowed(false);

        moPickerStockLots = new SDialogPickerStockLots(miClient, true);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPickLot.addActionListener(this);
        jbCleanLot.addActionListener(this);
        jbCleanAll.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
        SFormUtilities.createActionMap(rootPane, this, "actionImport", "import", KeyEvent.VK_F5, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (mnFormStatus == SLibConstants.FORM_STATUS_EDIT) {
                moPaneLots.getTable().requestFocus();
            }
            else {
                jbCancel.requestFocus();
            }
        }
    }

    private void initStockLots() {
        STrnStockMove stockMove = null;
        moPaneLots.clearTableRows();

        for (int num = 1; num <= ROWS; num++) {
            stockMove = new STrnStockMove(new int[6], 0);
            stockMove.setAuxRowNumber(num);
            moPaneLots.addTableRow(new STrnStockLotRow(stockMove, STrnStockLotRow.TYPE_QTY));
        }

        moPaneLots.renderTableRows();
        moPaneLots.setTableRowSelection(0);
        moPaneLots.setTableColumnSelection(COL_QTY);
    }

    private void computePaneEdition() {
        STrnStockMove stockMove = null;

        for (STableRow row : moPaneLots.getTableModel().getTableRows()) {
            stockMove = (STrnStockMove) row.getData();

            stockMove.setQuantity(row.getValues().get(COL_QTY) == null ? 0 : (Double) row.getValues().get(COL_QTY));
            stockMove.setAuxLot(row.getValues().get(COL_LOT) == null ? "" : SLibUtils.textLeft((String) row.getValues().get(COL_LOT), SDataStockLot.LEN_LOT));
            stockMove.setAuxLotDateExpiration((Date) row.getValues().get(COL_DATE_EXP));
        }
    }

    private void computeQuantity() {
        String msg = "";

        mdQuantityTotal = 0;

        for (STableRow row : moPaneLots.getTableModel().getTableRows()) {
            mdQuantityTotal += ((Double) row.getValues().get(COL_QTY));
        }

        if (mnFormMode == SLibConstants.MODE_QTY_EXT) {
            jtfQuantityTotal.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdQuantityTotal));
        }
        else {
            jtfQuantityTotal.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityTotal));
        }

        jtfQuantityTotal.setCaretPosition(0);

        if (mdQuantityTotal > mdParamQuantity) {
            if (mnFormMode == SLibConstants.MODE_QTY_EXT) {
                msg = "El valor del campo '" + jlQuantityTotal.getText() + "' debe ser igual al del campo '" + jlQuantity.getText() + "'.\n" +
                    "La cantidad total (" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdQuantityTotal) + " " + jtfQuantityUnitSymbol.getText() + ") " +
                    "es mayor a la cantidad requerida (" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdParamQuantity) + " " + jtfQuantityTotalUnitSymbol.getText() + ").";
            }
            else {
                msg = "El valor del campo '" + jlQuantityTotal.getText() + "' debe ser igual al del campo '" + jlQuantity.getText() + "'.\n" +
                    "La cantidad total (" + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityTotal) + " " + jtfQuantityUnitSymbol.getText() + ") " +
                    "es mayor a la cantidad requerida (" + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdParamQuantity) + " " + jtfQuantityTotalUnitSymbol.getText() + ").";
            }

            miClient.showMsgBoxWarning(msg);
            moPaneLots.getTable().requestFocus();
        }
    }

    private void processEditingStoppedQuantity() {
        computeQuantity();
    }

    private void processEditingStoppedLot() {
        int row = moPaneLots.getTable().getSelectedRow();
        int col = moPaneLots.getTable().getSelectedColumn();

        moPaneLots.getTableModel().setValueAt(((String) moPaneLots.getTableModel().getValueAt(row, col)).toUpperCase(), row, col);
    }

    private void processEditingStoppedDateExpiration() {

    }

    private void computeClose() {
        if (moPaneLots.getTable().isEditing()) {
            moPaneLots.getTable().getCellEditor().cancelCellEditing();
        }
    }

    private boolean qualityValidationAprove(STrnStockMove stockMove) {
        boolean isValid = true;
        
        if (((SDataParamsCompany) miClient.getSession().getConfigCompany()).getIsLotApprovalRequired()) {
            if (mnParamIogCategoryId == SDataConstantsSys.TRNS_CT_IOG_IN && moParamDps != null && moParamDps.isForPurchases()) {
                isValid = SQltUtils.checkLotApproved((SGuiClient) miClient, moMoveDate ,moParamDps.getFkBizPartnerId_r(), stockMove);
            }
        }
        
        return isValid;
    }
    
    public void actionPickLot() {
        int index = 0;
        int[] olderLot = null;
        double quantityPicked = 0;
        double quantityCurrent = 0;
        STableRow rowCurrent = null;
        STrnStockMove movePicked = null;
        STrnStockMove moveCurrent = null;

        if (jbPickLot.isEnabled()) {
            if (mdQuantityTotal > mdParamQuantity) {
                miClient.showMsgBoxInformation("La cantidad requerida ya está capturada.");
            }
            else {
                rowCurrent = moPaneLots.getSelectedTableRow();

                if (rowCurrent == null) {
                    miClient.showMsgBoxInformation(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
                }
                else {
                    moPickerStockLots.formReset();
                    moPickerStockLots.setFormParams(mnParamYear, moParamItem.getPkItemId(), moParamUnit.getPkUnitId(), manParamWarehouseKey, manParamIogKey_n);
                    moPickerStockLots.setVisible(true);

                    if (moPickerStockLots.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                        computePaneEdition();   // updates user edition into internal pane data objects

                        movePicked = moPickerStockLots.getSelectecStockMove();
                        
                        if (!qualityValidationAprove(movePicked)) {
                            miClient.showMsgBoxInformation("El lote no está aprobado.");
                        }
                        else {
                            moveCurrent = (STrnStockMove) rowCurrent.getData();
                            quantityCurrent = rowCurrent.getValues().get(COL_QTY) == null ? 0 : (Double) rowCurrent.getValues().get(COL_QTY);

                            if (mnParamIogCategoryId == SDataConstantsSys.TRNS_CT_IOG_IN) {
                                // Incoming items:

                                quantityPicked = mdParamQuantity - (mdQuantityTotal - quantityCurrent);
                            }
                            else {
                                // Outgoing items:

                                quantityPicked = movePicked.getQuantity() <= (mdParamQuantity - (mdQuantityTotal - quantityCurrent)) ? movePicked.getQuantity() : (mdParamQuantity - (mdQuantityTotal - quantityCurrent));
                            }

                            if (quantityPicked <= 0) {
                                quantityPicked = 0;
                            }

                            if (quantityCurrent == 0 || quantityCurrent > quantityPicked) {
                                moveCurrent.setQuantity(quantityPicked);
                            }

                            moveCurrent.setAuxLot(movePicked.getAuxLot());

                            if (mnParamIogCategoryId == SDataConstantsSys.TRNS_CT_IOG_OUT) { 
                                try {
                                    olderLot = STrnUtilities.obtainOlderLot(miClient, movePicked.getWarehouseKey(), movePicked.getPkItemId(), movePicked.getPkUnitId());

                                    if (movePicked.getAuxLotDateExpiration() != null && !SLibUtils.compareKeys(olderLot, movePicked.getLotKey())) {
                                       miClient.showMsgBoxWarning("El lote seleccionado no es el más próximo a caducar.");
                                    }
                                }
                                catch (Exception e) {
                                   SLibUtils.showException(this, e);
                                }
                            }

                            moveCurrent.setAuxLotDateExpiration(movePicked.getAuxLotDateExpiration());

                            rowCurrent.prepareTableRow();

                            index = moPaneLots.getTable().getSelectedRow();
                            moPaneLots.renderTableRows();
                            moPaneLots.setTableRowSelection(index);

                            computeQuantity();
                            moPaneLots.getTable().requestFocus();
                        }
                    }
                }
            }
        }
    }

    public void actionCleanLot() {
        int index = 0;
        STrnStockMove stockMove = null;

        if (jbCleanLot.isEnabled()) {
            index = moPaneLots.getTable().getSelectedRow();

            if (index != -1) {
                stockMove = (STrnStockMove) moPaneLots.getTableRow(index).getData();
                stockMove.setStockMoveKey(new int[6]);
                stockMove.setQuantity(0);
                stockMove.setValue(0);
                stockMove.setAuxLot("");
                stockMove.setAuxIsLotBlocked(false);
                stockMove.setAuxLotDateExpiration(null);
                moPaneLots.getTableRow(index).prepareTableRow();

                moPaneLots.renderTableRows();
                moPaneLots.setTableRowSelection(index);
                moPaneLots.setTableColumnSelection(COL_QTY);

                computeQuantity();
                moPaneLots.getTable().requestFocus();
            }
        }
    }

    public void actionCleanAll() {
        if (jbCleanAll.isEnabled()) {
            if (miClient.showMsgBoxConfirm("¿Está seguro que desea limpiar todas las capturas?") == JOptionPane.YES_OPTION) {
                initStockLots();

                computeQuantity();
                moPaneLots.getTable().requestFocus();
            }
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            miClient.showMsgBoxWarning(validation.getMessage());
        }
        else {
            computeClose();
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        computeClose();
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JButton jbCleanLot;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPickLot;
    private javax.swing.JLabel jlDiogCategory;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlQuantityTotal;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpItem;
    private javax.swing.JPanel jpLots;
    private javax.swing.JTextField jtfCurrentEntry;
    private javax.swing.JTextField jtfDiogCategory;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemKey;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JTextField jtfQuantityTotal;
    private javax.swing.JTextField jtfQuantityTotalUnitSymbol;
    private javax.swing.JTextField jtfQuantityUnitSymbol;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final int iogCategoryId, final int year, final int itemId, final int unitId, 
            final int[] warehouseKey, final int[] iogKey_n, final double quantity, final int formStatus, int mode) {
        setFormParams(iogCategoryId, year, itemId, unitId, warehouseKey, iogKey_n, quantity, formStatus, mode, null, null);
    }
    
    public void setFormParams(final int iogCategoryId, final int year, final int itemId, final int unitId, 
            final int[] warehouseKey, final int[] iogKey_n, final double quantity, final int formStatus, int mode, final SDataDps dps, final Date moveDate) {
        boolean enable = formStatus == SLibConstants.FORM_STATUS_EDIT;

        mnParamYear = year;
        mnParamIogCategoryId = iogCategoryId;
        manParamWarehouseKey = warehouseKey;        
        manParamIogKey_n = iogKey_n;
        mnFormStatus = formStatus;
        mnFormMode = mode;
        
        moParamDps = dps;
        
        moMoveDate = moveDate;

        jtfDiogCategory.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNS_CT_IOG, new int[] { mnParamIogCategoryId }));
        jtfDiogCategory.setCaretPosition(0);

        if (itemId == SLibConstants.UNDEFINED) {
            moParamItem = null;
            moParamUnit = null;
            mdParamQuantity = 0;

            jtfItem.setText("");
            jtfItemKey.setText("");
            jtfQuantity.setText("");
            jtfQuantityUnitSymbol.setText("");
            jtfQuantityTotalUnitSymbol.setText("");
        }
        else {
            moParamItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { itemId }, SLibConstants.EXEC_MODE_VERBOSE);
            moParamUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { unitId }, SLibConstants.EXEC_MODE_VERBOSE);
            mdParamQuantity = quantity;

            jtfItem.setText(moParamItem.getItem());
            jtfItem.setToolTipText(moParamItem.getItem());
            jtfItemKey.setText(moParamItem.getKey());
            jtfItemKey.setToolTipText(moParamItem.getKey());
            jtfQuantity.setText(mnFormMode == SLibConstants.MODE_QTY_EXT ? miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdParamQuantity) : miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdParamQuantity));
            jtfQuantityUnitSymbol.setText(moParamUnit.getSymbol());
            jtfQuantityTotalUnitSymbol.setText(moParamUnit.getSymbol());

            jtfItem.setCaretPosition(0);
            jtfItemKey.setCaretPosition(0);
            jtfQuantityUnitSymbol.setCaretPosition(0);
            jtfQuantityTotalUnitSymbol.setCaretPosition(0);
        }

        jbPickLot.setEnabled(enable);
        jbCleanLot.setEnabled(enable);
        jbCleanAll.setEnabled(enable);
        jbOk.setEnabled(enable);
        jbCancel.setText(enable ? SLibConstants.TXT_CANCEL : SLibConstants.TXT_CLOSE);

        moPaneLots.getTableColumn(COL_QTY).setEditable(enable);
        moPaneLots.getTableColumn(COL_LOT).setEditable(enable);
        moPaneLots.getTableColumn(COL_DATE_EXP).setEditable(enable && mnParamIogCategoryId == SDataConstantsSys.TRNS_CT_IOG_IN);

        setDecimals();
        initStockLots();
        computeQuantity();
    }

    public void setDecimals() {
        DefaultTableCellRenderer tcr = mnFormMode == SLibConstants.MODE_QTY ?
            miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity() :
            miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary();

        moPaneLots.getTableColumn(COL_QTY).setCellRenderer(tcr);
        moPaneLots.renderTableRows();
    }

    public void setCurrentEntry(int currentEntry, int totalEntries) {
        jtfCurrentEntry.setText("Partida " + currentEntry + " de " + totalEntries);
        jtfCurrentEntry.setToolTipText("Partida actual");
    }

    public void setStockMoves(java.util.Vector<erp.mtrn.data.STrnStockMove> stockMoves) throws java.lang.Exception {
        STrnStockMove stockMoveSource = null;
        STrnStockMove stockMoveDestiny = null;

        if (stockMoves == null) {
            throw new Exception("No se han especificado los movimientos de inventarios.");
        }
        else if (stockMoves.size() > ROWS) {
            throw new Exception("No se pueden procesar los movimientos de inventarios porque son más de " + ROWS + " registros.");
        }
        else {
            initStockLots();

            for (int i = 0; i < stockMoves.size(); i++) {
                stockMoveSource = stockMoves.get(i);
                stockMoveDestiny = (STrnStockMove) ((STrnStockLotRow) moPaneLots.getTableRow(i)).getData();
                stockMoveDestiny.setStockMoveKey(stockMoveSource.getStockMoveKey());
                stockMoveDestiny.setQuantity(stockMoveSource.getQuantity());
                stockMoveDestiny.setAuxLot(stockMoveSource.getAuxLot());
                stockMoveDestiny.setAuxLotDateExpiration(stockMoveSource.getAuxLotDateExpiration());
                ((STrnStockLotRow) moPaneLots.getTableRow(i)).prepareTableRow();
            }

            moPaneLots.renderTableRows();
            moPaneLots.setTableRowSelection(0);
            moPaneLots.setTableColumnSelection(COL_QTY);

            computeQuantity();
        }
    }

    public java.util.Vector<erp.mtrn.data.STrnStockMove> getStockMoves() {
        STrnStockMove stockMove = null;
        Vector<STrnStockMove> stockMoves = new Vector<STrnStockMove>();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (STableRow row : moPaneLots.getTableModel().getTableRows()) {
            stockMove = (STrnStockMove) row.getData();

            if (stockMove.getQuantity() != 0) {
                stockMove.setPkYearId(mnParamYear);
                stockMove.setPkItemId(moParamItem.getPkItemId());
                stockMove.setPkUnitId(moParamItem.getFkUnitId());
                stockMove.setPkLotId(SLibConstants.UNDEFINED);  // XXX, on outgoing stock moves lot ID must be provided
                stockMove.setPkCompanyBranchId(manParamWarehouseKey[0]);
                stockMove.setPkWarehouseId(manParamWarehouseKey[1]);
                stockMoves.add(stockMove);
            }
        }

        return stockMoves;
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int getFormStatus() {
        return mnFormStatus;
    }

    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfCurrentEntry.setText("");
        jtfCurrentEntry.setToolTipText(null);
    }

    public erp.lib.form.SFormValidation formValidate() {
        int i = 0;
        int j = 0;
        int decs = 8;
        String lot = "";
        String msg = "";
        double quantity = 0;
        STrnStockMove stockMove = null;
        SFormValidation validation = new SFormValidation();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (i = 0; i < ROWS; i++) {
            stockMove = (STrnStockMove) moPaneLots.getTableRow(i).getData();
            stockMove.setPkItemId(moParamItem.getPkItemId());
            stockMove.setPkUnitId(moParamUnit.getPkUnitId());
            
            if (stockMove.getQuantity() == 0 && !stockMove.getAuxLot().isEmpty()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPaneLots.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (i + 1) + ".");
            }
            else if (stockMove.getQuantity() != 0 && stockMove.getAuxLot().isEmpty()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPaneLots.getTableColumn(COL_LOT).getColumnTitle() + "' en la fila " + (i + 1) + ".");
            }
            else if (stockMove.getAuxLotDateExpiration() == null && !stockMove.getAuxLot().isEmpty() && mnParamIogCategoryId == SDataConstantsSys.TRNS_CT_IOG_IN) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPaneLots.getTableColumn(COL_DATE_EXP).getColumnTitle() + "' en la fila " + (i + 1) + ".");
            }
            else if (stockMove.getAuxLotDateExpiration() != null && stockMove.getAuxLot().isEmpty()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPaneLots.getTableColumn(COL_LOT).getColumnTitle() + "' en la fila " + (i + 1) + ".");
            }
            else if (stockMove.getAuxLotDateExpiration() != null && stockMove.getAuxLot().isEmpty()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPaneLots.getTableColumn(COL_LOT).getColumnTitle() + "' en la fila " + (i + 1) + ".");
            }
            else if (!stockMove.getAuxLot().isEmpty() && stockMove.getAuxLot().length() > SDataStockLot.LEN_LOT) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneLots.getTableColumn(COL_LOT).getColumnTitle() + "' en la fila " + (i + 1) + ", no puede tener más de " + SDataStockLot.LEN_LOT + " carácteres.");
            }
            else if (stockMove.getQuantity() != 0 && !qualityValidationAprove(stockMove)) {
                validation.setMessage("El lote de la fila " + (i + 1) + " no está aprobado.");
            }
            else {
                quantity += stockMove.getQuantity();
            }

            if (validation.getIsError()) {
                validation.setComponent(moPaneLots.getTable());
                moPaneLots.setTableRowSelection(i);
                break;
            }
        }
        
        if (!validation.getIsError()) {
            if (SLibUtilities.round(quantity, decs) != SLibUtilities.round(mdParamQuantity, decs)) {
                if (mnFormMode == SLibConstants.MODE_QTY_EXT) {
                    msg = "El valor del campo '" + jlQuantityTotal.getText() + "' debe ser igual al del campo '" + jlQuantity.getText() + "'.\n" +
                        "La cantidad total (" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdQuantityTotal) + " " + jtfQuantityUnitSymbol.getText() + ") " +
                        "es diferente a la cantidad requerida (" + miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat().format(mdParamQuantity) + " " + jtfQuantityTotalUnitSymbol.getText() + ").";
                }
                else {
                    msg = "El valor del campo '" + jlQuantityTotal.getText() + "' debe ser igual al del campo '" + jlQuantity.getText() + "'.\n" +
                        "La cantidad total (" + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdQuantityTotal) + " " + jtfQuantityUnitSymbol.getText() + ") " +
                        "es diferente a la cantidad requerida (" + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(mdParamQuantity) + " " + jtfQuantityTotalUnitSymbol.getText() + ").";
                }

                validation.setMessage(msg);
                validation.setComponent(moPaneLots.getTable());
            }
            else {
                // Validate that lots are provided only once:

                BaseRow:
                for (i = 0; i < ROWS - 1; i++) {
                    lot = ((STrnStockMove) moPaneLots.getTableRow(i).getData()).getAuxLot();

                    if (lot.isEmpty()) {
                        continue;
                    }

                    for (j = i + 1; j < ROWS; j++) {
                        if (lot.compareTo(((STrnStockMove) moPaneLots.getTableRow(j).getData()).getAuxLot()) == 0) {
                            validation.setMessage("El valor del campo '" + moPaneLots.getTableColumn(COL_LOT).getColumnTitle() + "' es el mismo en la filas " + (i + 1) + " y " + (j + 1) + ": '" + lot + "'.");
                            validation.setComponent(moPaneLots.getTable());
                            moPaneLots.setTableRowSelection(j);
                            break BaseRow;
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPickLot) {
                actionPickLot();
            }
            else if (button == jbCleanLot) {
                actionCleanLot();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        switch (moPaneLots.getTable().getSelectedColumn()) {
            case COL_ROW:
                break;
            case COL_QTY:
                processEditingStoppedQuantity();
                break;
            case COL_LOT:
                processEditingStoppedLot();
                break;
            case COL_DATE_EXP:
                processEditingStoppedDateExpiration();
                break;
            default:
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {

    }
}
