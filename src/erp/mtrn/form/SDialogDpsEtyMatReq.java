/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mtrn.form;

import erp.lib.SLibConstants;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.mod.trn.db.SDbMaterialRequest;
import erp.mod.trn.db.SDbMaterialRequestEntry;
import erp.mtrn.data.SDataDpsEntry;
import erp.mtrn.data.STrnStockMove;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;

/**
 *
 * @author Edwin Carmona
 */
public class SDialogDpsEtyMatReq extends javax.swing.JDialog implements ActionListener {

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItem moParamItem;
    private erp.mitm.data.SDataUnit moParamUnit;
    private erp.mtrn.form.SPanelMaterialRequest moPanelMatRequest;
    private erp.mtrn.form.SPanelMaterialRequestEntry moPanelMatRequestEty;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;
    private erp.lib.table.STableCellEditorDate moTableCellEditorDate;
    private erp.mtrn.data.SDataDps moParamDps;

    /**
     * Creates new form SDialogStockLots
     * @param client GUI client interface.
     */
    public SDialogDpsEtyMatReq(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMaterialRequest = new javax.swing.JPanel();
        jpDpsMatReqEty = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vínculo de partida de requisición");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpMaterialRequest.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpMaterialRequest.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpMaterialRequest, java.awt.BorderLayout.NORTH);

        jpDpsMatReqEty.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jpDpsMatReqEty.setLayout(new java.awt.BorderLayout(0, 5));
        getContentPane().add(jpDpsMatReqEty, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        jpControls.add(jPanel1, java.awt.BorderLayout.EAST);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(736, 489));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moPanelMatRequest = new SPanelMaterialRequest(miClient, "de origen");
        jpMaterialRequest.add(moPanelMatRequest, BorderLayout.NORTH);
        
        moPanelMatRequestEty = new SPanelMaterialRequestEntry(miClient, "de origen");
        jpDpsMatReqEty.add(moPanelMatRequestEty, BorderLayout.NORTH);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
        SFormUtilities.createActionMap(rootPane, this, "actionImport", "import", KeyEvent.VK_F5, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (mnFormStatus == SLibConstants.FORM_STATUS_EDIT) {
                
            }
            else {
                jbCancel.requestFocus();
            }
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            miClient.showMsgBoxWarning(validation.getMessage());
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDpsMatReqEty;
    private javax.swing.JPanel jpMaterialRequest;
    // End of variables declaration//GEN-END:variables

    public void setFormParams(final int[] pkMaterialRequestEntry, int[] dpsPk, final int[] pkType, double quantity) {
        try {
            if (pkMaterialRequestEntry == null) {
                return;
            }
            
            SDbMaterialRequest oMaterialRequest = new SDbMaterialRequest();
            oMaterialRequest.read(miClient.getSession(), new int[] { pkMaterialRequestEntry[0] });
            moPanelMatRequest.setMaterialRequest(oMaterialRequest);
            
            SDbMaterialRequestEntry oMaterialRequestEty = new SDbMaterialRequestEntry();
            oMaterialRequestEty.read(miClient.getSession(), pkMaterialRequestEntry);
            
            moPanelMatRequestEty.setDialogData(oMaterialRequestEty, dpsPk, pkType, quantity);
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogDpsEtyMatReq.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        
        moPanelMatRequest.setMaterialRequest(null);
        moPanelMatRequestEty.setDialogData(null, null, null, 0d);
    }

    public erp.lib.form.SFormValidation formValidate() {
        int i = 0;
        int j = 0;
        int decs = 8;
        String lot = "";
        String msg = "";
        double quantity = 0;
        STrnStockMove stockMove = null;
        SFormValidation validation = new SFormValidation();

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
