/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mtrn.form;

import erp.SClientUtils;
import erp.lib.SLibConstants;
import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SDialogCfdiPaymentPicker extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private final erp.client.SClientInterface miClient;

    private int mnDocYear;
    private int mnDocDoc;
   
    private int mnFormResult;
    
    /**
     * 
     * @param client
     * @throws java.lang.Exception
     */
    
    public SDialogCfdiPaymentPicker(erp.client.SClientInterface client) throws java.lang.Exception {
        super(client.getFrame(), true);
        miClient = client;
        
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jlCfdPayList = new javax.swing.JScrollPane();
        jlCfdList = new javax.swing.JList();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccionar CFDI de pagos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jlCfdPayList.setViewportView(jlCfdList);

        jPanel2.add(jlCfdPayList, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(576, 389));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void windowActivated() {
        
    }
    
    private void initComponentsExtra() {
        addListeners();
    }
    
    private void addListeners() {
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
    }
    
    
    
    private void actionOk() {
        try {
        jlCfdList.getSelectedValue();
            String sql = "INSERT INTO trn_dps_cfd_pay "
                            + "VALUES (" + mnDocYear + ", " + mnDocDoc + ", " + ((auxCfd)jlCfdList.getSelectedValue()).id + ", " + miClient.getSession().getUser().getPkUserId() + ", NOW())";                
            miClient.getSession().getStatement().execute(sql);
            miClient.showMsgBoxInformation("XML vinculado con exito.");
            setVisible(false);
        }
        catch (Exception e) {
            
        }
    }
    
    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JList jlCfdList;
    private javax.swing.JScrollPane jlCfdPayList;
    private javax.swing.JPanel jpControls;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    public void setValue(int bp, int year, int doc) {
        mnDocYear = year;
        mnDocDoc = doc;
        try {
            String sql = "SELECT * FROM " + SClientUtils.getComplementaryDbName(miClient.getSession().getDatabase().getConnection()) + ".trn_cfd_pay WHERE bp_id = " + bp + " "
                    + "ORDER BY id_cfd_pay DESC";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            DefaultListModel e = new DefaultListModel();
            jlCfdList.removeAll();
            jlCfdList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            while (resultSet.next()) {
                e.addElement(new auxCfd(resultSet.getString("doc_xml_name"), resultSet.getInt("id_cfd_pay")));
            }
            jlCfdList.setModel(e);
        }
        catch(Exception e) {
            miClient.showMsgBoxWarning(e.getMessage());
        }
    }
    
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }
    
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }        
    }
}

class auxCfd {
    public String name;
    public int id;
    
    auxCfd(String name, int id){
        this.name = name;
        this.id = id;
    }
    
    @Override
    public String toString() {
        return name;
    }
}