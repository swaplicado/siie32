/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartner;
import erp.mod.SModSysConsts;
import erp.mod.cfg.db.SDbMms;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.STrnDeliveryAckUtilities;
import static erp.mtrn.data.STrnUtilities.getMms;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector;
import javax.mail.MessagingException;
import javax.swing.JButton;
import javax.swing.JLabel;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.mail.SMail;
import sa.lib.mail.SMailSender;

/**
 *
 * @author Daniel López
 */
public class SDialogDpsDeliveryAckSend extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;
    private erp.mtrn.form.SPanelDps moPanelDps;
    private erp.mtrn.data.SDataDps moParamDps;

    private erp.lib.form.SFormField moFieldSubject;
    private erp.lib.form.SFormField moFieldTo;
    private erp.lib.form.SFormField moFieldCc;
    private erp.lib.form.SFormField moFieldBody;

    private SMailSender moMailSender = null;
    private ArrayList<File[]> maFiles = null;

    /**
     * Creates new form SDialogDpsDeliveryAckReasign
     * @param client
     */
    public SDialogDpsDeliveryAckSend(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpSend = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlSubject = new javax.swing.JLabel();
        jtfSubject = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlTo = new javax.swing.JLabel();
        jtfTo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlCc = new javax.swing.JLabel();
        jtfCc = new javax.swing.JTextField();
        jlAddingMultipleMailHelp = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jlBody = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaBody = new javax.swing.JTextArea();
        jpControls = new javax.swing.JPanel();
        jbSend = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Enviar acuse(s) de entrega");
        setMinimumSize(new java.awt.Dimension(357, 186));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpDps.setMinimumSize(new java.awt.Dimension(357, 153));
        jpDps.setPreferredSize(new java.awt.Dimension(881, 339));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpSend.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del correo electrónico:"));
        jpSend.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        jpSend.setMinimumSize(new java.awt.Dimension(345, 113));
        jpSend.setPreferredSize(new java.awt.Dimension(305, 56));
        jpSend.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSubject.setText("Asunto:*");
        jlSubject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jlSubject.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlSubject);

        jtfSubject.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel3.add(jtfSubject);

        jPanel1.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTo.setText("Para:*");
        jlTo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlTo);

        jtfTo.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel4.add(jtfTo);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCc.setText("CC:");
        jlCc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlCc);

        jtfCc.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel5.add(jtfCc);

        jlAddingMultipleMailHelp.setForeground(new java.awt.Color(109, 109, 109));
        jlAddingMultipleMailHelp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlAddingMultipleMailHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlAddingMultipleMailHelp.setToolTipText("Para varias cuentas de correo-e, separarlas con \";\", sin espacios, p. ej., \"ejemplo1@mail.com;ejemplo2@mail.com\"");
        jlAddingMultipleMailHelp.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jlAddingMultipleMailHelp);

        jPanel1.add(jPanel5);

        jpSend.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBody.setLabelFor(jtaBody);
        jlBody.setText("Contenido:*");
        jlBody.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jlBody.setMaximumSize(new java.awt.Dimension(18, 14));
        jlBody.setMinimumSize(new java.awt.Dimension(18, 14));
        jlBody.setPreferredSize(new java.awt.Dimension(100, 85));
        jPanel2.add(jlBody);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 85));

        jtaBody.setColumns(20);
        jtaBody.setLineWrap(true);
        jtaBody.setRows(5);
        jtaBody.setPreferredSize(new java.awt.Dimension(500, 50));
        jScrollPane1.setViewportView(jtaBody);

        jPanel2.add(jScrollPane1);

        jpSend.add(jPanel2, java.awt.BorderLayout.CENTER);

        jpDps.add(jpSend, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setMinimumSize(new java.awt.Dimension(161, 33));
        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbSend.setText("Enviar");
        jbSend.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbSend);

        jbCancel.setText("Cancelar");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(800, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moPanelDps = new SPanelDps(miClient);
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        //Create fields for validation
        moFieldSubject = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfSubject, jlSubject);
        moFieldTo = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfTo, jlTo);
        moFieldTo.setAutoCaseType(SLibConstants.CASE_LOWER);
        moFieldCc = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCc, jlCc);
        moFieldCc.setAutoCaseType(SLibConstants.CASE_LOWER);
        moFieldBody = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtaBody, jlBody);

        mvFields = new Vector<SFormField>();
        mvFields.add(moFieldSubject);
        mvFields.add(moFieldTo);
        mvFields.add(moFieldCc);
        mvFields.add(moFieldBody);
        
        obtainMailSender();

        jbSend.addActionListener(this);
        jbCancel.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "publicActionSend", "send", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
            if (moMailSender == null) {
                miClient.showMsgBoxWarning("No existe ningún correo-e configurado para envío de acuses de entrega de facturas.");
            }
            
            jtfSubject.requestFocus();
        }
    }
    
    private void obtainMailSender() {
        SDbMms mms = getMms(miClient, SModSysConsts.CFGS_TP_MMS_CFD);
        
        if (mms == null || mms.getQueryResultId() != SDbConsts.READ_OK) {
            moMailSender = null;
        }
        else {
            moMailSender = new SMailSender(mms.getHost(), mms.getPort(), mms.getProtocol(), mms.isStartTls(), mms.isAuth(), mms.getUser(), mms.getUserPassword(), mms.getUser());
            moMailSender.setMailReplyTo(mms.getXtaMailReplyTo());
        }
    }
    
    private void setFormData() {
        SDataBizPartner bizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { moParamDps.getFkBizPartnerId_r() }, SLibConstants.EXEC_MODE_SILENT);
        String toRecipients = bizPartner.getBizPartnerBranchContactMail(new int[] { moParamDps.getFkBizPartnerBranchId() });

        if (toRecipients.isEmpty()) {
            miClient.showMsgBoxInformation("El receptor del documento no tiene buzones de correo-e.");
        }
        
        try {
            maFiles = STrnDeliveryAckUtilities.getFiles(miClient, (int[]) moParamDps.getPrimaryKey());
        }
        catch (Exception ex) {
            SLibUtils.showException(this, ex);
        }
        finally {
            jbSend.setEnabled(moMailSender != null && !(maFiles == null || maFiles.isEmpty()));
            if (maFiles.isEmpty()) {
                miClient.showMsgBoxInformation("No hay acuses de entrega para esta factura.");
            }
        }
        
        moFieldSubject.setFieldValue("Acuses de entrega de factura " + moParamDps.getDpsNumber());
        moFieldTo.setFieldValue(toRecipients);
        moFieldCc.setFieldValue(miClient.getSessionXXX().getUser().getEmail());
        moFieldBody.setFieldValue("Se adjunta(n) " + maFiles.size() + " acuse(s) de entrega para la factura con folio: " + moParamDps.getDpsNumber() + ".");
    }

    private void actionSend() {
        if (jbSend.isEnabled()) {
            SFormValidation validation = formValidate();

            if (validation.getIsError()) {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocus();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
                }
            }
            else {
                ArrayList<String> toRecipients = new ArrayList<>(Arrays.asList(SLibUtils.textExplode(jtfTo.getText(), ";")));
                ArrayList<String> toCcRecipients = jtfCc.getText().isEmpty() ? new ArrayList<>() : new ArrayList<>(Arrays.asList(SLibUtils.textExplode(jtfCc.getText(), ";")));
                SMail mail = new SMail(moMailSender, jtfSubject.getText(), jtaBody.getText(), toRecipients, toCcRecipients);

                for (File[] file : maFiles) {
                    mail.getAttachments().add(file[1]);
                }

                try {
                    mail.send();
                    miClient.showMsgBoxInformation("El correo-e ha sido enviado.");
                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    this.setVisible(false);
                }
                catch (MessagingException ex) {
                    SLibUtils.showException(this, ex);
                }
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbSend;
    private javax.swing.JLabel jlAddingMultipleMailHelp;
    private javax.swing.JLabel jlBody;
    private javax.swing.JLabel jlCc;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JLabel jlSubject;
    private javax.swing.JLabel jlTo;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpSend;
    private javax.swing.JTextArea jtaBody;
    private javax.swing.JTextField jtfCc;
    private javax.swing.JTextField jtfSubject;
    private javax.swing.JTextField jtfTo;
    // End of variables declaration//GEN-END:variables

    public void publicActionSend() {
        actionSend();
    }
    
    public void publicActionCancel() {
        actionCancel();
    }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }
        
        maFiles = null;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        moParamDps = (SDataDps) registry;
        moPanelDps.setDps(moParamDps, null);
        setFormData();
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (javax.swing.JButton) e.getSource();
            if (button == jbSend) {
                actionSend();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
