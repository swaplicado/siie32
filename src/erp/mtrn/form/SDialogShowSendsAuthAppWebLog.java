/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRowCustom;
import erp.mtrn.data.SDataDps;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Isabel Servín
 */
public class SDialogShowSendsAuthAppWebLog extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private final erp.client.SClientInterface miClient;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;

    private erp.mtrn.data.SDataDps moParamDps;
    private erp.lib.table.STablePaneGrid moPaneGrid;
    private erp.lib.table.STableColumnForm[] maoTableColumnsDps = null;
    private erp.mtrn.form.SPanelDps moPanelDps;

    /** Creates new form SDialogDpsActionViewLinks
     * @param client */
    public SDialogShowSendsAuthAppWebLog(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtButtonGroup = new javax.swing.ButtonGroup();
        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDpsComents = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bitácora de envíos de autorización vía app web");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsComents.setBorder(javax.swing.BorderFactory.createTitledBorder("Envíos a la app web:"));
        jpDpsComents.setLayout(new java.awt.BorderLayout(0, 5));
        jpDps.add(jpDpsComents, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(800, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;

        maoTableColumnsDps = new STableColumnForm[2];
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Fecha/hr envío", STableConstants.WIDTH_DATE_TIME);
        maoTableColumnsDps[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Comentario", 600);
        
        moPaneGrid = new STablePaneGrid(miClient);
        jpDpsComents.add(moPaneGrid, BorderLayout.CENTER);

        moPanelDps = new SPanelDps(miClient);
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        jbClose.addActionListener(this);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jbClose.requestFocus();
        }
    }

    private void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbClose;
    private javax.swing.ButtonGroup jbtButtonGroup;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsComents;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moParamDps = null;
        moPanelDps.setDps(null, null);
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moParamDps = (SDataDps) value;
                moPanelDps.setDps(moParamDps, null);
                break;

            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
        }
    }

    @SuppressWarnings("unchecked")
    public int readSendsAuthAppWeb() {
        int i;
        int count = 0;
        String sSql;
        SServerRequest oRequest;
        SServerResponse oResponse;
        Vector<Vector<Object>> vData;

        try {
            moPaneGrid.clearTable();

                // DPS links:

                sSql = "SELECT id_authorn, ts_new, IF(nts = '', 'SIN COMENTARIOS', nts) nts "
                        + "FROM trn_dps_authorn WHERE id_year = " + moParamDps.getPkYearId() + " AND id_doc = " + moParamDps.getPkDocId() + " "
                        + "ORDER BY id_authorn DESC;";
               
                oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
                oResponse = miClient.getSessionXXX().request(oRequest);

                if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                    throw new Exception(oResponse.getMessage());
                }
                else {
                    for (i = 0; i < maoTableColumnsDps.length; i++) {
                        moPaneGrid.addTableColumn(maoTableColumnsDps[i]);
                    }
                    moPaneGrid.createTable();

                    vData = (Vector<Vector<Object>>) oResponse.getPacket();

                    for (Vector<Object> data : vData) {
                        STableRowCustom row = new STableRowCustom();

                        for (i = 1; i < data.size(); i++) {     // index 0 is descarted, used only for ordering purpouses
                            row.getValues().add(data.get(i));
                        }

                        moPaneGrid.addTableRow(row);
                    }
                    moPaneGrid.renderTableRows();
                    moPaneGrid.setTableRowSelection(0);

                    count = vData.size();
                }
            
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return count;
    }
}
