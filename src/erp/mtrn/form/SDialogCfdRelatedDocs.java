/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRelatedDocument.java
 *
 * Created on 16/05/2022, 10:35:00 AM
 */

package erp.mtrn.form;

import cfd.ver3.DCfdVer3Consts;
import erp.cfd.SCfdXmlCatalogs;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mtrn.data.SCfdUtils;
import erp.mtrn.data.SDataCfd;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SRowCfdRelatedDocs;
import erp.mtrn.data.STrnCfdRelatedDocs;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import sa.lib.SLibUtils;

/**
 * 
 * @author Isabel Servín
 */
public class SDialogCfdRelatedDocs extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {
    
    public static final int CFD_RELATED = 1;
    
    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbIsFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    
    private erp.lib.form.SFormField moFieldCfdiRelationType;
    private erp.lib.form.SFormField moFieldCfdiRelatedUuids;
    
    private final erp.client.SClientInterface miClient;
    private final SDataDps moDps;
    private STrnCfdRelatedDocs moCfdRelatedDocs;

    private erp.lib.table.STablePane moRelatedDocsPane;
    
    private erp.mtrn.form.SDialogPickerDps moDialogPickerDpsForCfdiRelated;
    
    private boolean bIsDpsAdj;
    private int[] manDpsClassKey;
    private String msFirstRelatedDocUuid;
    private int[] manFirstRelatedDocKey;
    

    /** Creates new form SDialogRelatedUUID
     * @param client
     * @param dps
     */
    public SDialogCfdRelatedDocs(erp.client.SClientInterface client, SDataDps dps) {
        super(client.getFrame(), true);
        miClient = client;
        moDps = dps;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCancelationType = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCfdiRelationType = new javax.swing.JLabel();
        jcbCfdiRelationType = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel10 = new javax.swing.JPanel();
        jlCfdiRelatedUuids = new javax.swing.JLabel();
        jtfCfdiRelatedUuids = new javax.swing.JTextField();
        jbAddCfdiRelated = new javax.swing.JButton();
        jlCfdiRelatedUuidsHint = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jbAddRow = new javax.swing.JButton();
        jbDeleteRow = new javax.swing.JButton();
        jpRelatedUUID = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CFDI relacionados");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos a relacionar:"));
        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 2));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiRelationType.setText("Tipo relación:");
        jlCfdiRelationType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCfdiRelationType);

        jcbCfdiRelationType.setToolTipText("Tipo relación de CFDI relacionados");
        jcbCfdiRelationType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jcbCfdiRelationType);

        jPanel3.add(jPanel6);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiRelatedUuids.setText("CFDI relacionados:");
        jlCfdiRelatedUuids.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlCfdiRelatedUuids);

        jtfCfdiRelatedUuids.setText("TEXT");
        jtfCfdiRelatedUuids.setToolTipText("UUID de CFDI relacionados");
        jtfCfdiRelatedUuids.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel10.add(jtfCfdiRelatedUuids);

        jbAddCfdiRelated.setText("+");
        jbAddCfdiRelated.setToolTipText("Agregar");
        jbAddCfdiRelated.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbAddCfdiRelated.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbAddCfdiRelated);

        jlCfdiRelatedUuidsHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlCfdiRelatedUuidsHint.setText("(separar con coma, sin espacios; máx. 100)");
        jlCfdiRelatedUuidsHint.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel10.add(jlCfdiRelatedUuidsHint);

        jPanel3.add(jPanel10);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbAddRow.setText("Agregar");
        jbAddRow.setToolTipText("Agrega los CFDI a la tabla");
        jbAddRow.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel16.add(jbAddRow);

        jbDeleteRow.setText("Eliminar");
        jbDeleteRow.setToolTipText("Quita el renglón seleccionado de la tabla");
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel16.add(jbDeleteRow);

        jPanel3.add(jPanel16);

        jPanel11.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel11, java.awt.BorderLayout.NORTH);

        jpRelatedUUID.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos relacionados:"));
        jpRelatedUUID.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jpRelatedUUID, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(692, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(803, 485));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i;
        erp.lib.table.STableColumnForm tableColumns[];

        moRelatedDocsPane = new STablePane(miClient);
        jpRelatedUUID.add(moRelatedDocsPane, BorderLayout.CENTER);
        
        i = 0;
        tableColumns = new STableColumnForm[3];
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de relación", 50);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Descripción", 200);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "UUID", 300);
        
        for (i = 0; i < tableColumns.length; i++) {
            moRelatedDocsPane.addTableColumn(tableColumns[i]);
        }

        moFieldCfdiRelationType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbCfdiRelationType, jlCfdiRelationType);
        moFieldCfdiRelatedUuids = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCfdiRelatedUuids, jlCfdiRelatedUuids);
        moFieldCfdiRelatedUuids.setLengthMax(3700); // (36 + 1) * 100: longitud UUID = 36 + 1 coma, aunque hay espacio de más para una última coma innecesaria
        moFieldCfdiRelatedUuids.setPickerButton(jbAddCfdiRelated);
        
        mvFields = new Vector<>();
        mvFields.add(moFieldCfdiRelationType);
        mvFields.add(moFieldCfdiRelatedUuids);
        
        jbAddCfdiRelated.addActionListener(this);
        jbAddRow.addActionListener(this);
        jbDeleteRow.addActionListener(this);
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        
        formReset();
        formRefreshCatalogues();
        
        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbIsFirstTime) {
            mbIsFirstTime = false;
            jcbCfdiRelationType.requestFocusInWindow();
        }
    }

    private void renderRelatedDocs() {
        moRelatedDocsPane.clearTableRows();
        
        if (moCfdRelatedDocs != null) {
            for (SRowCfdRelatedDocs row : moCfdRelatedDocs.getRowCfdRelatedDocs()) {
                moRelatedDocsPane.addTableRow(row);
            }
            
            moRelatedDocsPane.renderTableRows();
            moRelatedDocsPane.setTableRowSelection(0);
            
            moFieldCfdiRelationType.resetField();
            moFieldCfdiRelatedUuids.resetField();
        }
    }
    
    private void actionAddCfdiRelated() {
        if (moDialogPickerDpsForCfdiRelated == null) {
            moDialogPickerDpsForCfdiRelated = new SDialogPickerDps(miClient, SDataConstants.TRN_DPS);
        }
        
        moDialogPickerDpsForCfdiRelated.formReset();
        moDialogPickerDpsForCfdiRelated.setFilterKey(new Object[] { bIsDpsAdj && jcbCfdiRelationType.getSelectedIndex() == 7 ? manDpsClassKey : new int[] { moDps.getFkDpsCategoryId(), SDataConstantsSys.TRNS_CL_DPS_DOC } , new int[] { moDps.getFkBizPartnerId_r()} });
        moDialogPickerDpsForCfdiRelated.formRefreshOptionPane();
        moDialogPickerDpsForCfdiRelated.setFormVisible(true);

        if (moDialogPickerDpsForCfdiRelated.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            SDataDps dps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, moDialogPickerDpsForCfdiRelated.getSelectedPrimaryKey(), SLibConstants.EXEC_MODE_VERBOSE);
            
            if (dps.getDbmsDataCfd() == null) {
                miClient.showMsgBoxWarning("El documento " + dps.getDpsNumber() + " no cuenta con CFD.");
            }
            else if (dps.getDbmsDataCfd().getUuid().isEmpty()) {
                miClient.showMsgBoxWarning("El documento " + dps.getDpsNumber() + " no está timbrado, no cuenta con UUID.");
            }
            else {
                if (moRelatedDocsPane.getTable().getRowCount() == 0) { // first related document should be set only once and for first row!
                    if (msFirstRelatedDocUuid.isEmpty() || !moFieldCfdiRelatedUuids.getString().contains(msFirstRelatedDocUuid)) {
                        msFirstRelatedDocUuid = dps.getDbmsDataCfd().getUuid();
                        manFirstRelatedDocKey = (int[]) dps.getPrimaryKey();
                    }
                }
                
                String uuids = moFieldCfdiRelatedUuids.getString(); // convenience variable
                moFieldCfdiRelatedUuids.setString((uuids.isEmpty() ? "" : uuids + ",") + dps.getDbmsDataCfd().getUuid()); // append new UUID
            }
        }
    }
    
    private void actionAddRow() {
        SFormValidation validate = validateRow();
        
        if (!validate.getIsError()) {
            SRowCfdRelatedDocs row = new SRowCfdRelatedDocs((String) moFieldCfdiRelationType.getKey(), moFieldCfdiRelatedUuids.getString());
            
            if (moRelatedDocsPane.getTable().getRowCount() == 0) { // first related document should be set only once and for first row!
                if (!msFirstRelatedDocUuid.isEmpty() && manFirstRelatedDocKey != null && moFieldCfdiRelatedUuids.getString().contains(msFirstRelatedDocUuid)) {
                    row.setFirstDocUuid(msFirstRelatedDocUuid);
                    row.setFirstDocKey(manFirstRelatedDocKey);
                }
            }
            
            moRelatedDocsPane.addTableRow(row);
            moRelatedDocsPane.renderTableRows();
            moRelatedDocsPane.setTableRowSelection(0);
            
            moFieldCfdiRelationType.resetField();
            moFieldCfdiRelatedUuids.resetField();
            
            msFirstRelatedDocUuid = ""; // first related document should be set only once and for first row!
            manFirstRelatedDocKey = null; // first related document should be set only once and for first row!
        }
    }
    
    private void actionDeleteRow() {
        int index = moRelatedDocsPane.getTable().getSelectedRow();
        
        if (index >= 0) {
            moRelatedDocsPane.removeTableRow(index);
            moRelatedDocsPane.renderTableRows();
            moRelatedDocsPane.setTableRowSelection(index < moRelatedDocsPane.getTable().getRowCount() ? index : --index);
        }
    }
    
    private void actionOk() {
        SFormValidation validation = formValidate();
        
        if (validation.getIsError()) {
            miClient.showMsgBoxInformation(validation.getMessage());
        }
        else {
            // prepare member moCfdRelatedDocs:
            
            if (moRelatedDocsPane.getTable().getRowCount() > 0) {
                try {
                    SRowCfdRelatedDocs firstRow = (SRowCfdRelatedDocs) moRelatedDocsPane.getTableRow(0);

                    if (!firstRow.isFirstDocSet()) {
                        String firstCfdiUuid = firstRow.getDocUuids().trim().split(",")[0];
                        int firstCfdiId = SCfdUtils.getCfdIdByUuid(miClient, firstCfdiUuid);
                        SDataCfd cfd = (SDataCfd) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_CFD, new int[] { firstCfdiId }, SLibConstants.EXEC_MODE_SILENT);

                        firstRow.setFirstDocUuid(cfd.getUuid()); // same as value of variable firstCfdiUuid!
                        firstRow.setFirstDocKey(new int[] { cfd.getFkDpsYearId_n(), cfd.getFkDpsDocId_n() });
                    }
                }
                catch(Exception e) {
                    SLibUtilities.renderException(this, e);
                }
            }
            
            moCfdRelatedDocs = new STrnCfdRelatedDocs();
            
            for (STableRow row : moRelatedDocsPane.getTableModel().getTableRows()) {
                moCfdRelatedDocs.getRowCfdRelatedDocs().add((SRowCfdRelatedDocs) row);
            }
            
            // go on with OK action...
            
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }
    
    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private SFormValidation validateRow() {
        SFormValidation validation = new SFormValidation();
        
        for (SFormField mvField : mvFields) {
            if (!((erp.lib.form.SFormField) mvField).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvField).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            String[] uuids = SLibUtils.textExplode(moFieldCfdiRelatedUuids.getString(), ",");
            for (String uuid : uuids) {
                if (uuid.trim().length() != DCfdVer3Consts.LEN_UUID) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlCfdiRelatedUuids.getText() + "':\n"
                           + "La longitud del UUID '" + uuid.trim() + "' debe ser de " + DCfdVer3Consts.LEN_UUID + " caracteres.");
                    validation.setComponent(jtfCfdiRelatedUuids);
                    break;
                }
            }
        }
        
        return validation;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCancelationType;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton jbAddCfdiRelated;
    private javax.swing.JButton jbAddRow;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDeleteRow;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbCfdiRelationType;
    private javax.swing.JLabel jlCfdiRelatedUuids;
    private javax.swing.JLabel jlCfdiRelatedUuidsHint;
    private javax.swing.JLabel jlCfdiRelationType;
    private javax.swing.JPanel jpRelatedUUID;
    private javax.swing.JTextField jtfCfdiRelatedUuids;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbIsFirstTime = true;
        
        mvFields.stream().forEach((mvField) -> {
            ((erp.lib.form.SFormField) mvField).resetField();
        });

        moRelatedDocsPane.createTable(null);
        moRelatedDocsPane.clearTableRows();
        
        manDpsClassKey = new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId() }; 
        bIsDpsAdj = SLibUtilities.compareKeys(SDataConstantsSys.TRNS_CL_DPS_PUR_ADJ, manDpsClassKey) ||
                SLibUtilities.compareKeys(SDataConstantsSys.TRNS_CL_DPS_SAL_ADJ, manDpsClassKey);
        
        moCfdRelatedDocs = null;
        
        msFirstRelatedDocUuid = "";
        manFirstRelatedDocKey = null;
    }

    @Override
    public void formRefreshCatalogues() {
        SCfdXmlCatalogs catalogs = ((SSessionCustom) miClient.getSession().getSessionCustom()).getCfdXmlCatalogs();
        catalogs.populateComboBox(jcbCfdiRelationType, SDataConstantsSys.TRNS_CFD_CAT_REL_TP, miClient.getSession().getSystemDate());
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        
        if (!validation.getIsError()) {
            if (moRelatedDocsPane.getTable().getRowCount() == 0 && miClient.showMsgBoxConfirm("¿Está seguro que no desea capturar CFDI relacionados?") != JOptionPane.YES_OPTION) {
                validation.setMessage("Se debe de agregar al menos un CFDI relacionado.");
                validation.setComponent(jcbCfdiRelationType);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case CFD_RELATED:
                moCfdRelatedDocs = (STrnCfdRelatedDocs) value;
                renderRelatedDocs();
                break;
            default:
                // nothing
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        Object value = null;
        
        switch (type) {
            case CFD_RELATED:
                value = moCfdRelatedDocs;
                break;
            default:
                // nothing
        }
        
        return value;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbAddCfdiRelated) {
                actionAddCfdiRelated();
            }
            else if (button == jbAddRow) {
                actionAddRow();
            } 
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
            else if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
