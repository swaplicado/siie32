/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCompanyBranchEntity;
import erp.mod.trn.utils.SStockValuationUtils;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDiogEntry;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.STrnDpsStockSupplyRow;
import erp.mtrn.data.STrnStock;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnStockSegregationUtils;
import erp.mtrn.data.STrnUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibUtils;

/**
 *
 * @author Sergio Flores, Uriel Castañeda, Edwin Carmona
 * 2017-03-08 (sflores): Fix to form validation when previous supplies exceeds base quantity.
 *  Addition of column surplus percentage into supply rows grid.
 */
public class SDialogDpsStockSupply extends javax.swing.JDialog implements ActionListener, ListSelectionListener {

    private static final int COL_QTY = 5;

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moPaneDpsEntries;
    private erp.mtrn.form.SPanelDps moPanelDps;
    private erp.mtrn.form.SDialogPickerStockLots moPickerStockLots;

    private int mnYear;
    private int[] manWarehouseKey;
    private erp.mbps.data.SDataBizPartnerBranch moParamCompanyBranch;
    private erp.mcfg.data.SDataCompanyBranchEntity moParamWarehouse;
    private erp.mtrn.data.SDataDps moParamDps;
    private erp.mtrn.data.SDataDiog moParamDiog;

    /** Creates new form SDialogDpsStockSupply */
    public SDialogDpsStockSupply(erp.client.SClientInterface client) {
        super(client.getFrame(), true);

        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlPanelDps = new javax.swing.JLabel();
        jpDpsEntries = new javax.swing.JPanel();
        jpDpsEntriesControls = new javax.swing.JPanel();
        jpDpsEntriesControls1 = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jtfWarehouse = new javax.swing.JTextField();
        jtfWarehouseCode = new javax.swing.JTextField();
        jpDpsEntriesControls2 = new javax.swing.JPanel();
        jbSupplyAll = new javax.swing.JButton();
        jbCleanAll = new javax.swing.JButton();
        jpDpsEntriesInfo = new javax.swing.JPanel();
        jpDpsEntriesInfo1 = new javax.swing.JPanel();
        jpDpsEntriesInfo11 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlQuantity = new javax.swing.JLabel();
        jtfQuantity = new javax.swing.JTextField();
        jtfQuantityUnit = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlQuantityAdjusted = new javax.swing.JLabel();
        jtfQuantityAdjusted = new javax.swing.JTextField();
        jtfQuantityAdjustedUnit = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlQuantityNet = new javax.swing.JLabel();
        jtfQuantityNet = new javax.swing.JTextField();
        jtfQuantityNetUnit = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        label = new javax.swing.JLabel();
        jpDpsEntriesInfo12 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlQuantityNetAux = new javax.swing.JLabel();
        jtfQuantityNetAux = new javax.swing.JTextField();
        jtfQuantityNetAuxUnit = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlQuantitySupplied = new javax.swing.JLabel();
        jtfQuantitySupplied = new javax.swing.JTextField();
        jtfQuantitySuppliedUnit = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlQuantityPend = new javax.swing.JLabel();
        jtfQuantityPend = new javax.swing.JTextField();
        jtfQuantityPendUnit = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        label1 = new javax.swing.JLabel();
        jpDpsEntriesInfo2 = new javax.swing.JPanel();
        jpDpsEntriesInfo21 = new javax.swing.JPanel();
        jlStock = new javax.swing.JLabel();
        jtfStock = new javax.swing.JTextField();
        jtfStockUnit = new javax.swing.JTextField();
        jbViewLots = new javax.swing.JButton();
        jpDiogEntriesInfo24 = new javax.swing.JPanel();
        jlSegregated = new javax.swing.JLabel();
        jtfSegregated = new javax.swing.JTextField();
        jtfSegregatedUnit = new javax.swing.JTextField();
        jpDpsEntriesInfo22 = new javax.swing.JPanel();
        jlCurrentlyUsed = new javax.swing.JLabel();
        jtfCurrentlyUsed = new javax.swing.JTextField();
        jtfCurrentlyUsedUnit = new javax.swing.JTextField();
        jpDpsEntriesInfo23 = new javax.swing.JPanel();
        jlAvailable = new javax.swing.JLabel();
        jtfAvailable = new javax.swing.JTextField();
        jtfAvailableUnit = new javax.swing.JTextField();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Surtido de documento");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        getContentPane().add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas pendientes del documento:"));
        jpDpsEntries.setLayout(new java.awt.BorderLayout(0, 5));

        jpDpsEntriesControls.setLayout(new java.awt.BorderLayout());

        jpDpsEntriesControls1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jlWarehouse.setText("Almacén:");
        jlWarehouse.setPreferredSize(new java.awt.Dimension(65, 23));
        jpDpsEntriesControls1.add(jlWarehouse);

        jtfCompanyBranch.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("TEXT");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls1.add(jtfCompanyBranch);

        jtfCompanyBranchCode.setBackground(java.awt.Color.lightGray);
        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("CODE");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpDpsEntriesControls1.add(jtfCompanyBranchCode);

        jtfWarehouse.setBackground(java.awt.Color.lightGray);
        jtfWarehouse.setEditable(false);
        jtfWarehouse.setText("TEXT");
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(155, 23));
        jpDpsEntriesControls1.add(jtfWarehouse);

        jtfWarehouseCode.setBackground(java.awt.Color.lightGray);
        jtfWarehouseCode.setEditable(false);
        jtfWarehouseCode.setText("CODE");
        jtfWarehouseCode.setFocusable(false);
        jtfWarehouseCode.setPreferredSize(new java.awt.Dimension(55, 23));
        jpDpsEntriesControls1.add(jtfWarehouseCode);

        jpDpsEntriesControls.add(jpDpsEntriesControls1, java.awt.BorderLayout.WEST);

        jpDpsEntriesControls2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbSupplyAll.setText("Surtir todo");
        jbSupplyAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbSupplyAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls2.add(jbSupplyAll);

        jbCleanAll.setText("Limpiar todo");
        jbCleanAll.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbCleanAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jpDpsEntriesControls2.add(jbCleanAll);

        jpDpsEntriesControls.add(jpDpsEntriesControls2, java.awt.BorderLayout.CENTER);

        jpDpsEntries.add(jpDpsEntriesControls, java.awt.BorderLayout.NORTH);

        jpDpsEntriesInfo.setLayout(new java.awt.BorderLayout());

        jpDpsEntriesInfo1.setLayout(new java.awt.GridLayout(1, 2));

        jpDpsEntriesInfo11.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantity.setText("+ Cant. original:");
        jlQuantity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlQuantity);

        jtfQuantity.setEditable(false);
        jtfQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantity.setText("0.00");
        jtfQuantity.setFocusable(false);
        jtfQuantity.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel4.add(jtfQuantity);

        jtfQuantityUnit.setEditable(false);
        jtfQuantityUnit.setText("UNIT");
        jtfQuantityUnit.setFocusable(false);
        jtfQuantityUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel4.add(jtfQuantityUnit);

        jpDpsEntriesInfo11.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityAdjusted.setText("– Cant. ajustada:");
        jlQuantityAdjusted.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlQuantityAdjusted);

        jtfQuantityAdjusted.setEditable(false);
        jtfQuantityAdjusted.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityAdjusted.setText("0.00");
        jtfQuantityAdjusted.setFocusable(false);
        jtfQuantityAdjusted.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel5.add(jtfQuantityAdjusted);

        jtfQuantityAdjustedUnit.setEditable(false);
        jtfQuantityAdjustedUnit.setText("UNIT");
        jtfQuantityAdjustedUnit.setFocusable(false);
        jtfQuantityAdjustedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel5.add(jtfQuantityAdjustedUnit);

        jpDpsEntriesInfo11.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityNet.setText("= Cantidad neta:");
        jlQuantityNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlQuantityNet);

        jtfQuantityNet.setBackground(java.awt.Color.pink);
        jtfQuantityNet.setEditable(false);
        jtfQuantityNet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityNet.setText("0.00");
        jtfQuantityNet.setFocusable(false);
        jtfQuantityNet.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jtfQuantityNet);

        jtfQuantityNetUnit.setBackground(java.awt.Color.pink);
        jtfQuantityNetUnit.setEditable(false);
        jtfQuantityNetUnit.setText("UNIT");
        jtfQuantityNetUnit.setFocusable(false);
        jtfQuantityNetUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel6.add(jtfQuantityNetUnit);

        jpDpsEntriesInfo11.add(jPanel6);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        label.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(label);

        jpDpsEntriesInfo11.add(jPanel10);

        jpDpsEntriesInfo1.add(jpDpsEntriesInfo11);

        jpDpsEntriesInfo12.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityNetAux.setText("+ Cant. neta:");
        jlQuantityNetAux.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlQuantityNetAux);

        jtfQuantityNetAux.setEditable(false);
        jtfQuantityNetAux.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityNetAux.setText("0.00");
        jtfQuantityNetAux.setFocusable(false);
        jtfQuantityNetAux.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jtfQuantityNetAux);

        jtfQuantityNetAuxUnit.setEditable(false);
        jtfQuantityNetAuxUnit.setText("UNIT");
        jtfQuantityNetAuxUnit.setFocusable(false);
        jtfQuantityNetAuxUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel7.add(jtfQuantityNetAuxUnit);

        jpDpsEntriesInfo12.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantitySupplied.setText("– Cant. surtida:");
        jlQuantitySupplied.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlQuantitySupplied);

        jtfQuantitySupplied.setEditable(false);
        jtfQuantitySupplied.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantitySupplied.setText("0.00");
        jtfQuantitySupplied.setFocusable(false);
        jtfQuantitySupplied.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jtfQuantitySupplied);

        jtfQuantitySuppliedUnit.setEditable(false);
        jtfQuantitySuppliedUnit.setText("UNIT");
        jtfQuantitySuppliedUnit.setFocusable(false);
        jtfQuantitySuppliedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel8.add(jtfQuantitySuppliedUnit);

        jpDpsEntriesInfo12.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityPend.setText("= Cant. pendiente:");
        jlQuantityPend.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlQuantityPend);

        jtfQuantityPend.setEditable(false);
        jtfQuantityPend.setBackground(java.awt.Color.pink);
        jtfQuantityPend.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityPend.setText("0.00");
        jtfQuantityPend.setFocusable(false);
        jtfQuantityPend.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jtfQuantityPend);

        jtfQuantityPendUnit.setEditable(false);
        jtfQuantityPendUnit.setBackground(java.awt.Color.pink);
        jtfQuantityPendUnit.setText("UNIT");
        jtfQuantityPendUnit.setFocusable(false);
        jtfQuantityPendUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel9.add(jtfQuantityPendUnit);

        jpDpsEntriesInfo12.add(jPanel9);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        label1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(label1);

        jpDpsEntriesInfo12.add(jPanel11);

        jpDpsEntriesInfo1.add(jpDpsEntriesInfo12);

        jpDpsEntriesInfo.add(jpDpsEntriesInfo1, java.awt.BorderLayout.WEST);

        jpDpsEntriesInfo2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jpDpsEntriesInfo21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStock.setText("+ Existencias:");
        jlStock.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDpsEntriesInfo21.add(jlStock);

        jtfStock.setEditable(false);
        jtfStock.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStock.setText("0.00");
        jtfStock.setFocusable(false);
        jtfStock.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDpsEntriesInfo21.add(jtfStock);

        jtfStockUnit.setEditable(false);
        jtfStockUnit.setText("UNIT");
        jtfStockUnit.setFocusable(false);
        jtfStockUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDpsEntriesInfo21.add(jtfStockUnit);

        jbViewLots.setText("Ver lotes");
        jbViewLots.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbViewLots.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDpsEntriesInfo21.add(jbViewLots);

        jpDpsEntriesInfo2.add(jpDpsEntriesInfo21);

        jpDiogEntriesInfo24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSegregated.setText("– Segregadas:");
        jlSegregated.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDiogEntriesInfo24.add(jlSegregated);

        jtfSegregated.setEditable(false);
        jtfSegregated.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSegregated.setText("0.00");
        jtfSegregated.setFocusable(false);
        jtfSegregated.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDiogEntriesInfo24.add(jtfSegregated);

        jtfSegregatedUnit.setEditable(false);
        jtfSegregatedUnit.setText("UNIT");
        jtfSegregatedUnit.setFocusable(false);
        jtfSegregatedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDiogEntriesInfo24.add(jtfSegregatedUnit);

        jpDpsEntriesInfo2.add(jpDiogEntriesInfo24);

        jpDpsEntriesInfo22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrentlyUsed.setText("– Uso actual:");
        jlCurrentlyUsed.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDpsEntriesInfo22.add(jlCurrentlyUsed);

        jtfCurrentlyUsed.setEditable(false);
        jtfCurrentlyUsed.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCurrentlyUsed.setText("0.00");
        jtfCurrentlyUsed.setFocusable(false);
        jtfCurrentlyUsed.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDpsEntriesInfo22.add(jtfCurrentlyUsed);

        jtfCurrentlyUsedUnit.setEditable(false);
        jtfCurrentlyUsedUnit.setText("UNIT");
        jtfCurrentlyUsedUnit.setFocusable(false);
        jtfCurrentlyUsedUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDpsEntriesInfo22.add(jtfCurrentlyUsedUnit);

        jpDpsEntriesInfo2.add(jpDpsEntriesInfo22);

        jpDpsEntriesInfo23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAvailable.setText("= Disponible:");
        jlAvailable.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDpsEntriesInfo23.add(jlAvailable);

        jtfAvailable.setEditable(false);
        jtfAvailable.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailable.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAvailable.setText("0.00");
        jtfAvailable.setFocusable(false);
        jtfAvailable.setPreferredSize(new java.awt.Dimension(120, 23));
        jpDpsEntriesInfo23.add(jtfAvailable);

        jtfAvailableUnit.setBackground(new java.awt.Color(153, 204, 255));
        jtfAvailableUnit.setEditable(false);
        jtfAvailableUnit.setText("UNIT");
        jtfAvailableUnit.setFocusable(false);
        jtfAvailableUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDpsEntriesInfo23.add(jtfAvailableUnit);

        jlYear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlYear.setText("Año:");
        jlYear.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDpsEntriesInfo23.add(jlYear);

        jtfYear.setBackground(new java.awt.Color(153, 204, 255));
        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jpDpsEntriesInfo23.add(jtfYear);

        jpDpsEntriesInfo2.add(jpDpsEntriesInfo23);

        jpDpsEntriesInfo.add(jpDpsEntriesInfo2, java.awt.BorderLayout.CENTER);

        jpDpsEntries.add(jpDpsEntriesInfo, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpDpsEntries, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        jpControls.add(jPanel1, java.awt.BorderLayout.EAST);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpControls.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(928, 609));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int col = 0;
        STableColumnForm[] columns = null;

        moPanelDps = new SPanelDps(miClient, "a surtir");
        remove(jlPanelDps);
        add(moPanelDps, BorderLayout.NORTH);

        col = 0;
        columns = new STableColumnForm[8];
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", STableConstants.WIDTH_ITEM_3X);
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. neta", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. pendiente", STableConstants.WIDTH_QUANTITY_2X);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. a surtir", STableConstants.WIDTH_QUANTITY_2X);
        columns[col].setEditable(true);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Excedente", STableConstants.WIDTH_PERCENTAGE);
        columns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());

        moPaneDpsEntries = new STablePane(miClient);
        jpDpsEntries.add(moPaneDpsEntries, BorderLayout.CENTER);

        for (STableColumnForm column : columns) {
            moPaneDpsEntries.addTableColumn(column);
        }

        moPaneDpsEntries.createTable();
        moPaneDpsEntries.getTable().getSelectionModel().addListSelectionListener(this);
        moPaneDpsEntries.getTable().getTableHeader().setReorderingAllowed(false);
        moPaneDpsEntries.getTable().getTableHeader().setResizingAllowed(false);

        moPickerStockLots = new SDialogPickerStockLots(miClient, false);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSupplyAll.addActionListener(this);
        jbCleanAll.addActionListener(this);
        jbViewLots.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moPaneDpsEntries.getTable().requestFocus();
        }
    }

    private void computePaneEdition() {
        int decs = miClient.getSessionXXX().getParamsErp().getDecimalsQuantity();
        double factor = 0;
        STrnDpsStockSupplyRow stockSupplyRow = null;

        for (STableRow row : moPaneDpsEntries.getTableModel().getTableRows()) {
            stockSupplyRow = (STrnDpsStockSupplyRow) row;

            factor = ((SSessionCustom) miClient.getSession().getSessionCustom()).getUnitsFactorForQuantity(stockSupplyRow.getFkItemId(), stockSupplyRow.getFkOriginalUnitId(), stockSupplyRow.getFkUnitId());

            stockSupplyRow.setOriginalQuantityAboutToSupply((Double) row.getValues().get(COL_QTY));
            stockSupplyRow.setQuantityAboutToSupply(SLibUtilities.round(factor * stockSupplyRow.getOriginalQuantityAboutToSupply(), decs));
        }
    }

    private void computeClose() {
        if (moPaneDpsEntries.getTable().isEditing()) {
            moPaneDpsEntries.getTable().getCellEditor().cancelCellEditing();
        }
    }

    private void valueChangedPaneDpsEntries() {
        double stock = 0;
        double used = 0;
        double segregated = 0;
        
        STrnStockMove stockMoveParams = null;
        STrnStock objStock = null;
        STrnDpsStockSupplyRow stockSupplyRow = (STrnDpsStockSupplyRow) moPaneDpsEntries.getSelectedTableRow();

        if (stockSupplyRow == null) {
            jtfQuantity.setText("");
            jtfQuantityUnit.setText("");
            jtfQuantityAdjusted.setText("");
            jtfQuantityAdjustedUnit.setText("");
            jtfQuantityNet.setText("");
            jtfQuantityNetUnit.setText("");
            jtfQuantityNetAux.setText("");
            jtfQuantityNetAuxUnit.setText("");
            jtfQuantitySupplied.setText("");
            jtfQuantitySuppliedUnit.setText("");
            jtfQuantityPend.setText("");
            jtfQuantityPendUnit.setText("");

            jtfStock.setText("");
            jtfStockUnit.setText("");
            jtfCurrentlyUsed.setText("");
            jtfCurrentlyUsedUnit.setText("");
            jtfAvailable.setText("");
            jtfAvailableUnit.setText("");

            jbViewLots.setEnabled(false);
        }
        else {
            // Document stock supply is processed in original units:

            jtfQuantity.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantity()));
            jtfQuantityUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());
            jtfQuantityAdjusted.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantityAdjusted()));
            jtfQuantityAdjustedUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());
            jtfQuantityNet.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantityNet()));
            jtfQuantityNetUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());
            jtfQuantityNetAux.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantityNet()));
            jtfQuantityNetAuxUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());
            jtfQuantitySupplied.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantitySupplied()));
            jtfQuantitySuppliedUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());
            jtfQuantityPend.setText(SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantityPend()));
            jtfQuantityPendUnit.setText(stockSupplyRow.getAuxOriginalUnitSymbol());

            // Available stock is processed in inventory units:

            try {
                stock = STrnUtilities.obtainStock(miClient, mnYear, 
                        stockSupplyRow.getFkItemId(), stockSupplyRow.getFkUnitId(), SLibConstants.UNDEFINED, 
                        manWarehouseKey[0], manWarehouseKey[1], SLibConstants.UNDEFINED, null, 
                        (int[]) moParamDiog.getPrimaryKey());
                
                stockMoveParams = new STrnStockMove();
                stockMoveParams.setPkCompanyBranchId(manWarehouseKey[0]);
                stockMoveParams.setPkWarehouseId(manWarehouseKey[1]);
                stockMoveParams.setPkYearId(mnYear); // year of document
                stockMoveParams.setPkItemId(stockSupplyRow.getFkItemId());
                stockMoveParams.setPkUnitId(stockSupplyRow.getFkUnitId());

                objStock = STrnStockSegregationUtils.getStockSegregated(miClient, stockMoveParams);
                segregated = objStock.getSegregatedStock();
            }
            catch (Exception e) {
                SLibUtilities.printOutException(this, e);
            }

            for (SDataDiogEntry entry : moParamDiog.getDbmsEntries()) {
                for (STrnStockMove move : entry.getAuxStockMoves()) {
                    if (move.getPkItemId() == stockSupplyRow.getFkItemId() && move.getPkUnitId() == stockSupplyRow.getFkUnitId()) {
                        if (entry.getIsDeleted()) {
                            stock += move.getQuantity();
                        }
                        else {
                            used += move.getQuantity();
                        }
                    }
                }
            }

            jtfStock.setText(SLibUtils.getDecimalFormatQuantity().format(stock));
            jtfStockUnit.setText(stockSupplyRow.getAuxUnitSymbol());
            jtfSegregated.setText(SLibUtils.getDecimalFormatQuantity().format(segregated));
            jtfSegregatedUnit.setText(stockSupplyRow.getAuxUnitSymbol());
            jtfCurrentlyUsed.setText(SLibUtils.getDecimalFormatQuantity().format(used));
            jtfCurrentlyUsedUnit.setText(stockSupplyRow.getAuxUnitSymbol());
            jtfAvailable.setText(SLibUtils.getDecimalFormatQuantity().format(stock - used));
            jtfAvailableUnit.setText(stockSupplyRow.getAuxUnitSymbol());

            jbViewLots.setEnabled(true);
        }
    }

    public void actionSupplyAll() {
        STrnDpsStockSupplyRow stockSupplyRow = null;

        if (jbCleanAll.isEnabled()) {
            computeClose();

            for (STableRow row : moPaneDpsEntries.getTableModel().getTableRows()) {
                stockSupplyRow = (STrnDpsStockSupplyRow) row;
                stockSupplyRow.setOriginalQuantityAboutToSupply(stockSupplyRow.getOriginalQuantityPend() <= 0d ? 0d : stockSupplyRow.getOriginalQuantityPend());
                stockSupplyRow.setQuantityAboutToSupply(stockSupplyRow.getQuantityPend() <= 0d ? 0d : stockSupplyRow.getQuantityPend());
                stockSupplyRow.prepareTableRow();
            }

            moPaneDpsEntries.renderTableRows();
            moPaneDpsEntries.setTableRowSelection(0);
        }
    }

    public void actionCleanAll() {
        STrnDpsStockSupplyRow stockSupplyRow = null;

        if (jbCleanAll.isEnabled()) {
            computeClose();

            for (STableRow row : moPaneDpsEntries.getTableModel().getTableRows()) {
                stockSupplyRow = (STrnDpsStockSupplyRow) row;
                stockSupplyRow.setOriginalQuantityAboutToSupply(0d);
                stockSupplyRow.setQuantityAboutToSupply(0d);
                stockSupplyRow.prepareTableRow();
            }

            moPaneDpsEntries.renderTableRows();
            moPaneDpsEntries.setTableRowSelection(0);
        }
    }

    public void actionViewLots() {
        STrnDpsStockSupplyRow stockSupplyRow = (STrnDpsStockSupplyRow) moPaneDpsEntries.getSelectedTableRow();

        if (stockSupplyRow == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
        }
        else {
            moPickerStockLots.formReset();
            moPickerStockLots.setFormParams(mnYear, stockSupplyRow.getFkItemId(), stockSupplyRow.getFkUnitId(), moParamDiog.getWarehouseKey(), (int[]) moParamDiog.getPrimaryKey());
            moPickerStockLots.setVisible(true);
        }
    }

    public void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            miClient.showMsgBoxWarning(validation.getMessage());
        }
        else {
            computeClose();
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        computeClose();
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCleanAll;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbSupplyAll;
    private javax.swing.JButton jbViewLots;
    private javax.swing.JLabel jlAvailable;
    private javax.swing.JLabel jlCurrentlyUsed;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JLabel jlQuantity;
    private javax.swing.JLabel jlQuantityAdjusted;
    private javax.swing.JLabel jlQuantityNet;
    private javax.swing.JLabel jlQuantityNetAux;
    private javax.swing.JLabel jlQuantityPend;
    private javax.swing.JLabel jlQuantitySupplied;
    private javax.swing.JLabel jlSegregated;
    private javax.swing.JLabel jlStock;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDiogEntriesInfo24;
    private javax.swing.JPanel jpDpsEntries;
    private javax.swing.JPanel jpDpsEntriesControls;
    private javax.swing.JPanel jpDpsEntriesControls1;
    private javax.swing.JPanel jpDpsEntriesControls2;
    private javax.swing.JPanel jpDpsEntriesInfo;
    private javax.swing.JPanel jpDpsEntriesInfo1;
    private javax.swing.JPanel jpDpsEntriesInfo11;
    private javax.swing.JPanel jpDpsEntriesInfo12;
    private javax.swing.JPanel jpDpsEntriesInfo2;
    private javax.swing.JPanel jpDpsEntriesInfo21;
    private javax.swing.JPanel jpDpsEntriesInfo22;
    private javax.swing.JPanel jpDpsEntriesInfo23;
    private javax.swing.JTextField jtfAvailable;
    private javax.swing.JTextField jtfAvailableUnit;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JTextField jtfCurrentlyUsed;
    private javax.swing.JTextField jtfCurrentlyUsedUnit;
    private javax.swing.JTextField jtfQuantity;
    private javax.swing.JTextField jtfQuantityAdjusted;
    private javax.swing.JTextField jtfQuantityAdjustedUnit;
    private javax.swing.JTextField jtfQuantityNet;
    private javax.swing.JTextField jtfQuantityNetAux;
    private javax.swing.JTextField jtfQuantityNetAuxUnit;
    private javax.swing.JTextField jtfQuantityNetUnit;
    private javax.swing.JTextField jtfQuantityPend;
    private javax.swing.JTextField jtfQuantityPendUnit;
    private javax.swing.JTextField jtfQuantitySupplied;
    private javax.swing.JTextField jtfQuantitySuppliedUnit;
    private javax.swing.JTextField jtfQuantityUnit;
    private javax.swing.JTextField jtfSegregated;
    private javax.swing.JTextField jtfSegregatedUnit;
    private javax.swing.JTextField jtfStock;
    private javax.swing.JTextField jtfStockUnit;
    private javax.swing.JTextField jtfWarehouse;
    private javax.swing.JTextField jtfWarehouseCode;
    private javax.swing.JTextField jtfYear;
    private javax.swing.JLabel label;
    private javax.swing.JLabel label1;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    public void setFormParams(final SDataDps dps, final SDataDiog diog) {
        String sql = "";
        ResultSet resulSet = null;

        moPaneDpsEntries.clearTableRows();

        try {
            if (dps == null || diog == null) {
                moParamDps = null;
                moParamDiog = null;
                moPanelDps.setDps(null, null);

                mnYear = 0;
                manWarehouseKey = null;
                moParamCompanyBranch = null;
                moParamWarehouse = null;

                jtfCompanyBranch.setText("");
                jtfCompanyBranchCode.setText("");
                jtfWarehouse.setText("");
                jtfWarehouseCode.setText("");
                jtfYear.setText("");
            }
            else {
                moParamDps = dps;
                moParamDiog = diog;
                moPanelDps.setDps(moParamDps, moParamDiog.getDate());

                mnYear = SLibTimeUtilities.digestYear(moParamDiog.getDate())[0];
                manWarehouseKey = moParamDiog.getWarehouseKey();
                moParamCompanyBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { manWarehouseKey[0] }, SLibConstants.EXEC_MODE_VERBOSE);
                moParamWarehouse = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, manWarehouseKey, SLibConstants.EXEC_MODE_VERBOSE);

                jtfCompanyBranch.setText(moParamCompanyBranch.getBizPartnerBranch());
                jtfCompanyBranchCode.setText(moParamCompanyBranch.getCode());
                jtfWarehouse.setText(moParamWarehouse.getEntity());
                jtfWarehouseCode.setText(moParamWarehouse.getCode());
                jtfYear.setText(miClient.getSessionXXX().getFormatters().getYearFormat().format(mnYear));

                jtfCompanyBranch.setCaretPosition(0);
                jtfCompanyBranchCode.setCaretPosition(0);
                jtfWarehouse.setCaretPosition(0);
                jtfWarehouseCode.setCaretPosition(0);
                jtfYear.setCaretPosition(0);

                sql = "SELECT de.id_year, de.id_doc, de.id_ety, de.sort_pos, de.fid_item, de.fid_unit, de.fid_orig_unit, d.b_close, " + 
                        "i.item_key, i.item, u.symbol AS f_unit, uo.symbol AS f_orig_unit, " +                                          
                        "de.qty AS f_qty, " +                                                                                           
                        "de.orig_qty AS f_orig_qty, " +                                                                                 
                        "COALESCE((SELECT SUM(ddd.qty) FROM trn_dps_dps_adj AS ddd, trn_dps_ety AS dae, trn_dps AS da WHERE " +
                        "ddd.id_dps_year = de.id_year AND ddd.id_dps_doc = de.id_doc AND ddd.id_dps_ety = de.id_ety AND " +
                        "ddd.id_adj_year = dae.id_year AND ddd.id_adj_doc = dae.id_doc AND ddd.id_adj_ety = dae.id_ety AND " +
                        "dae.id_year = da.id_year AND dae.id_doc = da.id_doc AND " +
                        "dae.b_del = 0 AND dae.fid_tp_dps_adj = " + SDataConstantsSys.TRNS_TP_DPS_ADJ_RET + " AND " +
                        "da.b_del = 0 AND da.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + "), 0) AS f_adj_qty, " +           
                        "COALESCE((SELECT SUM(ddd.orig_qty) FROM trn_dps_dps_adj AS ddd, trn_dps_ety AS dae, trn_dps AS da WHERE " +
                        "ddd.id_dps_year = de.id_year AND ddd.id_dps_doc = de.id_doc AND ddd.id_dps_ety = de.id_ety AND " +
                        "ddd.id_adj_year = dae.id_year AND ddd.id_adj_doc = dae.id_doc AND ddd.id_adj_ety = dae.id_ety AND " +
                        "dae.id_year = da.id_year AND dae.id_doc = da.id_doc AND " +
                        "dae.b_del = 0 AND dae.fid_tp_dps_adj = " + SDataConstantsSys.TRNS_TP_DPS_ADJ_RET + " AND " +
                        "da.b_del = 0 AND da.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + "), 0) AS f_adj_orig_qty, " +      
                        "COALESCE((SELECT SUM(ge.qty * CASE WHEN ge.fid_dps_adj_year_n IS NULL THEN 1 ELSE -1 END) FROM trn_diog_ety AS ge, trn_diog AS g WHERE " +
                        "ge.fid_dps_year_n = de.id_year AND ge.fid_dps_doc_n = de.id_doc AND ge.fid_dps_ety_n = de.id_ety AND " +
                        "ge.id_year = g.id_year AND ge.id_doc = g.id_doc AND " +
                        "ge.b_del = 0 AND g.b_del = 0 AND " +
                        "NOT (g.id_year = " + moParamDiog.getPkYearId() + " AND g.id_doc = " + moParamDiog.getPkDocId() + ")), 0) AS f_sup_qty, " +     
                        "COALESCE((SELECT SUM(ge.orig_qty * CASE WHEN ge.fid_dps_adj_year_n IS NULL THEN 1 ELSE -1 END) FROM trn_diog_ety AS ge, trn_diog AS g WHERE " +
                        "ge.fid_dps_year_n = de.id_year AND ge.fid_dps_doc_n = de.id_doc AND ge.fid_dps_ety_n = de.id_ety AND " +
                        "ge.id_year = g.id_year AND ge.id_doc = g.id_doc AND " +
                        "ge.b_del = 0 AND g.b_del = 0 AND " +
                        "NOT (g.id_year = " + moParamDiog.getPkYearId() + " AND g.id_doc = " + moParamDiog.getPkDocId() + ")), 0) AS f_sup_orig_qty, " + 
                        "COALESCE((SELECT SUM(dds.qty) FROM trn_dps_dps_supply AS dds " +
                        "INNER JOIN trn_dps AS dd ON dds.id_des_year = dd.id_year AND dds.id_des_doc = dd.id_doc AND dd.b_del = false AND dd.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + " " +
                        "INNER JOIN trn_dps_ety AS dde ON dds.id_des_year = dde.id_year AND dds.id_des_doc = dde.id_doc AND dds.id_des_ety = dde.id_ety AND dde.b_del = false " +
                        "WHERE de.id_year = dds.id_src_year AND de.id_doc = dds.id_src_doc AND de.id_ety = dds.id_src_ety), 0) AS f_link_qty, " +
                        "COALESCE((SELECT SUM(dds.orig_qty) FROM trn_dps_dps_supply AS dds " +
                        "INNER JOIN trn_dps AS dd ON dds.id_des_year = dd.id_year AND dds.id_des_doc = dd.id_doc AND dd.b_del = false AND dd.fid_st_dps = " + SDataConstantsSys.TRNS_ST_DPS_EMITED + " " +
                        "INNER JOIN trn_dps_ety AS dde ON dds.id_des_year = dde.id_year AND dds.id_des_doc = dde.id_doc AND dds.id_des_ety = dde.id_ety AND dde.b_del = false " +
                        "WHERE de.id_year = dds.id_src_year AND de.id_doc = dds.id_src_doc AND de.id_ety = dds.id_src_ety), 0)  AS f_orig_link_qty, " +
                        "de.surplus_per " +
                        "FROM trn_dps AS d " +
                        "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc AND " +
                        "de.b_del = 0 AND de.b_inv = 1 AND de.qty > 0 AND de.orig_qty > 0 AND " +
                        "d.id_year = " + moParamDps.getPkYearId() + " AND d.id_doc = " + moParamDps.getPkDocId() + " " +
                        "INNER JOIN erp.itmu_item AS i ON de.fid_item = i.id_item " +
                        "INNER JOIN erp.itmu_unit AS u ON de.fid_unit = u.id_unit " +
                        "INNER JOIN erp.itmu_unit AS uo ON de.fid_orig_unit = uo.id_unit " +
                        "GROUP BY de.id_year, de.id_doc, de.id_ety, de.sort_pos, de.fid_item, de.fid_unit, de.fid_orig_unit, d.b_close, " +
                        "i.item_key, i.item, u.symbol, uo.symbol, de.qty, de.orig_qty " +
                        "HAVING (f_orig_qty - f_adj_orig_qty - f_sup_orig_qty) <> 0 AND d.b_close = 0 " +
                        "ORDER BY de.sort_pos; ";

                resulSet = miClient.getSession().getStatement().executeQuery(sql);
                while (resulSet.next()) {                                          
                    STrnDpsStockSupplyRow stockSupplyRow = new STrnDpsStockSupplyRow(new int[] { resulSet.getInt("id_year"), resulSet.getInt("id_doc"), resulSet.getInt("id_ety") });
                    
                    stockSupplyRow.setSortingPosition(resulSet.getInt("sort_pos"));
                    stockSupplyRow.setQuantity(resulSet.getDouble("f_qty"));
                    stockSupplyRow.setOriginalQuantity(resulSet.getDouble("f_orig_qty"));
                   
                    if (dps.isOrder()) {
                        stockSupplyRow.setQuantityAdjusted(resulSet.getDouble("f_adj_qty") + resulSet.getDouble("f_link_qty"));
                        stockSupplyRow.setOriginalQuantityAdjusted(resulSet.getDouble("f_adj_orig_qty") + resulSet.getDouble("f_orig_link_qty"));                           
                    }
                    else {
                        stockSupplyRow.setQuantityAdjusted(resulSet.getDouble("f_adj_qty"));
                        stockSupplyRow.setOriginalQuantityAdjusted(resulSet.getDouble("f_adj_orig_qty"));
                    }
                    
                    stockSupplyRow.setQuantitySupplied(resulSet.getDouble("f_sup_qty"));
                    stockSupplyRow.setOriginalQuantitySupplied(resulSet.getDouble("f_sup_orig_qty"));
                    stockSupplyRow.setQuantityAboutToSupply(0d);
                    stockSupplyRow.setOriginalQuantityAboutToSupply(0d);
                    stockSupplyRow.setSurplusPercentage(resulSet.getDouble("surplus_per"));
                    stockSupplyRow.setFkItemId(resulSet.getInt("fid_item"));   
                    stockSupplyRow.setFkUnitId(resulSet.getInt("fid_unit"));
                    stockSupplyRow.setFkOriginalUnitId(resulSet.getInt("fid_orig_unit"));
                    stockSupplyRow.setAuxItem(resulSet.getString("item"));
                    stockSupplyRow.setAuxItemKey(resulSet.getString("item_key")); 
                    stockSupplyRow.setAuxUnitSymbol(resulSet.getString("f_unit"));
                    stockSupplyRow.setAuxOriginalUnitSymbol(resulSet.getString("f_orig_unit"));

                    for (SDataDiogEntry diogEntry : moParamDiog.getDbmsEntries()) {
                        if (!diogEntry.getIsDeleted()) {
                            if (SLibUtilities.compareKeys(stockSupplyRow.getDpsEntryKey(), diogEntry.getLinkedDpsEntryKey_n())) {
                                stockSupplyRow.setQuantitySupplied(stockSupplyRow.getQuantitySupplied() + diogEntry.getQuantity());
                                stockSupplyRow.setOriginalQuantitySupplied(stockSupplyRow.getOriginalQuantitySupplied() + diogEntry.getOriginalQuantity());
                            }
                        }
                    }

                    stockSupplyRow.prepareTableRow();
                    moPaneDpsEntries.addTableRow(stockSupplyRow);
                }

                if (moPaneDpsEntries.getTableGuiRowCount() > 0) {
                    moPaneDpsEntries.renderTableRows();
                    moPaneDpsEntries.setTableRowSelection(0);
                    moPaneDpsEntries.setTableColumnSelection(COL_QTY);
                }
            }
        }
        catch (Exception e) {
           SLibUtilities.renderException(this, e);
       }
    }

    public java.util.Vector<erp.mtrn.data.STrnDpsStockSupplyRow> obtainDpsStockSupplyRows() {
        Vector<STrnDpsStockSupplyRow> stockSupplyRows = new Vector<STrnDpsStockSupplyRow>();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (STableRow row : moPaneDpsEntries.getTableModel().getTableRows()) {
            if (((STrnDpsStockSupplyRow) row).getOriginalQuantityAboutToSupply() > 0d) {
                stockSupplyRows.add((STrnDpsStockSupplyRow) row);
            }
        }

        return stockSupplyRows;
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int getFormStatus() {
        return mnFormStatus;
    }

    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
    }

    public erp.lib.form.SFormValidation formValidate() {
        int supplies = 0;
        STrnDpsStockSupplyRow stockSupplyRow = null;
        SFormValidation validation = new SFormValidation();

        computePaneEdition();   // updates user edition into internal pane data objects

        for (int row = 0; row < moPaneDpsEntries.getTableModel().getTableRows().size(); row++) {
            stockSupplyRow = (STrnDpsStockSupplyRow) moPaneDpsEntries.getTableRow(row);
            
            if (stockSupplyRow.getOriginalQuantityAboutToSupply() < 0d) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneDpsEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ":\n" +
                        "el valor no puede ser negativo.");
                validation.setComponent(moPaneDpsEntries.getTable());
                break;
            }
            else if (stockSupplyRow.getOriginalQuantityAboutToSupply() > 0d) {
                if (stockSupplyRow.getOriginalQuantityAboutToSupply() > stockSupplyRow.getOriginalQuantityPendWithSurplus()) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + moPaneDpsEntries.getTableColumn(COL_QTY).getColumnTitle() + "' en la fila " + (row + 1) + ":\n" +
                            "el valor no puede ser mayor a " + SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getOriginalQuantityPendWithSurplus()) + " " + stockSupplyRow.getAuxOriginalUnitSymbol() + ".");
                    validation.setComponent(moPaneDpsEntries.getTable());
                    break;
                }
                else if (stockSupplyRow.getQuantityAboutToSupply() <= 0d) {
                    validation.setMessage("Error al calcular las unidades equivalentes del movimiento en la fila " + (row + 1) + ":\n" +
                            "el valor calculado es " + SLibUtils.getDecimalFormatQuantity().format(stockSupplyRow.getQuantityAboutToSupply()) + " " + stockSupplyRow.getAuxUnitSymbol() + ".");
                    validation.setComponent(moPaneDpsEntries.getTable());
                    break;
                }
                else {
                    supplies++;
                }
            }
        }

        if (! validation.getIsError()) {
            if (supplies == 0) {
                validation.setMessage("Se debe capturar al menos una partida.");
                validation.setComponent(moPaneDpsEntries.getTable());
            }
        }
        else if (! SStockValuationUtils.canCreateDiogByValuation(miClient.getSession(), moParamDiog.getDate())) {
            validation.setMessage("No se puede crear el movimiento porque hay una valuación de inventarios para la fecha " + "'" + SLibUtils.DateFormatDate.format(moParamDiog.getDate()) + "'");
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbSupplyAll) {
                actionSupplyAll();
            }
            else if (button == jbCleanAll) {
                actionCleanAll();
            }
            else if (button == jbViewLots) {
                actionViewLots();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            valueChangedPaneDpsEntries();
        }
    }
}
