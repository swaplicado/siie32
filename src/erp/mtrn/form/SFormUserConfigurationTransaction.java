/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormUserConfigurationTransaction.java
 *
 * Created on 24/09/2010, 03:32:08 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataReadComponentItems;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mod.SModConsts;
import erp.mtrn.data.SDataUserConfigurationTransaction;
import erp.musr.data.SDataUserFunctionalArea;
import erp.musr.data.SDataUserFunctionalSubArea;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores, Adrián Avilés, Sergio Flores
 */
public class SFormUserConfigurationTransaction extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mtrn.data.SDataUserConfigurationTransaction moUserConfigurationTransaction;
    private erp.lib.form.SFormField moFieldIsPurchasesItemAllApplying;
    private erp.lib.form.SFormField moFieldPurchasesConLimit_n;
    private erp.lib.form.SFormField moFieldPurchasesOrderLimit_n;
    private erp.lib.form.SFormField moFieldPurchasesOrderLimitMonthly_n;
    private erp.lib.form.SFormField moFieldPurchasesDocLimit_n;
    private erp.lib.form.SFormField moFieldIsSalesItemAllApplying;
    private erp.lib.form.SFormField moFieldSalesConLimit_n;
    private erp.lib.form.SFormField moFieldSalesOrderLimit_n;
    private erp.lib.form.SFormField moFieldSalesOrderLimitMonthly_n;
    private erp.lib.form.SFormField moFieldSalesDocLimit_n;
    private erp.lib.form.SFormField moFieldCapacityVolumeMinPercentage;
    private erp.lib.form.SFormField moFieldCapacityMassMinPercentage;
    
    private java.util.Vector<erp.lib.form.SFormComponentItem> mvFuncAreaItems;
    private java.util.HashMap<Integer, java.util.Vector<erp.lib.form.SFormComponentItem>> moFuncSubAreaItemsMap; // key = functional area ID; value = item array of its functional-subareas

    /** Creates new form SFormUserConfigurationTransaction */
    public SFormUserConfigurationTransaction(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_USR_CFG;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpUser = new javax.swing.JPanel();
        jlUser = new javax.swing.JLabel();
        jtfUser = new javax.swing.JTextField();
        jlBizPartner = new javax.swing.JLabel();
        jtfBizPartner = new javax.swing.JTextField();
        jTabbedPane = new javax.swing.JTabbedPane();
        jpSettingsTab = new javax.swing.JPanel();
        jpSettings = new javax.swing.JPanel();
        jckIsPurchasesItemAllApplying = new javax.swing.JCheckBox();
        Dummy01 = new javax.swing.JLabel();
        jlPurchasesConLimit_n = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jtfPurchasesConLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeyPurchasesCon = new javax.swing.JTextField();
        jlPurchasesOrderLimit_n = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jtfPurchasesOrderLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeyPurchasesOrder = new javax.swing.JTextField();
        jlPurchasesOrderLimitMonthly_n = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jtfPurchasesOrderLimitMonthly_n = new javax.swing.JTextField();
        jtfCurrencyKeyPurchasesOrderLimitMonthly_n = new javax.swing.JTextField();
        jlPurchasesDocLimit_n = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jtfPurchasesDocLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeyPurchasesDoc = new javax.swing.JTextField();
        jckIsSalesItemAllApplying = new javax.swing.JCheckBox();
        Dummy02 = new javax.swing.JLabel();
        jlSalesConLimit_n = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jtfSalesConLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeySalesCon = new javax.swing.JTextField();
        jlSalesOrderLimit_n = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jtfSalesOrderLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeySalesOrder = new javax.swing.JTextField();
        jlSalesOrderLimitMonthly_n = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jtfSalesOrderLimitMonthly_n = new javax.swing.JTextField();
        jtfCurrencyKeySalesOrderLimitMonthly_n = new javax.swing.JTextField();
        jlSalesDocLimit_n = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jtfSalesDocLimit_n = new javax.swing.JTextField();
        jtfCurrencyKeySalesDoc = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCapacityVolumeMinPer = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jtfCapacityVolumeMinPer = new javax.swing.JTextField();
        jlDummy = new javax.swing.JLabel();
        jlCapacityMassMinPer = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jtfCapacityMassMinPer = new javax.swing.JTextField();
        jlDummy1 = new javax.swing.JLabel();
        jpFuncAreasTab = new javax.swing.JPanel();
        jpFuncAreas = new javax.swing.JPanel();
        jpFuncAreasAvailable = new javax.swing.JPanel();
        jlFuncAreasAvailable = new javax.swing.JLabel();
        jspFuncAreasAvailable = new javax.swing.JScrollPane();
        jltFuncAreasAvailable = new javax.swing.JList<SFormComponentItem>();
        jpFuncAreasSelected = new javax.swing.JPanel();
        jlFuncAreasSelected = new javax.swing.JLabel();
        jspFuncAreasSelected = new javax.swing.JScrollPane();
        jltFuncAreasSelected = new javax.swing.JList<SFormComponentItem>();
        jpFuncAreasCommands = new javax.swing.JPanel();
        jpFunctionalsAreasCommandsN = new javax.swing.JPanel();
        jlFunctionalAreaCommandDummy = new javax.swing.JLabel();
        jbFunctionalAreaAdd = new javax.swing.JButton();
        jbFunctionalAreaAddAll = new javax.swing.JButton();
        jbFunctionalAreaRemove = new javax.swing.JButton();
        jbFunctionalAreaRemoveAll = new javax.swing.JButton();
        jpFuncSubAreas = new javax.swing.JPanel();
        jpFuncSubAreasAvailable = new javax.swing.JPanel();
        jlFuncSubAreasAvailable = new javax.swing.JLabel();
        jspFuncSubAreasAvailable = new javax.swing.JScrollPane();
        jltFuncSubAreasAvailable = new javax.swing.JList<SFormComponentItem>();
        jpFuncSubAreasSelected = new javax.swing.JPanel();
        jlFuncSubAreasSelected = new javax.swing.JLabel();
        jspFuncSubAreasSelected = new javax.swing.JScrollPane();
        jltFuncSubAreasSelected = new javax.swing.JList<SFormComponentItem>();
        jpFuncSubAreasCommands = new javax.swing.JPanel();
        jpFunctionalSubAreasCommandsN = new javax.swing.JPanel();
        jlFunctionalSubAreaCommandDummy = new javax.swing.JLabel();
        jbFunctionalSubAreaAdd = new javax.swing.JButton();
        jbFunctionalSubAreaAddAll = new javax.swing.JButton();
        jbFunctionalSubAreaRemove = new javax.swing.JButton();
        jbFunctionalSubAreaRemoveAll = new javax.swing.JButton();
        jpCommands = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración de usuario para transacciones");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpUser.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlUser.setText("Usuario:");
        jlUser.setPreferredSize(new java.awt.Dimension(75, 23));
        jpUser.add(jlUser);

        jtfUser.setEditable(false);
        jtfUser.setText("TEXT");
        jtfUser.setFocusable(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jpUser.add(jtfUser);

        jlBizPartner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBizPartner.setText("Empleado:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(75, 23));
        jpUser.add(jlBizPartner);

        jtfBizPartner.setEditable(false);
        jtfBizPartner.setText("TEXT");
        jtfBizPartner.setFocusable(false);
        jtfBizPartner.setPreferredSize(new java.awt.Dimension(350, 23));
        jpUser.add(jtfBizPartner);

        getContentPane().add(jpUser, java.awt.BorderLayout.PAGE_START);

        jpSettingsTab.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del usuario:"));
        jpSettingsTab.setLayout(new java.awt.BorderLayout());

        jpSettings.setLayout(new java.awt.GridLayout(14, 2, 0, 2));

        jckIsPurchasesItemAllApplying.setText("Puede comprar todos los ítem");
        jpSettings.add(jckIsPurchasesItemAllApplying);

        Dummy01.setForeground(java.awt.SystemColor.textInactiveText);
        Dummy01.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Dummy01.setText("(Límite 0.00 = sin límite)");
        jpSettings.add(Dummy01);

        jlPurchasesConLimit_n.setText("Límite máx. autorizado contratos compras:");
        jpSettings.add(jlPurchasesConLimit_n);

        jPanel15.setLayout(new java.awt.BorderLayout(2, 0));

        jtfPurchasesConLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPurchasesConLimit_n.setText("0");
        jPanel15.add(jtfPurchasesConLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeyPurchasesCon.setEditable(false);
        jtfCurrencyKeyPurchasesCon.setText("CUR");
        jtfCurrencyKeyPurchasesCon.setFocusable(false);
        jtfCurrencyKeyPurchasesCon.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel15.add(jtfCurrencyKeyPurchasesCon, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel15);

        jlPurchasesOrderLimit_n.setText("Límite máx. autorizado pedidos compras:");
        jpSettings.add(jlPurchasesOrderLimit_n);

        jPanel4.setLayout(new java.awt.BorderLayout(2, 0));

        jtfPurchasesOrderLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPurchasesOrderLimit_n.setText("0");
        jPanel4.add(jtfPurchasesOrderLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeyPurchasesOrder.setEditable(false);
        jtfCurrencyKeyPurchasesOrder.setText("CUR");
        jtfCurrencyKeyPurchasesOrder.setFocusable(false);
        jtfCurrencyKeyPurchasesOrder.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jtfCurrencyKeyPurchasesOrder, java.awt.BorderLayout.EAST);

        jpSettings.add(jPanel4);

        jlPurchasesOrderLimitMonthly_n.setText("Límite máx. mes autorizado pedidos compras:");
        jpSettings.add(jlPurchasesOrderLimitMonthly_n);

        jPanel12.setLayout(new java.awt.BorderLayout(2, 0));

        jtfPurchasesOrderLimitMonthly_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPurchasesOrderLimitMonthly_n.setText("0");
        jPanel12.add(jtfPurchasesOrderLimitMonthly_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeyPurchasesOrderLimitMonthly_n.setEditable(false);
        jtfCurrencyKeyPurchasesOrderLimitMonthly_n.setText("CUR");
        jtfCurrencyKeyPurchasesOrderLimitMonthly_n.setFocusable(false);
        jtfCurrencyKeyPurchasesOrderLimitMonthly_n.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel12.add(jtfCurrencyKeyPurchasesOrderLimitMonthly_n, java.awt.BorderLayout.EAST);

        jpSettings.add(jPanel12);

        jlPurchasesDocLimit_n.setText("Límite máx. autorizado facturas compras:");
        jpSettings.add(jlPurchasesDocLimit_n);

        jPanel5.setLayout(new java.awt.BorderLayout(2, 0));

        jtfPurchasesDocLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPurchasesDocLimit_n.setText("0");
        jPanel5.add(jtfPurchasesDocLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeyPurchasesDoc.setEditable(false);
        jtfCurrencyKeyPurchasesDoc.setText("CUR");
        jtfCurrencyKeyPurchasesDoc.setFocusable(false);
        jtfCurrencyKeyPurchasesDoc.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jtfCurrencyKeyPurchasesDoc, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel5);

        jckIsSalesItemAllApplying.setText("Puede vender todos los ítem");
        jpSettings.add(jckIsSalesItemAllApplying);

        Dummy02.setForeground(java.awt.SystemColor.textInactiveText);
        Dummy02.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        Dummy02.setText("(Límite 0.00 = sin límite)");
        jpSettings.add(Dummy02);

        jlSalesConLimit_n.setText("Límite máx. autorizado contratos ventas:");
        jpSettings.add(jlSalesConLimit_n);

        jPanel16.setLayout(new java.awt.BorderLayout(2, 0));

        jtfSalesConLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalesConLimit_n.setText("0");
        jPanel16.add(jtfSalesConLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeySalesCon.setEditable(false);
        jtfCurrencyKeySalesCon.setText("CUR");
        jtfCurrencyKeySalesCon.setFocusable(false);
        jtfCurrencyKeySalesCon.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfCurrencyKeySalesCon, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel16);

        jlSalesOrderLimit_n.setText("Límite máx. autorizado pedidos ventas:");
        jpSettings.add(jlSalesOrderLimit_n);

        jPanel6.setLayout(new java.awt.BorderLayout(2, 0));

        jtfSalesOrderLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalesOrderLimit_n.setText("0");
        jPanel6.add(jtfSalesOrderLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeySalesOrder.setEditable(false);
        jtfCurrencyKeySalesOrder.setText("CUR");
        jtfCurrencyKeySalesOrder.setFocusable(false);
        jtfCurrencyKeySalesOrder.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel6.add(jtfCurrencyKeySalesOrder, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel6);

        jlSalesOrderLimitMonthly_n.setText("Límite máx. mensual autorizado pedidos ventas:");
        jpSettings.add(jlSalesOrderLimitMonthly_n);

        jPanel13.setLayout(new java.awt.BorderLayout(2, 0));

        jtfSalesOrderLimitMonthly_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalesOrderLimitMonthly_n.setText("0");
        jPanel13.add(jtfSalesOrderLimitMonthly_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeySalesOrderLimitMonthly_n.setEditable(false);
        jtfCurrencyKeySalesOrderLimitMonthly_n.setText("CUR");
        jtfCurrencyKeySalesOrderLimitMonthly_n.setFocusable(false);
        jtfCurrencyKeySalesOrderLimitMonthly_n.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel13.add(jtfCurrencyKeySalesOrderLimitMonthly_n, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel13);

        jlSalesDocLimit_n.setText("Límite máx. autorizado facturas ventas:");
        jpSettings.add(jlSalesDocLimit_n);

        jPanel7.setLayout(new java.awt.BorderLayout(2, 0));

        jtfSalesDocLimit_n.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalesDocLimit_n.setText("0");
        jPanel7.add(jtfSalesDocLimit_n, java.awt.BorderLayout.CENTER);

        jtfCurrencyKeySalesDoc.setEditable(false);
        jtfCurrencyKeySalesDoc.setText("CUR");
        jtfCurrencyKeySalesDoc.setFocusable(false);
        jtfCurrencyKeySalesDoc.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfCurrencyKeySalesDoc, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel7);
        jpSettings.add(jPanel10);
        jpSettings.add(jPanel11);

        jlCapacityVolumeMinPer.setText("Capacidad mín. autorizada volumen embarques:");
        jlCapacityVolumeMinPer.setPreferredSize(new java.awt.Dimension(125, 14));
        jpSettings.add(jlCapacityVolumeMinPer);

        jPanel8.setLayout(new java.awt.BorderLayout(2, 0));

        jtfCapacityVolumeMinPer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCapacityVolumeMinPer.setText("0");
        jPanel8.add(jtfCapacityVolumeMinPer, java.awt.BorderLayout.CENTER);

        jlDummy.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jlDummy, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel8);

        jlCapacityMassMinPer.setText("Capacidad mín. autorizada masa embarques:");
        jpSettings.add(jlCapacityMassMinPer);

        jPanel9.setLayout(new java.awt.BorderLayout(2, 0));

        jtfCapacityMassMinPer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCapacityMassMinPer.setText("0");
        jPanel9.add(jtfCapacityMassMinPer, java.awt.BorderLayout.CENTER);

        jlDummy1.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jlDummy1, java.awt.BorderLayout.LINE_END);

        jpSettings.add(jPanel9);

        jpSettingsTab.add(jpSettings, java.awt.BorderLayout.NORTH);

        jTabbedPane.addTab("Límites de transacciones", jpSettingsTab);

        jpFuncAreasTab.setBorder(javax.swing.BorderFactory.createTitledBorder("Áreas funcionales del usuario:"));
        jpFuncAreasTab.setLayout(new java.awt.BorderLayout());

        jpFuncAreas.setLayout(new java.awt.BorderLayout(5, 0));

        jpFuncAreasAvailable.setPreferredSize(new java.awt.Dimension(325, 160));
        jpFuncAreasAvailable.setLayout(new java.awt.BorderLayout());

        jlFuncAreasAvailable.setText("Áreas funcionales disponibles:");
        jlFuncAreasAvailable.setPreferredSize(new java.awt.Dimension(115, 23));
        jpFuncAreasAvailable.add(jlFuncAreasAvailable, java.awt.BorderLayout.PAGE_START);

        jltFuncAreasAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltFuncAreasAvailableMouseClicked(evt);
            }
        });
        jspFuncAreasAvailable.setViewportView(jltFuncAreasAvailable);

        jpFuncAreasAvailable.add(jspFuncAreasAvailable, java.awt.BorderLayout.CENTER);

        jpFuncAreas.add(jpFuncAreasAvailable, java.awt.BorderLayout.WEST);

        jpFuncAreasSelected.setPreferredSize(new java.awt.Dimension(325, 160));
        jpFuncAreasSelected.setLayout(new java.awt.BorderLayout());

        jlFuncAreasSelected.setText("Áreas funcionales asignadas:");
        jlFuncAreasSelected.setPreferredSize(new java.awt.Dimension(105, 23));
        jpFuncAreasSelected.add(jlFuncAreasSelected, java.awt.BorderLayout.PAGE_START);

        jltFuncAreasSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltFuncAreasSelectedMouseClicked(evt);
            }
        });
        jspFuncAreasSelected.setViewportView(jltFuncAreasSelected);

        jpFuncAreasSelected.add(jspFuncAreasSelected, java.awt.BorderLayout.CENTER);

        jpFuncAreas.add(jpFuncAreasSelected, java.awt.BorderLayout.EAST);

        jpFuncAreasCommands.setPreferredSize(new java.awt.Dimension(200, 100));
        jpFuncAreasCommands.setLayout(new java.awt.BorderLayout());

        jpFunctionalsAreasCommandsN.setPreferredSize(new java.awt.Dimension(100, 130));
        jpFunctionalsAreasCommandsN.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jpFunctionalsAreasCommandsN.add(jlFunctionalAreaCommandDummy);

        jbFunctionalAreaAdd.setText(">");
        jbFunctionalAreaAdd.setToolTipText("Agregar");
        jpFunctionalsAreasCommandsN.add(jbFunctionalAreaAdd);

        jbFunctionalAreaAddAll.setText(">>");
        jbFunctionalAreaAddAll.setToolTipText("Agregar todo");
        jpFunctionalsAreasCommandsN.add(jbFunctionalAreaAddAll);

        jbFunctionalAreaRemove.setText("<");
        jbFunctionalAreaRemove.setToolTipText("Quitar");
        jpFunctionalsAreasCommandsN.add(jbFunctionalAreaRemove);

        jbFunctionalAreaRemoveAll.setText("<<");
        jbFunctionalAreaRemoveAll.setToolTipText("Quitar todo");
        jpFunctionalsAreasCommandsN.add(jbFunctionalAreaRemoveAll);

        jpFuncAreasCommands.add(jpFunctionalsAreasCommandsN, java.awt.BorderLayout.NORTH);

        jpFuncAreas.add(jpFuncAreasCommands, java.awt.BorderLayout.CENTER);

        jpFuncAreasTab.add(jpFuncAreas, java.awt.BorderLayout.NORTH);

        jpFuncSubAreas.setLayout(new java.awt.BorderLayout(5, 0));

        jpFuncSubAreasAvailable.setPreferredSize(new java.awt.Dimension(325, 160));
        jpFuncSubAreasAvailable.setLayout(new java.awt.BorderLayout());

        jlFuncSubAreasAvailable.setText("Subáreas funcionales disponibles:");
        jlFuncSubAreasAvailable.setPreferredSize(new java.awt.Dimension(115, 23));
        jpFuncSubAreasAvailable.add(jlFuncSubAreasAvailable, java.awt.BorderLayout.PAGE_START);

        jltFuncSubAreasAvailable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltFuncSubAreasAvailableMouseClicked(evt);
            }
        });
        jspFuncSubAreasAvailable.setViewportView(jltFuncSubAreasAvailable);

        jpFuncSubAreasAvailable.add(jspFuncSubAreasAvailable, java.awt.BorderLayout.CENTER);

        jpFuncSubAreas.add(jpFuncSubAreasAvailable, java.awt.BorderLayout.WEST);

        jpFuncSubAreasSelected.setPreferredSize(new java.awt.Dimension(325, 160));
        jpFuncSubAreasSelected.setLayout(new java.awt.BorderLayout());

        jlFuncSubAreasSelected.setText("Subáreas funcionales asignadas:");
        jlFuncSubAreasSelected.setPreferredSize(new java.awt.Dimension(105, 23));
        jpFuncSubAreasSelected.add(jlFuncSubAreasSelected, java.awt.BorderLayout.PAGE_START);

        jltFuncSubAreasSelected.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jltFuncSubAreasSelectedMouseClicked(evt);
            }
        });
        jspFuncSubAreasSelected.setViewportView(jltFuncSubAreasSelected);

        jpFuncSubAreasSelected.add(jspFuncSubAreasSelected, java.awt.BorderLayout.CENTER);

        jpFuncSubAreas.add(jpFuncSubAreasSelected, java.awt.BorderLayout.EAST);

        jpFuncSubAreasCommands.setPreferredSize(new java.awt.Dimension(200, 100));
        jpFuncSubAreasCommands.setLayout(new java.awt.BorderLayout());

        jpFunctionalSubAreasCommandsN.setPreferredSize(new java.awt.Dimension(100, 130));
        jpFunctionalSubAreasCommandsN.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jpFunctionalSubAreasCommandsN.add(jlFunctionalSubAreaCommandDummy);

        jbFunctionalSubAreaAdd.setText(">");
        jbFunctionalSubAreaAdd.setToolTipText("Agregar");
        jpFunctionalSubAreasCommandsN.add(jbFunctionalSubAreaAdd);

        jbFunctionalSubAreaAddAll.setText(">>");
        jbFunctionalSubAreaAddAll.setToolTipText("Agregar todo");
        jpFunctionalSubAreasCommandsN.add(jbFunctionalSubAreaAddAll);

        jbFunctionalSubAreaRemove.setText("<");
        jbFunctionalSubAreaRemove.setToolTipText("Quitar");
        jpFunctionalSubAreasCommandsN.add(jbFunctionalSubAreaRemove);

        jbFunctionalSubAreaRemoveAll.setText("<<");
        jbFunctionalSubAreaRemoveAll.setToolTipText("Quitar todo");
        jpFunctionalSubAreasCommandsN.add(jbFunctionalSubAreaRemoveAll);

        jpFuncSubAreasCommands.add(jpFunctionalSubAreasCommandsN, java.awt.BorderLayout.NORTH);

        jpFuncSubAreas.add(jpFuncSubAreasCommands, java.awt.BorderLayout.CENTER);

        jpFuncAreasTab.add(jpFuncSubAreas, java.awt.BorderLayout.SOUTH);

        jTabbedPane.addTab("Áreas funcionales", jpFuncAreasTab);

        getContentPane().add(jTabbedPane, java.awt.BorderLayout.CENTER);

        jpCommands.setPreferredSize(new java.awt.Dimension(392, 33));
        jpCommands.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommands.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpCommands.add(jbCancel);

        getContentPane().add(jpCommands, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(800, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jltFuncAreasAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltFuncAreasAvailableMouseClicked
        if (evt.getClickCount() == 2) {
            mouseClickedFuncAreasAvailable();
        }
    }//GEN-LAST:event_jltFuncAreasAvailableMouseClicked

    private void jltFuncAreasSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltFuncAreasSelectedMouseClicked
        if (evt.getClickCount() == 2) {
            mouseClickedFuncAreasSelected();
        }
    }//GEN-LAST:event_jltFuncAreasSelectedMouseClicked

    private void jltFuncSubAreasAvailableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltFuncSubAreasAvailableMouseClicked
        if (evt.getClickCount() == 2) {
            mouseClickedFuncSubAreasAvailable();
        }
    }//GEN-LAST:event_jltFuncSubAreasAvailableMouseClicked

    private void jltFuncSubAreasSelectedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jltFuncSubAreasSelectedMouseClicked
        if (evt.getClickCount() == 2) {
            mouseClickedFuncSubAreasSelected();
        }
    }//GEN-LAST:event_jltFuncSubAreasSelectedMouseClicked

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldIsPurchasesItemAllApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsPurchasesItemAllApplying);
        moFieldPurchasesConLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfPurchasesConLimit_n, jlPurchasesConLimit_n);
        moFieldPurchasesConLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldPurchasesOrderLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfPurchasesOrderLimit_n, jlPurchasesOrderLimit_n);
        moFieldPurchasesOrderLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldPurchasesOrderLimitMonthly_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfPurchasesOrderLimitMonthly_n, jlPurchasesOrderLimitMonthly_n);
        moFieldPurchasesOrderLimitMonthly_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldPurchasesDocLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfPurchasesDocLimit_n, jlPurchasesDocLimit_n);
        moFieldPurchasesDocLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldIsSalesItemAllApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsSalesItemAllApplying);
        moFieldSalesConLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSalesConLimit_n, jlSalesConLimit_n);
        moFieldSalesConLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldSalesOrderLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSalesOrderLimit_n, jlSalesOrderLimit_n);
        moFieldSalesOrderLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldSalesOrderLimitMonthly_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSalesOrderLimitMonthly_n, jlSalesOrderLimitMonthly_n);
        moFieldSalesOrderLimitMonthly_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldSalesDocLimit_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSalesDocLimit_n, jlSalesDocLimit_n);
        moFieldSalesDocLimit_n.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat());
        moFieldCapacityVolumeMinPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfCapacityVolumeMinPer, jlCapacityVolumeMinPer);
        moFieldCapacityVolumeMinPercentage.setIsPercent(true);
        moFieldCapacityVolumeMinPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldCapacityMassMinPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfCapacityMassMinPer, jlCapacityMassMinPer);
        moFieldCapacityMassMinPercentage.setIsPercent(true);
        moFieldCapacityMassMinPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());

        mvFields.add(moFieldIsPurchasesItemAllApplying);
        mvFields.add(moFieldPurchasesConLimit_n);
        mvFields.add(moFieldPurchasesOrderLimit_n);
        mvFields.add(moFieldPurchasesOrderLimitMonthly_n);
        mvFields.add(moFieldPurchasesDocLimit_n);
        mvFields.add(moFieldIsSalesItemAllApplying);
        mvFields.add(moFieldSalesConLimit_n);
        mvFields.add(moFieldSalesOrderLimit_n);
        mvFields.add(moFieldSalesOrderLimitMonthly_n);
        mvFields.add(moFieldSalesDocLimit_n);
        mvFields.add(moFieldCapacityVolumeMinPercentage);
        mvFields.add(moFieldCapacityMassMinPercentage);

        jbFunctionalAreaAdd.addActionListener(this);
        jbFunctionalAreaAddAll.addActionListener(this);
        jbFunctionalAreaRemove.addActionListener(this);
        jbFunctionalAreaRemoveAll.addActionListener(this);
        jbFunctionalSubAreaAdd.addActionListener(this);
        jbFunctionalSubAreaAddAll.addActionListener(this);
        jbFunctionalSubAreaRemove.addActionListener(this);
        jbFunctionalSubAreaRemoveAll.addActionListener(this);
        
        mvFuncAreaItems = null;
        moFuncSubAreaItemsMap = null;
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jckIsPurchasesItemAllApplying.requestFocus();
        }
    }
    
    /**
     * Update given list by adding items whose primary key matches the given functional area ID.
     */
    private void addFuncSubAreasToList(final javax.swing.JList<SFormComponentItem> list, final int funcAreaId) {
        Vector<SFormComponentItem> items = moFuncSubAreaItemsMap.get(funcAreaId);
        
        if (items != null && !items.isEmpty()) {
            int index = list.getSelectedIndex(); // attent to preserve current selection
            SFormUtilities.addListItems(list, items);

            int size = list.getModel().getSize();
            if (size > 0) {
                list.setSelectedIndex(index != -1 ? index : size - 1);
            }
        }
    }
    
    /**
     * Update given list by removing items whose foreign key matches the given functional area ID.
     */
    private void removeFuncSubAreasFromList(final javax.swing.JList<SFormComponentItem> list, final int funcAreaId) {
        Vector<SFormComponentItem> currentItems = SFormUtilities.getListItems(list);
        Vector<SFormComponentItem> elegibleItems = new Vector<>();
        
        for (SFormComponentItem item : currentItems) {
            if (((int[]) item.getForeignKey())[0] == funcAreaId) {
                elegibleItems.add(item);
            }
        }
        
        if (!elegibleItems.isEmpty()) {
            for (SFormComponentItem item : elegibleItems) {
                currentItems.remove(item);
            }
            
            list.setListData(currentItems);
            list.setSelectedIndex(0);
        }
    }
    
    private void actionFuncAreaAdd() {
        int index;
        if ((index = jltFuncAreasAvailable.getSelectedIndex()) != -1) {
            // move current available item to list of selected items:
            SFormComponentItem item = SFormUtilities.removeListSelectedItem(jltFuncAreasAvailable);
            SFormUtilities.addListItem(jltFuncAreasSelected, item);
            
            // select proper items on both lists:
            int size;
            if ((size = jltFuncAreasAvailable.getModel().getSize()) > 0) {
                jltFuncAreasAvailable.setSelectedIndex(index < size ? index : size - 1);
            }
            jltFuncAreasSelected.setSelectedIndex(jltFuncAreasSelected.getModel().getSize() - 1);
            
            // add related functional sub-areas as well:
            int funcAreaId = ((int[]) item.getPrimaryKey())[0];
            addFuncSubAreasToList(jltFuncSubAreasAvailable, funcAreaId);
        }
    }

    private void actionFuncAreaAddAll() {
        int items = jltFuncAreasAvailable.getModel().getSize();
        
        for (int i = 0; i < items; i++) {
            jltFuncAreasAvailable.setSelectedIndex(0);
            actionFuncAreaAdd(); // add all items, one at a time
        }
    }

    private void actionFuncAreaRemove() {
        int index;
        if ((index = jltFuncAreasSelected.getSelectedIndex()) != -1) {
            // move current selected item to list of available items:
            SFormComponentItem item = SFormUtilities.removeListSelectedItem(jltFuncAreasSelected);
            SFormUtilities.addListItem(jltFuncAreasAvailable, item);
            
            // select proper items on both lists:
            int size;
            if ((size = jltFuncAreasSelected.getModel().getSize()) > 0) {
                jltFuncAreasSelected.setSelectedIndex(index < size ? index : size - 1);
            }
            jltFuncAreasAvailable.setSelectedIndex(jltFuncAreasAvailable.getModel().getSize() - 1);
            
            // remove related functional sub-areas as well:
            int funcAreaId = ((int[]) item.getPrimaryKey())[0];
            removeFuncSubAreasFromList(jltFuncSubAreasAvailable, funcAreaId);
            removeFuncSubAreasFromList(jltFuncSubAreasSelected, funcAreaId);
        }
    }

    private void actionFuncAreaRemoveAll() {
        int items = jltFuncAreasSelected.getModel().getSize();
        
        for (int i = 0; i < items; i++) {
            jltFuncAreasSelected.setSelectedIndex(0);
            actionFuncAreaRemove(); // remove all items, one at a time
        }
    }

    private void actionFuncSubAreaAdd() {
        int index;
        if ((index = jltFuncSubAreasAvailable.getSelectedIndex()) != -1) {
            // move current available item to list of selected items:
            SFormComponentItem item = SFormUtilities.removeListSelectedItem(jltFuncSubAreasAvailable);
            SFormUtilities.addListItem(jltFuncSubAreasSelected, item);
            
            // select proper items on both lists:
            int size;
            if ((size = jltFuncSubAreasAvailable.getModel().getSize()) > 0) {
                jltFuncSubAreasAvailable.setSelectedIndex(index < size ? index : size - 1);
            }
            jltFuncSubAreasSelected.setSelectedIndex(jltFuncSubAreasSelected.getModel().getSize() - 1);
        }
    }

    private void actionFuncSubAreaAddAll() {
        int items = jltFuncSubAreasAvailable.getModel().getSize();
        
        for (int i = 0; i < items; i++) {
            jltFuncSubAreasAvailable.setSelectedIndex(0);
            actionFuncSubAreaAdd(); // add all items, one at a time
        }
    }

    private void actionFuncSubAreaRemove() {
        int index;
        if ((index = jltFuncSubAreasSelected.getSelectedIndex()) != -1) {
            // move current selected item to list of available items:
            SFormComponentItem item = SFormUtilities.removeListSelectedItem(jltFuncSubAreasSelected);
            SFormUtilities.addListItem(jltFuncSubAreasAvailable, item);
            
            // select proper items on both lists:
            int size;
            if ((size = jltFuncSubAreasSelected.getModel().getSize()) > 0) {
                jltFuncSubAreasSelected.setSelectedIndex(index < size ? index : size - 1);
            }
            jltFuncSubAreasAvailable.setSelectedIndex(jltFuncSubAreasAvailable.getModel().getSize() - 1);
        }
    }

    private void actionFuncSubAreaRemoveAll() {
        int items = jltFuncSubAreasSelected.getModel().getSize();
        
        for (int i = 0; i < items; i++) {
            jltFuncSubAreasSelected.setSelectedIndex(0);
            actionFuncSubAreaRemove(); // remove all items, one at a time
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void mouseClickedFuncAreasAvailable() {
        actionFuncAreaAdd();
    }

    private void mouseClickedFuncAreasSelected() {
        actionFuncAreaRemove();
    }

    private void mouseClickedFuncSubAreasAvailable() {
        actionFuncSubAreaAdd();
    }

    private void mouseClickedFuncSubAreasSelected() {
        actionFuncSubAreaRemove();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dummy01;
    private javax.swing.JLabel Dummy02;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFunctionalAreaAdd;
    private javax.swing.JButton jbFunctionalAreaAddAll;
    private javax.swing.JButton jbFunctionalAreaRemove;
    private javax.swing.JButton jbFunctionalAreaRemoveAll;
    private javax.swing.JButton jbFunctionalSubAreaAdd;
    private javax.swing.JButton jbFunctionalSubAreaAddAll;
    private javax.swing.JButton jbFunctionalSubAreaRemove;
    private javax.swing.JButton jbFunctionalSubAreaRemoveAll;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsPurchasesItemAllApplying;
    private javax.swing.JCheckBox jckIsSalesItemAllApplying;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlCapacityMassMinPer;
    private javax.swing.JLabel jlCapacityVolumeMinPer;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlFuncAreasAvailable;
    private javax.swing.JLabel jlFuncAreasSelected;
    private javax.swing.JLabel jlFuncSubAreasAvailable;
    private javax.swing.JLabel jlFuncSubAreasSelected;
    private javax.swing.JLabel jlFunctionalAreaCommandDummy;
    private javax.swing.JLabel jlFunctionalSubAreaCommandDummy;
    private javax.swing.JLabel jlPurchasesConLimit_n;
    private javax.swing.JLabel jlPurchasesDocLimit_n;
    private javax.swing.JLabel jlPurchasesOrderLimitMonthly_n;
    private javax.swing.JLabel jlPurchasesOrderLimit_n;
    private javax.swing.JLabel jlSalesConLimit_n;
    private javax.swing.JLabel jlSalesDocLimit_n;
    private javax.swing.JLabel jlSalesOrderLimitMonthly_n;
    private javax.swing.JLabel jlSalesOrderLimit_n;
    private javax.swing.JLabel jlUser;
    private javax.swing.JList<SFormComponentItem> jltFuncAreasAvailable;
    private javax.swing.JList<SFormComponentItem> jltFuncAreasSelected;
    private javax.swing.JList<SFormComponentItem> jltFuncSubAreasAvailable;
    private javax.swing.JList<SFormComponentItem> jltFuncSubAreasSelected;
    private javax.swing.JPanel jpCommands;
    private javax.swing.JPanel jpFuncAreas;
    private javax.swing.JPanel jpFuncAreasAvailable;
    private javax.swing.JPanel jpFuncAreasCommands;
    private javax.swing.JPanel jpFuncAreasSelected;
    private javax.swing.JPanel jpFuncAreasTab;
    private javax.swing.JPanel jpFuncSubAreas;
    private javax.swing.JPanel jpFuncSubAreasAvailable;
    private javax.swing.JPanel jpFuncSubAreasCommands;
    private javax.swing.JPanel jpFuncSubAreasSelected;
    private javax.swing.JPanel jpFunctionalSubAreasCommandsN;
    private javax.swing.JPanel jpFunctionalsAreasCommandsN;
    private javax.swing.JPanel jpSettings;
    private javax.swing.JPanel jpSettingsTab;
    private javax.swing.JPanel jpUser;
    private javax.swing.JScrollPane jspFuncAreasAvailable;
    private javax.swing.JScrollPane jspFuncAreasSelected;
    private javax.swing.JScrollPane jspFuncSubAreasAvailable;
    private javax.swing.JScrollPane jspFuncSubAreasSelected;
    private javax.swing.JTextField jtfBizPartner;
    private javax.swing.JTextField jtfCapacityMassMinPer;
    private javax.swing.JTextField jtfCapacityVolumeMinPer;
    private javax.swing.JTextField jtfCurrencyKeyPurchasesCon;
    private javax.swing.JTextField jtfCurrencyKeyPurchasesDoc;
    private javax.swing.JTextField jtfCurrencyKeyPurchasesOrder;
    private javax.swing.JTextField jtfCurrencyKeyPurchasesOrderLimitMonthly_n;
    private javax.swing.JTextField jtfCurrencyKeySalesCon;
    private javax.swing.JTextField jtfCurrencyKeySalesDoc;
    private javax.swing.JTextField jtfCurrencyKeySalesOrder;
    private javax.swing.JTextField jtfCurrencyKeySalesOrderLimitMonthly_n;
    private javax.swing.JTextField jtfPurchasesConLimit_n;
    private javax.swing.JTextField jtfPurchasesDocLimit_n;
    private javax.swing.JTextField jtfPurchasesOrderLimitMonthly_n;
    private javax.swing.JTextField jtfPurchasesOrderLimit_n;
    private javax.swing.JTextField jtfSalesConLimit_n;
    private javax.swing.JTextField jtfSalesDocLimit_n;
    private javax.swing.JTextField jtfSalesOrderLimitMonthly_n;
    private javax.swing.JTextField jtfSalesOrderLimit_n;
    private javax.swing.JTextField jtfUser;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moUserConfigurationTransaction = null;
        
        jTabbedPane.setSelectedIndex(0);

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }
        
        jtfUser.setText("");
        jtfBizPartner.setText("");

        jtfCurrencyKeyPurchasesCon.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyPurchasesOrder.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyPurchasesOrderLimitMonthly_n.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeyPurchasesDoc.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeySalesCon.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeySalesOrder.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeySalesOrderLimitMonthly_n.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfCurrencyKeySalesDoc.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        
        jltFuncAreasAvailable.setListData(new SFormComponentItem[] {});
        jltFuncAreasSelected.setListData(new SFormComponentItem[] {});
        jltFuncSubAreasAvailable.setListData(new SFormComponentItem[] {});
        jltFuncSubAreasSelected.setListData(new SFormComponentItem[] {});
    }

    @Override
    public void formRefreshCatalogues() {
        // populate available functional areas:
        
        mvFuncAreaItems = SDataReadComponentItems.getComponentItemsForList(SModConsts.CFGU_FUNC, miClient.getSession().getStatement(), null, null);
        
        jltFuncAreasAvailable.setListData(mvFuncAreaItems);
        
        // prepare map of functional sub-areas:
        
        moFuncSubAreaItemsMap = new HashMap<>();
        Vector<erp.lib.form.SFormComponentItem> funcSubAreaItems = SDataReadComponentItems.getComponentItemsForList(SModConsts.CFGU_FUNC_SUB, miClient.getSession().getStatement(), null, null);
        
        for (SFormComponentItem funcAreaItem : mvFuncAreaItems) {
            int funcAreaId = ((int[]) funcAreaItem.getPrimaryKey())[0];
            Vector<SFormComponentItem> items = new Vector<>();
            
            for (SFormComponentItem funcSubAreaItem : funcSubAreaItems) {
                if (((int[]) funcSubAreaItem.getForeignKey())[0] == funcAreaId) {
                    items.add(funcSubAreaItem);
                }
            }
            
            moFuncSubAreaItemsMap.put(funcAreaId, items);
        }
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            if (moFieldPurchasesOrderLimitMonthly_n.getDouble() > 0 && moFieldPurchasesOrderLimitMonthly_n.getDouble() < moFieldPurchasesOrderLimit_n.getDouble()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlPurchasesOrderLimitMonthly_n.getText() + "'.");
                validation.setComponent(jtfPurchasesOrderLimitMonthly_n);
                jTabbedPane.setSelectedIndex(0);
            }
            else if (!validation.getIsError() && moFieldSalesOrderLimitMonthly_n.getDouble() > 0 && moFieldSalesOrderLimitMonthly_n.getDouble() < moFieldSalesOrderLimit_n.getDouble()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlSalesOrderLimitMonthly_n.getText() + "'.");
                validation.setComponent(jtfSalesOrderLimitMonthly_n);
                jTabbedPane.setSelectedIndex(0);
            }
            else {
                for (int i = 0; i < jltFuncAreasSelected.getModel().getSize(); i++) {
                    boolean found = false;
                    SFormComponentItem funcAreaItem = (SFormComponentItem) jltFuncAreasSelected.getModel().getElementAt(i);
                    int funcAreaId = ((int[]) funcAreaItem.getPrimaryKey())[0];
                    
                    for (int j = 0; j < jltFuncSubAreasSelected.getModel().getSize(); j++) {
                        SFormComponentItem funcSubAreaItem = (SFormComponentItem) jltFuncSubAreasSelected.getModel().getElementAt(j);
                        if (((int[]) funcSubAreaItem.getForeignKey())[0] == funcAreaId) {
                            found = true;
                            break;
                        }
                    }
                    
                    if (!found) {
                        validation.setMessage("No se han asignado subáreas funcionales del área funcional '" + funcAreaItem.getItem() + "'.");
                        validation.setComponent(jltFuncSubAreasAvailable);
                        jTabbedPane.setSelectedIndex(1);
                        break;
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moUserConfigurationTransaction = (SDataUserConfigurationTransaction) registry;

        jtfUser.setText(moUserConfigurationTransaction.getDbmsUser());
        jtfUser.setCaretPosition(0);
        
        jtfBizPartner.setText(moUserConfigurationTransaction.getDbmsBizPartner());
        jtfBizPartner.setCaretPosition(0);
        
        moFieldIsPurchasesItemAllApplying.setFieldValue(moUserConfigurationTransaction.getIsPurchasesItemAllApplying());
        moFieldPurchasesConLimit_n.setFieldValue(moUserConfigurationTransaction.getPurchasesContractLimit_n());
        moFieldPurchasesOrderLimit_n.setFieldValue(moUserConfigurationTransaction.getPurchasesOrderLimit_n());
        moFieldPurchasesOrderLimitMonthly_n.setFieldValue(moUserConfigurationTransaction.getPurchasesOrderLimitMonthly_n());
        moFieldPurchasesDocLimit_n.setFieldValue(moUserConfigurationTransaction.getPurchasesDocLimit_n());
        moFieldIsSalesItemAllApplying.setFieldValue(moUserConfigurationTransaction.getIsSalesItemAllApplying());
        moFieldSalesConLimit_n.setFieldValue(moUserConfigurationTransaction.getSalesContractLimit_n());
        moFieldSalesOrderLimit_n.setFieldValue(moUserConfigurationTransaction.getSalesOrderLimit_n());
        moFieldSalesOrderLimitMonthly_n.setFieldValue(moUserConfigurationTransaction.getSalesOrderLimitMonthly_n());
        moFieldSalesDocLimit_n.setFieldValue(moUserConfigurationTransaction.getSalesDocLimit_n());
        moFieldCapacityVolumeMinPercentage.setFieldValue(moUserConfigurationTransaction.getCapacityVolumeMinPercentage());
        moFieldCapacityMassMinPercentage.setFieldValue(moUserConfigurationTransaction.getCapacityMassMinPercentage());
        
        // process assigned functional areas:
        
        HashMap<Integer, SFormComponentItem> funcAreaAvailableItemsMap = new HashMap<>(); // key = functional area ID; value = corresponding item
        Vector<SFormComponentItem> funcAreaSelectedItems = new Vector<>();
        
        for (SFormComponentItem item : mvFuncAreaItems) {
            funcAreaAvailableItemsMap.put(((int[]) item.getPrimaryKey())[0], item);
        }
        
        for (SDataUserFunctionalArea funcArea : moUserConfigurationTransaction.getUserFunctionalAreas()) {
            SFormComponentItem item = funcAreaAvailableItemsMap.remove(funcArea.getPkFunctionalAreaId());
            if (item != null) {
                funcAreaSelectedItems.add(item);
            }
        }
        
        List<SFormComponentItem> funcAreaAvailableItemsList = new ArrayList<>(funcAreaAvailableItemsMap.values());
        Collections.sort(funcAreaAvailableItemsList);
        
        jltFuncAreasAvailable.setListData(new Vector<>(funcAreaAvailableItemsList));
        if (jltFuncAreasAvailable.getModel().getSize() > 0) {
            jltFuncAreasAvailable.setSelectedIndex(0);
        }
        
        List<SFormComponentItem> funcAreaSelectedItemsList = new ArrayList<>(funcAreaSelectedItems);
        Collections.sort(funcAreaSelectedItemsList);
        
        jltFuncAreasSelected.setListData(new Vector<>(funcAreaSelectedItemsList));
        if (jltFuncAreasSelected.getModel().getSize() > 0) {
            jltFuncAreasSelected.setSelectedIndex(0);
        }
        
        // process assigned functional subareas:
        
        HashMap<Integer, SFormComponentItem> funcSubAreaAvailableItemsMap = new HashMap<>(); // key = functional sub-area ID; value = corresponding item
        Vector<SFormComponentItem> funcSubAreaSelectedItems = new Vector<>();
        
        for (SDataUserFunctionalArea funcSubArea : moUserConfigurationTransaction.getUserFunctionalAreas()) {
            Vector<SFormComponentItem> items = moFuncSubAreaItemsMap.get(funcSubArea.getPkFunctionalAreaId());
            if (items != null) {
                for (SFormComponentItem item : items) {
                    funcSubAreaAvailableItemsMap.put(((int[]) item.getPrimaryKey())[0], item);
                }
            }
        }
        
        for (SDataUserFunctionalSubArea funcSubArea : moUserConfigurationTransaction.getUserFunctionalSubAreas()) {
            SFormComponentItem item = funcSubAreaAvailableItemsMap.remove(funcSubArea.getPkFunctionalSubAreaId());
            if (item != null) {
                funcSubAreaSelectedItems.add(item);
            }
        }

        List<SFormComponentItem> funcSubAreaAvailableItemsList = new ArrayList<>(funcSubAreaAvailableItemsMap.values());
        Collections.sort(funcSubAreaAvailableItemsList);
        
        jltFuncSubAreasAvailable.setListData(new Vector<>(funcSubAreaAvailableItemsList));
        if (jltFuncSubAreasAvailable.getModel().getSize() > 0) {
            jltFuncSubAreasAvailable.setSelectedIndex(0);
        }
        
        List<SFormComponentItem> funcSubSelectedItemsList = new ArrayList<>(funcSubAreaSelectedItems);
        Collections.sort(funcSubSelectedItemsList);
        
        jltFuncSubAreasSelected.setListData(new Vector<>(funcSubSelectedItemsList));
        if (jltFuncSubAreasSelected.getModel().getSize() > 0) {
            jltFuncSubAreasSelected.setSelectedIndex(0);
        }
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moUserConfigurationTransaction == null) {
            moUserConfigurationTransaction = new SDataUserConfigurationTransaction();
            moUserConfigurationTransaction.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moUserConfigurationTransaction.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moUserConfigurationTransaction.setIsPurchasesItemAllApplying(moFieldIsPurchasesItemAllApplying.getBoolean());
        moUserConfigurationTransaction.setPurchasesContractLimit_n(moFieldPurchasesConLimit_n.getDouble() == 0 ? -1 : moFieldPurchasesConLimit_n.getDouble());
        moUserConfigurationTransaction.setPurchasesOrderLimit_n(moFieldPurchasesOrderLimit_n.getDouble() == 0 ? -1 : moFieldPurchasesOrderLimit_n.getDouble());
        moUserConfigurationTransaction.setPurchasesOrderLimitMonthly_n(moFieldPurchasesOrderLimitMonthly_n.getDouble() == 0 ? -1 : moFieldPurchasesOrderLimitMonthly_n.getDouble());
        moUserConfigurationTransaction.setPurchasesDocLimit_n(moFieldPurchasesDocLimit_n.getDouble() == 0 ? -1 : moFieldPurchasesDocLimit_n.getDouble());
        moUserConfigurationTransaction.setIsSalesItemAllApplying(moFieldIsSalesItemAllApplying.getBoolean());
        moUserConfigurationTransaction.setSalesContractLimit_n(moFieldSalesConLimit_n.getDouble() == 0 ? -1 : moFieldSalesConLimit_n.getDouble());
        moUserConfigurationTransaction.setSalesOrderLimit_n(moFieldSalesOrderLimit_n.getDouble() == 0 ? -1 : moFieldSalesOrderLimit_n.getDouble());
        moUserConfigurationTransaction.setSalesOrderLimitMonthly_n(moFieldSalesOrderLimitMonthly_n.getDouble() == 0 ? -1 : moFieldSalesOrderLimitMonthly_n.getDouble());
        moUserConfigurationTransaction.setSalesDocLimit_n(moFieldSalesDocLimit_n.getDouble() == 0 ? -1 : moFieldSalesDocLimit_n.getDouble());
        moUserConfigurationTransaction.setCapacityVolumeMinPercentage(moFieldCapacityVolumeMinPercentage.getDouble());
        moUserConfigurationTransaction.setCapacityMassMinPercentage(moFieldCapacityMassMinPercentage.getDouble());
        
        // get functional areas:
        
        moUserConfigurationTransaction.getUserFunctionalAreas().clear();
        for (int i = 0; i < jltFuncAreasSelected.getModel().getSize(); i++) {
            SDataUserFunctionalArea funcArea = new SDataUserFunctionalArea();
            funcArea.setPkFunctionalAreaId(((int[]) ((SFormComponentItem) jltFuncAreasSelected.getModel().getElementAt(i)).getPrimaryKey())[0]);
            moUserConfigurationTransaction.getUserFunctionalAreas().add(funcArea);
        }

        // get functional sub-areas:
        
        moUserConfigurationTransaction.getUserFunctionalSubAreas().clear();
        for (int i = 0; i < jltFuncSubAreasSelected.getModel().getSize(); i++) {
            SDataUserFunctionalSubArea funcSubArea = new SDataUserFunctionalSubArea();
            funcSubArea.setPkFunctionalSubAreaId(((int[]) ((SFormComponentItem) jltFuncSubAreasSelected.getModel().getElementAt(i)).getPrimaryKey())[0]);
            moUserConfigurationTransaction.getUserFunctionalSubAreas().add(funcSubArea);
        }

        return moUserConfigurationTransaction;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFunctionalAreaAdd) {
                actionFuncAreaAdd();
            }
            else if (button == jbFunctionalAreaAddAll) {
                actionFuncAreaAddAll();
            }
            else if (button == jbFunctionalAreaRemove) {
                actionFuncAreaRemove();
            }
            else if (button == jbFunctionalAreaRemoveAll) {
                actionFuncAreaRemoveAll();
            }
            else if (button == jbFunctionalSubAreaAdd) {
                actionFuncSubAreaAdd();
            }
            else if (button == jbFunctionalSubAreaAddAll) {
                actionFuncSubAreaAddAll();
            }
            else if (button == jbFunctionalSubAreaRemove) {
                actionFuncSubAreaRemove();
            }
            else if (button == jbFunctionalSubAreaRemoveAll) {
                actionFuncSubAreaRemoveAll();
            }
        }
    }
}
