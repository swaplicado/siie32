/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogContractAnalysis.java
 *
 * Created on 23/02/2012, 04:24:20 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableUtilities;
import erp.mod.SModConsts;
import erp.mtrn.data.SDataContractAnalysisRow;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;

/**
 *
 * @author Juan Barajas, Sergio Flores, Isabel Servín
 */
public class SDialogContractAnalysis extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, javax.swing.event.ListSelectionListener {

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private erp.lib.table.STablePane moTablePane;

    private erp.client.SClientInterface miClient;
    private erp.mtrn.data.SDataDps moParamDpsSource;
    private erp.mtrn.data.SDataContractAnalysisRow oRow;

    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldDateDocDelivery_n;
    private erp.lib.form.SFormField moFieldDateDocLapsing_n;
    private erp.lib.form.SFormField moFieldDateCut;
    private erp.lib.form.SFormField moFieldOrigQty;
    private erp.lib.form.SFormField moFieldQtyOrd;
    private erp.lib.form.SFormField moFieldQtyDoc;
    private erp.lib.form.SFormField moFieldQtyAdj;
    private erp.lib.form.SFormField moFieldQtyOrdMissig;
    private erp.lib.form.SFormField moFieldQtyDocMissig;
    private erp.lib.form.SFormField moFieldQtyOrdPercentage;
    private erp.lib.form.SFormField moFieldQtyDocPercentage;
    private erp.lib.form.SFormField moFieldQtyAdjPercentage;
    private erp.lib.form.SFormField moFieldQtyOrdMissigPercentage;
    private erp.lib.form.SFormField moFieldQtyDocMissigPercentage;
    private erp.lib.form.SFormField moFieldSurplusPercentage;
    private erp.lib.form.SFormField moFieldOriginalPriceUnitaryCy;
    private erp.lib.form.SFormField moFieldIncoterm;
    private erp.lib.form.SFormField moFieldModeOfTransportationType;

    private int mnPkYearId;
    private int mnPkDocId;
    private int mnPkEntryId;
    private double mdOrigQty;
    private double mdQtyOrd;
    private double mdQtyDoc;
    private double mdQtyAdj;
    private double mdQtyOrdMissing;
    private double mdQtyDocMissing;
    private double mdQtyOrdPer;
    private double mdQtyDocPer;
    private double mdQtyAdjPer;
    private double mdQtyOrdMissingPer;
    private double mdQtyDocMissingPer;
    private String msOrigUnit;
    private String msUnitOrd;
    private String msUnitDoc;
    private String msUnitAdj;
    private double mdSurplusPer;
    private double mdOrigPriceUnitary;
    private boolean mbIsAdd;

    /** Creates new form SDialogDpsLink */
    public SDialogContractAnalysis(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpRegistryDatas = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        jtfBizPartner = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlBizPartnerBranch = new javax.swing.JLabel();
        jtfBizPartnerBranch = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlDateDoc = new javax.swing.JLabel();
        jftDateDoc = new javax.swing.JFormattedTextField();
        jtfNumberSeries = new javax.swing.JTextField();
        jtfNumberReference = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlDateDocLapsing_n = new javax.swing.JLabel();
        jftDateDocDelivery_n = new javax.swing.JFormattedTextField();
        jlDateDocDelivery_n = new javax.swing.JLabel();
        jftDateDocLapsing_n = new javax.swing.JFormattedTextField();
        jlDummy1 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jlDaysOfCredit = new javax.swing.JLabel();
        jtfDaysOfCredit = new javax.swing.JTextField();
        jpEntries = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jltEntries = new javax.swing.JList();
        jPanel15 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlOriginalPriceUnitaryCy = new javax.swing.JLabel();
        jtfOriginalPriceUnitaryCy = new javax.swing.JTextField();
        jtfCurrencyKey = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jlOrigQty = new javax.swing.JLabel();
        jtfOrigQty = new javax.swing.JTextField();
        jtfOrigUnit = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlSurplusPercentage = new javax.swing.JLabel();
        jtfSurplusPercentage = new javax.swing.JTextField();
        jpLinks = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jlDateCut = new javax.swing.JLabel();
        jftDateCut = new javax.swing.JFormattedTextField();
        jPanel5 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jpAdditionalImformation = new javax.swing.JPanel();
        jpInformation = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlQtyOrd = new javax.swing.JLabel();
        jtfQtyOrd = new javax.swing.JTextField();
        jtfQtyOrdPercentage = new javax.swing.JTextField();
        jtfUnitOrd = new javax.swing.JTextField();
        jlQtyOrdMissing = new javax.swing.JLabel();
        jtfQtyOrdMissing = new javax.swing.JTextField();
        jtfQtyOrdMissigPercentage = new javax.swing.JTextField();
        jtfUnitOrdMissing = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlQtyDoc = new javax.swing.JLabel();
        jtfQtyDoc = new javax.swing.JTextField();
        jtfQtyDocPercentage = new javax.swing.JTextField();
        jtfUnitDoc = new javax.swing.JTextField();
        jlQtyDocMissing = new javax.swing.JLabel();
        jtfQtyDocMissing = new javax.swing.JTextField();
        jtfQtyDocMissigPercentage = new javax.swing.JTextField();
        jtfUnitDocMissing = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlQtyAdj = new javax.swing.JLabel();
        jtfQtyAdj = new javax.swing.JTextField();
        jtfQtyAdjPercentage = new javax.swing.JTextField();
        jtfUnitAdj = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlSalesAgentRo = new javax.swing.JLabel();
        jtfSalesAgentRo = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlIncoterm = new javax.swing.JLabel();
        jtfIncoterm = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jlModeOfTransportationType = new javax.swing.JLabel();
        jtfModeOfTransportationType = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seguimiento del contrato");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpRegistryDatas.setBorder(javax.swing.BorderFactory.createTitledBorder("Información del contrato:"));
        jpRegistryDatas.setMinimumSize(new java.awt.Dimension(100, 100));
        jpRegistryDatas.setPreferredSize(new java.awt.Dimension(475, 160));
        jpRegistryDatas.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel6.setMinimumSize(new java.awt.Dimension(50, 27));
        jPanel6.setPreferredSize(new java.awt.Dimension(50, 27));
        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Asociado de negocios:");
        jlBizPartner.setMinimumSize(new java.awt.Dimension(125, 23));
        jlBizPartner.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlBizPartner);

        jtfBizPartner.setEditable(false);
        jtfBizPartner.setText("BUSINESS PARTNER");
        jtfBizPartner.setFocusable(false);
        jtfBizPartner.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfBizPartner.setOpaque(false);
        jtfBizPartner.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel6.add(jtfBizPartner);

        jpRegistryDatas.add(jPanel6);

        jPanel7.setMinimumSize(new java.awt.Dimension(50, 23));
        jPanel7.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartnerBranch.setText("Sucursal del asociado:");
        jlBizPartnerBranch.setMinimumSize(new java.awt.Dimension(125, 23));
        jlBizPartnerBranch.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlBizPartnerBranch);

        jtfBizPartnerBranch.setEditable(false);
        jtfBizPartnerBranch.setText("BRANCH");
        jtfBizPartnerBranch.setFocusable(false);
        jtfBizPartnerBranch.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfBizPartnerBranch.setOpaque(false);
        jtfBizPartnerBranch.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel7.add(jtfBizPartnerBranch);

        jpRegistryDatas.add(jPanel7);

        jPanel8.setMinimumSize(new java.awt.Dimension(50, 23));
        jPanel8.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDoc.setText("Contrato:");
        jlDateDoc.setMinimumSize(new java.awt.Dimension(125, 23));
        jlDateDoc.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlDateDoc);

        jftDateDoc.setEditable(false);
        jftDateDoc.setText("yyyy/mm/dd");
        jftDateDoc.setToolTipText("Fecha del contrato");
        jftDateDoc.setFocusable(false);
        jftDateDoc.setOpaque(false);
        jftDateDoc.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel8.add(jftDateDoc);

        jtfNumberSeries.setEditable(false);
        jtfNumberSeries.setText("00000000");
        jtfNumberSeries.setToolTipText("Folio del contrato");
        jtfNumberSeries.setFocusable(false);
        jtfNumberSeries.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfNumberSeries.setOpaque(false);
        jtfNumberSeries.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfNumberSeries);

        jtfNumberReference.setEditable(false);
        jtfNumberReference.setText("ABC000ABC000");
        jtfNumberReference.setToolTipText("Referencia");
        jtfNumberReference.setFocusable(false);
        jtfNumberReference.setMinimumSize(new java.awt.Dimension(73, 23));
        jtfNumberReference.setOpaque(false);
        jtfNumberReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfNumberReference);

        jpRegistryDatas.add(jPanel8);

        jPanel9.setMinimumSize(new java.awt.Dimension(50, 23));
        jPanel9.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDocLapsing_n.setText("Periodo de vigencia:");
        jlDateDocLapsing_n.setMinimumSize(new java.awt.Dimension(100, 23));
        jlDateDocLapsing_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlDateDocLapsing_n);

        jftDateDocDelivery_n.setEditable(false);
        jftDateDocDelivery_n.setText("yyyy/mm/dd");
        jftDateDocDelivery_n.setToolTipText("Fecha de entrega programada");
        jftDateDocDelivery_n.setFocusable(false);
        jftDateDocDelivery_n.setOpaque(false);
        jftDateDocDelivery_n.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel9.add(jftDateDocDelivery_n);

        jlDateDocDelivery_n.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateDocDelivery_n.setText("hasta");
        jlDateDocDelivery_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlDateDocDelivery_n);

        jftDateDocLapsing_n.setEditable(false);
        jftDateDocLapsing_n.setText("yyyy/mm/dd");
        jftDateDocLapsing_n.setToolTipText("Fecha fin de contrato");
        jftDateDocLapsing_n.setFocusable(false);
        jftDateDocLapsing_n.setOpaque(false);
        jftDateDocLapsing_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jftDateDocLapsing_n);

        jlDummy1.setPreferredSize(new java.awt.Dimension(173, 23));
        jPanel9.add(jlDummy1);

        jpRegistryDatas.add(jPanel9);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda del contrato:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setText("CUR");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setOpaque(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel16.add(jtfCurrency);

        jlDaysOfCredit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDaysOfCredit.setText("Días crédito:");
        jlDaysOfCredit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlDaysOfCredit);

        jtfDaysOfCredit.setEditable(false);
        jtfDaysOfCredit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfDaysOfCredit.setText("0");
        jtfDaysOfCredit.setFocusable(false);
        jtfDaysOfCredit.setOpaque(false);
        jtfDaysOfCredit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jtfDaysOfCredit);

        jpRegistryDatas.add(jPanel16);

        jPanel1.add(jpRegistryDatas, java.awt.BorderLayout.WEST);

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del contrato:"));
        jpEntries.setPreferredSize(new java.awt.Dimension(250, 100));
        jpEntries.setLayout(new java.awt.BorderLayout());

        jPanel10.setPreferredSize(new java.awt.Dimension(250, 100));
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));
        jpEntries.add(jPanel10, java.awt.BorderLayout.WEST);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(390, 100));

        jltEntries.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1 ", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jltEntries.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jltEntries.setMaximumSize(new java.awt.Dimension(36, 100));
        jltEntries.setMinimumSize(new java.awt.Dimension(36, 100));
        jltEntries.setPreferredSize(new java.awt.Dimension(260, 100));
        jScrollPane1.setViewportView(jltEntries);

        jpEntries.add(jScrollPane1, java.awt.BorderLayout.WEST);

        jPanel1.add(jpEntries, java.awt.BorderLayout.CENTER);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de la partida:"));
        jPanel15.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel20.setPreferredSize(new java.awt.Dimension(240, 23));
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalPriceUnitaryCy.setText("Precio unitario: ");
        jlOriginalPriceUnitaryCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlOriginalPriceUnitaryCy);

        jtfOriginalPriceUnitaryCy.setEditable(false);
        jtfOriginalPriceUnitaryCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfOriginalPriceUnitaryCy.setText("0,000,000.0000");
        jtfOriginalPriceUnitaryCy.setFocusable(false);
        jtfOriginalPriceUnitaryCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel20.add(jtfOriginalPriceUnitaryCy);

        jtfCurrencyKey.setEditable(false);
        jtfCurrencyKey.setText("CUR");
        jtfCurrencyKey.setFocusable(false);
        jtfCurrencyKey.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel20.add(jtfCurrencyKey);

        jPanel15.add(jPanel20);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOrigQty.setText("Cant. contratada:");
        jlOrigQty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlOrigQty);

        jtfOrigQty.setEditable(false);
        jtfOrigQty.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfOrigQty.setText("0.0000");
        jtfOrigQty.setFocusable(false);
        jtfOrigQty.setOpaque(false);
        jtfOrigQty.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel18.add(jtfOrigQty);

        jtfOrigUnit.setEditable(false);
        jtfOrigUnit.setText("UN");
        jtfOrigUnit.setFocusable(false);
        jtfOrigUnit.setOpaque(false);
        jtfOrigUnit.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel18.add(jtfOrigUnit);

        jPanel15.add(jPanel18);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSurplusPercentage.setText("Excedente:");
        jlSurplusPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlSurplusPercentage);

        jtfSurplusPercentage.setEditable(false);
        jtfSurplusPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSurplusPercentage.setText("0.00%");
        jtfSurplusPercentage.setFocusable(false);
        jtfSurplusPercentage.setOpaque(false);
        jtfSurplusPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jtfSurplusPercentage);

        jPanel15.add(jPanel13);

        jPanel1.add(jPanel15, java.awt.BorderLayout.EAST);

        jpDps.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpLinks.setBorder(javax.swing.BorderFactory.createTitledBorder("Vínculos de la partida:"));
        jpLinks.setLayout(new java.awt.BorderLayout());

        jPanel23.setPreferredSize(new java.awt.Dimension(340, 25));
        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel24.setPreferredSize(new java.awt.Dimension(240, 27));
        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateCut.setText("Fecha de corte:");
        jlDateCut.setMinimumSize(new java.awt.Dimension(100, 23));
        jlDateCut.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel24.add(jlDateCut);

        jftDateCut.setEditable(false);
        jftDateCut.setText("yyyy/mm/dd");
        jftDateCut.setFocusable(false);
        jftDateCut.setOpaque(false);
        jftDateCut.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel24.add(jftDateCut);

        jPanel23.add(jPanel24, java.awt.BorderLayout.WEST);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel5.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jbExportCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportCsvActionPerformed(evt);
            }
        });
        jPanel5.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jPanel5.add(jbRefresh);

        jPanel23.add(jPanel5, java.awt.BorderLayout.EAST);

        jpLinks.add(jPanel23, java.awt.BorderLayout.PAGE_START);

        jpDps.add(jpLinks, java.awt.BorderLayout.CENTER);

        jpAdditionalImformation.setBorder(javax.swing.BorderFactory.createTitledBorder("Información adicional:"));
        jpAdditionalImformation.setLayout(new java.awt.BorderLayout());

        jpInformation.setMinimumSize(new java.awt.Dimension(100, 100));
        jpInformation.setPreferredSize(new java.awt.Dimension(750, 90));
        jpInformation.setVerifyInputWhenFocusTarget(false);
        jpInformation.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel2.setMinimumSize(new java.awt.Dimension(50, 27));
        jPanel2.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQtyOrd.setText("Cantidad pedida:");
        jlQtyOrd.setMinimumSize(new java.awt.Dimension(100, 23));
        jlQtyOrd.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel2.add(jlQtyOrd);

        jtfQtyOrd.setEditable(false);
        jtfQtyOrd.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyOrd.setText("0.0000");
        jtfQtyOrd.setFocusable(false);
        jtfQtyOrd.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfQtyOrd.setOpaque(false);
        jtfQtyOrd.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(jtfQtyOrd);

        jtfQtyOrdPercentage.setEditable(false);
        jtfQtyOrdPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyOrdPercentage.setText("0.00%");
        jtfQtyOrdPercentage.setFocusable(false);
        jtfQtyOrdPercentage.setOpaque(false);
        jtfQtyOrdPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jtfQtyOrdPercentage);

        jtfUnitOrd.setEditable(false);
        jtfUnitOrd.setText("UN");
        jtfUnitOrd.setFocusable(false);
        jtfUnitOrd.setOpaque(false);
        jtfUnitOrd.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel2.add(jtfUnitOrd);

        jlQtyOrdMissing.setText("Cantidad por pedir:");
        jlQtyOrdMissing.setMinimumSize(new java.awt.Dimension(100, 23));
        jlQtyOrdMissing.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel2.add(jlQtyOrdMissing);

        jtfQtyOrdMissing.setEditable(false);
        jtfQtyOrdMissing.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyOrdMissing.setText("0.0000");
        jtfQtyOrdMissing.setFocusable(false);
        jtfQtyOrdMissing.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfQtyOrdMissing.setOpaque(false);
        jtfQtyOrdMissing.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(jtfQtyOrdMissing);

        jtfQtyOrdMissigPercentage.setEditable(false);
        jtfQtyOrdMissigPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyOrdMissigPercentage.setText("0.00%");
        jtfQtyOrdMissigPercentage.setFocusable(false);
        jtfQtyOrdMissigPercentage.setOpaque(false);
        jtfQtyOrdMissigPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jtfQtyOrdMissigPercentage);

        jtfUnitOrdMissing.setEditable(false);
        jtfUnitOrdMissing.setText("UN");
        jtfUnitOrdMissing.setFocusable(false);
        jtfUnitOrdMissing.setOpaque(false);
        jtfUnitOrdMissing.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel2.add(jtfUnitOrdMissing);

        jpInformation.add(jPanel2);

        jPanel3.setMinimumSize(new java.awt.Dimension(50, 23));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQtyDoc.setText("Cantidad facturada:");
        jlQtyDoc.setMinimumSize(new java.awt.Dimension(100, 23));
        jlQtyDoc.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel3.add(jlQtyDoc);

        jtfQtyDoc.setEditable(false);
        jtfQtyDoc.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyDoc.setText("0.0000");
        jtfQtyDoc.setFocusable(false);
        jtfQtyDoc.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfQtyDoc.setOpaque(false);
        jtfQtyDoc.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jtfQtyDoc);

        jtfQtyDocPercentage.setEditable(false);
        jtfQtyDocPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyDocPercentage.setText("0.00%");
        jtfQtyDocPercentage.setFocusable(false);
        jtfQtyDocPercentage.setOpaque(false);
        jtfQtyDocPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfQtyDocPercentage);

        jtfUnitDoc.setEditable(false);
        jtfUnitDoc.setText("UN");
        jtfUnitDoc.setFocusable(false);
        jtfUnitDoc.setOpaque(false);
        jtfUnitDoc.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel3.add(jtfUnitDoc);

        jlQtyDocMissing.setText("Cantidad por facturar:");
        jlQtyDocMissing.setMinimumSize(new java.awt.Dimension(100, 23));
        jlQtyDocMissing.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel3.add(jlQtyDocMissing);

        jtfQtyDocMissing.setEditable(false);
        jtfQtyDocMissing.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyDocMissing.setText("0.0000");
        jtfQtyDocMissing.setFocusable(false);
        jtfQtyDocMissing.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfQtyDocMissing.setOpaque(false);
        jtfQtyDocMissing.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jtfQtyDocMissing);

        jtfQtyDocMissigPercentage.setEditable(false);
        jtfQtyDocMissigPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyDocMissigPercentage.setText("0.00%");
        jtfQtyDocMissigPercentage.setFocusable(false);
        jtfQtyDocMissigPercentage.setOpaque(false);
        jtfQtyDocMissigPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfQtyDocMissigPercentage);

        jtfUnitDocMissing.setEditable(false);
        jtfUnitDocMissing.setText("UN");
        jtfUnitDocMissing.setFocusable(false);
        jtfUnitDocMissing.setOpaque(false);
        jtfUnitDocMissing.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel3.add(jtfUnitDocMissing);

        jpInformation.add(jPanel3);

        jPanel22.setPreferredSize(new java.awt.Dimension(100, 27));
        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQtyAdj.setText("Cantidad devuelta:");
        jlQtyAdj.setMinimumSize(new java.awt.Dimension(100, 23));
        jlQtyAdj.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel22.add(jlQtyAdj);

        jtfQtyAdj.setEditable(false);
        jtfQtyAdj.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyAdj.setText("0.0000");
        jtfQtyAdj.setFocusable(false);
        jtfQtyAdj.setMinimumSize(new java.awt.Dimension(100, 23));
        jtfQtyAdj.setOpaque(false);
        jtfQtyAdj.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel22.add(jtfQtyAdj);

        jtfQtyAdjPercentage.setEditable(false);
        jtfQtyAdjPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQtyAdjPercentage.setText("0.00%");
        jtfQtyAdjPercentage.setFocusable(false);
        jtfQtyAdjPercentage.setOpaque(false);
        jtfQtyAdjPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jtfQtyAdjPercentage);

        jtfUnitAdj.setEditable(false);
        jtfUnitAdj.setText("UN");
        jtfUnitAdj.setFocusable(false);
        jtfUnitAdj.setOpaque(false);
        jtfUnitAdj.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel22.add(jtfUnitAdj);

        jPanel4.setMinimumSize(new java.awt.Dimension(50, 23));
        jPanel4.setPreferredSize(new java.awt.Dimension(360, 27));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));
        jPanel22.add(jPanel4);

        jpInformation.add(jPanel22);

        jpAdditionalImformation.add(jpInformation, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.GridLayout(3, 0));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        jlSalesAgentRo.setText("Agente de ventas:");
        jlSalesAgentRo.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlSalesAgentRo);

        jtfSalesAgentRo.setEditable(false);
        jtfSalesAgentRo.setFocusable(false);
        jtfSalesAgentRo.setOpaque(false);
        jtfSalesAgentRo.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel12.add(jtfSalesAgentRo);

        jPanel11.add(jPanel12);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        jlIncoterm.setText("Entrega (Incoterm):");
        jlIncoterm.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlIncoterm);

        jtfIncoterm.setEditable(false);
        jtfIncoterm.setFocusable(false);
        jtfIncoterm.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel14.add(jtfIncoterm);

        jPanel11.add(jPanel14);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 2));

        jlModeOfTransportationType.setText("Tipo modo transp.:");
        jlModeOfTransportationType.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel19.add(jlModeOfTransportationType);

        jtfModeOfTransportationType.setEditable(false);
        jtfModeOfTransportationType.setFocusable(false);
        jtfModeOfTransportationType.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel19.add(jtfModeOfTransportationType);

        jPanel11.add(jPanel19);

        jpAdditionalImformation.add(jPanel11, java.awt.BorderLayout.EAST);

        jpDps.add(jpAdditionalImformation, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jpControls.add(jbClose);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(1199, 650));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbExportCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportCsvActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jbExportCsvActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jbRefreshActionPerformed

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;
        oRow = null;

        moTablePane = new STablePane(miClient);
        jpLinks.add(moTablePane, BorderLayout.CENTER);

        moFieldDate = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateDoc, jlDateDoc);
        moFieldDateDocDelivery_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateDocDelivery_n, jlDateDocDelivery_n);
        moFieldDateDocLapsing_n = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateDocLapsing_n, jlDateDocLapsing_n);
        moFieldDateCut = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateCut, jlDateCut);
        moFieldOrigQty = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfOrigQty, jlOrigQty);
        moFieldOrigQty.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyOrd = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQtyOrd, jlQtyOrd);
        moFieldQtyOrd.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyDoc = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQtyDoc, jlQtyDoc);
        moFieldQtyDoc.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyAdj = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQtyAdj, jlQtyAdj);
        moFieldQtyAdj.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyOrdMissig = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQtyOrdMissing, jlQtyOrdMissing);
        moFieldQtyOrdMissig.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyDocMissig = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQtyDocMissing, jlQtyDocMissing);
        moFieldQtyDocMissig.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldQtyOrdPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQtyOrdPercentage, jlQtyOrd);
        moFieldQtyOrdPercentage.setIsPercent(true);
        moFieldQtyOrdPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldQtyDocPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQtyDocPercentage, jlQtyDoc);
        moFieldQtyDocPercentage.setIsPercent(true);
        moFieldQtyDocPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldQtyAdjPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQtyAdjPercentage, jlQtyAdj);
        moFieldQtyAdjPercentage.setIsPercent(true);
        moFieldQtyAdjPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldQtyOrdMissigPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQtyOrdMissigPercentage, jlQtyOrdMissing);
        moFieldQtyOrdMissigPercentage.setIsPercent(true);
        moFieldQtyOrdMissigPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldQtyDocMissigPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfQtyDocMissigPercentage, jlQtyDocMissing);
        moFieldQtyDocMissigPercentage.setIsPercent(true);
        moFieldQtyDocMissigPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldSurplusPercentage = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfSurplusPercentage, jlSurplusPercentage);
        moFieldSurplusPercentage.setIsPercent(true);
        moFieldSurplusPercentage.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldOriginalPriceUnitaryCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfOriginalPriceUnitaryCy, jlOriginalPriceUnitaryCy);
        moFieldOriginalPriceUnitaryCy.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsValueUnitaryFormat());
        moFieldIncoterm = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfIncoterm, jlIncoterm);
        moFieldModeOfTransportationType = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfModeOfTransportationType, jlModeOfTransportationType);

        aoTableColumns = new STableColumnForm[23];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha ped.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo ped.", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio ped.", STableConstants.WIDTH_DOC_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal ped.", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Partida ped.", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad ped.", STableConstants.WIDTH_QUANTITY);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha fac.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo fac.", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio fac.", STableConstants.WIDTH_DOC_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia coms.", STableConstants.WIDTH_DOC_NUM_REF);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal fac.", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total fac. $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo fac. $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Partida fac.", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad fac.", STableConstants.WIDTH_QUANTITY);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Remolque, tanq./cont.", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha NC", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo NC", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio NC", STableConstants.WIDTH_DOC_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal NC", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Partida NC", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cantidad NC", STableConstants.WIDTH_QUANTITY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total NC $", STableConstants.WIDTH_VALUE_2X);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePane.addTableColumn(aoTableColumns[i]);
        }

        jbClose.addActionListener(this);
        jltEntries.addListSelectionListener(this);
        jbSeek.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jtfSeek.addActionListener(this);

        SFormUtilities.createActionMap(this.getRootPane(), this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jltEntries.requestFocus();
        }
    }

    @SuppressWarnings("unchecked")
    private void renderDpsSourceEntries() {
        String sEntry = "";
        Vector<SFormComponentItem> vVector = new Vector<>();

        jltEntries.removeAll();
        moTablePane.clearTableRows();

        if (moParamDpsSource != null) {
            for (SDataDpsEntry entry : moParamDpsSource.getDbmsDpsEntries()) {
                if (!entry.getIsDeleted()) {
                    sEntry = entry.getConceptKey() + " | " + entry.getConcept();
                    vVector.add(new SFormComponentItem(new int[]{entry.getPkYearId(), entry.getPkDocId(), entry.getPkEntryId()}, sEntry));

                    jltEntries.setListData(vVector);
                }
            }

            if (jltEntries.getModel().getSize() > 0) {
                jltEntries.setSelectedIndex(0);
            }
        }
     }

     private void renderDpsSource() {
         jtfBizPartner.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { moParamDpsSource.getFkBizPartnerId_r() }));
         jtfBizPartnerBranch.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moParamDpsSource.getFkBizPartnerBranchId() }));
         jtfNumberSeries.setText(moParamDpsSource.getNumberSeries().length() > 0 ? moParamDpsSource.getNumberSeries() + "-" + moParamDpsSource.getNumber() : moParamDpsSource.getNumber());
         jtfNumberReference.setText(moParamDpsSource.getNumberReference());
         jtfSalesAgentRo.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { moParamDpsSource.getFkSalesAgentId_n() }));
         moFieldDate.setFieldValue(moParamDpsSource.getDate());
         moFieldDateDocDelivery_n.setFieldValue(moParamDpsSource.getDateDocDelivery_n());
         moFieldDateDocLapsing_n.setFieldValue(moParamDpsSource.getDateDocLapsing_n());
         jtfCurrency.setText(moParamDpsSource.getDbmsCurrency());
         jtfDaysOfCredit.setText("" + moParamDpsSource.getDaysOfCredit());
         moFieldDateCut.setFieldValue(SLibTimeUtilities.getEndOfYear(miClient.getSessionXXX().getWorkingDate()));

         moFieldIncoterm.setFieldValue(SDataReadDescriptions.getCatalogueDescription(miClient, SModConsts.LOGS_INC, new int[] { moParamDpsSource.getFkIncotermId() }));
         moFieldModeOfTransportationType.setFieldValue(SDataReadDescriptions.getCatalogueDescription(miClient, SModConsts.LOGS_TP_MOT, new int[] { moParamDpsSource.getFkModeOfTransportationTypeId() }));

         jtfBizPartner.setCaretPosition(0);
         jtfBizPartnerBranch.setCaretPosition(0);
         jtfSalesAgentRo.setCaretPosition(0);
     }

     @SuppressWarnings("unchecked")
     private void renderTableColumns() {
        String sql = "";
        ResultSet resulSet = null;
        SDataDpsEntry entry = null;

        mnPkYearId = ((int[]) ((SFormComponentItem) jltEntries.getSelectedValue()).getPrimaryKey())[0];
        mnPkDocId = ((int[]) ((SFormComponentItem) jltEntries.getSelectedValue()).getPrimaryKey())[1];
        mnPkEntryId = ((int[]) ((SFormComponentItem) jltEntries.getSelectedValue()).getPrimaryKey())[2];

        entry = (SDataDpsEntry) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS_ETY, ((SFormComponentItem) jltEntries.getSelectedValue()).getPrimaryKey(), SLibConstants.EXEC_MODE_VERBOSE);

        mdSurplusPer = entry.getSurplusPercentage();
        mdOrigQty = entry.getOriginalQuantity();
        mdOrigPriceUnitary = entry.getOriginalPriceUnitaryCy();

        moTablePane.createTable();
        moTablePane.clearTableRows();

        try {
            sql = "SELECT dp.id_year, dp.id_doc, dep.id_ety, dp.dt, dtp.code, CONCAT(dp.num_ser, IF(length(dp.num_ser) = 0, '', '-'), dp.num) AS _ord, " +
                    "dep.sort_pos, cobp.code, " +
                    "(dep.orig_qty * " +
                    "IF((dp.fid_ct_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_CN[0] + " AND dp.fid_cl_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_CN[1] + " AND dp.fid_tp_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_CN[2] + ") OR " +
                    "(dp.fid_ct_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_CN[0] + " AND dp.fid_cl_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_CN[1] + " AND dp.fid_tp_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_CN[2] + ") " +
                    ", -1.0, 1.0)) AS _orig_qty_proc, " +
                    "u.symbol, un.symbol " +
                    "FROM trn_dps AS d " +
                    "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                    "INNER JOIN erp.itmu_unit as un ON de.fid_orig_unit = un.id_unit " +
                    "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND " +
                    "d.fid_tp_dps = dt.id_tp_dps " +
                    "INNER JOIN erp.bpsu_bpb AS cob ON d.fid_cob = cob.id_bpb " +
                    "INNER JOIN trn_dps_dps_supply AS sp ON de.id_year = sp.id_src_year AND " +
                    "de.id_doc = sp.id_src_doc AND de.id_ety = sp.id_src_ety " +
                    "INNER JOIN trn_dps_ety AS dep ON dep.id_year = sp.id_des_year AND dep.id_doc = sp.id_des_doc AND " +
                    "dep.id_ety = sp.id_des_ety AND dep.b_del = 0 " +
                    "INNER JOIN erp.itmu_unit as u ON dep.fid_orig_unit = u.id_unit " +
                    "INNER JOIN trn_dps AS dp ON dp.id_year = dep.id_year AND " +
                    "dp.id_doc = dep.id_doc AND dp.b_del = 0 " +
                    "INNER JOIN erp.trnu_tp_dps AS dtp ON dp.fid_ct_dps = dtp.id_ct_dps AND dp.fid_cl_dps = dtp.id_cl_dps AND " +
                    "dp.fid_tp_dps = dtp.id_tp_dps " +
                    "INNER JOIN erp.bpsu_bpb AS cobp ON dp.fid_cob = cobp.id_bpb " +
                    "WHERE d.b_del = 0 AND de.b_del = 0 AND de.id_year = " + mnPkYearId + " AND de.id_doc = " + mnPkDocId + " AND de.id_ety = " + mnPkEntryId + " ";

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                mbIsAdd = true;
                oRow = new SDataContractAnalysisRow(miClient);
                oRow.setDateOrd(resulSet.getDate("dp.dt"));
                oRow.setTypeOrd(resulSet.getString("dtp.code"));
                oRow.setNumberOrd(resulSet.getString("_ord"));
                oRow.setBranchOrd(resulSet.getString("cobp.code"));
                oRow.setSortPosOrd(resulSet.getInt("dep.sort_pos"));
                oRow.setQtyOrd(resulSet.getDouble("_orig_qty_proc"));

                mdQtyOrd += resulSet.getDouble("_orig_qty_proc");
                msOrigUnit = resulSet.getString("un.symbol");
                msUnitOrd = resulSet.getString("u.symbol");

                renderDps(resulSet.getInt("dp.id_year"), resulSet.getInt("dp.id_doc"), resulSet.getInt("dep.id_ety"));
            }

            if (moTablePane.getTableGuiRowCount() > 0) {
                moTablePane.renderTableRows();
                moTablePane.setTableRowSelection(0);

                renderInformationAditional();
                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);
            }
        }
        catch (Exception e) {
           SLibUtilities.renderException(this, e);
       }
   }

    @SuppressWarnings("unchecked")
    private void renderDps(int nPkYearId, int nPkDocId, int nPkEntryId) {
        String sql = "";
        ResultSet resulSet = null;
        Statement statementAux = null;
        int nCount = 0;

        try {
            sql = "SELECT dp.id_year, dp.id_doc, dep.id_ety, dp.dt, dtp.code, CONCAT(dp.num_ser, IF(length(dp.num_ser) = 0, '', '-'), dp.num) AS f_ped, " +
                    "dep.sort_pos, cobp.code, dep.orig_qty, u.symbol, dp.tot_cur_r, COALESCE(SUM(re.debit_cur - re.credit_cur), 0) AS f_bal, dp.comms_ref, dep.cont_tank " +
                    "FROM trn_dps_dps_supply AS sp " +
                    "INNER JOIN trn_dps_ety AS dep ON dep.id_year = sp.id_des_year AND dep.id_doc = sp.id_des_doc AND " +
                    "dep.id_ety = sp.id_des_ety AND dep.b_del = 0 " +
                    "INNER JOIN erp.itmu_item AS i ON dep.fid_item = i.id_item " +
                    "INNER JOIN erp.itmu_unit as u ON dep.fid_orig_unit = u.id_unit " +
                    "INNER JOIN trn_dps AS dp ON dp.id_year = dep.id_year AND " +
                    "dp.id_doc = dep.id_doc AND dp.b_del = 0 AND dp.fid_ct_dps = " + (isPurchase() ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[0] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[0]) + " AND " +
                    "dp.fid_cl_dps = " + (isPurchase() ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[1] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[1]) + " AND dp.fid_tp_dps = " + (isPurchase() ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[2] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[2]) + " " +
                    "INNER JOIN erp.trnu_tp_dps AS dtp ON dp.fid_ct_dps = dtp.id_ct_dps AND dp.fid_cl_dps = dtp.id_cl_dps AND " +
                    "dp.fid_tp_dps = dtp.id_tp_dps " +
                    "INNER JOIN erp.bpsu_bpb AS cobp ON dp.fid_cob = cobp.id_bpb " +
                    "LEFT OUTER JOIN fin_rec_ety AS re ON dp.id_year = re.fid_dps_year_n AND dp.id_doc = re.fid_dps_doc_n AND " +
                    "re.fid_ct_sys_mov_xxx = " + (isPurchase() ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0]) + " AND " +
                    "re.fid_tp_sys_mov_xxx = " + (isPurchase() ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1]) + " " +
                    "INNER JOIN fin_rec AS r ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND " +
                    "r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND r.b_del = 0 AND re.b_del = 0 AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(moFieldDateCut.getDate()) + "' " +
                    "WHERE dp.b_del = 0 AND dep.b_del = 0 AND sp.id_src_year = " + nPkYearId + " AND sp.id_src_doc = " + nPkDocId + " AND sp.id_src_ety = " + nPkEntryId + " " +
                    "GROUP BY dp.id_year, dp.id_doc, dep.id_ety, dp.dt, dtp.code, f_ped, dp.num_ref, cobp.code, dep.orig_qty, u.symbol, dp.tot_cur_r " +
                    "ORDER BY dp.id_year, dp.id_doc, dep.id_ety, dp.dt, dtp.code, f_ped, dp.num_ref, cobp.code, dep.orig_qty, u.symbol, dp.tot_cur_r ";

            statementAux = miClient.getSession().getStatement().getConnection().createStatement();

            resulSet = statementAux.executeQuery(sql);
            while (resulSet.next()) {
                if (!mbIsAdd) {
                   oRow = new  SDataContractAnalysisRow(miClient);
                }
                oRow.setDateDoc(resulSet.getDate(4));
                oRow.setTypeDoc(resulSet.getString(5));
                oRow.setNumberDoc(resulSet.getString(6));
                oRow.setCommissionsReference(resulSet.getString(13));
                oRow.setBranchDoc(resulSet.getString(8));
                oRow.setSortPosDoc(resulSet.getInt(7));
                oRow.setQtyDoc(resulSet.getDouble(9));
                oRow.setTotalDoc(resulSet.getDouble(11));
                oRow.setBalance(resulSet.getDouble(12));
                oRow.setContTank(resulSet.getString(14));

                mdQtyDoc += (resulSet.getDouble(9));
                msUnitDoc = (resulSet.getString(10));

                nCount++;

                renderDpsAdj(resulSet.getInt(1), resulSet.getInt(2), resulSet.getInt(3));
            }
            if (nCount == 0) {
                oRow.prepareTableRow();
                moTablePane.addTableRow(oRow);
            }
        }
        catch (Exception e) {
           SLibUtilities.renderException(this, e);
       }
    }

    @SuppressWarnings("unchecked")
    private void renderDpsAdj(int nPkYearId, int nPkDocId, int nPkEntryId) {
        String sql = "";
        ResultSet resulSet = null;
        Statement statementAux = null;
        int nCount = 0;

        try {
            sql = "SELECT da.id_year, da.id_doc, ae.id_ety, da.dt, dta.code, CONCAT(da.num_ser, IF(length(da.num_ser) = 0, '', '-'), da.num) AS f_ped, " +
                    "ae.sort_pos, coba.code, ae.orig_qty, u.symbol, ae.tot_cur_r " +
                    "FROM trn_dps_dps_adj AS adj " +
                    "INNER JOIN trn_dps_ety AS ae ON ae.id_year = adj.id_adj_year AND ae.id_doc = adj.id_adj_doc AND " +
                    "ae.id_ety = adj.id_adj_ety AND ae.b_del = 0 " +
                    "INNER JOIN erp.itmu_unit as u ON ae.fid_orig_unit = u.id_unit " +
                    "INNER JOIN trn_dps AS da ON da.id_year = adj.id_adj_year AND " +
                    "da.id_doc = adj.id_adj_doc AND da.b_del = 0 " +
                    "INNER JOIN erp.trnu_tp_dps AS dta ON da.fid_ct_dps = dta.id_ct_dps AND da.fid_cl_dps = dta.id_cl_dps AND " +
                    "da.fid_tp_dps = dta.id_tp_dps " +
                    "INNER JOIN erp.bpsu_bpb AS coba ON da.fid_cob = coba.id_bpb " +
                    "WHERE da.b_del = 0 AND ae.b_del = 0 AND adj.id_dps_year = " + nPkYearId + " AND adj.id_dps_doc = " + nPkDocId + " AND adj.id_dps_ety = " + nPkEntryId + " ";

            statementAux = miClient.getSession().getStatement().getConnection().createStatement();

            resulSet = statementAux.executeQuery(sql);
            while (resulSet.next()) {
                if (!mbIsAdd) {
                   oRow = new  SDataContractAnalysisRow(miClient);
                }
                oRow.setDateAdj(resulSet.getDate(4));
                oRow.setTypeAdj(resulSet.getString(5));
                oRow.setNumberAdj(resulSet.getString(6));
                oRow.setBranchAdj(resulSet.getString(8));
                oRow.setSortPosAdj(resulSet.getInt(7));
                oRow.setQtyAdj(resulSet.getDouble(9));
                oRow.setTotalAdj(resulSet.getDouble(11));

                mdQtyAdj += resulSet.getDouble(9);
                msUnitAdj = resulSet.getString(10);

                nCount++;

                oRow.prepareTableRow();
                moTablePane.addTableRow(oRow);
                mbIsAdd = false;
            }
            if (nCount == 0) {
                oRow.prepareTableRow();
                moTablePane.addTableRow(oRow);
                mbIsAdd = false;
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void renderInformationAditional() {
        mdQtyOrdMissing = mdOrigQty - mdQtyOrd;
        mdQtyDocMissing = mdOrigQty - mdQtyDoc;

        moFieldOrigQty.setFieldValue(mdOrigQty);
        moFieldQtyOrd.setFieldValue(mdQtyOrd);
        moFieldQtyDoc.setFieldValue(mdQtyDoc);
        moFieldQtyAdj.setFieldValue(mdQtyAdj);
        moFieldQtyOrdMissig.setFieldValue(mdQtyOrdMissing);
        moFieldQtyDocMissig.setFieldValue(mdQtyDocMissing);

        mdQtyOrdPer = mdQtyOrd / mdOrigQty;
        mdQtyDocPer = mdQtyDoc / mdOrigQty;
        mdQtyAdjPer = mdQtyAdj / mdOrigQty;
        mdQtyOrdMissingPer = mdQtyOrdMissing / mdOrigQty;
        mdQtyDocMissingPer = mdQtyDocMissing / mdOrigQty;

        moFieldQtyOrdPercentage.setFieldValue(mdQtyOrdPer);
        moFieldQtyDocPercentage.setFieldValue(mdQtyDocPer);
        moFieldQtyAdjPercentage.setFieldValue(mdQtyAdjPer);
        moFieldQtyOrdMissigPercentage.setFieldValue(mdQtyOrdMissingPer);
        moFieldQtyDocMissigPercentage.setFieldValue(mdQtyDocMissingPer);

        moFieldSurplusPercentage.setFieldValue(mdSurplusPer);
        moFieldOriginalPriceUnitaryCy.setFieldValue(mdOrigPriceUnitary);

        jtfOrigUnit.setText(msOrigUnit);
        jtfUnitOrd.setText(msUnitOrd);
        jtfUnitDoc.setText(msUnitDoc);
        jtfUnitAdj.setText(msUnitAdj);
        jtfUnitOrdMissing.setText(msUnitOrd);
        jtfUnitDocMissing.setText(msUnitDoc);
        jtfCurrencyKey.setText(moParamDpsSource.getDbmsCurrencyKey());
    }

    private void actionClose() {
        setVisible(false);
    }

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moTablePane, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moTablePane, getTitle());
        }
    }

    public void actionRefresh() {
        if (jltEntries.getSelectedIndex() != -1) {
            formRefreshCatalogues();
            renderTableColumns();
        }
    }

    private void actiongetLinks() {
        formRefreshCatalogues();
        renderTableColumns();
    }

     private boolean isPurchase() {
        return moParamDpsSource.getFkDpsCategoryId() == SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[0] ||
               moParamDpsSource.getFkDpsCategoryId() == SDataConstantsSys.TRNS_CL_DPS_PUR_DOC[1];
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JFormattedTextField jftDateCut;
    private javax.swing.JFormattedTextField jftDateDoc;
    private javax.swing.JFormattedTextField jftDateDocDelivery_n;
    private javax.swing.JFormattedTextField jftDateDocLapsing_n;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlBizPartnerBranch;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDateCut;
    private javax.swing.JLabel jlDateDoc;
    private javax.swing.JLabel jlDateDocDelivery_n;
    private javax.swing.JLabel jlDateDocLapsing_n;
    private javax.swing.JLabel jlDaysOfCredit;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlIncoterm;
    private javax.swing.JLabel jlModeOfTransportationType;
    private javax.swing.JLabel jlOrigQty;
    private javax.swing.JLabel jlOriginalPriceUnitaryCy;
    private javax.swing.JLabel jlQtyAdj;
    private javax.swing.JLabel jlQtyDoc;
    private javax.swing.JLabel jlQtyDocMissing;
    private javax.swing.JLabel jlQtyOrd;
    private javax.swing.JLabel jlQtyOrdMissing;
    private javax.swing.JLabel jlSalesAgentRo;
    private javax.swing.JLabel jlSurplusPercentage;
    private javax.swing.JList jltEntries;
    private javax.swing.JPanel jpAdditionalImformation;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpInformation;
    private javax.swing.JPanel jpLinks;
    private javax.swing.JPanel jpRegistryDatas;
    private javax.swing.JTextField jtfBizPartner;
    private javax.swing.JTextField jtfBizPartnerBranch;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfCurrencyKey;
    private javax.swing.JTextField jtfDaysOfCredit;
    private javax.swing.JTextField jtfIncoterm;
    private javax.swing.JTextField jtfModeOfTransportationType;
    private javax.swing.JTextField jtfNumberReference;
    private javax.swing.JTextField jtfNumberSeries;
    private javax.swing.JTextField jtfOrigQty;
    private javax.swing.JTextField jtfOrigUnit;
    private javax.swing.JTextField jtfOriginalPriceUnitaryCy;
    private javax.swing.JTextField jtfQtyAdj;
    private javax.swing.JTextField jtfQtyAdjPercentage;
    private javax.swing.JTextField jtfQtyDoc;
    private javax.swing.JTextField jtfQtyDocMissigPercentage;
    private javax.swing.JTextField jtfQtyDocMissing;
    private javax.swing.JTextField jtfQtyDocPercentage;
    private javax.swing.JTextField jtfQtyOrd;
    private javax.swing.JTextField jtfQtyOrdMissigPercentage;
    private javax.swing.JTextField jtfQtyOrdMissing;
    private javax.swing.JTextField jtfQtyOrdPercentage;
    private javax.swing.JTextField jtfSalesAgentRo;
    private javax.swing.JTextField jtfSeek;
    private javax.swing.JTextField jtfSurplusPercentage;
    private javax.swing.JTextField jtfUnitAdj;
    private javax.swing.JTextField jtfUnitDoc;
    private javax.swing.JTextField jtfUnitDocMissing;
    private javax.swing.JTextField jtfUnitOrd;
    private javax.swing.JTextField jtfUnitOrdMissing;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        moParamDpsSource = null;

        jtfBizPartner.setText("");
        jtfBizPartnerBranch.setText("");
        jtfCurrencyKey.setText("");
        jtfOrigUnit.setText("");
        jtfUnitOrd.setText("");
        jtfUnitDoc.setText("");
        jtfUnitAdj.setText("");
        jtfUnitOrdMissing.setText("");
        jtfUnitDocMissing.setText("");

        formRefreshCatalogues();
    }

    @Override
    public void formRefreshCatalogues() {
        mdOrigQty = 0;
        mdQtyOrd = 0;
        mdQtyDoc = 0;
        mdQtyAdj = 0;
        mdQtyOrdMissing = 0;
        mdQtyDocMissing = 0;
        msOrigUnit = "";
        msUnitOrd = "";
        msUnitDoc = "";
        msUnitAdj = "";

        moFieldOrigQty.setFieldValue(0);
        moFieldQtyOrd.setFieldValue(0);
        moFieldQtyDoc.setFieldValue(0);
        moFieldQtyAdj.setFieldValue(0);
        moFieldQtyOrdMissig.setFieldValue(0);
        moFieldQtyDocMissig.setFieldValue(0);
        moFieldQtyOrdPercentage.setFieldValue(0);
        moFieldQtyDocPercentage.setFieldValue(0);
        moFieldQtyAdjPercentage.setFieldValue(0);
        moFieldQtyOrdMissigPercentage.setFieldValue(0);
        moFieldQtyDocMissigPercentage.setFieldValue(0);
        moFieldSurplusPercentage.setFieldValue(0);
        moFieldOriginalPriceUnitaryCy.setFieldValue(0);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moParamDpsSource = (SDataDps) value;
                renderDpsSource();
                renderDpsSourceEntries();
                break;
            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        Object value = null;
        return value;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (jltEntries.getSelectedIndex() != -1) {
                actiongetLinks();
            }
        }
    }
}
