package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mtrn.data.SConfigurationItemDps;
import erp.mtrn.data.SDataDpsEntry;
import java.awt.event.FocusEvent;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JTextField;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiUtils;

/**
 * Modificación de información de comercialización y % de acidez.
 * @author Adrián Avilés, Isabel Servín
 */
public class SFormDpsComEntry extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    public static final int PARAM_IS_SALES = 1;
    public static final int PARAM_CONF_ITEM_ACIDITY_PER = 2;
    
    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private boolean mbIsSales;
    private java.util.Vector<SFormField> mvFields;
    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldFkVehicleTypeId_n;
    private erp.lib.form.SFormField moFieldDriver;
    private erp.lib.form.SFormField moFieldPlate;
    private erp.lib.form.SFormField moFieldContainer;
    private erp.lib.form.SFormField moFieldQualitySeal;
    private erp.lib.form.SFormField moFieldSecuritySeal;
    private erp.lib.form.SFormField moFieldTicket;
    private erp.lib.form.SFormField moFieldVgm;
    private erp.mtrn.data.SDataDpsEntry moDpsEntry;
    private SConfigurationItemDps moConfItemAcidityPercentage;

    public SFormDpsComEntry(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_DPS_NTS;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel9 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlFkVehicleTypeId_n = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jcbFkVehicleTypeId_n = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jtfDriver = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jtfPlate = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlContainerTank = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jtfContTank = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlAcidityPercentage = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jtfAcidityPercentage = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlQualitySeal = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jtfSealQuality = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlSecuritySeal = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jtfSecuritySeal = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlTicket = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jtfTicket = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlVgm = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jtfVgm = new javax.swing.JTextField();
        jpControls1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Comerciallización");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.GridLayout(10, 1));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkVehicleTypeId_n.setText("Tipo vehículo:");
        jlFkVehicleTypeId_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel19.add(jlFkVehicleTypeId_n);

        jPanel2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jcbFkVehicleTypeId_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel20.add(jcbFkVehicleTypeId_n);

        jPanel2.add(jPanel20);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer del vehículo:");
        jlDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jlDriver);

        jPanel2.add(jPanel8);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfDriver.setText("TEXT");
        jtfDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jtfDriver);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas del vehículo:");
        jlPlate.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel10.add(jlPlate);

        jPanel2.add(jPanel10);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfPlate.setText("TEXT");
        jtfPlate.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(jtfPlate);

        jPanel2.add(jPanel5);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlContainerTank.setText("Remolque, tanq./cont.:");
        jlContainerTank.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel11.add(jlContainerTank);

        jPanel2.add(jPanel11);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfContTank.setText("TEXT");
        jtfContTank.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jtfContTank);

        jPanel2.add(jPanel6);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAcidityPercentage.setText("Acidez (%)");
        jlAcidityPercentage.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel22.add(jlAcidityPercentage);

        jPanel2.add(jPanel22);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfAcidityPercentage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAcidityPercentage.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel21.add(jtfAcidityPercentage);

        jPanel2.add(jPanel21);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(10, 1));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQualitySeal.setText("Sello(s) de calidad:");
        jlQualitySeal.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(jlQualitySeal);

        jPanel3.add(jPanel12);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfSealQuality.setText("TEXT");
        jtfSealQuality.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(jtfSealQuality);

        jPanel3.add(jPanel7);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSecuritySeal.setText("Sello(s) de seguridad:");
        jlSecuritySeal.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(jlSecuritySeal);

        jPanel3.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfSecuritySeal.setText("TEXT");
        jtfSecuritySeal.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel14.add(jtfSecuritySeal);

        jPanel3.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicket.setText("Boleto(s) de báscula:");
        jlTicket.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(jlTicket);

        jPanel3.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfTicket.setText("TEXT");
        jtfTicket.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel16.add(jtfTicket);

        jPanel3.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVgm.setText("VGM:");
        jlVgm.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel17.add(jlVgm);

        jPanel3.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfVgm.setText("TEXT");
        jtfVgm.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel18.add(jtfVgm);

        jPanel3.add(jPanel18);

        jPanel1.add(jPanel3);

        jPanel9.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel9, java.awt.BorderLayout.CENTER);

        jpControls1.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls1.add(jbCancel);

        getContentPane().add(jpControls1, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(656, 414));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moFieldFkVehicleTypeId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkVehicleTypeId_n, jlFkVehicleTypeId_n);
        moFieldDriver = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfDriver, jlDriver);
        moFieldDriver.setLengthMax(50);
        moFieldPlate = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfPlate, jlPlate);
        moFieldPlate.setLengthMax(25);
        moFieldTicket = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfTicket, jlTicket);
        moFieldTicket.setLengthMax(50);
        moFieldContainer = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfContTank, jlContainerTank);
        moFieldContainer.setLengthMax(50);
        moFieldQualitySeal = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfSealQuality, jlQualitySeal);
        moFieldQualitySeal.setLengthMax(100);
        moFieldSecuritySeal = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfSecuritySeal, jlSecuritySeal);
        moFieldSecuritySeal.setLengthMax(50);
        moFieldVgm = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfVgm, jlVgm);
        moFieldVgm.setLengthMax(15);
        
        mvFields = new Vector<>();
        mvFields.add(moFieldFkVehicleTypeId_n);
        mvFields.add(moFieldDriver);
        mvFields.add(moFieldPlate);
        mvFields.add(moFieldTicket);
        mvFields.add(moFieldContainer);
        mvFields.add(moFieldQualitySeal);
        mvFields.add(moFieldSecuritySeal);
        mvFields.add(moFieldVgm);
        
        jtfAcidityPercentage.addFocusListener(this);
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkVehicleTypeId_n.requestFocusInWindow();
        }
    }

    private void actionOk() {
        if (jbOk.isEnabled()) {
            SFormValidation validation = formValidate();

            if (validation.getIsError()) {
                if (validation.getComponent() != null) {
                    validation.getComponent().requestFocus();
                }
                if (validation.getMessage().length() > 0) {
                    miClient.showMsgBoxWarning(validation.getMessage());
                }
            }
            else {
                 mnFormResult = SLibConstants.FORM_RESULT_OK;
                 setVisible(false);
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void focusLostAcidityPercentage() {
        try {
            if (!jtfAcidityPercentage.getText().isEmpty()) {
                Double.parseDouble(jtfAcidityPercentage.getText());
                jtfAcidityPercentage.setText(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(SLibUtils.parseDouble(jtfAcidityPercentage.getText()) / 100));
            }
        }
        catch (NumberFormatException e) {}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkVehicleTypeId_n;
    private javax.swing.JLabel jlAcidityPercentage;
    private javax.swing.JLabel jlContainerTank;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlFkVehicleTypeId_n;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlQualitySeal;
    private javax.swing.JLabel jlSecuritySeal;
    private javax.swing.JLabel jlTicket;
    private javax.swing.JLabel jlVgm;
    private javax.swing.JPanel jpControls1;
    private javax.swing.JTextField jtfAcidityPercentage;
    private javax.swing.JTextField jtfContTank;
    private javax.swing.JTextField jtfDriver;
    private javax.swing.JTextField jtfPlate;
    private javax.swing.JTextField jtfSealQuality;
    private javax.swing.JTextField jtfSecuritySeal;
    private javax.swing.JTextField jtfTicket;
    private javax.swing.JTextField jtfVgm;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDpsEntry = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }
        
        jtfAcidityPercentage.setText("");
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        
        SFormUtilities.populateComboBox(miClient, jcbFkVehicleTypeId_n, SModConsts.LOGU_TP_VEH);
        
        mbResetingForm = false;
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError() && jtfAcidityPercentage.isEnabled() && jtfAcidityPercentage.getText().isEmpty()) {
            validation.setMessage("Debe indicar un valor para el campo " + SGuiUtils.getLabelName(jlAcidityPercentage));
            validation.setComponent(jtfAcidityPercentage);
        }
        
        if (!validation.getIsError()) {
            try {
                if (!jtfAcidityPercentage.getText().isEmpty()) {
                    Double.parseDouble(jtfAcidityPercentage.getText().replaceAll("%", ""));
                }
            }
            catch (NumberFormatException e) {
                validation.setMessage("El campo acidez(%) no tiene un formato numérico válido.");
                validation.setComponent(jtfAcidityPercentage);
            }
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }
    
    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        mbResetingForm = true;
        
        moDpsEntry = (SDataDpsEntry) registry;

        moFieldFkVehicleTypeId_n.setFieldValue(new int[] { moDpsEntry.getFkVehicleTypeId_n() });
        moFieldDriver.setFieldValue(moDpsEntry.getDriver());
        moFieldPlate.setFieldValue(moDpsEntry.getPlate());
        moFieldTicket.setFieldValue(moDpsEntry.getTicket());
        moFieldContainer.setFieldValue(moDpsEntry.getContainerTank());
        moFieldQualitySeal.setFieldValue(moDpsEntry.getSealQuality());
        moFieldSecuritySeal.setFieldValue(moDpsEntry.getSealSecurity());
        moFieldVgm.setFieldValue(moDpsEntry.getVgm());
        jtfAcidityPercentage.setText(moDpsEntry.getAcidityPercentage_n() == null ? "" : miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(moDpsEntry.getAcidityPercentage_n()));
        
        SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, new int[] { moDpsEntry.getFkItemId() }, SLibConstants.EXEC_MODE_SILENT);
        
        boolean enableAcidity = mbIsSales && (moConfItemAcidityPercentage.getifam().contains(item.getDbmsDataItemGeneric().getDbmsFkItemFamilyId()) 
                || moConfItemAcidityPercentage.getigen().contains(item.getFkItemGenericId()));
        jtfAcidityPercentage.setEnabled(enableAcidity);
        jtfAcidityPercentage.setFocusable(enableAcidity);
        
        mbResetingForm = false;
    }
    
    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moDpsEntry == null) {
            moDpsEntry = new SDataDpsEntry();
            moDpsEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moDpsEntry.setIsRegistryEdited(true);
            moDpsEntry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moDpsEntry.setFkVehicleTypeId_n(moFieldFkVehicleTypeId_n.getKeyAsIntArray()[0]);
        moDpsEntry.setDriver(moFieldDriver.getString());
        moDpsEntry.setPlate(moFieldPlate.getString());
        moDpsEntry.setTicket(moFieldTicket.getString());
        
        moDpsEntry.setContainerTank(moFieldContainer.getString());
        moDpsEntry.setSealQuality(moFieldQualitySeal.getString());
        moDpsEntry.setSealSecurity(moFieldSecuritySeal.getString());
        moDpsEntry.setVgm(moFieldVgm.getString());
        moDpsEntry.setAcidityPercentage_n(jtfAcidityPercentage.getText().isEmpty() ? null : SLibUtils.round(SLibUtils.parseDouble(jtfAcidityPercentage.getText()) / 100, 6));
        
        moDpsEntry.setIsRegistryEdited(true);

        return moDpsEntry;
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case PARAM_IS_SALES:
                mbIsSales = (boolean) value;
                break;
            case PARAM_CONF_ITEM_ACIDITY_PER:
                moConfItemAcidityPercentage = (SConfigurationItemDps) value;
                break;
            default:
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {}

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == jtfAcidityPercentage) {
                focusLostAcidityPercentage();
            }
        }
    }
}
