/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogUpdateDpsLogistics.java
 *
 * Created on 22/09/2009, 04:24:20 PM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDps;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiSession;

/**
 *
 * @author Isabel Servín
 */
public class SDialogUpdateDpsDate extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private final erp.client.SClientInterface miClient;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private erp.lib.form.SFormField moFieldDateDps;
    private erp.lib.form.SFormField moFieldDateDpsNew;
    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.form.SPanelDps moPanelDps;

    /** Creates new form SDialogDpsLink
     * @param client */
    public SDialogUpdateDpsDate(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDpsLogistics = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlDateDps = new javax.swing.JLabel();
        jftDateDps = new javax.swing.JFormattedTextField();
        jPanel15 = new javax.swing.JPanel();
        jlDateDpsNew = new javax.swing.JLabel();
        jftDateDpsNew = new javax.swing.JFormattedTextField();
        jbDateDpsNew = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Actualización de fecha de un documento timbrado");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsLogistics.setBorder(javax.swing.BorderFactory.createTitledBorder("Fechas del documento:"));
        jpDpsLogistics.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(6, 1, 0, 1));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateDps.setText("Fecha actual del documento: ");
        jlDateDps.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jlDateDps);

        jftDateDps.setEditable(false);
        jftDateDps.setText("yyyy/mm/dd");
        jftDateDps.setEnabled(false);
        jftDateDps.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jftDateDps);

        jPanel1.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateDpsNew.setText("Nueva fecha del documento:*");
        jlDateDpsNew.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(jlDateDpsNew);

        jftDateDpsNew.setText("yyyy/mm/dd");
        jftDateDpsNew.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateDpsNew);

        jbDateDpsNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateDpsNew.setToolTipText("Seleccionar fecha");
        jbDateDpsNew.setFocusable(false);
        jbDateDpsNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbDateDpsNew);

        jPanel1.add(jPanel15);

        jpDpsLogistics.add(jPanel1, java.awt.BorderLayout.NORTH);

        jpDps.add(jpDpsLogistics, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(900, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moFieldDateDps = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateDps, jlDateDps);
        
        moFieldDateDpsNew = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateDpsNew, jlDateDpsNew);
        moFieldDateDpsNew.setPickerButton(jbDateDpsNew);

        mvFields = new java.util.Vector<erp.lib.form.SFormField>();
        mvFields.add(moFieldDateDps);
        mvFields.add(moFieldDateDpsNew);
        
        moPanelDps = new SPanelDps(miClient, "");
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbDateDpsNew.addActionListener(this);
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateDps.requestFocus();
        }
    }

    private boolean isDpsUpdateable() {
        if (moDps.getDbmsDataCfd().getFkXmlStatusId() != SDataConstantsSys.TRNS_ST_DPS_EMITED) {
            miClient.showMsgBoxWarning("No se puede modificar la fecha del documento porque este no esta timbrado o esta anulado.");
            mnFormResult = SLibConstants.FORM_RESULT_CANCEL;   
            return false;
        }
        else if (!moDps.getIsRecordAutomatic()) {
            miClient.showMsgBoxWarning("No se puede modificar la fecha del documento porque este tiene asignada una póliza contable definida por el usuario.");
            mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
            return false;
        }
        return true;
    }
    
    private void renderDpsDates() {
        moFieldDateDps.setFieldValue(moDps.getDate());
        moFieldDateDpsNew.setFieldValue(miClient.getSessionXXX().getWorkingDate());
    }

    private boolean updateDpsDate() { 
        if (moDps.updateDpsDateAfrerSign(miClient.getSession().getDatabase().getConnection(), moFieldDateDpsNew.getDate()) == SLibConstants.DB_ACTION_SAVE_OK){
            SDataUtilities.showDpsRecord(miClient, moDps);
            SDataDpsUpdateDateLog log = new SDataDpsUpdateDateLog();
            log.mtOldDate = moFieldDateDps.getDate();
            log.mtNewDate = moFieldDateDpsNew.getDate();
            log.mnFkYearId = moDps.getPkYearId();
            log.mnFkDocId = moDps.getPkDocId();
            log.save(miClient.getSession());
            return true;
        }
        return false;
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateDpsNew.getDate(), moFieldDateDpsNew);
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            if (updateDpsDate()) {
                mnFormResult = SLibConstants.FORM_RESULT_OK;
                setVisible(false);
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDateDpsNew;
    private javax.swing.JButton jbOk;
    private javax.swing.JFormattedTextField jftDateDps;
    private javax.swing.JFormattedTextField jftDateDpsNew;
    private javax.swing.JLabel jlDateDps;
    private javax.swing.JLabel jlDateDpsNew;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsLogistics;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDps = null;
        moPanelDps.setDps(null, null);

        for (SFormField field : mvFields) {
            field.resetField();
        }
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                validation.setIsError(true);
                validation.setComponent(field.getComponent());
            }
        }

        if (!validation.getIsError()) {
            if (SLibTimeUtils.digestYear(moFieldDateDps.getDate())[0] != SLibTimeUtils.digestYear(moFieldDateDpsNew.getDate())[0]) {
                validation.setMessage("No se puede modificar porque el año de la fecha actual no corresponde al año de la nueva fecha.");
                validation.setComponent(moFieldDateDpsNew.getComponent());
            }
        }
        if (!validation.getIsError()) {
            if (SLibTimeUtils.isSameDate(moFieldDateDps.getDate(), moFieldDateDpsNew.getDate())) {
                validation.setMessage("La nueva fecha debe ser distinta a la actual.");
                validation.setComponent(moFieldDateDpsNew.getComponent());
            }
        }
        if (!validation.getIsError() && !SDataUtilities.isPeriodOpen(miClient, moFieldDateDpsNew.getDate())) {
            validation.setMessage("No se puede modificar porque el período de la nueva fecha esta cerrado.");
            validation.setComponent(moFieldDateDpsNew.getComponent());
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, value, SLibConstants.EXEC_MODE_VERBOSE);
                moPanelDps.setDps(moDps, null);
                if(isDpsUpdateable()) {
                    renderDpsDates();
                }
                break;

            default:
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbDateDpsNew) {
                actionDate();
            }
        }
    }
}

class SDataDpsUpdateDateLog {
    protected int mnPkDpsUpdateDateLogId;
    protected java.util.Date mtOldDate;
    protected java.util.Date mtNewDate;
    protected int mnFkYearId;
    protected int mnFkDocId;
    protected int mnFkUserNewId;
    protected java.util.Date mtUserNewTs;

    private void computePrimaryKey(SGuiSession session) throws Exception {
        String sql;
        ResultSet resultSet;
        
        mnPkDpsUpdateDateLogId = 0;
        
        sql = "SELECT COALESCE(MAX(id_dps_upd_dt_log), 0) + 1 FROM trn_dps_upd_dt_log;";
        resultSet = session.getStatement().executeQuery(sql);
        if (resultSet.next()) {
            mnPkDpsUpdateDateLogId = resultSet.getInt(1);
        }
    }
    
    public int save(SGuiSession session) {
        String sql;
        int mnLastDbActionResult;
        try {
            computePrimaryKey(session);
            mnFkUserNewId = session.getUser().getPkUserId();
            
            sql = "INSERT INTO trn_dps_upd_dt_log VALUES(" + 
                    mnPkDpsUpdateDateLogId + ", " +
                    "'" + SLibUtils.DbmsDateFormatDate.format(mtOldDate) + "', " +
                    "'" + SLibUtils.DbmsDateFormatDate.format(mtNewDate) + "', " +
                    mnFkYearId + ", " + 
                    mnFkDocId + ", " + 
                    mnFkUserNewId + ", " + 
                    "NOW());"; 
            session.getStatement().execute(sql);
            mnLastDbActionResult = SLibConstants.DB_ACTION_SAVE_OK;
        }
        catch (Exception e) {
            mnLastDbActionResult = SLibConstants.DB_ACTION_SAVE_ERROR;
            SLibUtilities.printOutException(this, e);
        }
        return mnLastDbActionResult;
    }
}