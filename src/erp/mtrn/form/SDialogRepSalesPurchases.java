/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepSalesPurchases.java
 *
 * Created on 28/05/2010, 10:43:55 AM
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataUnitType;
import erp.mtrn.data.STrnFunctionalAreaUtils;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Alfonso Flores, Uriel Castañeda, Edwin Carmona, Sergio Flores
 */
public class SDialogRepSalesPurchases extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {
    
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldCurrency;
    private erp.lib.form.SFormField moFieldCompanyBranch;
    private erp.lib.form.SFormField moFieldCrossWith;
    private erp.lib.form.SFormField moFieldItemCategory;
    private erp.lib.form.SFormField moFieldUnitType;
    
    private erp.mtrn.form.SDialogFilterFunctionalArea moDialogFilterFunctionalArea;
    private int mnFunctionalAreaId;
    private String msFunctionalAreasIds;

    private boolean mbParamIsSupplier;

    /** Creates new form SDialogRepSalesPurchases
     * @param client GUI client.
     */
    public SDialogRepSalesPurchases(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgByOptions = new javax.swing.ButtonGroup();
        bgCurrency = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jrbCurrencyLoc = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        jrbCurrencyDoc = new javax.swing.JRadioButton();
        jlCurrencyDocWarning = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jcbCurrency = new javax.swing.JComboBox();
        jPanel9 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCompanyBranch = new javax.swing.JLabel();
        jcbCompanyBranch = new javax.swing.JComboBox<SFormComponentItem>();
        jrbByBizPartner = new javax.swing.JRadioButton();
        jrbBySalesAgent = new javax.swing.JRadioButton();
        jrbByItemGeneric = new javax.swing.JRadioButton();
        jrbByItem = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCrossWith = new javax.swing.JLabel();
        jcbCrossWith = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel14 = new javax.swing.JPanel();
        jlItemCategory = new javax.swing.JLabel();
        jcbItemCategory = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel12 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jckIsWithUnits = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jlUnitType = new javax.swing.JLabel();
        jcbUnitType = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel17 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jckWithoutRelatedParty = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jlBizPartner1 = new javax.swing.JLabel();
        jtfFunctionalArea = new javax.swing.JTextField();
        jbFunctionalArea = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de compras netas por período");
        setPreferredSize(new java.awt.Dimension(640, 400));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Período y moneda:"));
        jPanel3.setLayout(new java.awt.GridLayout(5, 1, 0, 2));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha inicial");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbDateStart);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbDateEnd);

        jPanel3.add(jPanel5);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgCurrency.add(jrbCurrencyLoc);
        jrbCurrencyLoc.setText("Moneda local");
        jrbCurrencyLoc.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jrbCurrencyLoc);

        jPanel3.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgCurrency.add(jrbCurrencyDoc);
        jrbCurrencyDoc.setText("Moneda del documento");
        jrbCurrencyDoc.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jrbCurrencyDoc);

        jlCurrencyDocWarning.setForeground(new java.awt.Color(255, 0, 0));
        jlCurrencyDocWarning.setText("NOTA: ¡Solo operaciones en la moneda seleccionada!");
        jlCurrencyDocWarning.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel16.add(jlCurrencyDocWarning);

        jPanel3.add(jPanel16);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlCurrency);

        jcbCurrency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCurrency.setSelectedIndex(-1);
        jcbCurrency.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(jcbCurrency);

        jPanel3.add(jPanel18);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel9.setLayout(new java.awt.BorderLayout(0, 1));

        jPanel19.setLayout(new java.awt.GridLayout(5, 1));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompanyBranch.setText("Sucursal empresa:");
        jlCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCompanyBranch);

        jcbCompanyBranch.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel6.add(jcbCompanyBranch);

        jPanel19.add(jPanel6);

        bgByOptions.add(jrbByBizPartner);
        jrbByBizPartner.setText("<Por asociado de negocios>");
        jrbByBizPartner.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbByBizPartnerItemStateChanged(evt);
            }
        });
        jPanel19.add(jrbByBizPartner);

        bgByOptions.add(jrbBySalesAgent);
        jrbBySalesAgent.setText("Por agente de ventas");
        jrbBySalesAgent.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbBySalesAgentItemStateChanged(evt);
            }
        });
        jPanel19.add(jrbBySalesAgent);

        bgByOptions.add(jrbByItemGeneric);
        jrbByItemGeneric.setText("Por ítem genérico");
        jrbByItemGeneric.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbByItemGenericItemStateChanged(evt);
            }
        });
        jPanel19.add(jrbByItemGeneric);

        bgByOptions.add(jrbByItem);
        jrbByItem.setText("Por ítem");
        jrbByItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbByItemItemStateChanged(evt);
            }
        });
        jPanel19.add(jrbByItem);

        jPanel9.add(jPanel19, java.awt.BorderLayout.NORTH);

        jPanel8.setPreferredSize(new java.awt.Dimension(376, 100));
        jPanel8.setLayout(new java.awt.GridLayout(6, 1, 0, 1));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCrossWith.setText("Cruce con:");
        jlCrossWith.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCrossWith);

        jcbCrossWith.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel11.add(jcbCrossWith);

        jPanel8.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemCategory.setText("Categoría de ítem: ");
        jlItemCategory.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlItemCategory);

        jcbItemCategory.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(jcbItemCategory);

        jPanel8.add(jPanel14);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jLabel1);

        jckIsWithUnits.setText("Reporte con unidades");
        jckIsWithUnits.setPreferredSize(new java.awt.Dimension(150, 23));
        jckIsWithUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckIsWithUnitsItemStateChanged(evt);
            }
        });
        jPanel12.add(jckIsWithUnits);

        jPanel8.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitType.setText("Tipo de unidad:*");
        jlUnitType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlUnitType);

        jcbUnitType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(jcbUnitType);

        jPanel8.add(jPanel13);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jLabel2);

        jckWithoutRelatedParty.setText("Sin partes relacionadas");
        jPanel17.add(jckWithoutRelatedParty);

        jPanel8.add(jPanel17);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner1.setText("Área funcional:");
        jlBizPartner1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlBizPartner1);

        jtfFunctionalArea.setEditable(false);
        jtfFunctionalArea.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(jtfFunctionalArea);

        jbFunctionalArea.setText("...");
        jbFunctionalArea.setToolTipText("Seleccionar asociado de negocios:");
        jbFunctionalArea.setFocusable(false);
        jbFunctionalArea.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbFunctionalArea);

        jPanel8.add(jPanel7);

        jPanel9.add(jPanel8, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel9, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbExit);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(976, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jrbByBizPartnerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbByBizPartnerItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedByBizPartner();
        }
    }//GEN-LAST:event_jrbByBizPartnerItemStateChanged

    private void jrbBySalesAgentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbBySalesAgentItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedBySalesAgent();
        }
    }//GEN-LAST:event_jrbBySalesAgentItemStateChanged

    private void jrbByItemGenericItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbByItemGenericItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedByItemGeneric();
        }
    }//GEN-LAST:event_jrbByItemGenericItemStateChanged

    private void jrbByItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbByItemItemStateChanged
        if (!mbResetingForm) {
            itemStateChangedByItem();
        }
    }//GEN-LAST:event_jrbByItemItemStateChanged

    private void jckIsWithUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckIsWithUnitsItemStateChanged
        itemStateChangedIsWithUnits();
    }//GEN-LAST:event_jckIsWithUnitsItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldCurrency = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCurrency, jlCurrency);
        moFieldCompanyBranch = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCompanyBranch, jlCompanyBranch);
        moFieldCrossWith = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCrossWith, jlCrossWith);
        moFieldItemCategory = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbItemCategory, jlItemCategory);
        moFieldUnitType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbUnitType, jlUnitType);

        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldCurrency);
        mvFields.add(moFieldCompanyBranch);
        mvFields.add(moFieldCrossWith);
        mvFields.add(moFieldItemCategory);
        mvFields.add(moFieldUnitType);

        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbFunctionalArea.addActionListener(this);
        jrbCurrencyLoc.addItemListener(this);
        jrbCurrencyDoc.addItemListener(this);
        jcbCurrency.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
        
        // áreas funcionales:
        jbFunctionalArea.setEnabled(miClient.getSessionXXX().getParamsCompany().getIsFunctionalAreas());
        mnFunctionalAreaId = SLibConstants.UNDEFINED;
        moDialogFilterFunctionalArea = new SDialogFilterFunctionalArea(miClient);
        renderFunctionalArea();
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (mbParamIsSupplier) {
                setTitle("Reporte de compras netas");
                jrbByBizPartner.setText("Por proveedor");
            }
            else  {
                setTitle("Reporte de ventas netas");
                jrbByBizPartner.setText("Por cliente");
            }
            jftDateStart.requestFocus();
            jrbByBizPartner.setSelected(true);
            jrbCurrencyLoc.setSelected(true);
            populateComboBoxUnitsType();
        }
    }

    private void actionPrint() {
        Cursor cursor = getCursor();
        SFormValidation validation = formValidate();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        int nCurrency = 0;
        String sCurrency = "";
        String sqlCurrency = "";
        String sSumStot = "";
        
        String areasFilter = "";
        if (miClient.getSessionXXX().getParamsCompany().getIsFunctionalAreas()) {
            if (msFunctionalAreasIds.isEmpty()) {
                areasFilter = "";
            }
            else {
                areasFilter = " AND de.fid_func IN ( " + msFunctionalAreasIds + " ) ";
            }
        }
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                if (jrbCurrencyDoc.isSelected()) {
                    sSumStot = " COALESCE(SUM(de.stot_cur_r), 0.0) ";
                    sCurrency = jcbCurrency.getSelectedIndex() == 0 ? "TODAS" : jcbCurrency.getSelectedItem().toString();
                    nCurrency = moFieldCurrency.getKeyAsIntArray()[0];
                    sqlCurrency = jcbCurrency.getSelectedIndex() == 0 ? "" : " d.fid_cur = " + nCurrency + " AND ";
                }
                else {
                    sSumStot = " COALESCE(SUM(de.stot_r), 0.0) ";
                    sCurrency = miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency();
                    nCurrency = miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0];
                    sqlCurrency = "";
                }
                
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                map = miClient.createReportParams();
                map.put("tDtInitial", moFieldDateStart.getDate());
                map.put("tDtEnd", moFieldDateEnd.getDate());
                map.put("sCompanyBranch", jcbCompanyBranch.getSelectedIndex() <= 0 ? "(TODAS)" : jcbCompanyBranch.getSelectedItem().toString());
                map.put("nFidCtDps", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[0] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[0]);
                map.put("nFidClDps", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[1] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[1]);
                map.put("nFidTpDps", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_INV[2] : SDataConstantsSys.TRNU_TP_DPS_SAL_INV[2]);
                map.put("sSqlWhereCompanyBranch", jcbCompanyBranch.getSelectedIndex() <= 0 ? "" : " AND d.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0]);
                map.put("sSqlWhereCompanyBranchAdjRet", jcbCompanyBranch.getSelectedIndex() <= 0 ? "" : " AND r.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0]);
                map.put("sSqlWhereCompanyBranchAdjDis", jcbCompanyBranch.getSelectedIndex() <= 0 ? "" : " AND d.fid_cob = " + moFieldCompanyBranch.getKeyAsIntArray()[0]);
                map.put("sSqlWhereWithoutRelatedParty", jckWithoutRelatedParty.isSelected() ? " AND bp.b_att_rel_pty = 0 " : "");
                map.put("sTitle", mbParamIsSupplier ? "REPORTE DE COMPRAS NETAS" : "REPORTE DE VENTAS NETAS");
                map.put("sSumStot", sSumStot);
                map.put("sCurrency", sCurrency);
                map.put("nCurrency", nCurrency);
                map.put("nLocalCurrency", miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]);
                map.put("nFidCtDpsAdj", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_CN[0] : SDataConstantsSys.TRNU_TP_DPS_SAL_CN[0]);
                map.put("nFidClDpsAdj", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_CN[1] : SDataConstantsSys.TRNU_TP_DPS_SAL_CN[1]);
                map.put("nFidTpDpsAdj", mbParamIsSupplier ? SDataConstantsSys.TRNU_TP_DPS_PUR_CN[2] : SDataConstantsSys.TRNU_TP_DPS_SAL_CN[2]);
                map.put("nFidTpAdjRet", SDataConstantsSys.TRNS_TP_DPS_ADJ_RET);
                map.put("nFidTpAdjDis", SDataConstantsSys.TRNS_TP_DPS_ADJ_DISC);
                map.put("nFidStDps", SDataConstantsSys.TRNS_ST_DPS_EMITED);
                map.put("nFidStDpsVal", SDataConstantsSys.TRNS_ST_DPS_VAL_EFF);
                map.put("nFidCtBp", mbParamIsSupplier ? SDataConstantsSys.BPSS_CT_BP_SUP : SDataConstantsSys.BPSS_CT_BP_CUS);
                map.put("sSqlItemCategory", moFieldItemCategory.getKeyAsIntArray()[0] == 0 ? "" : " AND ig.fid_ct_item = " + moFieldItemCategory.getKeyAsIntArray()[0]);
                map.put("sSqlWhereCur", sqlCurrency);
                map.put("sSqlGroupBy", (String) createQuerySentenceValues()[0]);
                map.put("sSqlOrderBy", (String) createQuerySentenceValues()[1]);
                map.put("sFuncText", jtfFunctionalArea.getText());
                map.put("sFilterFunctionalArea", areasFilter);
                map.put("sDetailConcept", (String) createQuerySentenceValues()[2]);
                map.put("sFilter", (String) createQuerySentenceValues()[3]);
                map.put("nTpDetail", (Integer) createQuerySentenceValues()[4]);
                map.put("nTpGroup", (Integer) createQuerySentenceValues()[5]);
                map.put("bShowGroup", (Boolean) createQuerySentenceValues()[6]);
                
                if (jckIsWithUnits.isSelected()) {
                    map.put("sUnitsColumn", moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY ? "CANT. BRUTA." : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN ? "LONG. BRUTA" :
                        moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF ? "SUP. BRUTA" : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL ? "VOL. BRUTA" : "MASA BRUTA");
                   map.put("sUnitsColumnReturn", moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY ? "CANT. DEV." : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN ? "LONG. DEV." :
                        moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF ? "SUP. DEV." : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL ? "VOL. DEV." : "MASA DEV.");
                    map.put("sUnitsNet", moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY ? "CANT. NETA" : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN ? "LONG. NETA" :
                        moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF ? "SUP. NETA" : moFieldUnitType.getKeyAsIntArray()[0] == SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL ? "VOL. NETO" : "MASA NETA");
                    map.put("sSqlUnitsColumns", createColumnsUnits(moFieldUnitType.getKeyAsIntArray()[0]));
                    map.put("sSqlUnitsColumnsRet", createColumnsUnitsAdjReturn(moFieldUnitType.getKeyAsIntArray()[0]));
                    map.put("sUnitBase", getUnitBase(moFieldUnitType.getKeyAsIntArray()[0]));
                }
                map.put("sMark", mbParamIsSupplier ? "" : SDataConstantsSys.TXT_UNSIGNED);

                jasperPrint = SDataUtilities.fillReport(miClient, jckIsWithUnits.isSelected() ? SDataConstantsSys.REP_TRN_PS_UNIT : SDataConstantsSys.REP_TRN_PS, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle("Reporte " + (mbParamIsSupplier ? "de compras netas" : "de ventas netas"));
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    private void popultateComboBoxCross() {
        SFormComponentItem optClient = new SFormComponentItem(new int[] { 1 }, (mbParamIsSupplier ? "Proveedor" : "Cliente"));
        SFormComponentItem optSalesAgent = new SFormComponentItem(new int[] { 2 }, "Agente");
        SFormComponentItem optItemGeneric = new SFormComponentItem(new int[] { 3 }, "Ítem genérico");
        SFormComponentItem optItem = new SFormComponentItem(new int[] { 4 }, "Ítem");

        jcbCrossWith.removeAllItems();
        jcbCrossWith.addItem(new SFormComponentItem(new int[] { 0 }, "(Seleccionar una opción)"));

        if (jrbByBizPartner.isSelected()) {
            jcbCrossWith.addItem(optSalesAgent);
            jcbCrossWith.addItem(optItemGeneric);
            jcbCrossWith.addItem(optItem);
        }
        else if (jrbBySalesAgent.isEnabled() && jrbBySalesAgent.isSelected()) {
            jcbCrossWith.addItem(optClient);
            jcbCrossWith.addItem(optItemGeneric);
            jcbCrossWith.addItem(optItem);
        }
        else if (jrbByItemGeneric.isSelected()) {
            jcbCrossWith.addItem(optClient);
            jcbCrossWith.addItem(optSalesAgent);
            jcbCrossWith.addItem(optItem);
        }
        else if (jrbByItem.isSelected()) {
            jcbCrossWith.addItem(optClient);
            jcbCrossWith.addItem(optSalesAgent);
            jcbCrossWith.addItem(optItemGeneric);
        }
    }

    private void populateComboBoxUnitsType() {
        SFormComponentItem qty = null;
        SFormComponentItem len = null;
        SFormComponentItem surf = null;
        SFormComponentItem vol = null;
        SFormComponentItem mass = null;

            jcbUnitType.removeAllItems();

            qty = new SFormComponentItem(new int[] { SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY }, "CANTIDAD");
            len = new SFormComponentItem(new int[] { SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN }, "LONGITUD");
            surf = new SFormComponentItem(new int[] { SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF }, "SUPERFICIE");
            vol = new SFormComponentItem(new int[] { SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL }, "VOLUMEN");
            mass = new SFormComponentItem(new int[] { SDataConstantsSys.TRNX_TP_UNIT_TOT_MASS }, "MASA");

            jcbUnitType.addItem(qty);
            jcbUnitType.addItem(len);
            jcbUnitType.addItem(surf);
            jcbUnitType.addItem(vol);
            jcbUnitType.addItem(mass);
    }

    private void renderComboBoxUnitsType() {
        if (jckIsWithUnits.isSelected()) {
            jcbUnitType.setEnabled(true);
        }
        else {
            jcbUnitType.setEnabled(false);
        }
    }
    
    private void actionFunctionalArea() {
        moDialogFilterFunctionalArea.formRefreshCatalogues();
        moDialogFilterFunctionalArea.formReset();
        moDialogFilterFunctionalArea.setFunctionalAreaId(mnFunctionalAreaId);
        moDialogFilterFunctionalArea.setFormVisible(true);

        if (moDialogFilterFunctionalArea.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
            mnFunctionalAreaId = moDialogFilterFunctionalArea.getFunctionalAreaId();
            renderFunctionalArea();
        }
    }
    
    private void renderFunctionalArea() {
        String texts[] = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas(miClient, mnFunctionalAreaId);
        msFunctionalAreasIds = texts[0];
        
        jtfFunctionalArea.setText(texts[1]);
        jtfFunctionalArea.setCaretPosition(0);
    }

    private java.lang.Object[] createQuerySentenceValues() {
        String groupBy = "";
        String orderBy = "";
        String detailCol = "";
        String filter = "";
        int tpDetail = 0;
        int tpGroup = 0;
        boolean showGroup = false;
        
        if (jrbByBizPartner.isSelected()) {
            
        }
        else if (jrbBySalesAgent.isSelected()) {
            
        }
        else if (jrbByItemGeneric.isSelected()) {
            
        }
        else if (jrbByItem.isSelected()) {
            
        }

        // Business partner options:
        
        

        if (jrbByBizPartner.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 0) {
            groupBy = " GROUP BY tp_bp, bp ";
            orderBy = " ORDER BY tp_bp, bp ";
            detailCol = mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE";
            filter = "POR " + (mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE");
            tpDetail = 1;
        }
        else if (jrbByBizPartner.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 2) {
            groupBy = " GROUP BY tp_bp, bp, agt ";
            orderBy = " ORDER BY tp_bp, bp, agt ";
            detailCol = "AGENTE";
            filter = mbParamIsSupplier ? "POR PROVEEDOR - AGENTE" : "POR CLIENTE - AGENTE";
            tpDetail = 2;
            tpGroup = 1;
            showGroup = true;
        }
        else if (jrbByBizPartner.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 3) {
            groupBy = " GROUP BY tp_bp, bp, igen ";
            orderBy = " ORDER BY tp_bp, bp, igen ";
            detailCol = "ÍTEM GENÉRICO";
            filter = mbParamIsSupplier ? "POR PROVEEDOR - ÍTEM GENÉRICO" : "POR CLIENTE - ÍTEM GENÉRICO";
            tpDetail = 3;
            tpGroup = 1;
            showGroup = true;
        }
        else if (jrbByBizPartner.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 4) {
            groupBy = " GROUP BY tp_bp, bp, item ";
            orderBy = " ORDER BY tp_bp, bp, item ";
            detailCol = "ÍTEM";
            filter = mbParamIsSupplier ? "POR PROVEEDOR - ÍTEM" : "POR CLIENTE - ÍTEM";
            tpDetail = 4;
            tpGroup = 1;
            showGroup = true;
        }

        // Sales agent options:

        else if (jrbBySalesAgent.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 0) {
            groupBy = " GROUP BY agt ";
            orderBy = " ORDER BY agt ";
            detailCol = "AGENTE";
            filter = "POR AGENTE";
            tpDetail = 2;
        }
        else if (jrbBySalesAgent.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 1) {
            groupBy = " GROUP BY agt, bp ";
            orderBy = " ORDER BY agt, bp ";
            detailCol = mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE";
            filter = "POR AGENTE - " + (mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE");
            tpDetail = 1;
            tpGroup = 2;
            showGroup = true;
        }
        else if (jrbBySalesAgent.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 3) {
            groupBy = " GROUP BY agt, igen ";
            orderBy = " ORDER BY agt, igen ";
            detailCol = "ÍTEM GENÉRICO";
            filter = "POR AGENTE - ÍTEM GENÉRICO";
            tpDetail = 3;
            tpGroup = 2;
            showGroup = true;
        }
        else if (jrbBySalesAgent.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 4) {
            groupBy = " GROUP BY agt, item ";
            orderBy = " ORDER BY agt, item ";
            detailCol = "ÍTEM";
            filter = "POR AGENTE - ÍTEM";
            tpDetail = 4;
            tpGroup = 2;
            showGroup = true;
        }

        // Item generic options:

        else if (jrbByItemGeneric.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 0) {
            groupBy = " GROUP BY igen ";
            orderBy = " ORDER BY igen ";
            detailCol = "ÍTEM GENÉRICO";
            filter = "POR ÍTEM GENÉRICO";
            tpDetail = 3;
        }
        else if (jrbByItemGeneric.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 1) {
            groupBy = " GROUP BY igen, bp ";
            orderBy = " ORDER BY igen, bp ";
            detailCol = mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE";
            filter = "POR ÍTEM GENÉRICO - " + (mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE");
            tpDetail = 1;
            tpGroup = 3;
            showGroup = true;
        }
        else if (jrbByItemGeneric.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 2) {
            groupBy = " GROUP BY igen, agt ";
            orderBy = " ORDER BY igen, agt ";
            detailCol = "AGENTE";
            filter = "POR ÍTEM GENÉRICO - AGENTE";
            tpDetail = 2;
            tpGroup = 3;
            showGroup = true;
        }
        else if (jrbByItemGeneric.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 4) {
            groupBy = " GROUP BY igen, item ";
            orderBy = " ORDER BY igen, item ";
            detailCol = "ÍTEM";
            filter = "POR ÍTEM GENÉRICO - ÍTEM";
            tpDetail = 4;
            tpGroup = 3;
            showGroup = true;
        }

        // Item options:

        else if (jrbByItem.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 0) {
            groupBy = " GROUP BY item ";
            orderBy = " ORDER BY item ";
            detailCol = "ÍTEM";
            filter = "POR ÍTEM";
            tpDetail = 4;
        }
        else if (jrbByItem.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 1) {
            groupBy = " GROUP BY item, bp ";
            orderBy = " ORDER BY item, bp ";
            detailCol = mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE";
            filter = "POR ÍTEM - " + (mbParamIsSupplier ? "PROVEEDOR" : "CLIENTE");
            tpDetail = 1;
            tpGroup = 4;
            showGroup = true;
        }
        else if (jrbByItem.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 2) {
            groupBy = " GROUP BY item, agt ";
            orderBy = " ORDER BY item, agt ";
            detailCol = "AGENTE";
            filter = "POR ÍTEM - AGENTE";
            tpDetail = 2;
            tpGroup = 4;
            showGroup = true;
        }
        else if (jrbByItem.isSelected() && moFieldCrossWith.getKeyAsIntArray()[0] == 3) {
            groupBy = " GROUP BY item, igen ";
            orderBy = " ORDER BY item, igen ";
            detailCol = "ÍTEM GENÉRICO";
            filter = "POR ÍTEM - ÍTEM GENÉRICO";
            tpDetail = 3;
            tpGroup = 4;
            showGroup = true;
        }
        
        if (jcbCurrency.getSelectedIndex() == 0) {
            groupBy = groupBy + ", cur_key ";
            orderBy = orderBy + ", cur_key ";
        }
        
        return new Object[] { groupBy, orderBy, detailCol, filter, tpDetail, tpGroup, showGroup };
    }

    private java.lang.String getUnitBase(int n) {
        String unit = "";

        switch(n) {
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY:
                unit = ((SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_QTY }, SLibConstants.EXEC_MODE_SILENT)).getUnitBase();
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN:
                unit = ((SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_LEN }, SLibConstants.EXEC_MODE_SILENT)).getUnitBase();
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF:
                unit = ((SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_SURF }, SLibConstants.EXEC_MODE_SILENT)).getUnitBase();
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL:
                unit = ((SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_VOL }, SLibConstants.EXEC_MODE_SILENT)).getUnitBase();
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_MASS:
                unit = ((SDataUnitType) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_TP_UNIT, new int[] { SDataConstantsSys.ITMU_TP_UNIT_MASS }, SLibConstants.EXEC_MODE_SILENT)).getUnitBase();
                break;
            default:
                break;
        }

        return unit;
    }

    private java.lang.String createColumnsUnits(int n) {
        String columnsUnit = "";

        switch(n) {
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY:
                columnsUnit = ", COALESCE(SUM(de.qty), 0) AS f_qty, " +
                        "0 AS f_qty_r, COALESCE(SUM(de.qty), 0) AS f_qty_net, " +
                        "COALESCE(COALESCE(SUM(de.stot_r), 0) / COALESCE(SUM(de.qty), 0), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN:
                columnsUnit = ", COALESCE(SUM(de.len), 0) AS f_qty, " +
                        "0 AS f_qty_r, COALESCE(SUM(de.len), 0) AS f_qty_net, " +
                        "COALESCE(COALESCE(SUM(de.stot_r), 0) / COALESCE(SUM(de.len), 0), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF:
                columnsUnit = ", COALESCE(SUM(de.surf), 0) AS f_qty, " +
                        "0 AS f_qty_r, COALESCE(SUM(de.surf), 0) AS f_qty_net, " +
                        "COALESCE(COALESCE(SUM(de.stot_r), 0) / COALESCE(SUM(de.surf), 0), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL:
                columnsUnit = ", COALESCE(SUM(de.vol), 0) AS f_qty, " +
                        "0 AS f_qty_r, COALESCE(SUM(de.vol), 0) AS f_qty_net, " +
                        "COALESCE(COALESCE(SUM(de.stot_r), 0) / COALESCE(SUM(de.vol), 0), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_MASS:
                columnsUnit = ", COALESCE(SUM(de.mass), 0) AS f_qty, " +
                        "0 AS f_qty_r, COALESCE(SUM(de.mass), 0) AS f_qty_net, " +
                        "COALESCE(COALESCE(SUM(de.stot_r), 0) / COALESCE(SUM(de.mass), 0), 0) AS f_avg_price ";
                break;
            default:
                break;
        }

        return columnsUnit;
    }

    private java.lang.String createColumnsUnitsAdjReturn(int n) {
        String columns = "";

        switch(n) {
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_QTY:
                columns = ", 0 AS f_qty, " +
                        "COALESCE(SUM(de.qty), 0) AS f_qty_r, " +
                        "0 - COALESCE(SUM(de.qty), 0) AS f_qty_net, " +
                        "COALESCE((0 - COALESCE(SUM(de.stot_r), 0) / 0 - COALESCE(SUM(de.qty), 0)), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_LEN:
                columns = ", 0 AS f_qty, " +
                        "COALESCE(SUM(de.len), 0) AS f_qty_r, " +
                        "0 - COALESCE(SUM(de.len), 0) AS f_qty_net, " +
                        "COALESCE((0 - COALESCE(SUM(de.stot_r), 0) / 0 - COALESCE(SUM(de.len), 0)), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_SURF:
                columns = ", 0 AS f_qty, " +
                        "COALESCE(SUM(de.surf), 0) AS f_qty_r, " +
                        "0 - COALESCE(SUM(de.surf), 0) AS f_qty_net, " +
                        "COALESCE((0 - COALESCE(SUM(de.stot_r), 0) / 0 - COALESCE(SUM(de.surf), 0)), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_VOL:
                columns = ", 0 AS f_qty, " +
                        "COALESCE(SUM(de.vol), 0) AS f_qty_r, " +
                        "0 - COALESCE(SUM(de.vol), 0) AS f_qty_net, " +
                        "COALESCE((0 - COALESCE(SUM(de.stot_r), 0) / 0 - COALESCE(SUM(de.vol), 0)), 0) AS f_avg_price ";
                break;
            case SDataConstantsSys.TRNX_TP_UNIT_TOT_MASS:
                columns = ", 0 AS f_qty, " +
                        "COALESCE(SUM(de.mass), 0) AS f_qty_r, " +
                        "0 - COALESCE(SUM(de.mass), 0) AS f_qty_net, " +
                        "COALESCE((0 - COALESCE(SUM(de.stot_r), 0) / 0 - COALESCE(SUM(de.mass), 0)), 0) AS f_avg_price ";
                break;
            default:
                break;
        }

        return columns;
    }

    private void itemStateChangedCurrencyCheck() {
        if (jrbCurrencyLoc.isSelected()) {
            jlCurrencyDocWarning.setVisible(false);
            jcbCurrency.setEnabled(false);
            moFieldCurrency.setKey(miClient.getSession().getSessionCustom().getLocalCurrencyKey());
            jckIsWithUnits.setEnabled(true);
        }
        else if (jrbCurrencyDoc.isSelected()) {   
            jcbCurrency.setEnabled(true);
            jcbCurrency.setSelectedIndex(0);
            jckIsWithUnits.setEnabled(false);
            jlCurrencyDocWarning.setVisible(true);
            jlCurrencyDocWarning.setText("NOTA: Todas las operaciones.");
        }
        
        jckIsWithUnits.setSelected(false);
        renderComboBoxUnitsType();
    }
    
    private void itemStateChangedCurrency() {
        if (jcbCurrency.getSelectedIndex() > 0 && !jrbCurrencyLoc.isSelected()) {
            jlCurrencyDocWarning.setVisible(true);
            jlCurrencyDocWarning.setText("NOTA: ¡Solo operaciones en la moneda seleccionada!");
        }
        else {
            jlCurrencyDocWarning.setText("NOTA: Todas las operaciones.");
        }
    }
    
    private void itemStateChangedByBizPartner() {
        popultateComboBoxCross();
    }

    private void itemStateChangedBySalesAgent() {
        popultateComboBoxCross();
    }

    private void itemStateChangedByItemGeneric() {
        popultateComboBoxCross();
    }

    private void itemStateChangedByItem() {
        popultateComboBoxCross();
    }

    private void itemStateChangedIsWithUnits() {
        populateComboBoxUnitsType();
        renderComboBoxUnitsType();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgByOptions;
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbFunctionalArea;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox<SFormComponentItem> jcbCompanyBranch;
    private javax.swing.JComboBox<SFormComponentItem> jcbCrossWith;
    private javax.swing.JComboBox jcbCurrency;
    private javax.swing.JComboBox<SFormComponentItem> jcbItemCategory;
    private javax.swing.JComboBox<SFormComponentItem> jcbUnitType;
    private javax.swing.JCheckBox jckIsWithUnits;
    private javax.swing.JCheckBox jckWithoutRelatedParty;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlBizPartner1;
    private javax.swing.JLabel jlCompanyBranch;
    private javax.swing.JLabel jlCrossWith;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlCurrencyDocWarning;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlItemCategory;
    private javax.swing.JLabel jlUnitType;
    private javax.swing.JRadioButton jrbByBizPartner;
    private javax.swing.JRadioButton jrbByItem;
    private javax.swing.JRadioButton jrbByItemGeneric;
    private javax.swing.JRadioButton jrbBySalesAgent;
    private javax.swing.JRadioButton jrbCurrencyDoc;
    private javax.swing.JRadioButton jrbCurrencyLoc;
    private javax.swing.JTextField jtfFunctionalArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        mbResetingForm = false;
        jckIsWithUnits.setSelected(false);
        jckWithoutRelatedParty.setSelected(false);
        jcbUnitType.removeAllItems();
        renderComboBoxUnitsType();
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        SFormUtilities.populateComboBox(miClient, jcbCompanyBranch, SDataConstants.BPSU_BPB, new int[] { miClient.getSessionXXX().getCurrentCompany().getPkCompanyId() });
        SFormUtilities.populateComboBox(miClient, jcbItemCategory, SDataConstants.ITMS_CT_ITEM);
        SFormUtilities.populateComboBox(miClient, jcbCurrency, SDataConstants.CFGU_CUR);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moFieldDateEnd.getDate().compareTo(moFieldDateStart.getDate()) < 0) {
                validation.setMessage("La fecha final debe ser mayor o igual a la fecha inicial.");
                validation.setComponent(jftDateEnd);
            }
        }
       
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbDateStart) {
                actionDateStart();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionClose();
            }
            else if (button == jbFunctionalArea) {
                actionFunctionalArea();
            }
        }
    }

    public void setParamIsSupplier(boolean b) { mbParamIsSupplier = b; }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JRadioButton radioButton = (JRadioButton) e.getSource();
                
                if (radioButton == jrbCurrencyDoc || radioButton == jrbCurrencyLoc) {
                    itemStateChangedCurrencyCheck();
                }
            }
        }
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == jcbCurrency) {
                itemStateChangedCurrency();
            }
        }
    }
}
