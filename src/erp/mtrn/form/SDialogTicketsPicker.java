/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mtrn.data.SDataScaleTicketDps;
import erp.mtrn.data.SDataScaleTicketDpsEntry;
import erp.mtrn.data.SRowTicketsPicker;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author Isabel Servín
 */
public class SDialogTicketsPicker extends javax.swing.JDialog implements SFormOptionPickerInterface, ActionListener, ItemListener {
    
    public static final int ITEM_ID = 1;
    public static final int BP_ID = 2;
    public static final int TICKETS_LINKED = 3;
    public static final int TICKETS_LINKED_DPS = 4;
    public static final int TICKET_IN_OUT = 5;
    
    private final erp.client.SClientInterface miClient;
    
    private int mnFormResult;
    private boolean mbFirstTime;
    
    private ArrayList<SRowTicketsPicker> maRowTickets;
    
    private erp.lib.table.STablePane moOptionPane;
    
    private int mnItem;
    private int mnBp;
    private boolean mbIsSale;
    
    /**
     * Creates new form SDialogTicketsPicker
     * @param client
     */
    public SDialogTicketsPicker(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }
    
    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgLinks = new javax.swing.ButtonGroup();
        bgCoincidences = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        jpTickets = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        jpLinksFilters = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jrbWithoutLinks = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jrbWithLinks = new javax.swing.JRadioButton();
        jpCoincidencesFilters = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jrbPartnerProduct = new javax.swing.JRadioButton();
        jrbNone = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        jrbPartner = new javax.swing.JRadioButton();
        jrbProduct = new javax.swing.JRadioButton();
        jpOk = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Seleccionar boleto");
        setModal(true);
        setPreferredSize(new java.awt.Dimension(640, 400));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpTickets.setBorder(javax.swing.BorderFactory.createTitledBorder("Boletos de báscula:"));
        jpTickets.setLayout(new java.awt.BorderLayout());

        jpFilters.setLayout(new java.awt.BorderLayout());

        jpLinksFilters.setBorder(javax.swing.BorderFactory.createTitledBorder("Por vínculo:"));
        jpLinksFilters.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgLinks.add(jrbWithoutLinks);
        jrbWithoutLinks.setSelected(true);
        jrbWithoutLinks.setText("Sin vinculos a otros docs.");
        jrbWithoutLinks.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(jrbWithoutLinks);

        jpLinksFilters.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgLinks.add(jrbWithLinks);
        jrbWithLinks.setText("Con vinculos a otros docs y partidas");
        jrbWithLinks.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jrbWithLinks);

        jpLinksFilters.add(jPanel8);

        jpFilters.add(jpLinksFilters, java.awt.BorderLayout.WEST);

        jpCoincidencesFilters.setBorder(javax.swing.BorderFactory.createTitledBorder("Por coincidencia:"));
        jpCoincidencesFilters.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgCoincidences.add(jrbPartnerProduct);
        jrbPartnerProduct.setSelected(true);
        jrbPartnerProduct.setText("Coincide asociado e ítem");
        jrbPartnerProduct.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(jrbPartnerProduct);

        bgCoincidences.add(jrbNone);
        jrbNone.setText("No hay coincidencia");
        jrbNone.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel9.add(jrbNone);

        jpCoincidencesFilters.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgCoincidences.add(jrbPartner);
        jrbPartner.setText("Coincide sólo asociado");
        jrbPartner.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(jrbPartner);

        bgCoincidences.add(jrbProduct);
        jrbProduct.setText("Coincide sólo ítem");
        jrbProduct.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(jrbProduct);

        jpCoincidencesFilters.add(jPanel10);

        jpFilters.add(jpCoincidencesFilters, java.awt.BorderLayout.CENTER);

        jpTickets.add(jpFilters, java.awt.BorderLayout.NORTH);

        jpRegistry.add(jpTickets, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpOk.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setPreferredSize(new java.awt.Dimension(85, 23));
        jpOk.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setPreferredSize(new java.awt.Dimension(85, 23));
        jpOk.add(jbCancel);

        getContentPane().add(jpOk, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i = 0;
        
        moOptionPane = new STablePane(miClient);
        
        jpTickets.add(moOptionPane, BorderLayout.CENTER);
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        
        erp.lib.table.STableColumnForm tableColumns[];
        
        tableColumns = new STableColumnForm[4];
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Boleto", 100);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado de negocio", 200);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 200);
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Vinculo", 70);
        
        for (i = 0; i < tableColumns.length; i++) {
            moOptionPane.addTableColumn(tableColumns[i]);
        }

        moOptionPane.createTable(null);
        
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
        
        jrbNone.addItemListener(this);
        jrbPartner.addItemListener(this);
        jrbPartnerProduct.addItemListener(this);
        jrbProduct.addItemListener(this);
        jrbWithLinks.addItemListener(this);
        jrbWithoutLinks.addItemListener(this);
    }
    
    public void populateTicketTable() {
        maRowTickets = new ArrayList<>();
        
        try {
            String sql = "SELECT st.id_sca_tic, st.num, st.fk_item, st.fk_bp, IF(td.id_sca_tic IS NULL, '', 'DOC') link, " +
                    "bp.bp, i.item " +
                    "FROM erp.trnu_sca_tic AS st " +
                    "INNER JOIN erp.bpsu_bp AS bp ON st.fk_bp = bp.id_bp " +
                    "INNER JOIN erp.itmu_item AS i ON st.fk_item = i.id_item " +
                    "LEFT JOIN trn_sca_tic_dps AS td ON st.id_sca_tic = td.id_sca_tic " + 
                    "WHERE NOT st.b_del AND st.fk_ct_iog = " + (mbIsSale ? SDataConstantsSys.TRNS_CT_IOG_OUT : SDataConstantsSys.TRNS_CT_IOG_IN) + " ";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            
            while (resultSet.next()) {
                SRowTicketsPicker row = new SRowTicketsPicker(resultSet.getInt(1), 
                        resultSet.getInt(2), resultSet.getInt(3), resultSet.getInt(4), resultSet.getString(5),
                        resultSet.getString(6), resultSet.getString(7));
                maRowTickets.add(row);
            }
        }
        catch (Exception e) { }
    }
    
    private void actionOk() {
        if (jrbPartnerProduct.isSelected()) {
            if (moOptionPane.getSelectedTableRow() == null) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
                moOptionPane.getTable().requestFocus();
            }
            else {
                mnFormResult = SLibConstants.FORM_RESULT_OK;
                setVisible(false);
            }
        }
        else {
            miClient.showMsgBoxInformation("Sólo se pueden seleccionar boletos que coincidan en asociado de negocio e ítem.");
        }
    }
    
    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void renderTicketTable() {
        moOptionPane.clearTableRows();
        if (!maRowTickets.isEmpty()) {
            for (SRowTicketsPicker row : maRowTickets) {
                if (jrbWithoutLinks.isSelected() && row.msLink.equals("")) {
                    if (jrbPartnerProduct.isSelected() && row.mnItem == mnItem && row.mnBp == mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbPartner.isSelected() && row.mnItem != mnItem && row.mnBp == mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbProduct.isSelected() && row.mnItem == mnItem && row.mnBp != mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbNone.isSelected() && row.mnItem != mnItem && row.mnBp != mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                }
                else if (jrbWithLinks.isSelected() && !row.msLink.equals("")) {
                    if (jrbPartnerProduct.isSelected() && row.mnItem == mnItem && row.mnBp == mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbPartner.isSelected() && row.mnItem != mnItem && row.mnBp == mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbProduct.isSelected() && row.mnItem == mnItem && row.mnBp != mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                    else if (jrbNone.isSelected() && row.mnItem != mnItem && row.mnBp != mnBp) {
                        moOptionPane.addTableRow(row);
                    }
                }
            }
        }
        
        moOptionPane.renderTableRows();
        moOptionPane.setTableRowSelection(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCoincidences;
    private javax.swing.ButtonGroup bgLinks;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpCoincidencesFilters;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpLinksFilters;
    private javax.swing.JPanel jpOk;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpTickets;
    private javax.swing.JRadioButton jrbNone;
    private javax.swing.JRadioButton jrbPartner;
    private javax.swing.JRadioButton jrbPartnerProduct;
    private javax.swing.JRadioButton jrbProduct;
    private javax.swing.JRadioButton jrbWithLinks;
    private javax.swing.JRadioButton jrbWithoutLinks;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    public void setValue(int opc, Object value) {
        switch (opc) {
            case ITEM_ID: mnItem = (int) value; break;
            case BP_ID: mnBp = (int) value; break;
            case TICKETS_LINKED: 
                for (SDataScaleTicketDpsEntry tic : (Vector<SDataScaleTicketDpsEntry>) value) {
                    for (SRowTicketsPicker row : maRowTickets) {
                        if (tic.getPkScaleTicketId() == row.mnPk) {
                            row.msLink = "PAR";
                            row.prepareTableRow();
                        }
                    }
                }
                renderTicketTable();
                break;
            case TICKETS_LINKED_DPS: 
                for (SDataScaleTicketDps tic : (Vector<SDataScaleTicketDps>) value) {
                    for (SRowTicketsPicker row : maRowTickets) {
                        if (tic.getPkScaleTicketId() == row.mnPk) {
                            row.msLink = "PAR";
                            row.prepareTableRow();
                        }
                    }
                }
                renderTicketTable();
                break;
            case TICKET_IN_OUT: mbIsSale = (boolean) value; break;
        }
    }
    
    @Override
    public void formReset() {
        mbFirstTime = true;
        maRowTickets = new ArrayList<>();
        moOptionPane.clearTableRows();
    }

    @Override
    public void formRefreshOptionPane() {
        
    }

    @Override
    public void setFormVisible(boolean visible) {
        renderTicketTable();
        setVisible(visible);
    }

    @Override
    public int getOptionType() {
        return 0;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(Object filterKey) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setSelectedPrimaryKey(Object pk) {
        moOptionPane.renderTableRows();
        
        for (int i = 0; i < moOptionPane.getTableGuiRowCount(); i++) {
            if (SLibUtilities.compareKeys(pk, moOptionPane.getTableModel().getTableRow(i).getPrimaryKey())) {
                moOptionPane.setTableRowSelection(i);
                break;
            }
        }
    }

    @Override
    public Object getSelectedPrimaryKey() {
        Object pk = null;

        if (moOptionPane.getSelectedTableRow() != null) {
            pk = moOptionPane.getSelectedTableRow().getPrimaryKey();
        }

        return pk;
    }

    @Override
    public STableRow getSelectedOption() {
        return moOptionPane.getSelectedTableRow();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        renderTicketTable();
    }
}
