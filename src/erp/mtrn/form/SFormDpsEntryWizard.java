/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mtrn.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRow;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mfin.form.SPanelAccount;
import erp.mitm.data.SDataItem;
import erp.mod.SModSysConsts;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import erp.mtrn.data.SDataDpsEntryTax;
import erp.mtrn.data.SDataDpsEntryTaxRow;
import erp.mtrn.data.SDataDpsEntryWizardRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;

/**
 *
 * @author  Sergio Flores
 */
public class SFormDpsEntryWizard extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.CellEditorListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private boolean mbUpdatingForm;
    private java.util.Vector<SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItem moItem;
    private erp.lib.form.SFormField moFieldFkItemId;
    private erp.lib.form.SFormField moFieldKey;
    private erp.lib.form.SFormField moFieldConcept;
    private erp.lib.form.SFormField moFieldFkItemReferenceId_n;
    private erp.lib.form.SFormField moFieldTotalCy_r;

    private erp.lib.table.STablePaneGrid moPaneGridEntries;
    private erp.lib.table.STablePaneGrid moPaneGridTaxes;
    private erp.mfin.form.SPanelAccount moPanelFkCostCenterId_n;

    private erp.mtrn.data.SDataDps moParamDps;
    private erp.mbps.data.SDataBizPartner moParamBizPartner;
    private erp.mbps.data.SDataBizPartnerBranch moParamBizPartnerBranch;
    private int[] manTaxRegionKey;

    private int[] manItemClassFilterKey;

    private final int COL_TOT = 5;   // column index for total in entries pane
    private final int COL_TAX_CUR = 5;   // column index for amount in taxes pane

    /** Creates new form DFormDpsEntry */
    public SFormDpsEntryWizard(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.TRN_DPS_ETY;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpInput = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlFkItemId = new javax.swing.JLabel();
        jcbFkItemId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkItemId = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlKey = new javax.swing.JLabel();
        jtfKey = new javax.swing.JTextField();
        jbKey = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jbConcept = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlTotalCy_r = new javax.swing.JLabel();
        jtfTotalCy_r = new javax.swing.JTextField();
        jtfTotalCy_rCurrencyKey = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlFkItemReferenceId_n = new javax.swing.JLabel();
        jcbFkItemReferenceId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkItemReferenceId_n = new javax.swing.JButton();
        jpCostCenter = new javax.swing.JPanel();
        jlDummyCostCenter = new javax.swing.JLabel();
        jpEntries = new javax.swing.JPanel();
        jpEntriesControls = new javax.swing.JPanel();
        jpEntriesControlsWest = new javax.swing.JPanel();
        jbEntryAdd = new javax.swing.JButton();
        jbEntryDelete = new javax.swing.JButton();
        jbEntryClear = new javax.swing.JButton();
        jpTaxes = new javax.swing.JPanel();
        jpTaxesInfo = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlTaxIdentityEmisor = new javax.swing.JLabel();
        jtfTaxIdentityEmisor = new javax.swing.JTextField();
        jlTaxIdentityReceptor = new javax.swing.JLabel();
        jtfTaxIdentityReceptor = new javax.swing.JTextField();
        jlTaxRegion = new javax.swing.JLabel();
        jtfTaxRegion = new javax.swing.JTextField();
        jPanel33 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlEntriesTotalCy = new javax.swing.JLabel();
        jtfEntriesTotalCy = new javax.swing.JTextField();
        jtfEntriesTotalCyCurrencyKey = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Asistente de creación de varias partidas de documento"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpInput.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la partida:"));
        jPanel22.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkItemId.setText("Ítem: *");
        jlFkItemId.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel6.add(jlFkItemId);

        jcbFkItemId.setMaximumRowCount(16);
        jcbFkItemId.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel6.add(jcbFkItemId);

        jbFkItemId.setText("...");
        jbFkItemId.setToolTipText("Seleccionar ítem");
        jbFkItemId.setFocusable(false);
        jbFkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkItemId);

        jPanel4.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlKey.setText("Clave: *");
        jlKey.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel7.add(jlKey);

        jtfKey.setText("KEY");
        jtfKey.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jtfKey);

        jbKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbKey.setToolTipText("Copiar clave del ítem");
        jbKey.setFocusable(false);
        jbKey.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbKey);

        jPanel4.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel8.add(jlConcept);

        jtfConcept.setText("CONCEPT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel8.add(jtfConcept);

        jbConcept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbConcept.setToolTipText("Copiar concepto del ítem");
        jbConcept.setFocusable(false);
        jbConcept.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbConcept);

        jPanel4.add(jPanel8);

        jPanel22.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel22);

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Valor de la partida:"));
        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlTotalCy_r.setText("Total neto partida:");
        jlTotalCy_r.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlTotalCy_r);

        jtfTotalCy_r.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalCy_r.setText("0,000.00");
        jtfTotalCy_r.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jtfTotalCy_r);

        jtfTotalCy_rCurrencyKey.setEditable(false);
        jtfTotalCy_rCurrencyKey.setText("CUR");
        jtfTotalCy_rCurrencyKey.setFocusable(false);
        jtfTotalCy_rCurrencyKey.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfTotalCy_rCurrencyKey);

        jPanel10.add(jPanel9, java.awt.BorderLayout.WEST);

        jPanel5.add(jPanel10);

        jPanel24.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel24);

        jpInput.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(1, 2));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Miscelánea:"));
        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel35.setLayout(new java.awt.GridLayout(2, 1, 0, 1));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkItemReferenceId_n.setText("Ítem referencia:");
        jlFkItemReferenceId_n.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel12.add(jlFkItemReferenceId_n);

        jcbFkItemReferenceId_n.setMaximumRowCount(12);
        jcbFkItemReferenceId_n.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel12.add(jcbFkItemReferenceId_n);

        jbFkItemReferenceId_n.setText("...");
        jbFkItemReferenceId_n.setToolTipText("Seleccionar ítem referencia");
        jbFkItemReferenceId_n.setFocusable(false);
        jbFkItemReferenceId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbFkItemReferenceId_n);

        jPanel35.add(jPanel12);

        jPanel18.add(jPanel35, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel18);

        jpCostCenter.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo:"));
        jpCostCenter.setLayout(new java.awt.BorderLayout());

        jlDummyCostCenter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlDummyCostCenter.setText("[Panel centro de costo]");
        jlDummyCostCenter.setPreferredSize(new java.awt.Dimension(100, 50));
        jpCostCenter.add(jlDummyCostCenter, java.awt.BorderLayout.NORTH);

        jPanel3.add(jpCostCenter);

        jpInput.add(jPanel3, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpInput, java.awt.BorderLayout.NORTH);

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas:"));
        jpEntries.setLayout(new java.awt.BorderLayout());

        jpEntriesControls.setLayout(new java.awt.BorderLayout());

        jpEntriesControlsWest.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbEntryAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_ok.gif"))); // NOI18N
        jbEntryAdd.setToolTipText("Agregar partida [Ctrl + A]");
        jbEntryAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlsWest.add(jbEntryAdd);

        jbEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbEntryDelete.setToolTipText("Eliminar partida [Ctrl + D]");
        jbEntryDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlsWest.add(jbEntryDelete);

        jbEntryClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbEntryClear.setToolTipText("Limpiar campos [Ctrl + L]");
        jbEntryClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEntriesControlsWest.add(jbEntryClear);

        jpEntriesControls.add(jpEntriesControlsWest, java.awt.BorderLayout.WEST);

        jpEntries.add(jpEntriesControls, java.awt.BorderLayout.NORTH);

        jpRegistry.add(jpEntries, java.awt.BorderLayout.CENTER);

        jpTaxes.setBorder(javax.swing.BorderFactory.createTitledBorder("Impuestos de las partidas:"));
        jpTaxes.setPreferredSize(new java.awt.Dimension(828, 200));
        jpTaxes.setLayout(new java.awt.BorderLayout());

        jpTaxesInfo.setLayout(new java.awt.GridLayout(1, 2, 10, 0));

        jPanel14.setLayout(new java.awt.GridLayout(3, 2, 2, 1));

        jlTaxIdentityEmisor.setText("Identidad de impuestos del emisor:");
        jlTaxIdentityEmisor.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(jlTaxIdentityEmisor);

        jtfTaxIdentityEmisor.setEditable(false);
        jtfTaxIdentityEmisor.setText("TAX IDENTITY");
        jtfTaxIdentityEmisor.setFocusable(false);
        jPanel14.add(jtfTaxIdentityEmisor);

        jlTaxIdentityReceptor.setText("Identidad de impuestos del receptor:");
        jlTaxIdentityReceptor.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(jlTaxIdentityReceptor);

        jtfTaxIdentityReceptor.setEditable(false);
        jtfTaxIdentityReceptor.setText("TAX IDENTITY");
        jtfTaxIdentityReceptor.setFocusable(false);
        jPanel14.add(jtfTaxIdentityReceptor);

        jlTaxRegion.setText("Región de impuestos de las partidas:");
        jlTaxRegion.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(jlTaxRegion);

        jtfTaxRegion.setEditable(false);
        jtfTaxRegion.setText("TAX REGION");
        jtfTaxRegion.setFocusable(false);
        jPanel14.add(jtfTaxRegion);

        jpTaxesInfo.add(jPanel14);

        jPanel33.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlEntriesTotalCy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlEntriesTotalCy.setText("Total neto partidas:");
        jlEntriesTotalCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jlEntriesTotalCy);

        jtfEntriesTotalCy.setEditable(false);
        jtfEntriesTotalCy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfEntriesTotalCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfEntriesTotalCy.setText("0,000.00");
        jtfEntriesTotalCy.setFocusable(false);
        jtfEntriesTotalCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jtfEntriesTotalCy);

        jtfEntriesTotalCyCurrencyKey.setEditable(false);
        jtfEntriesTotalCyCurrencyKey.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfEntriesTotalCyCurrencyKey.setText("CUR");
        jtfEntriesTotalCyCurrencyKey.setFocusable(false);
        jtfEntriesTotalCyCurrencyKey.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfEntriesTotalCyCurrencyKey);

        jPanel33.add(jPanel16);

        jpTaxesInfo.add(jPanel33);

        jpTaxes.add(jpTaxesInfo, java.awt.BorderLayout.NORTH);

        jpRegistry.add(jpTaxes, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-900)/2, (screenSize.height-650)/2, 900, 650);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        mvFields = new Vector<SFormField>();

        moFieldFkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemId, jlFkItemId);
        moFieldFkItemId.setPickerButton(jbFkItemId);
        moFieldKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfKey, jlKey);
        moFieldKey.setLengthMax(35);
        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(130);
        moFieldTotalCy_r = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalCy_r, jlTotalCy_r);
        moFieldFkItemReferenceId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemReferenceId_n, jlFkItemReferenceId_n);
        moFieldFkItemReferenceId_n.setPickerButton(jbFkItemReferenceId_n);

        mvFields.add(moFieldFkItemId);
        mvFields.add(moFieldKey);
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldTotalCy_r);
        mvFields.add(moFieldFkItemReferenceId_n);

        // Entries pane:

        moPaneGridEntries = new STablePaneGrid(miClient);
        jpEntries.add(moPaneGridEntries, BorderLayout.CENTER);

        i = 0;
        aoTableColumns = new STableColumnForm[6];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", 250);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem referencia", STableConstants.WIDTH_ITEM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. centro costo", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total mon $", STableConstants.WIDTH_VALUE_2X);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneGridEntries.addTableColumn(aoTableColumns[i]);
        }

        // Taxes pane:

        moPaneGridTaxes = new STablePaneGrid(miClient);
        jpTaxes.add(moPaneGridTaxes, BorderLayout.CENTER);

        i = 0;
        aoTableColumns = new STableColumnForm[9];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto", 200);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Tasa", STableConstants.WIDTH_PERCENTAGE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor u.", STableConstants.WIDTH_VALUE_UNITARY);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValueUnitary());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Monto mon $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo impuesto", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cálculo impuesto", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Aplicación impuesto", 150);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneGridTaxes.addTableColumn(aoTableColumns[i]);
        }

        // Miscellaneous:

        try {
            moPanelFkCostCenterId_n = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpCostCenter.remove(jlDummyCostCenter);
        jpCostCenter.add(moPanelFkCostCenterId_n, BorderLayout.NORTH);

        // Action listeners:

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbKey.addActionListener(this);
        jbConcept.addActionListener(this);
        jbFkItemId.addActionListener(this);
        jbFkItemReferenceId_n.addActionListener(this);
        jbEntryAdd.addActionListener(this);
        jbEntryDelete.addActionListener(this);
        jbEntryClear.addActionListener(this);

        // Item listeners:

        jcbFkItemId.addItemListener(this);

        // Action map:

        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryAdd", "entryAdd", KeyEvent.VK_A, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryDelete", "entryDelete", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionEntryClear", "entryClear", KeyEvent.VK_L, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkItemId.requestFocus();
        }
    }

    private void calculateTotal() {
        double totalCySum = 0;

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            totalCySum += ((SDataDpsEntry) row.getData()).getTotalCy_r();
        }

        jtfEntriesTotalCy.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(totalCySum));
    }

    private void prorateTaxes() {
        int i = 0;
        int j = 0;
        int decs = miClient.getSessionXXX().getParamsErp().getDecimalsValue();
        int indexMax = -1;
        double taxCySum = 0;
        double taxCyCharged = 0;
        double taxCyRetained = 0;
        double totalCyMax = 0;
        double totalCySum = 0;
        SDataDpsEntry entry = null;
        SDataDpsEntryTax entryTax = null;

        // Sum total amount:

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            totalCySum += ((SDataDpsEntry) row.getData()).getTotalCy_r();
        }

        if (totalCySum != 0d) {
            // Prorate taxes:

            for (i = 0; i < moPaneGridEntries.getTableGuiRowCount(); i++) {
                entry = (SDataDpsEntry) moPaneGridEntries.getTableRow(i).getData();

                if (entry.getTotalCy_r() > totalCyMax) {
                    indexMax = i;
                    totalCyMax = entry.getTotalCy_r();
                }

                for (j = 0; j < moPaneGridTaxes.getTableGuiRowCount(); j++) {
                    entryTax = (SDataDpsEntryTax) moPaneGridTaxes.getTableRow(j).getData();
                    entry.getDbmsEntryTaxes().get(j).setTaxCy(SLibUtilities.round(entryTax.getTaxCy() * (entry.getTotalCy_r() / totalCySum), decs));
                }
            }

            // Adjust taxes prorate:

            for (i = 0; i < moPaneGridTaxes.getTableGuiRowCount(); i++) {
                taxCySum = 0;
                entryTax = (SDataDpsEntryTax) moPaneGridTaxes.getTableRow(i).getData();

                // Sum total tax:

                for (STableRow row : moPaneGridEntries.getGridRows()) {
                    taxCySum += ((SDataDpsEntry) row.getData()).getDbmsEntryTaxes().get(i).getTaxCy();
                }

                // Adjust tax prorrate:

                if (taxCySum != entryTax.getTaxCy()) {
                    entry = (SDataDpsEntry) moPaneGridEntries.getTableRow(indexMax).getData();
                    entry.getDbmsEntryTaxes().get(i).setTaxCy(entry.getDbmsEntryTaxes().get(i).getTaxCy() + (entryTax.getTaxCy() - taxCySum));
                }
            }

            // Calculate unitary prices:
            for (STableRow row : moPaneGridEntries.getGridRows()) {
                entry = (SDataDpsEntry) row.getData();

                taxCyCharged = 0;
                taxCyRetained = 0;
                for (SDataDpsEntryTax tax : entry.getDbmsEntryTaxes()) {
                    if (tax.getFkTaxTypeId() == SModSysConsts.FINS_TP_TAX_CHARGED) {
                        taxCyCharged += tax.getTaxCy();
                    }
                    else {
                        taxCyRetained += tax.getTaxCy();
                    }
                }

                entry.setOriginalPriceUnitaryCy(entry.getTotalCy_r() - taxCyCharged + taxCyRetained);
            }
        }
    }

    private erp.mtrn.data.SDataDpsEntry createEntry() {
        double totalCy_r = moFieldTotalCy_r.getDouble();
        SDataDpsEntry entry = new SDataDpsEntry();

        // Basic values for DPS entry's value

        entry.setIsDiscountDocApplying(false);
        entry.setIsDiscountUnitaryPercentage(false);
        entry.setIsDiscountUnitaryPercentageSystem(false);
        entry.setIsDiscountEntryPercentage(false);
        entry.setDiscountUnitaryPercentage(0);
        entry.setDiscountUnitaryPercentageSystem(0);
        entry.setDiscountEntryPercentage(0);

        entry.setOriginalQuantity(1);
        entry.setOriginalPriceUnitaryCy(totalCy_r);
        entry.setOriginalPriceUnitarySystemCy(0);
        entry.setOriginalDiscountUnitaryCy(0);
        entry.setOriginalDiscountUnitarySystemCy(0);

        entry.setDiscountEntryCy(0);
        entry.setDiscountDocCy(0);

        entry.setIsTaxesAutomaticApplying(true);

        entry.setFkOriginalUnitId(moItem.getFkUnitId());
        entry.setFkTaxRegionId(manTaxRegionKey[0]);

        // Calculate DPS entry's value:

        entry.setFkItemId(moItem.getPkItemId());
        entry.setFkUnitId(moItem.getFkUnitId());
        entry.setDbmsFkItemGenericId(moItem.getFkItemGenericId());

        entry.calculateTotal(miClient, moParamDps.getDate(),
                moParamDps.getFkTaxIdentityEmisorTypeId(), moParamDps.getFkTaxIdentityReceptorTypeId(),
                moParamDps.getIsDiscountDocPercentage(), moParamDps.getDiscountDocPercentage(), moParamDps.getExchangeRate());

        // Preserve original value:

        entry.setSubtotal_r(totalCy_r);
        entry.setTaxCharged_r(0);
        entry.setTaxRetained_r(0);
        entry.setTotal_r(totalCy_r);
        entry.setCommissions_r(0);
        entry.setSubtotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        entry.setTaxChargedCy_r(0);
        entry.setTaxRetainedCy_r(0);
        entry.setTotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        entry.setCommissionsCy_r(0);

        for (SDataDpsEntryTax tax : entry.getDbmsEntryTaxes()) {
            tax.setTax(0);
            tax.setTaxCy(0);
        }

        // Set all remaining DPS entry fields:

        entry.setConceptKey(moFieldKey.getString());
        entry.setConcept(moFieldConcept.getString());

        entry.setLength(0);
        entry.setSurface(0);
        entry.setVolume(0);
        entry.setMass(0);
        entry.setWeightGross(0);
        entry.setWeightDelivery(0);
        entry.setSurplusPercentage(0);
        entry.setOperationsType(SDataConstantsSys.TRNX_OPS_TYPE_OPS_OPS);
        entry.setUserId(SLibConstants.UNDEFINED);
        entry.setSortingPosition(0);

        entry.setFkItemRefId_n(!jcbFkItemReferenceId_n.isEnabled() ? 0 : moFieldFkItemReferenceId_n.getKeyAsIntArray()[0]);
        entry.setFkCostCenterId_n(!moPanelFkCostCenterId_n.getFieldAccount().getComponent().isEnabled() ? "" : (moPanelFkCostCenterId_n.isEmptyAccountId() ? "" : moPanelFkCostCenterId_n.getFieldAccount().getString()));
        entry.setIsInventoriable(false);
        entry.setIsDeleted(false);

        entry.setFkDpsAdjustmentTypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[0]);
        entry.setFkDpsAdjustmentSubtypeId(SDataConstantsSys.TRNS_STP_DPS_ADJ_NA_NA[1]);
        entry.setDbmsDpsAdjustmentType(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNS_TP_DPS_ADJ, new int[] { entry.getFkDpsAdjustmentTypeId() }));
        entry.setFkDpsEntryTypeId(SDataConstantsSys.TRNS_TP_DPS_ETY_ORDY);
        entry.setDbmsDpsEntryType(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNS_TP_DPS_ETY, new int[] { entry.getFkDpsEntryTypeId() }));
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

        entry.setDbmsOriginalUnitSymbol(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.ITMU_UNIT, new int[] { moItem.getFkUnitId() }, SLibConstants.DESCRIPTION_CODE));
        entry.setDbmsUnitSymbol(entry.getDbmsOriginalUnitSymbol());
        entry.setDbmsTaxRegion(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_REG, manTaxRegionKey));
        entry.setDbmsItemRef_n(!jcbFkItemReferenceId_n.isEnabled() || jcbFkItemReferenceId_n.getSelectedIndex() <= 0 ? "" : SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemReferenceId_n.getKeyAsIntArray()));
        entry.setDbmsCostCenter_n(!moPanelFkCostCenterId_n.getFieldAccount().getComponent().isEnabled() ? "" : (moPanelFkCostCenterId_n.getCurrentInputCostCenter() == null ? "" : moPanelFkCostCenterId_n.getCurrentInputCostCenter().getCostCenter()));

        return entry;
    }

    private void renderItem(boolean preserveFields) {
        Object keyItem = null;

        mbUpdatingForm = true;

        if (preserveFields) {
            keyItem = moFieldFkItemId.getKey();
        }

        // Every time a different item is selected, form fields are cleared:

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        // Restore values currently selected:

        if (preserveFields) {
            moFieldFkItemId.setFieldValue(keyItem);
        }

        // Default values:

        moPanelFkCostCenterId_n.resetPanel();

        // Render item:

        if (moItem == null) {
            // Clear fields:

            jtfKey.setToolTipText(null);
            jtfConcept.setToolTipText(null);

            // Disable fields:

            jtfKey.setEnabled(false);
            jbKey.setEnabled(false);
            jtfConcept.setEnabled(false);
            jbConcept.setEnabled(false);

            jcbFkItemReferenceId_n.setEnabled(false);
            jbFkItemReferenceId_n.setEnabled(false);
        }
        else {
            // Initializa fields:

            moFieldKey.setFieldValue(moItem.getKey());
            moFieldConcept.setFieldValue(moItem.getItem());

            jtfKey.setCaretPosition(0);
            jtfConcept.setCaretPosition(0);

            if (!moItem.getDbmsDataItemGeneric().getIsItemKeyEditable()) {
                jtfKey.setToolTipText(jtfKey.getText());
            }
            if (!moItem.getDbmsDataItemGeneric().getIsItemNameEditable()) {
                jtfConcept.setToolTipText(jtfConcept.getText());
            }

            // Enable remaining fields:

            jtfKey.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemKeyEditable());
            jbKey.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemKeyEditable());
            jtfConcept.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemNameEditable());
            jbConcept.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemNameEditable());

            if (moItem.getDbmsDataItemGeneric().getIsItemReferenceRequired()) {
                moFieldFkItemReferenceId_n.setFieldValue(new int[] { moItem.getDbmsFkDefaultItemRefId_n() });
            }

            jcbFkItemReferenceId_n.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemReferenceRequired());
            jbFkItemReferenceId_n.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemReferenceRequired());

            try {
                moPanelFkCostCenterId_n.getFieldAccount().setString(SDataUtilities.obtainCostCenterItem(miClient.getSession(), moItem.getPkItemId()));
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                moPanelFkCostCenterId_n.refreshPanel();
            }
        }

        mbUpdatingForm = false;
    }

    private void updateDpsEntryTotRow() {
        SDataDpsEntry entry;
        double totalCy_r = 0;
        double totalCySum = 0;

        for (STableRow row : moPaneGridEntries.getGridRows()) {
            totalCy_r = ((Double) row.getValues().get(COL_TOT));

            entry = (SDataDpsEntry) row.getData();
            entry.setOriginalPriceUnitaryCy(totalCy_r);
            entry.setSubtotal_r(totalCy_r);
            entry.setTotal_r(totalCy_r);
            entry.setSubtotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            entry.setTotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));entry.setSubtotal_r(totalCy_r);
            entry.setTotal_r(totalCy_r);
            entry.setSubtotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            entry.setTotalCy_r(SLibUtilities.round(totalCy_r * moParamDps.getExchangeRate(), miClient.getSessionXXX().getParamsErp().getDecimalsValue()));

            totalCySum += totalCy_r;
        }

        jtfEntriesTotalCy.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(totalCySum));
    }

    private void updateDpsEntryTaxRow() {
        int index = moPaneGridTaxes.getTable().getSelectedRow();
        SDataDpsEntryTaxRow entryTaxRow = (SDataDpsEntryTaxRow) moPaneGridTaxes.getSelectedTableRow();
        SDataDpsEntryTax entryTax = (SDataDpsEntryTax) entryTaxRow.getData();

        entryTax.setTaxCy(entryTaxRow.getValues() == null ? 0d : ((Number) entryTaxRow.getValues().get(COL_TAX_CUR)).doubleValue());

        moPaneGridTaxes.setTableRowSelection(index); // it is assumed that a row is selected
    }

    private void itemChangedFkItemId() {
        if (jcbFkItemId.getSelectedIndex() <= 0) {
            moItem = null;
        }
        else {
            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_VERBOSE);
        }

        renderItem(true);
    }

    private void actionKey() {
        if (moItem != null) {
            moFieldKey.setFieldValue(moItem.getKey());
            jtfKey.setCaretPosition(0);
        }
    }

    private void actionConcept() {
        if (moItem != null) {
            moFieldConcept.setFieldValue(moItem.getItem());
            jtfConcept.setCaretPosition(0);
        }
    }

    private void actionFkItemId() {
        if (miClient.pickOption(SDataConstants.ITMX_ITEM_IOG, moFieldFkItemId, manItemClassFilterKey) == SLibConstants.FORM_RESULT_OK) {
            itemChangedFkItemId();
        }
    }

    private void actionFkItemRefId_n() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldFkItemReferenceId_n, null);
    }

    private void actionEntryAdd() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        // Validate all form fields:

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        // Validate aditional conditions:

        if (!validation.getIsError()) {
            if (moPanelFkCostCenterId_n.isEmptyAccountId()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + moPanelFkCostCenterId_n.getFieldAccountLabel().getText() + "'.");
                validation.setComponent(moPanelFkCostCenterId_n.getFieldAccount().getComponent());
            }
            else {
                message = SDataUtilities.validateCostCenter(miClient, moPanelFkCostCenterId_n.getCurrentInputCostCenter(), moParamDps.getDate());

                if (message.length() > 0) {
                    validation.setMessage(message);
                    validation.setComponent(moPanelFkCostCenterId_n.getFieldAccount().getComponent());
                }
            }
        }

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            // Add new entry:

            SDataDpsEntry entry = createEntry();
            SDataDpsEntryTax entryTaxNew = null;
            SDataDpsEntryTax entryTaxAux = null;

            // Check taxes:

            if (moPaneGridEntries.getTableGuiRowCount() == 0) {
                for (SDataDpsEntryTax tax : entry.getDbmsEntryTaxes()) {
                    moPaneGridTaxes.addTableRow(new SDataDpsEntryTaxRow(tax.clone()));
                }
                moPaneGridTaxes.renderTableRows();
                moPaneGridTaxes.setTableRowSelection(0);
            }
            else {
                if (entry.getDbmsEntryTaxes().size() != moPaneGridTaxes.getTableGuiRowCount()) {
                    message = "Los impuestos de la nueva partida no son iguales a los del resto de las partidas capturadas.";
                }
                else {
                    for (int i = 0; i < entry.getDbmsEntryTaxes().size(); i++) {
                        entryTaxNew = entry.getDbmsEntryTaxes().get(i);
                        entryTaxAux = (SDataDpsEntryTax) moPaneGridTaxes.getTableRow(i).getData();

                        if (entryTaxNew.getPkTaxBasicId() != entryTaxAux.getPkTaxBasicId() || entryTaxNew.getPkTaxId() != entryTaxAux.getPkTaxId()) {
                            message = "Los impuestos de la nueva partida no son iguales a los del resto de las partidas capturadas.";
                            break;
                        }
                    }
                }
            }

            if (message.length() > 0) {
                miClient.showMsgBoxWarning(message);
            }
            else {
                moPaneGridEntries.addTableRow(new SDataDpsEntryWizardRow(entry));
                moPaneGridEntries.renderTableRows();
                moPaneGridEntries.setTableRowSelection(moPaneGridEntries.getTableGuiRowCount() - 1);
                calculateTotal();

                moFieldTotalCy_r.setFieldValue(0d);

                jcbFkItemId.requestFocus();
            }
        }
    }

    private void actionEntryDelete() {
        int index = moPaneGridEntries.getTable().getSelectedRow();

        if (index != -1) {
            moPaneGridEntries.removeTableRow(index);
            moPaneGridEntries.renderTableRows();
            moPaneGridEntries.setTableRowSelection(index < moPaneGridEntries.getTableGuiRowCount() ? index : moPaneGridEntries.getTableGuiRowCount() - 1);
            calculateTotal();

            if (moPaneGridEntries.getTableGuiRowCount() == 0) {
                moPaneGridTaxes.clearTableRows();
                jcbFkItemId.requestFocus();
            }
        }
    }

    private void actionEntryClear() {
        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        renderItem(false);
        jcbFkItemId.requestFocus();
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = null;

        jbOk.requestFocus();    // this forces all pending focus lost function to be called

        validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionEntryAdd() {
        actionEntryAdd();
    }

    public void publicActionEntryDelete() {
        actionEntryDelete();
    }

    public void publicActionEntryClear() {
        actionEntryClear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbConcept;
    private javax.swing.JButton jbEntryAdd;
    private javax.swing.JButton jbEntryClear;
    private javax.swing.JButton jbEntryDelete;
    private javax.swing.JButton jbFkItemId;
    private javax.swing.JButton jbFkItemReferenceId_n;
    private javax.swing.JButton jbKey;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemReferenceId_n;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlDummyCostCenter;
    private javax.swing.JLabel jlEntriesTotalCy;
    private javax.swing.JLabel jlFkItemId;
    private javax.swing.JLabel jlFkItemReferenceId_n;
    private javax.swing.JLabel jlKey;
    private javax.swing.JLabel jlTaxIdentityEmisor;
    private javax.swing.JLabel jlTaxIdentityReceptor;
    private javax.swing.JLabel jlTaxRegion;
    private javax.swing.JLabel jlTotalCy_r;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpCostCenter;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpEntriesControls;
    private javax.swing.JPanel jpEntriesControlsWest;
    private javax.swing.JPanel jpInput;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpTaxes;
    private javax.swing.JPanel jpTaxesInfo;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfEntriesTotalCy;
    private javax.swing.JTextField jtfEntriesTotalCyCurrencyKey;
    private javax.swing.JTextField jtfKey;
    private javax.swing.JTextField jtfTaxIdentityEmisor;
    private javax.swing.JTextField jtfTaxIdentityReceptor;
    private javax.swing.JTextField jtfTaxRegion;
    private javax.swing.JTextField jtfTotalCy_r;
    private javax.swing.JTextField jtfTotalCy_rCurrencyKey;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moItem = null;
        moParamDps = null;
        moParamBizPartner = null;
        moParamBizPartnerBranch = null;
        manTaxRegionKey = null;

        manItemClassFilterKey = null;

        moPaneGridEntries.createTable();
        moPaneGridEntries.clearTableRows();
        moPaneGridTaxes.createTable();
        moPaneGridTaxes.clearTableRows();

        // Set tax column as editable:
        moPaneGridEntries.getTableColumn(COL_TOT).setEditable(true);
        moPaneGridTaxes.getTableColumn(COL_TAX_CUR).setEditable(true);

        // Add cell editor listener to just created taxes table:
        moPaneGridEntries.getTable().getColumnModel().getColumn(COL_TOT).setCellEditor(moPaneGridEntries.getTable().getDefaultEditor(Double.class));
        moPaneGridEntries.getTable().getColumnModel().getColumn(COL_TOT).getCellEditor().addCellEditorListener(this);
        moPaneGridTaxes.getTable().getColumnModel().getColumn(COL_TAX_CUR).setCellEditor(moPaneGridTaxes.getTable().getDefaultEditor(Number.class));
        moPaneGridTaxes.getTable().getColumnModel().getColumn(COL_TAX_CUR).getCellEditor().addCellEditorListener(this);

        renderItem(false);  // this function actually clears all form fields
        calculateTotal();

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        mbResetingForm = true;

        SFormUtilities.populateComboBox(miClient, jcbFkItemId, SDataConstants.ITMU_ITEM);
        SFormUtilities.populateComboBox(miClient, jcbFkItemReferenceId_n, SDataConstants.ITMU_ITEM);

        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String message = "";
        SFormValidation validation = new SFormValidation();

        if (moPaneGridEntries.getTableGuiRowCount() == 0) {
            validation.setMessage("No se han agregado partidas.");
            validation.setComponent(jcbFkItemId);
        }
        else if (moPaneGridTaxes.getTableGuiRowCount() == 0) {
            validation.setMessage("No se han agregado impuestos de las partidas.");
            validation.setComponent(jcbFkItemId);
        }
        else {
            if (SLibUtilities.parseDouble(jtfEntriesTotalCy.getText()) == 0d) {
                if (miClient.showMsgBoxConfirm("El valor para el campo '" + jlEntriesTotalCy.getText() + "' es cero.\n¿Desea continuar?") != JOptionPane.YES_OPTION) {
                    validation.setMessage("El valor para el campo '" + jlEntriesTotalCy.getText() + "' debe ser distinto a cero.");
                }
            }

            if (!validation.getIsError()) {
                for (STableRow row : moPaneGridTaxes.getGridRows()) {
                    if (((SDataDpsEntryTax) row.getData()).getTaxCy() == 0d) {
                        if (miClient.showMsgBoxConfirm("El valor para el impuesto '" + ((SDataDpsEntryTax) row.getData()).getDbmsTax() + "' es cero.\n¿Desea continuar?") != JOptionPane.YES_OPTION) {
                            validation.setMessage("El valor para el impuesto '" + ((SDataDpsEntryTax) row.getData()).getDbmsTax() + "' debe ser distinto a cero.");
                            break;
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        mbUpdatingForm = true;

        switch (type) {
            case SDataConstants.TRN_DPS:
                if (value == null) {
                    moParamDps = null;

                    jtfTotalCy_rCurrencyKey.setText("");
                    jtfEntriesTotalCyCurrencyKey.setText("");
                    jtfTaxIdentityEmisor.setText("");
                    jtfTaxIdentityReceptor.setText("");

                    manItemClassFilterKey = null;
                }
                else {
                    moParamDps = (SDataDps) value;

                    jtfTotalCy_rCurrencyKey.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moParamDps.getFkCurrencyId() }, SLibConstants.DESCRIPTION_CODE));
                    jtfEntriesTotalCyCurrencyKey.setText(jtfTotalCy_rCurrencyKey.getText());
                    jtfTaxIdentityEmisor.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_IDY, new int[] { moParamDps.getFkTaxIdentityEmisorTypeId() }));
                    jtfTaxIdentityReceptor.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_IDY, new int[] { moParamDps.getFkTaxIdentityReceptorTypeId() }));
                    jtfTotalCy_rCurrencyKey.setCaretPosition(0);
                    jtfEntriesTotalCyCurrencyKey.setCaretPosition(0);
                    jtfTaxIdentityEmisor.setCaretPosition(0);
                    jtfTaxIdentityReceptor.setCaretPosition(0);

                    if (moParamDps.isDocumentPur()) {
                        manItemClassFilterKey = SDataConstantsSys.ITMS_CL_ITEM_PUR_CON;
                    }
                    else {
                        manItemClassFilterKey = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                    }
                }
                break;

            case SDataConstants.BPSU_BP:
                if (value == null) {
                    moParamBizPartner = null;
                }
                else {
                    moParamBizPartner = (SDataBizPartner) value;
                }
                break;

            case SDataConstants.BPSU_BPB:
                if (value == null) {
                    moParamBizPartnerBranch = null;
                    manTaxRegionKey = null;
                    jtfTaxRegion.setText("");
                }
                else {
                    moParamBizPartnerBranch = (SDataBizPartnerBranch) value;
                    manTaxRegionKey = new int[] { moParamBizPartnerBranch.getFkTaxRegionId_n() != 0 ? moParamBizPartnerBranch.getFkTaxRegionId_n() : miClient.getSessionXXX().getParamsCompany().getFkDefaultTaxRegionId_n() };
                    jtfTaxRegion.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_REG, manTaxRegionKey));
                }
                break;

            case SDataConstants.FINU_TAX_REG:
                if (value == null) {
                    manTaxRegionKey = null;
                    jtfTaxRegion.setText("");
                }
                else {
                    manTaxRegionKey = (int[]) value;
                    jtfTaxRegion.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_REG, manTaxRegionKey));
                }
                break;

            default:
        }

        mbUpdatingForm = false;
    }

    @Override
    public java.lang.Object getValue(int type) {
        Object value = null;

        switch (type) {
            case SDataConstants.TRN_DPS_ETY:
                SDataDpsEntry entry = null;
                Vector<SDataDpsEntry> entries = new Vector<SDataDpsEntry>();

                prorateTaxes();

                for (STableRow row : moPaneGridEntries.getGridRows()) {
                    entry = (SDataDpsEntry) row.getData();
                    entry.setIsTaxesAutomaticApplying(false);
                    entries.add(entry);
                }

                value = entries;
                break;
            default:
        }

        return value;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbKey) {
                actionKey();
            }
            else if (button == jbConcept) {
                actionConcept();
            }
            else if (button == jbFkItemId) {
                actionFkItemId();
            }
            else if (button == jbFkItemReferenceId_n) {
                actionFkItemRefId_n();
            }
            else if (button == jbEntryAdd) {
                actionEntryAdd();
            }
            else if (button == jbEntryDelete) {
                actionEntryDelete();
            }
            else if (button == jbEntryClear) {
                actionEntryClear();
            }
        }
    }

    @Override
    public void itemStateChanged(java.awt.event.ItemEvent e) {
        if (!mbResetingForm && !mbUpdatingForm) {
            if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox)  e.getSource();

                if (comboBox == jcbFkItemId) {
                    itemChangedFkItemId();
                }
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
         switch (moPaneGridEntries.getTable().getSelectedColumn()) {
            case COL_TOT:
                updateDpsEntryTotRow();
                break;
            default:
                break;
        }

        switch (moPaneGridTaxes.getTable().getSelectedColumn()) {
            case COL_TAX_CUR:
                updateDpsEntryTaxRow();
                break;
            default:
                break;
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {

    }
}
