package erp.mtrn.form;

import erp.cfd.SCfdConsts;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Juan Barajas
 */
public class SDialogRestoreCfdi extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormSubtype;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldFileXml;
    
    private String msXmlPath;
    private FileInputStream moInputStream;
    private String msFileFilterDescription;
    private String msFileFilterExtensions;

    /** Creates new form SDialogRestoreCfdi */
    public SDialogRestoreCfdi(erp.client.SClientInterface client, int formType, int formSubtype) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = formType;
        mnFormSubtype = formSubtype;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgCurrency = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jpCfdi = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlFile = new javax.swing.JLabel();
        jtfFile = new javax.swing.JTextField();
        jbFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpCfdi.setBorder(javax.swing.BorderFactory.createTitledBorder("Inserción de archivo del comprobante:"));
        jpCfdi.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFile.setText("Archivo:*");
        jlFile.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlFile);

        jtfFile.setEditable(false);
        jtfFile.setText("FILE");
        jtfFile.setOpaque(false);
        jtfFile.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jtfFile);

        jbFile.setText("...");
        jbFile.setToolTipText("Seleccionar archivo...");
        jbFile.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFile);

        jpCfdi.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpCfdi, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cerrar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(496, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();

        moFieldFileXml = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfFile, jlFile);

        mvFields.add(moFieldFileXml);

        jbCancel.addActionListener(this);
        jbOk.addActionListener(this);
        jbFile.addActionListener(this);
        
        if (mnFormType == SCfdConsts.ACTION_CODE_PRC_SIGN) {
            setTitle("Insertar XML timbrado del CFDI");
        }
        else {
            setTitle("Insertar PDF del acuse de cancelación del CFDI");
        }
        
        if (mnFormSubtype == SCfdConsts.CFDI_FILE_XML) {
            msFileFilterDescription = "XML file";
            msFileFilterExtensions = "xml";
        }
        else {
            msFileFilterDescription = "PDF file";
            msFileFilterExtensions = "pdf";
        }
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
        }
    }

    private void actionLoadFile() {
        FileFilter filter = new FileNameExtensionFilter(msFileFilterDescription, msFileFilterExtensions);
        miClient.getFileChooser().repaint();
        miClient.getFileChooser().addChoosableFileFilter(filter);
        miClient.getFileChooser().setAcceptAllFileFilterUsed(false);
        miClient.getFileChooser().setFileFilter(filter);

        try {
            if (miClient.getFileChooser().showOpenDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                if (mnFormSubtype == SCfdConsts.CFDI_FILE_XML) {
                    moFieldFileXml.setFieldValue(miClient.getFileChooser().getSelectedFile().getName());
                    msXmlPath = miClient.getFileChooser().getSelectedFile().getAbsolutePath();
                }
                else {
                    moFieldFileXml.setFieldValue(miClient.getFileChooser().getSelectedFile().getName());
                    moInputStream = new FileInputStream(miClient.getFileChooser().getSelectedFile());
                }
            }
            miClient.getFileChooser().resetChoosableFileFilters();
            miClient.getFileChooser().setAcceptAllFileFilterUsed(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFile;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlFile;
    private javax.swing.JPanel jpCfdi;
    private javax.swing.JTextField jtfFile;
    // End of variables declaration//GEN-END:variables

    public String getFileXml() { return msXmlPath; }
    public FileInputStream getFilePdf() { return moInputStream; }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }
        
        moFieldFileXml.setFieldValue("");
        msXmlPath = "";
        moInputStream = null;
    }

    @Override
    public void formRefreshCatalogues() {
        
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFile) {
                actionLoadFile();
            }
        }
    }

}
