/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mtrn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.gui.account.SAccount;
import erp.gui.account.SAccountConsts;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mcfg.data.SDataParamsCompany;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataCostCenter;
import erp.mfin.data.SFinUtilities;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.gui.SGuiClient;

/**
 *
 * @author Juan Barajas, Daniel López, Sergio Flores, Isabel Servín
 */
public class SDialogUpdateDpsAccountCenterCost extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private int mnFormResult;
    private int mnFormStatus; 
    private int mnRegistryType;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.data.SDataDpsEntry moDpsEntry;
    private erp.mtrn.form.SPanelDps moPanelDps;
    /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
    private erp.mfin.form.SPanelAccount moPanelAccountOldId;
    private erp.mfin.form.SPanelAccount moPanelCostCenterOldId_n;
    private erp.mfin.form.SPanelAccount moPanelAccountNewId;
    private erp.mfin.form.SPanelAccount moPanelCostCenterNewId_n;
    */

    private SDataAccount moAccountNew;
    private SDataCostCenter moCostCenterNew;

    /** Creates new form SDialogUpdateDpsAccountCenterCost
     * @param client 
    */
    public SDialogUpdateDpsAccountCenterCost(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDpsComms = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel48 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jlDummy = new javax.swing.JLabel();
        jlOriginalQuantity = new javax.swing.JLabel();
        jtfOriginalQuantity = new javax.swing.JTextField();
        jtfOriginalUnitSymbolRo = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jpPanelAccountsOld = new javax.swing.JPanel();
        moAccountPanelOld = new erp.gui.account.SBeanPanelAccount();
        moCostCenterPanelOld = new erp.gui.account.SBeanPanelAccount();
        jpPanelAccountsNew = new javax.swing.JPanel();
        moAccountPanelNew = new erp.gui.account.SBeanPanelAccount();
        moCostCenterPanelNew = new erp.gui.account.SBeanPanelAccount();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificación de contabilización");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDpsComms.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos adicionales:"));
        jpDpsComms.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.GridLayout(1, 1, 5, 1));

        jPanel48.setPreferredSize(new java.awt.Dimension(108, 23));
        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel48.add(jlItem);

        jtfItem.setEditable(false);
        jtfItem.setText("ITEM");
        jtfItem.setFocusable(false);
        jtfItem.setPreferredSize(new java.awt.Dimension(277, 23));
        jPanel48.add(jtfItem);

        jlDummy.setPreferredSize(new java.awt.Dimension(5, 23));
        jPanel48.add(jlDummy);

        jlOriginalQuantity.setText("Cantidad:");
        jlOriginalQuantity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel48.add(jlOriginalQuantity);

        jtfOriginalQuantity.setEditable(false);
        jtfOriginalQuantity.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfOriginalQuantity.setText("0.0000");
        jtfOriginalQuantity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel48.add(jtfOriginalQuantity);

        jtfOriginalUnitSymbolRo.setEditable(false);
        jtfOriginalUnitSymbolRo.setText("UN");
        jtfOriginalUnitSymbolRo.setFocusable(false);
        jtfOriginalUnitSymbolRo.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel48.add(jtfOriginalUnitSymbolRo);

        jPanel1.add(jPanel48);

        jpDpsComms.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.GridLayout(1, 1));

        jpPanelAccountsOld.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabilización actual:"));
        jpPanelAccountsOld.setLayout(new java.awt.GridLayout(2, 1, 0, 1));
        jpPanelAccountsOld.add(moAccountPanelOld);
        jpPanelAccountsOld.add(moCostCenterPanelOld);

        jPanel2.add(jpPanelAccountsOld);

        jpPanelAccountsNew.setBorder(javax.swing.BorderFactory.createTitledBorder("Contabilización nueva:"));
        jpPanelAccountsNew.setLayout(new java.awt.GridLayout(2, 1, 0, 1));
        jpPanelAccountsNew.add(moAccountPanelNew);
        jpPanelAccountsNew.add(moCostCenterPanelNew);

        jPanel2.add(jpPanelAccountsNew);

        jpDpsComms.add(jPanel2, java.awt.BorderLayout.CENTER);

        jpDps.add(jpDpsComms, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(900, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new java.util.Vector<>();

        try {
            moPanelDps = new SPanelDps(miClient, "");
            /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
            moPanelAccountOldId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
            moPanelCostCenterOldId_n = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelAccountNewId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
            moPanelCostCenterNewId_n = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            */
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);
        
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        jpPanelAccountsOld.remove(jlDummyAccountOld);
        jpPanelAccountsOld.remove(jlDummyCostCenterOld_n);
        jpPanelAccountsOld.add(moPanelAccountOldId);
        jpPanelAccountsOld.add(moPanelCostCenterOldId_n);
        
        jpPanelAccountsNew.remove(jlDummyAccountNew);
        jpPanelAccountsNew.remove(jlDummyCostCenterNew_n);
        jpPanelAccountsNew.add(moPanelAccountNewId);
        jpPanelAccountsNew.add(moPanelCostCenterNewId_n);
        */
        
        moAccountPanelOld.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, true, true, true);
        moCostCenterPanelOld.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, true, true, true);
        moAccountPanelNew.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, true, true, true);
        moCostCenterPanelNew.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, true, true, true);
        
        moAccountPanelOld.setAccountNameWidth(275);
        moCostCenterPanelOld.setAccountNameWidth(275);
        moAccountPanelNew.setAccountNameWidth(275);
        moCostCenterPanelNew.setAccountNameWidth(275);
        
        moAccountPanelOld.setComponentNext(moCostCenterPanelOld);
        moCostCenterPanelOld.setComponentNext(moAccountPanelNew);
        moAccountPanelNew.setComponentNext(moCostCenterPanelNew);
        
        moAccountPanelNew.setRetrieveDataAccounts(true);
        moCostCenterPanelNew.setRetrieveDataCostCenters(true);
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            //moPanelAccountNewId.getFieldAccount().getComponent().requestFocus(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
            moAccountPanelNew.getTextNumberFirst().requestFocus();
        }
    }
    
    private void renderItem() {
        jtfItem.setText(moDpsEntry.getDbmsItem());
        jtfOriginalQuantity.setText(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(moDpsEntry.getOriginalQuantity()));
        jtfOriginalUnitSymbolRo.setText(moDpsEntry.getDbmsOriginalUnitSymbol());
    }
    
    private void renderAccount(String accountId) {
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        moPanelAccountOldId.getFieldAccount().setFieldValue(account);
        moPanelAccountOldId.refreshPanel();
        moPanelAccountOldId.enableFields(false);
        
        moPanelAccountNewId.getFieldAccount().setFieldValue(account);
        moPanelAccountNewId.refreshPanel();
        */
        SDataAccount account = (SDataAccount) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_ACC, new Object[] { accountId }, SLibConstants.EXEC_MODE_SILENT);
        SAccount acc = new SAccount(account, ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount());
        moAccountPanelOld.setSelectedAccount(acc);
        moAccountPanelOld.setPanelEditable(false);

        moAccountPanelNew.setSelectedAccount(acc);
    }
    
    private void renderCostCenter(String costCenterId) {
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        moPanelCostCenterOldId_n.getFieldAccount().setFieldValue(centerCost.isEmpty() ? moPanelCostCenterOldId_n.getEmptyAccountId() : centerCost);
        moPanelCostCenterOldId_n.refreshPanel();
        moPanelCostCenterOldId_n.enableFields(false);

        moPanelCostCenterNewId_n.getFieldAccount().setFieldValue(centerCost.isEmpty() ? moPanelCostCenterNewId_n.getEmptyAccountId() : centerCost);
        moPanelCostCenterNewId_n.refreshPanel();
        */
        SDataCostCenter costCenter = (SDataCostCenter) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_CC, new Object[] { costCenterId }, SLibConstants.EXEC_MODE_SILENT);
        SAccount acc = new SAccount(costCenter, ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskCostCenter());
        moCostCenterPanelOld.setSelectedAccount(acc);
        moCostCenterPanelOld.setPanelEditable(false);

        moCostCenterPanelNew.setSelectedAccount(acc);
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                if (miClient.showMsgBoxConfirm("¿Esta seguro que desea modificar la contabilización actual de la partida?") == JOptionPane.OK_OPTION) {
                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    
                    //Parameters added: original quantity and subtotal to use as filter in the query:
                    SFinUtilities.updateAccountCostCenterForDpsEntry(miClient, (int[]) moDpsEntry.getPrimaryKey(), moAccountNew.getPkAccountIdXXX(),
                            (moCostCenterNew == null ? "" : moCostCenterNew.getPkCostCenterIdXXX()), moDpsEntry.getOriginalQuantity(), moDpsEntry.getSubtotal_r(), mnRegistryType);
                }
                this.setVisible(false);
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e); //print out exception was changed to render Exception, to show message to user
            }
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlOriginalQuantity;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpDpsComms;
    private javax.swing.JPanel jpPanelAccountsNew;
    private javax.swing.JPanel jpPanelAccountsOld;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfOriginalQuantity;
    private javax.swing.JTextField jtfOriginalUnitSymbolRo;
    private erp.gui.account.SBeanPanelAccount moAccountPanelNew;
    private erp.gui.account.SBeanPanelAccount moAccountPanelOld;
    private erp.gui.account.SBeanPanelAccount moCostCenterPanelNew;
    private erp.gui.account.SBeanPanelAccount moCostCenterPanelOld;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        moAccountNew = null;
        moCostCenterNew = null;

        moDps = null;
        moPanelDps.setDps(null, null);
        
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        moPanelAccountOldId.resetPanel();
        moPanelCostCenterOldId_n.resetPanel();
        
        moPanelAccountNewId.resetPanel();
        moPanelCostCenterNewId_n.resetPanel();
        */
        
        moAccountPanelOld.initPanel();
        moCostCenterPanelOld.initPanel();
        moAccountPanelNew.initPanel();
        moCostCenterPanelNew.initPanel();

        for (SFormField field : mvFields) {
            field.resetField();
        }
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        String message;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                validation.setIsError(true);
                validation.setComponent(field.getComponent());
            }
        }
            
        //moAccountNew = moPanelAccountNewId.getCurrentInputAccount(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        //moCostCenterNew = moPanelCostCenterNewId_n.getCurrentInputCostCenter(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.

        moAccountNew = moAccountPanelNew.getSelectedDataAccount();
        moCostCenterNew = moCostCenterPanelNew.getSelectedDataCostCenter();
        
        if (!validation.getIsError()) {
            // Validate account:

            message = SDataUtilities.validateAccount(miClient, moAccountNew, null);

            if (message.length() > 0) {
                validation.setMessage(message);
                //validation.setComponent(moPanelAccountNewId.getFieldAccount().getComponent()); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
                validation.setComponent(moAccountPanelNew.getTextNumberFirst());
            }
            else {
                SDataAccount ledgerAccount = (SDataAccount) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.FIN_ACC, new Object[] { moAccountNew.getDbmsPkLedgerAccountIdXXX() }, SLibConstants.EXEC_MODE_VERBOSE);
                
                if (ledgerAccount.getIsRequiredCostCenter() && moCostCenterNew == null) {
                    validation.setMessage("La cuenta contable ('" + moAccountNew.getAccount() + "') tiene un inconveniente:\nRequiere centro de costos y no está definido.");
                    //validation.setComponent(moPanelCostCenterNewId_n.getFieldAccount().getComponent()); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
                    validation.setComponent(moCostCenterPanelNew.getTextNumberFirst());
                }
            }
        }
        
        if (!validation.getIsError()) {
            // Validate cost center:

            if (moCostCenterNew != null) {
                message = SDataUtilities.validateCostCenter(miClient, moCostCenterNew, null);

                if (message.length() > 0) {
                    validation.setMessage(message);
                    //validation.setComponent(moPanelCostCenterNewId_n.getFieldAccount().getComponent()); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
                    validation.setComponent(moCostCenterPanelNew.getTextNumberFirst());
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moDps = (SDataDps) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS, value, SLibConstants.EXEC_MODE_VERBOSE);
                moPanelDps.setDps(moDps, null);
                break;
            case SDataConstants.TRN_DPS_ETY:
                moDpsEntry = (SDataDpsEntry) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_DPS_ETY, value, SLibConstants.EXEC_MODE_VERBOSE);
                renderItem();
                break;
            case SDataConstants.FIN_ACC:
                renderAccount(((String[]) value)[0]);
                renderCostCenter(((String[]) value)[1]);
                break;
            default:
        }
    }

    public void setRegistryType(int registryType){
        mnRegistryType = registryType;
    }
    
    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
}
