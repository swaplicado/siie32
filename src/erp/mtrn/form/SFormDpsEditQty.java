/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormField;
import erp.lib.form.SFormInterface;
import erp.lib.form.SFormValidation;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormDpsEditQty extends javax.swing.JDialog implements SFormInterface, ActionListener, FocusListener {

    public static final int TRN_DPS_QTY_VALUE = 1;
    
    private java.util.Vector<SFormField> mvFields;
    private final SClientInterface miClient;
    private DecimalFormat moAmountFormat;
    private DecimalFormat moQuantityFormat;
    private int mnFormResult;
    private boolean mbFirstTime;
    
    private SDataDps moDps;
    private SDataDpsEntry moDpsEty;
    
    private double mdQuantityOld;
    
    private SFormField moFieldQuantity;
    
    /**
     * Creates new form SFormDpsEditQty
     * @param client
     */
    public SFormDpsEditQty(SClientInterface client) {    
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpQtyChange = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpQtyData = new javax.swing.JPanel();
        jpQtyDataRow4 = new javax.swing.JPanel();
        jlQuantityOld = new javax.swing.JLabel();
        jtfQuantityOld = new javax.swing.JTextField();
        jtfUnitSymbolOld = new javax.swing.JTextField();
        jpQtyDataRow1 = new javax.swing.JPanel();
        jlQuantityNew = new javax.swing.JLabel();
        jtfQuantityNew = new javax.swing.JTextField();
        jtfUnitSymbolNew = new javax.swing.JTextField();
        jpQtyDataRow2 = new javax.swing.JPanel();
        jlTotalOldCy = new javax.swing.JLabel();
        jtfTotalOldCy = new javax.swing.JTextField();
        jtfTotalOldCyCurrencyKey = new javax.swing.JTextField();
        jpQtyDataRow3 = new javax.swing.JPanel();
        jlTotalNewCy = new javax.swing.JLabel();
        jtfTotalNewCy = new javax.swing.JTextField();
        jtfTotalNewCyCurrencyKey = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar cantidad");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpQtyChange.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la partida:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jpQtyData.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jpQtyDataRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityOld.setText("Cantidad actual:");
        jlQuantityOld.setPreferredSize(new java.awt.Dimension(120, 23));
        jpQtyDataRow4.add(jlQuantityOld);

        jtfQuantityOld.setEditable(false);
        jtfQuantityOld.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityOld.setText("0.0000");
        jtfQuantityOld.setFocusable(false);
        jtfQuantityOld.setPreferredSize(new java.awt.Dimension(125, 23));
        jpQtyDataRow4.add(jtfQuantityOld);

        jtfUnitSymbolOld.setEditable(false);
        jtfUnitSymbolOld.setText("UN");
        jtfUnitSymbolOld.setFocusable(false);
        jtfUnitSymbolOld.setPreferredSize(new java.awt.Dimension(75, 23));
        jpQtyDataRow4.add(jtfUnitSymbolOld);

        jpQtyData.add(jpQtyDataRow4);

        jpQtyDataRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQuantityNew.setText("Cantidad nueva:*");
        jlQuantityNew.setPreferredSize(new java.awt.Dimension(120, 23));
        jpQtyDataRow1.add(jlQuantityNew);

        jtfQuantityNew.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfQuantityNew.setText("0.0000");
        jtfQuantityNew.setPreferredSize(new java.awt.Dimension(125, 23));
        jpQtyDataRow1.add(jtfQuantityNew);

        jtfUnitSymbolNew.setEditable(false);
        jtfUnitSymbolNew.setText("UN");
        jtfUnitSymbolNew.setFocusable(false);
        jtfUnitSymbolNew.setPreferredSize(new java.awt.Dimension(75, 23));
        jpQtyDataRow1.add(jtfUnitSymbolNew);

        jpQtyData.add(jpQtyDataRow1);

        jpQtyDataRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalOldCy.setText("Total partida actual:");
        jlTotalOldCy.setPreferredSize(new java.awt.Dimension(120, 23));
        jpQtyDataRow2.add(jlTotalOldCy);

        jtfTotalOldCy.setEditable(false);
        jtfTotalOldCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalOldCy.setText("0,000,000.0000");
        jtfTotalOldCy.setFocusable(false);
        jtfTotalOldCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jpQtyDataRow2.add(jtfTotalOldCy);

        jtfTotalOldCyCurrencyKey.setEditable(false);
        jtfTotalOldCyCurrencyKey.setText("CUR");
        jtfTotalOldCyCurrencyKey.setFocusable(false);
        jtfTotalOldCyCurrencyKey.setPreferredSize(new java.awt.Dimension(35, 23));
        jpQtyDataRow2.add(jtfTotalOldCyCurrencyKey);

        jpQtyData.add(jpQtyDataRow2);

        jpQtyDataRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTotalNewCy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlTotalNewCy.setText("Total partida nuevo:");
        jlTotalNewCy.setPreferredSize(new java.awt.Dimension(120, 23));
        jpQtyDataRow3.add(jlTotalNewCy);

        jtfTotalNewCy.setEditable(false);
        jtfTotalNewCy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfTotalNewCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalNewCy.setText("0,000,000,000.00");
        jtfTotalNewCy.setFocusable(false);
        jtfTotalNewCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jpQtyDataRow3.add(jtfTotalNewCy);

        jtfTotalNewCyCurrencyKey.setEditable(false);
        jtfTotalNewCyCurrencyKey.setText("CUR");
        jtfTotalNewCyCurrencyKey.setFocusable(false);
        jtfTotalNewCyCurrencyKey.setPreferredSize(new java.awt.Dimension(35, 23));
        jpQtyDataRow3.add(jtfTotalNewCyCurrencyKey);

        jpQtyData.add(jpQtyDataRow3);

        jPanel1.add(jpQtyData, java.awt.BorderLayout.NORTH);

        jpQtyChange.add(jPanel1, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbCancel);

        jpQtyChange.add(jpControls, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpQtyChange, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(416, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       if (mbFirstTime) {
            mbFirstTime = false;
        }
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();
        moFieldQuantity = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfQuantityNew, jlQuantityNew);
        moFieldQuantity.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        
        mvFields.clear();
        mvFields.add(moFieldQuantity);
        
        jtfQuantityNew.addFocusListener(this);
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        
        moAmountFormat = miClient.getSessionXXX().getFormatters().getDecimalsValueFormat();
        moQuantityFormat = miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat();
    }
    
    private void setDpsEtyData(int[] dpsEtyKey) {
        moDpsEty = moDps.getDbmsDpsEntry(dpsEtyKey);
        mdQuantityOld = moDpsEty.getOriginalQuantity();
        jtfQuantityOld.setText(moQuantityFormat.format(moDpsEty.getOriginalQuantity()));
        moFieldQuantity.setFieldValue(mdQuantityOld);
        jtfUnitSymbolOld.setText(moDpsEty.getDbmsUnitSymbol());
        jtfUnitSymbolNew.setText(moDpsEty.getDbmsUnitSymbol());
        jtfTotalOldCy.setText(moAmountFormat.format(moDpsEty.getTotalCy_r()));
        jtfTotalOldCyCurrencyKey.setText(moDps.getDbmsCurrencyKey());
        jtfTotalNewCy.setText(moAmountFormat.format(moDpsEty.getTotalCy_r()));
        jtfTotalNewCyCurrencyKey.setText(moDps.getDbmsCurrencyKey());
    }
    
    private void actionOk() {
        SFormValidation validation;
        
        jbOk.requestFocus();
        
        validation = formValidate();
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }
    
    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlQuantityNew;
    private javax.swing.JLabel jlQuantityOld;
    private javax.swing.JLabel jlTotalNewCy;
    private javax.swing.JLabel jlTotalOldCy;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpQtyChange;
    private javax.swing.JPanel jpQtyData;
    private javax.swing.JPanel jpQtyDataRow1;
    private javax.swing.JPanel jpQtyDataRow2;
    private javax.swing.JPanel jpQtyDataRow3;
    private javax.swing.JPanel jpQtyDataRow4;
    private javax.swing.JTextField jtfQuantityNew;
    private javax.swing.JTextField jtfQuantityOld;
    private javax.swing.JTextField jtfTotalNewCy;
    private javax.swing.JTextField jtfTotalNewCyCurrencyKey;
    private javax.swing.JTextField jtfTotalOldCy;
    private javax.swing.JTextField jtfTotalOldCyCurrencyKey;
    private javax.swing.JTextField jtfUnitSymbolNew;
    private javax.swing.JTextField jtfUnitSymbolOld;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        
        moFieldQuantity.setFieldValue(0);
        jtfUnitSymbolNew.setText("");
        jtfTotalOldCy.setText(moAmountFormat.format(0));
        jtfTotalOldCyCurrencyKey.setText("");
        jtfTotalNewCy.setText(moAmountFormat.format(0));
        jtfTotalNewCyCurrencyKey.setText("");      
        
        moDps = null;
        moDpsEty = null;
        
        mdQuantityOld = 0;
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }   
        
        if (!validation.getIsError()) {
            if (mdQuantityOld <= moFieldQuantity.getDouble()) {
                validation.setMessage("La cantidad debe ser menor de " + mdQuantityOld + ".");
                validation.setComponent(jtfQuantityNew);
            }
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                Object[] obj = (Object[]) value;
                moDps = (SDataDps) obj[0];
                setDpsEtyData((int[]) obj[1]);
                break;
            default:
        }
    }

    @Override
    public Object getValue(int type) {
        Object value = null;
        
        switch (type) {
            case TRN_DPS_QTY_VALUE:
                value = moFieldQuantity.getDouble();
                break;
            default:
        }
        
        return value;
    }

    @Override
    public JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void focusGained(FocusEvent e) {
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        moDpsEty.setOriginalQuantity(moFieldQuantity.getDouble());
        moDpsEty.calculateTotal(miClient, moDps.getDate(), 
                moDps.getFkTaxIdentityEmisorTypeId(), moDps.getFkTaxIdentityReceptorTypeId(), 
                moDps.getIsDiscountDocPercentage(), moDps.getDiscountDocPercentage(), moDps.getExchangeRate());
        jtfTotalNewCy.setText(moAmountFormat.format(moDpsEty.getTotalCy_r()));
    }
}
