/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mtrn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mcfg.data.SCfgUtils;
import erp.mtrn.data.STrnFunctionalAreaUtils;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.view.*;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogRepAccountTag extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private static final String SEL_ACC_TAG = "(Seleccionar etiqueta contable)";
    
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;

    private boolean mbParamIsSupplier;

    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldYear;
    
    /** Creates new form SDialogRepDpsMoves
     * @param client GUI client.
     */
    public SDialogRepAccountTag(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlAccTag = new javax.swing.JLabel();
        jcbAccTag = new javax.swing.JComboBox<>();
        jPanel15 = new javax.swing.JPanel();
        jrbDetail = new javax.swing.JRadioButton();
        jrbSummary = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de documentos e ingresos por cliente");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbExit);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setText("Año:");
        jlYear.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel13.add(jlYear);

        jtfYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel13.add(jtfYear);

        jPanel3.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccTag.setText("Etiqueta contable:");
        jlAccTag.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel14.add(jlAccTag);

        jcbAccTag.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(jcbAccTag);

        jPanel3.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        buttonGroup1.add(jrbDetail);
        jrbDetail.setSelected(true);
        jrbDetail.setText("A detalle");
        jrbDetail.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jrbDetail);

        buttonGroup1.add(jrbSummary);
        jrbSummary.setText("Resumen");
        jrbSummary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jrbSummary);

        jPanel3.add(jPanel15);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(416, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldYear = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfYear, jlYear);
        moFieldYear.setIntegerMin(2000);
        moFieldYear.setIntegerMax(2100);
        moFieldYear.setMinInclusive(true);
        moFieldYear.setMaxInclusive(true);
        moFieldYear.setDecimalFormat(miClient.getSessionXXX().getFormatters().getYearFormat());
        
        mvFields.add(moFieldYear);
        
        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (mbParamIsSupplier) {
                setTitle("Reporte de documentos de compras con etiqueta contable");
            }
            else {
                setTitle("Reporte de documentos de ventas con etiqueta contable");
            }
            jtfYear.setText(miClient.getSession().getCurrentYear() + "");
            jtfYear.requestFocus();
        }
    }

    private void actionPrint() {
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        SFormValidation validation = formValidate();
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));

                String areas[] = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas((SClientInterface) miClient, SLibConsts.UNDEFINED);
                
                map = miClient.createReportParams();
                map.put("nYear", moFieldYear.getInteger());
                map.put("bIsSupplier", mbParamIsSupplier);
                map.put("sAccTag", (String) jcbAccTag.getSelectedItem());
                map.put("sDocType", mbParamIsSupplier ? "COMPRAS" : "VENTAS");
                map.put("bShowDetail", jrbDetail.isSelected());
                map.put("nFidCtDps", mbParamIsSupplier ? SDataConstantsSys.TRNU_CT_DPS_PUR : SDataConstantsSys.TRNU_CT_DPS_SAL);
                map.put("sSqlOrderBy", mbParamIsSupplier ? "m.mon, bp.bp, dt.code, d.num" : "m.mon, dt.code, d.num, bp.bp");
                map.put("sFuncAreas", areas[1]);
                map.put("sMoneda", "MONEDA LOCAL (" + miClient.getSession().getSessionCustom().getLocalCurrencyCode() + ")");
                
                jasperPrint = SDataUtilities.fillReport(miClient, SDataConstantsSys.REP_TRN_ACC_TAG, map);
                jasperViewer = new JasperViewer(jasperPrint, false);
                jasperViewer.setTitle("Reporte de facturas " + (mbParamIsSupplier ? "de compras" : "de ventas"));
                jasperViewer.setVisible(true);
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(cursor);
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox<String> jcbAccTag;
    private javax.swing.JLabel jlAccTag;
    private javax.swing.JLabel jlYear;
    private javax.swing.JRadioButton jrbDetail;
    private javax.swing.JRadioButton jrbSummary;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        try {
            String sAccTags[] = SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_TRN_ACC_TAGS).replaceAll(" ", "").split(",");
            jcbAccTag.removeAllItems();
            jcbAccTag.addItem(SEL_ACC_TAG);
            for (String tag : sAccTags) {
                jcbAccTag.addItem(tag);
            }
            if (sAccTags.length == 1) {
                jcbAccTag.setSelectedItem(sAccTags[0]);
                jcbAccTag.setEnabled(false);
            }
        } 
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }

    @Override
    public void formRefreshCatalogues() {
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (((String) jcbAccTag.getSelectedItem()).equals(SEL_ACC_TAG)) {
                validation.setMessage("Debe seleccionar una etiqueta contable.");
                validation.setComponent(jcbAccTag);
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionClose();
            }
        }
    }

    public void setParamIsSupplier(boolean b) { mbParamIsSupplier = b; }
}
