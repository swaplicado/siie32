/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogCfdiPurchaseOrder33.java
 *
 * Created on 27/05/2020, 02:58:00 PM
 */

package erp.mtrn.form;

import cfd.ver33.DElementConcepto;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mitm.data.SDataItem;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsDpsLink;
import erp.mtrn.data.SDataDpsEntry;
import erp.mtrn.data.SDataEntryDpsDpsLink;
import erp.mtrn.data.SRowCfdiImport33;
import erp.mtrn.data.STrnDpsUtilities;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import sa.lib.SLibUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogCfdiPurchaseOrder33 extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ListSelectionListener {

    public static final int VALUE_TYPE_PURCHASE_ORDER_ENTRIES = 1;
    public static final int VALUE_TYPE_ROW_CFDI = 2;
    public static final int VALUE_TYPE_ENTRY_DPS_DPS_LINK = 3;
    public static final int VALUE_TYPE_FACTOR_CONV = 4;
    
    private static final int COL_QTY_TO_BE_LINKED = 7;
    private static final int COL_QTY_TO_LINK = 8;

    private java.util.Vector<SFormField> mvFields;
    private final erp.client.SClientInterface miClient;
    
    private int mnFormResult;
    private int mnFormStatus;
    
    private double mdEquivalentQuantity;
    
    private boolean mbFirstTime;
    private erp.lib.form.SFormField moFieldConvFact;
    private erp.lib.table.STablePane moTablePane;

    private erp.mtrn.data.SDataDps moParamPurchaseOrder;
    private erp.mtrn.form.SPanelDps moPanelDps;
    
    private HashMap<String, Double> moPurchaseOrderEntriesMap;
    private SRowCfdiImport33 moRowCfdiImport; 
    
    /** Creates new form SDialogDpsLink
     * @param client */
    public SDialogCfdiPurchaseOrder33(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDps = new javax.swing.JPanel();
        jpDocument = new javax.swing.JPanel();
        jlPanelDps = new javax.swing.JLabel();
        jpDocumentEntries = new javax.swing.JPanel();
        jpCfdiConcept = new javax.swing.JPanel();
        jpCfdiConceptData = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlNoIdentificacion = new javax.swing.JLabel();
        jlDescripcion = new javax.swing.JLabel();
        jlProdServ = new javax.swing.JLabel();
        jlUnidad = new javax.swing.JLabel();
        jlUnitSat = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jtfNoIdentificacion = new javax.swing.JTextField();
        jtfDescripcion = new javax.swing.JTextField();
        jtfProdServ = new javax.swing.JTextField();
        jtfUnidad = new javax.swing.JTextField();
        jtfUnidadSat = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlCantidad = new javax.swing.JLabel();
        jlConvFactor = new javax.swing.JLabel();
        jlCantidadEquivalente = new javax.swing.JLabel();
        jlPrecioCfdi = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jtfCantidad = new javax.swing.JTextField();
        jtfConvFactor = new javax.swing.JTextField();
        jtfCantidadEquivalente = new javax.swing.JTextField();
        jtfPrecioCfdi = new javax.swing.JTextField();
        jpOrderEntry = new javax.swing.JPanel();
        jpOrderEntryPrice = new javax.swing.JPanel();
        jlOrderPrice = new javax.swing.JLabel();
        jtfOrderPrice = new javax.swing.JTextField();
        jpDocumentEntriesGrid = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vinculación de documento de compras-ventas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpDps.setLayout(new java.awt.BorderLayout());

        jpDocument.setLayout(new java.awt.BorderLayout());

        jlPanelDps.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDps.setText("[Panel de documento de compras-ventas]");
        jlPanelDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDocument.add(jlPanelDps, java.awt.BorderLayout.NORTH);

        jpDps.add(jpDocument, java.awt.BorderLayout.NORTH);

        jpDocumentEntries.setLayout(new java.awt.BorderLayout());

        jpCfdiConcept.setLayout(new java.awt.BorderLayout());

        jpCfdiConceptData.setBorder(javax.swing.BorderFactory.createTitledBorder("Concepto:"));
        jpCfdiConceptData.setLayout(new java.awt.GridLayout(4, 2, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNoIdentificacion.setText("No. identificación:");
        jlNoIdentificacion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNoIdentificacion);

        jlDescripcion.setText("Descripción:");
        jlDescripcion.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel4.add(jlDescripcion);

        jlProdServ.setText("ProdServ SAT:");
        jlProdServ.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlProdServ);

        jlUnidad.setText("Unidad:");
        jlUnidad.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlUnidad);

        jlUnitSat.setText("Unidad SAT:");
        jlUnitSat.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel4.add(jlUnitSat);

        jpCfdiConceptData.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfNoIdentificacion.setEditable(false);
        jtfNoIdentificacion.setFocusable(false);
        jtfNoIdentificacion.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jtfNoIdentificacion);

        jtfDescripcion.setEditable(false);
        jtfDescripcion.setFocusable(false);
        jtfDescripcion.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel5.add(jtfDescripcion);

        jtfProdServ.setEnabled(false);
        jtfProdServ.setFocusable(false);
        jtfProdServ.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel5.add(jtfProdServ);

        jtfUnidad.setEnabled(false);
        jtfUnidad.setFocusable(false);
        jtfUnidad.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel5.add(jtfUnidad);

        jtfUnidadSat.setEnabled(false);
        jtfUnidadSat.setFocusable(false);
        jtfUnidadSat.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel5.add(jtfUnidadSat);

        jpCfdiConceptData.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCantidad.setText(" Cantidad:");
        jlCantidad.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCantidad);

        jlConvFactor.setText(" Fact. conv.:*");
        jlConvFactor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlConvFactor);

        jlCantidadEquivalente.setText("Cant. equiv.:");
        jlCantidadEquivalente.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCantidadEquivalente);

        jlPrecioCfdi.setText("Precio u. CFDI $:");
        jlPrecioCfdi.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel6.add(jlPrecioCfdi);

        jpCfdiConceptData.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfCantidad.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCantidad.setEnabled(false);
        jtfCantidad.setFocusable(false);
        jtfCantidad.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfCantidad);

        jtfConvFactor.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfConvFactor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfConvFactor);

        jtfCantidadEquivalente.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfCantidadEquivalente.setEnabled(false);
        jtfCantidadEquivalente.setFocusable(false);
        jtfCantidadEquivalente.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfCantidadEquivalente);

        jtfPrecioCfdi.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfPrecioCfdi.setEnabled(false);
        jtfPrecioCfdi.setFocusable(false);
        jtfPrecioCfdi.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel7.add(jtfPrecioCfdi);

        jpCfdiConceptData.add(jPanel7);

        jpCfdiConcept.add(jpCfdiConceptData, java.awt.BorderLayout.CENTER);

        jpOrderEntry.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida OC:"));
        jpOrderEntry.setLayout(new java.awt.BorderLayout());

        jpOrderEntryPrice.setLayout(new java.awt.GridLayout(2, 1));

        jlOrderPrice.setText("Precio u. OC $:");
        jlOrderPrice.setPreferredSize(new java.awt.Dimension(115, 23));
        jpOrderEntryPrice.add(jlOrderPrice);

        jtfOrderPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfOrderPrice.setEnabled(false);
        jtfOrderPrice.setFocusable(false);
        jtfOrderPrice.setPreferredSize(new java.awt.Dimension(115, 23));
        jpOrderEntryPrice.add(jtfOrderPrice);

        jpOrderEntry.add(jpOrderEntryPrice, java.awt.BorderLayout.NORTH);

        jpCfdiConcept.add(jpOrderEntry, java.awt.BorderLayout.EAST);

        jpDocumentEntries.add(jpCfdiConcept, java.awt.BorderLayout.NORTH);

        jpDocumentEntriesGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del documento disponibles para vinculación:"));
        jpDocumentEntriesGrid.setPreferredSize(new java.awt.Dimension(865, 90));
        jpDocumentEntriesGrid.setLayout(new java.awt.BorderLayout(0, 2));
        jpDocumentEntries.add(jpDocumentEntriesGrid, java.awt.BorderLayout.CENTER);

        jpDps.add(jpDocumentEntries, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpDps, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(900, 678));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] columns;

        moFieldConvFact = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfConvFactor, jlConvFactor);
        moFieldConvFact.setDecimalFormat(SLibUtils.DecimalFormatValue8D);

        mvFields = new Vector<>();
        mvFields.add(moFieldConvFact);
        
        moTablePane = new STablePane(miClient);
        moTablePane.setDoubleClickAction(this, "actionDoubleClickOk");
        jpDocumentEntriesGrid.add(moTablePane, BorderLayout.CENTER);

        columns = new STableColumnForm[11];
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", 250);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant.", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cant. vinc.", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Vinc. actual", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Por vincular", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "A vincular", STableConstants.WIDTH_QUANTITY);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "% excedente", STableConstants.WIDTH_PERCENTAGE);
        columns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());

        for (i = 0; i < columns.length; i++) {
            moTablePane.addTableColumn(columns[i]);
        }

        moPanelDps = new SPanelDps(miClient, "de origen");
        jpDps.remove(jlPanelDps);
        jpDps.add(moPanelDps, BorderLayout.NORTH);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
     
        jtfConvFactor.addFocusListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moTablePane.getTable().requestFocus();

            if (!validateQuantitiesToLink()) {
                actionCancel();
            }
        }
    }

    private void renderDpsSourceEntries() {
        moTablePane.createTable();
        moTablePane.clearTableRows();

        if (moParamPurchaseOrder != null) {
            for (SDataDpsEntry entry : moParamPurchaseOrder.getDbmsDpsEntries()) {
                if (entry.isAccountable()) {
                    SDataEntryDpsDpsLink entryDpsDpsLink;
                    
                    double linked = 0;

                    for (SDataDpsDpsLink link : entry.getDbmsDpsLinksAsSource()) {
                        // Previously saved link movements:

                        if (!link.getDbmsIsDestinyDeleted() && !link.getDbmsIsDestinyEntryDeleted() &&
                            link.getDbmsFkDestinyStatusId() == SDataConstantsSys.TRNS_ST_DPS_EMITED) {

                            linked += link.getOriginalQuantity();
                        }
                    }
                    
                    Double quantity = moPurchaseOrderEntriesMap == null ? 0.0 : moPurchaseOrderEntriesMap.get(SLibUtils.textKey((int[]) entry.getPrimaryKey()));
                    double linkedActual = quantity == null ? 0 : quantity;
                    
                    entryDpsDpsLink = new SDataEntryDpsDpsLink();
                    entryDpsDpsLink.setPkYearId(entry.getPkYearId());
                    entryDpsDpsLink.setPkDocId(entry.getPkDocId());
                    entryDpsDpsLink.setPkEntryId(entry.getPkEntryId());
                    entryDpsDpsLink.setSortingPosition(entry.getSortingPosition());
                    entryDpsDpsLink.setConceptKey(entry.getConceptKey());
                    entryDpsDpsLink.setConcept(entry.getConcept());
                    entryDpsDpsLink.setQuantity(entry.getOriginalQuantity());
                    entryDpsDpsLink.setUnitSymbol(entry.getDbmsOriginalUnitSymbol());
                    entryDpsDpsLink.setQuantityLinked(linked);
                    entryDpsDpsLink.setQuantityLinkedActual(linkedActual);
                    entryDpsDpsLink.setQuantityToLink(0);
                    entryDpsDpsLink.setSurplusPercentage(entry.getSurplusPercentage());
                    entryDpsDpsLink.prepareTableRow();
                    entryDpsDpsLink.setAuxIsEntryPriceNeeded(!entry.getDbmsEntryPrices().isEmpty());

                    moTablePane.addTableRow(entryDpsDpsLink);
                }
            }
            
            moTablePane.renderTableRows();
            moTablePane.getTable().getSelectionModel().addListSelectionListener(this);
            moTablePane.setTableRowSelection(0);               
        }
    }
    
    private void setTableRowSelection(SDataItem item) {
        SDataEntryDpsDpsLink entry;
        if (item != null){
            for (int i = 0; i < moTablePane.getTableGuiRowCount(); i++) {
                entry = (SDataEntryDpsDpsLink) moTablePane.getTableRow(i);
                if (entry.getConceptKey().equals(item.getKey()) &&
                        entry.getConcept().equals(item.getItem())){
                    moTablePane.setTableRowSelection(i);
                    break;
                }
            }
        }
    }
    
    private void updateFields() {
        jtfCantidadEquivalente.setText(SLibUtils.DecimalFormatValue4D.format(Double.parseDouble(jtfCantidad.getText()) * Double.parseDouble(jtfConvFactor.getText()))); 
        moRowCfdiImport.setConvFactor(Double.parseDouble(jtfConvFactor.getText()));
        jtfPrecioCfdi.setText(SLibUtils.DecimalFormatValue8D.format(moRowCfdiImport.getPriceUnitary()));
    }

    private boolean validateQuantitiesToLink() {
        boolean error = false;
        boolean isDataAvailable = false;
        boolean isDataLinkable = false;
        SDataEntryDpsDpsLink entry = null;

        for (int i = 0; i < moTablePane.getTableGuiRowCount(); i++) {
            isDataAvailable = true;

            entry = (SDataEntryDpsDpsLink) moTablePane.getTableRow(i);
            if (entry.getQuantityToBeLinked() > 0) {
                isDataLinkable = true;
                break;
            }
        }

        if (!isDataAvailable) {
            error = true;
            miClient.showMsgBoxWarning("No existen partidas para vincular.");
        }
        else if (!isDataLinkable) {
            error = true;
            miClient.showMsgBoxWarning("No existen partidas con cantidades para vincular.");
        }

        return !error;
    }
    
    public void actionDoubleClickOk(){
        actionOk();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlCantidad;
    private javax.swing.JLabel jlCantidadEquivalente;
    private javax.swing.JLabel jlConvFactor;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlNoIdentificacion;
    private javax.swing.JLabel jlOrderPrice;
    private javax.swing.JLabel jlPanelDps;
    private javax.swing.JLabel jlPrecioCfdi;
    private javax.swing.JLabel jlProdServ;
    private javax.swing.JLabel jlUnidad;
    private javax.swing.JLabel jlUnitSat;
    private javax.swing.JPanel jpCfdiConcept;
    private javax.swing.JPanel jpCfdiConceptData;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDocument;
    private javax.swing.JPanel jpDocumentEntries;
    private javax.swing.JPanel jpDocumentEntriesGrid;
    private javax.swing.JPanel jpDps;
    private javax.swing.JPanel jpOrderEntry;
    private javax.swing.JPanel jpOrderEntryPrice;
    private javax.swing.JTextField jtfCantidad;
    private javax.swing.JTextField jtfCantidadEquivalente;
    private javax.swing.JTextField jtfConvFactor;
    private javax.swing.JTextField jtfDescripcion;
    private javax.swing.JTextField jtfNoIdentificacion;
    private javax.swing.JTextField jtfOrderPrice;
    private javax.swing.JTextField jtfPrecioCfdi;
    private javax.swing.JTextField jtfProdServ;
    private javax.swing.JTextField jtfUnidad;
    private javax.swing.JTextField jtfUnidadSat;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moParamPurchaseOrder = null;
        moPanelDps.setDps(null, null);

        renderDpsSourceEntries();
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        
        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            if (moFieldConvFact.getDouble() != 1){
                if (miClient.showMsgBoxConfirm("El factor de conversión del concepto es diferente de 1.0,\n"
                            + "pero está asignado a una partida de la OC.\n"
                            + "¿Esta seguro que el factor de conversión es correcto?") != JOptionPane.YES_OPTION) {
                    validation.setMessage("Poner el factor de conversión igual a 1.0.");
                    validation.setComponent(jtfConvFactor);
                }
            }
        }
        
        if (!validation.getIsError()) {
            SDataEntryDpsDpsLink entryDpsDpsLink = (SDataEntryDpsDpsLink) moTablePane.getSelectedTableRow();
            
            if (entryDpsDpsLink == null) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_ROW_UNDEF);
            }
            else {
                entryDpsDpsLink.setQuantityToLink(Double.parseDouble(jtfCantidadEquivalente.getText()));
                
                if (entryDpsDpsLink.getQuantityToLink() > 0) {
                    // Validate that quantity to link does not exceed limit:

                    SDataDpsEntry dpsEntry = moParamPurchaseOrder.getDbmsDpsEntry(entryDpsDpsLink.getDpsEntryKey());

                    if (!SLibUtils.compareAmount(dpsEntry.getOriginalPriceUnitaryCy(), moRowCfdiImport.getPriceUnitary())) {
                        if (miClient.showMsgBoxConfirm("El precio del concepto del CFDI $" + SLibUtils.getDecimalFormatAmountUnitary().format(moRowCfdiImport.getPriceUnitary()) + " "
                                + "no coincide con el precio de la partida de la OC $" + SLibUtils.getDecimalFormatAmountUnitary().format(dpsEntry.getOriginalPriceUnitaryCy()) + ".\n"
                                + "¿Esta seguro que desea continuar?") != JOptionPane.YES_OPTION) {
                            validation.setIsError(true); 
                        }
                    }

                    // The source is order and has supplied quantities

                    if (!validation.getIsError() && moParamPurchaseOrder.isOrder()) {
                        try {
                            double totalsupplied = STrnDpsUtilities.obtainEntryTotalQuantitySupplied(miClient, (int[]) entryDpsDpsLink.getDpsEntryKey());
                            if (totalsupplied > entryDpsDpsLink.getQuantityToLink()) {
                                validation.setMessage("Para el ítem '" + entryDpsDpsLink.getConcept() + " (" + entryDpsDpsLink.getConceptKey() + ")' en la partida # " + entryDpsDpsLink.getSortingPosition() + "\n" +
                                        "la cantidad minima a vincular debe ser " + (totalsupplied < entryDpsDpsLink.getQuantityToBeLinked() ? "mayor o " : "") + "igual a " + 
                                        SLibUtils.getDecimalFormatQuantity().format(totalsupplied) + " ya que tiene sutidos previos.");
                            }
                        }
                        catch (Exception e) {
                            SLibUtils.showException(this, e);
                        }
                    }

                    if (!validation.getIsError()) {
                        if (entryDpsDpsLink.getSurplusPercentage() == 0) {
                            // No surplus allowed:

                            if (entryDpsDpsLink.getQuantityToLink() > entryDpsDpsLink.getQuantityToBeLinked()) {
                                validation.setMessage("Para el ítem '" + entryDpsDpsLink.getConcept() + " (" + entryDpsDpsLink.getConceptKey() + ")' en la partida # " + entryDpsDpsLink.getSortingPosition() + "\n" +
                                        "la cantidad de la columna '" + moTablePane.getTableColumn(COL_QTY_TO_LINK).getColumnTitle() + "', " +
                                        miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(entryDpsDpsLink.getQuantityToLink()) + " " + entryDpsDpsLink.getUnitSymbol() + ", " +
                                        "no puede ser mayor a la cantidad de la columna '" + moTablePane.getTableColumn(COL_QTY_TO_BE_LINKED).getColumnTitle() + "', " +
                                        miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(entryDpsDpsLink.getQuantityToBeLinked()) + " " + entryDpsDpsLink.getUnitSymbol() + ".");
                            }
                        }
                        else {
                            // Surplus allowed:

                            double totalSurplus = entryDpsDpsLink.getQuantity() * (1d + entryDpsDpsLink.getSurplusPercentage());
                            double totalLinked = entryDpsDpsLink.getQuantityLinked() + entryDpsDpsLink.getQuantityLinkedActual() + entryDpsDpsLink.getQuantityToLink();

                            if (totalLinked > totalSurplus) {
                                validation.setMessage("Para el ítem '" + entryDpsDpsLink.getConcept() + " (" + entryDpsDpsLink.getConceptKey() + ")' en la partida # " + entryDpsDpsLink.getSortingPosition() + "\n" +
                                    "la cantidad total vinculada, " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(totalLinked) + " " + entryDpsDpsLink.getUnitSymbol() + ", " +
                                    "no puede ser mayor a " + miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat().format(totalSurplus) + " " + entryDpsDpsLink.getUnitSymbol() + ".");
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }
    
    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /** 
     * Asigna los valores necesarios para seleccionar una OC. Es importante seguir el orden:
     * SDataConstants.TRN_DPS, VALUE_TYPE_PURCHASE_ORDER_ENTRIES y VALUE_TYPE_ROW_CFDI
     * @param type Options accepted: SDataConstants.TRN_DPS, VALUE_TYPE_PURCHASE_ORDER_ENTRIES ó VALUE_TYPE_ROW_CFDI
     * @param value The supplied value.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void setValue(int type, Object value) {
        switch (type) {
            case SDataConstants.TRN_DPS:
                moParamPurchaseOrder = (SDataDps) value;
                moPanelDps.setDps(moParamPurchaseOrder, null);
                break;
                
            case VALUE_TYPE_PURCHASE_ORDER_ENTRIES:
                moPurchaseOrderEntriesMap = (HashMap<String, Double>) value;
                break;
                    
            case VALUE_TYPE_ROW_CFDI:
                moRowCfdiImport = (SRowCfdiImport33) value;
                
                DElementConcepto concepto = moRowCfdiImport.getConcepto();
                jtfNoIdentificacion.setText(concepto.getAttNoIdentificacion().getString());
                jtfNoIdentificacion.setCaretPosition(0);
                jtfDescripcion.setText(concepto.getAttDescripcion().getString());
                jtfDescripcion.setCaretPosition(0);
                jtfProdServ.setText(concepto.getAttClaveProdServ().getString());
                jtfProdServ.setCaretPosition(0);
                jtfUnidad.setText(concepto.getAttUnidad().getString());
                jtfUnidad.setCaretPosition(0);
                jtfUnidadSat.setText(concepto.getAttClaveUnidad().getString());
                jtfUnidadSat.setCaretPosition(0);
                jtfCantidad.setText(SLibUtils.DecimalFormatValue4D.format(concepto.getAttCantidad().getDouble()));
                jtfCantidad.setCaretPosition(0);
                
                moFieldConvFact.setDouble(moRowCfdiImport.getConvFactor());
                
                mdEquivalentQuantity = moRowCfdiImport.getEquivalentQuantity();
                jtfCantidadEquivalente.setText(SLibUtils.DecimalFormatValue4D.format(mdEquivalentQuantity));
                
                jtfPrecioCfdi.setText(SLibUtils.DecimalFormatValue8D.format(concepto.getAttValorUnitario().getDouble()));
                jtfPrecioCfdi.setCaretPosition(0);
                
                renderDpsSourceEntries();
                setTableRowSelection(moRowCfdiImport.getItem());
                break;
                
            default:
        }
    }
            
    /**
     * @param type Options accepted: SDialogCfdiPurchaseOrder33.VALUE_TYPE_ENTRY_DPS_DPS_LINK or 
 SDialogCfdiPurchaseOrder33.VALUE_TYPE_FACTOR_CONV or 
 SDataConstants.TRN_DPS_ETY. 
     * @return 
     */
    @Override
    public java.lang.Object getValue(int type) {
        Object value = null;

        switch (type) {
            case VALUE_TYPE_ENTRY_DPS_DPS_LINK:
                value = (SDataEntryDpsDpsLink) moTablePane.getSelectedTableRow(); // current row casted as SDataEntryDpsDpsLink
                break;

            case VALUE_TYPE_FACTOR_CONV:
                value = moFieldConvFact.getDouble();
                break;
                
            case SDataConstants.TRN_DPS_ETY:
                value = moParamPurchaseOrder.getDbmsDpsEntry(((SDataEntryDpsDpsLink) moTablePane.getSelectedTableRow()).getDpsEntryKey());
                break;
                
            default:
        }

        return value;
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }
    
    @Override
    public void focusLost(FocusEvent e) {
        if (jtfConvFactor == e.getSource()){
            updateFields();
        }
    }
    
    @Override
    public void focusGained(FocusEvent e) {}

    @Override
    public void valueChanged(ListSelectionEvent e) { 
        if (!e.getValueIsAdjusting()) {
            if (moTablePane.getTable().getSelectedRow() > -1) {
                SDataEntryDpsDpsLink entryDpsDpsLink = (SDataEntryDpsDpsLink) moTablePane.getSelectedTableRow(); // convenience variable
                SDataDpsEntry dpsEntry = moParamPurchaseOrder.getDbmsDpsEntry(entryDpsDpsLink.getDpsEntryKey()); // convenience variable
                jtfOrderPrice.setText(SLibUtils.DecimalFormatValue8D.format(dpsEntry.getOriginalPriceUnitaryCy()));
            }
        }
    }
}
