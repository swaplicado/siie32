/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mtrn.form;

import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormOptionPickerInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.mod.SModConsts;
import erp.mtrn.data.SRowTankCarsPicker;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SDialogTankCarPicker extends javax.swing.JDialog implements SFormOptionPickerInterface, ActionListener, ItemListener {
    
    private final erp.client.SClientInterface miClient;
    
    private int mnFormResult;
    private boolean mbFirstTime;
    
    private ArrayList<SRowTankCarsPicker> maRowTankCar;
    
    private erp.lib.table.STablePane moOptionPane;
    
    /**
     * Creates new form SDialogTicketsPicker
     * @param client
     */
    public SDialogTankCarPicker(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }
    
    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgLinks = new javax.swing.ButtonGroup();
        bgCoincidences = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        jpTickets = new javax.swing.JPanel();
        jpOk = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Seleccionar carrotanque");
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpTickets.setBorder(javax.swing.BorderFactory.createTitledBorder("Carrotanques:"));
        jpTickets.setLayout(new java.awt.BorderLayout());
        jpRegistry.add(jpTickets, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpOk.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setPreferredSize(new java.awt.Dimension(85, 23));
        jpOk.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setPreferredSize(new java.awt.Dimension(85, 23));
        jpOk.add(jbCancel);

        getContentPane().add(jpOk, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i = 0;
        
        moOptionPane = new STablePane(miClient);
        
        jpTickets.add(moOptionPane, BorderLayout.CENTER);
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        
        erp.lib.table.STableColumnForm tableColumns[];
        
        tableColumns = new STableColumnForm[1];
        tableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Matricula", 200);
        
        for (i = 0; i < tableColumns.length; i++) {
            moOptionPane.addTableColumn(tableColumns[i]);
        }

        moOptionPane.createTable(null);
        
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }
    
    public void populateTicketTable() {
        maRowTankCar = new ArrayList<>();
        
        try {
            String sql = "SELECT id_tank_car, plate FROM " + SModConsts.TablesMap.get(SModConsts.LOG_TANK_CAR) + " WHERE NOT b_del ORDER BY plate";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            
            while (resultSet.next()) {
                SRowTankCarsPicker row = new SRowTankCarsPicker(resultSet.getInt(1), resultSet.getString(2));
                maRowTankCar.add(row);
            }
        }
        catch (Exception e) { }
    }
    
    private void actionOk() {
        if (moOptionPane.getSelectedTableRow() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
            moOptionPane.getTable().requestFocus();
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }        
    }
    
    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void renderTable() {
        moOptionPane.clearTableRows();
        if (!maRowTankCar.isEmpty()) {
            for (SRowTankCarsPicker row : maRowTankCar) {
                moOptionPane.addTableRow(row);
            }
        }
        
        moOptionPane.renderTableRows();
        moOptionPane.setTableRowSelection(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCoincidences;
    private javax.swing.ButtonGroup bgLinks;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpOk;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpTickets;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    public void setValue(int opc, Object value) {
        switch (opc) {
            
        }
    }
    
    @Override
    public void formReset() {
        mbFirstTime = true;
        maRowTankCar = new ArrayList<>();
        moOptionPane.clearTableRows();
    }

    @Override
    public void formRefreshOptionPane() {
        
    }

    @Override
    public void setFormVisible(boolean visible) {
        renderTable();
        setVisible(visible);
    }

    @Override
    public int getOptionType() {
        return 0;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(Object filterKey) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setSelectedPrimaryKey(Object pk) {
        moOptionPane.renderTableRows();
        
        for (int i = 0; i < moOptionPane.getTableGuiRowCount(); i++) {
            if (SLibUtilities.compareKeys(pk, moOptionPane.getTableModel().getTableRow(i).getPrimaryKey())) {
                moOptionPane.setTableRowSelection(i);
                break;
            }
        }
    }

    @Override
    public Object getSelectedPrimaryKey() {
        Object pk = null;

        if (moOptionPane.getSelectedTableRow() != null) {
            pk = moOptionPane.getSelectedTableRow().getPrimaryKey();
        }

        return pk;
    }

    @Override
    public STableRow getSelectedOption() {
        return moOptionPane.getSelectedTableRow();
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        renderTable();
    }
}
