/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormOptionPickerItems.java
 *
 * Created on 22/10/2009, 10:20:08 AM
 */

package erp.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadTableRows;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SDataCompanyBranchEntity;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Vector;
import sa.lib.SLibConsts;

/**
 *
 * @author Alfonso Flores, Sergio Flores, Claudio Peña
 */
public class SFormOptionPickerItems extends javax.swing.JDialog implements erp.lib.form.SFormOptionPickerInterface {

    private erp.client.SClientInterface miClient;
    private int mnOptionType;

    private int mnFormResult;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private boolean mbInventoriableOnly;
    private java.lang.Object moFilterKey;
    private erp.lib.table.STablePane moOptionPane;
    private java.awt.event.KeyAdapter moKeyAdapterEnter;

    private erp.lib.table.STableColumnForm[] aoTableColumns;
    private java.lang.Object moPkItemId;

    private int mnCompanyBranchId;
    private int mnCompanyBranchEntityId;
    private java.util.Vector<erp.lib.table.STableRow> mvTableRows;

    /** Creates new form SFormOptionPickerItems
     * @param client
     * @param type
     */
    public SFormOptionPickerItems(erp.client.SClientInterface client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnOptionType = type;

        mvTableRows = new Vector<>();

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgFind = new javax.swing.ButtonGroup();
        jpSouth = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jlCompanyBranchEntity = new javax.swing.JLabel();
        jtfCompanyBranch = new javax.swing.JTextField();
        jtfWarehouse = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jpOptionPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jrbFindByItemKey = new javax.swing.JRadioButton();
        jrbFindByItemName = new javax.swing.JRadioButton();
        jrbFindByBrand = new javax.swing.JRadioButton();
        jrbFindByManufacturer = new javax.swing.JRadioButton();
        jrbFindByPartNum = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jlSearchText = new javax.swing.JLabel();
        jtfSearchText = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlItemClass = new javax.swing.JLabel();
        jcbItemClass = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        jckFindExactMatch = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleccionar ítem");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpSouth.setPreferredSize(new java.awt.Dimension(792, 33));
        jpSouth.setLayout(new java.awt.GridLayout(1, 2, 5, 0));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlYear.setText("Ejercicio:");
        jlYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jlYear);

        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfYear.setText("YEAR");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel8.add(jtfYear);

        jlCompanyBranchEntity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlCompanyBranchEntity.setText("Almacén:");
        jlCompanyBranchEntity.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jlCompanyBranchEntity);

        jtfCompanyBranch.setEditable(false);
        jtfCompanyBranch.setText("BRANCH");
        jtfCompanyBranch.setFocusable(false);
        jtfCompanyBranch.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfCompanyBranch);

        jtfWarehouse.setEditable(false);
        jtfWarehouse.setText("WAREHOUSE");
        jtfWarehouse.setFocusable(false);
        jtfWarehouse.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jtfWarehouse);

        jpSouth.add(jPanel8);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOKActionPerformed(evt);
            }
        });
        jPanel7.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel7.add(jbCancel);

        jpSouth.add(jPanel7);

        getContentPane().add(jpSouth, java.awt.BorderLayout.SOUTH);

        jpOptionPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jpOptionPane.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpOptionPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(1, 1));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda:"));
        jPanel3.setLayout(new java.awt.GridLayout(6, 1, 5, 5));

        bgFind.add(jrbFindByItemKey);
        jrbFindByItemKey.setText("Por clave");
        jrbFindByItemKey.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFindByItemKeyItemStateChanged(evt);
            }
        });
        jPanel3.add(jrbFindByItemKey);

        bgFind.add(jrbFindByItemName);
        jrbFindByItemName.setText("Por nombre");
        jrbFindByItemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFindByItemNameItemStateChanged(evt);
            }
        });
        jPanel3.add(jrbFindByItemName);

        bgFind.add(jrbFindByBrand);
        jrbFindByBrand.setText("Por marca");
        jrbFindByBrand.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFindByBrandItemStateChanged(evt);
            }
        });
        jPanel3.add(jrbFindByBrand);

        bgFind.add(jrbFindByManufacturer);
        jrbFindByManufacturer.setText("Por fabricante");
        jrbFindByManufacturer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFindByManufacturerItemStateChanged(evt);
            }
        });
        jPanel3.add(jrbFindByManufacturer);

        bgFind.add(jrbFindByPartNum);
        jrbFindByPartNum.setText("Por número de parte");
        jrbFindByPartNum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbFindByPartNumItemStateChanged(evt);
            }
        });
        jPanel3.add(jrbFindByPartNum);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jlSearchText.setText("Buscar: ");
        jlSearchText.setPreferredSize(new java.awt.Dimension(50, 14));
        jPanel4.add(jlSearchText, java.awt.BorderLayout.LINE_START);

        jtfSearchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfSearchTextActionPerformed(evt);
            }
        });
        jtfSearchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfSearchTextKeyReleased(evt);
            }
        });
        jPanel4.add(jtfSearchText, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4);

        jPanel1.add(jPanel3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de búsqueda:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 5, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemClass.setText("Clase de ítem buscado:");
        jlItemClass.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlItemClass);

        jcbItemClass.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbItemClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jcbItemClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbItemClassItemStateChanged(evt);
            }
        });
        jPanel9.add(jcbItemClass);

        jPanel5.add(jPanel9);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckFindExactMatch.setText("Realizar búsqueda exacta");
        jckFindExactMatch.setPreferredSize(new java.awt.Dimension(200, 23));
        jckFindExactMatch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jckFindExactMatchItemStateChanged(evt);
            }
        });
        jPanel6.add(jckFindExactMatch);

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        setSize(new java.awt.Dimension(800, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOKActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOKActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jrbFindByItemKeyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFindByItemKeyItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_jrbFindByItemKeyItemStateChanged

    private void jrbFindByItemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFindByItemNameItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_jrbFindByItemNameItemStateChanged

    private void jrbFindByBrandItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFindByBrandItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_jrbFindByBrandItemStateChanged

    private void jrbFindByManufacturerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFindByManufacturerItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_jrbFindByManufacturerItemStateChanged

    private void jtfSearchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSearchTextKeyReleased
        actionFindKeyReleased();
    }//GEN-LAST:event_jtfSearchTextKeyReleased

    private void jcbItemClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbItemClassItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            actionFindKeyReleased();
        }
    }//GEN-LAST:event_jcbItemClassItemStateChanged

    private void jtfSearchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfSearchTextActionPerformed
        actionSearchText();
    }//GEN-LAST:event_jtfSearchTextActionPerformed

    private void jckFindExactMatchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jckFindExactMatchItemStateChanged
        actionFindKeyReleased();
    }//GEN-LAST:event_jckFindExactMatchItemStateChanged

    private void jrbFindByPartNumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbFindByPartNumItemStateChanged
        if (!mbResetingForm && evt.getStateChange() == ItemEvent.SELECTED) {
            populateTable();
        }
    }//GEN-LAST:event_jrbFindByPartNumItemStateChanged

    @SuppressWarnings("unchecked")
    private void initComponentsExtra() {
        mbResetingForm = true;

        moOptionPane = new STablePane(miClient);
        moOptionPane.setDoubleClickAction(this, "publicActionOk");
        jpOptionPane.add(moOptionPane, BorderLayout.CENTER);

        moKeyAdapterEnter = new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    actionOk();
                }
            }
        };

        if (bgFind.getSelection() == null) {
            if (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                jrbFindByItemKey.setSelected(true);
            }
            else {
                jrbFindByItemName.setSelected(true);
            }
        }

        jckFindExactMatch.setSelected(false);

        if (mnOptionType == SDataConstants.ITMX_ITEM_IOG) {
            jlItemClass.setEnabled(true);
            jcbItemClass.setEnabled(true);
            SFormUtilities.populateComboBox(miClient, jcbItemClass, SDataConstants.ITMS_CL_ITEM);
        }
        else {
            jlItemClass.setEnabled(false);
            jcbItemClass.setEnabled(false);
            jcbItemClass.removeAllItems();
        }

        SFormUtilities.createActionMap(getRootPane(), this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(getRootPane(), this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, SLibConstants.UNDEFINED);

        mbResetingForm = false;
    }

    private boolean showStock() {
        return moFilterKey != null && moFilterKey instanceof Object[];
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfSearchText.requestFocus();

            //moOptionPane.layoutTable();

            if (moPkItemId != null) {
                setSelectedPrimaryKey(moPkItemId);
            }

            if (showStock()) {
                // XXX this is absolutely wrong!!!
                jtfYear.setText("" + miClient.getSessionXXX().getWorkingYear());
            }
        }
    }

    private void readCompanyBranch() {
        SDataBizPartnerBranch companyBranch = new SDataBizPartnerBranch();

        if (!showStock()) {
            jtfCompanyBranch.setText("");
        }
        else {
            mnCompanyBranchId = (Integer) ((Object[]) moFilterKey)[3];
            companyBranch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BPB, new int[] { mnCompanyBranchId }, SLibConstants.EXEC_MODE_SILENT);

            jtfCompanyBranch.setText(companyBranch.getBizPartnerBranch());
            jtfCompanyBranch.setCaretPosition(0);
        }
    }

    private void readWarehouse() {
        SDataCompanyBranchEntity warehouse = new SDataCompanyBranchEntity();

        if (!showStock()) {
            jtfWarehouse.setText("");
        }
        else {
            mnCompanyBranchId = (Integer) ((Object[]) moFilterKey)[3];
            mnCompanyBranchEntityId = (Integer) ((Object[]) moFilterKey)[4];
            warehouse = (SDataCompanyBranchEntity) SDataUtilities.readRegistry(miClient, SDataConstants.CFGU_COB_ENT, new int[] { mnCompanyBranchId, mnCompanyBranchEntityId }, SLibConstants.EXEC_MODE_SILENT);

            jtfWarehouse.setText(warehouse.getCode());
        }
    }

    private void populateTable() {
        int col = 0;
        int dataType = SLibConsts.UNDEFINED;
        String[] titles = null;
        HashMap<Integer, Object> params = new HashMap<Integer, Object>();

        aoTableColumns = new STableColumnForm[showStock() ? 11 : 10];

        if (jrbFindByItemKey.isSelected() || jrbFindByItemName.isSelected() || jrbFindByPartNum.isSelected()) {
            dataType = jrbFindByItemKey.isSelected() ? SDataConstants.ITMX_ITEM_BY_KEY : (jrbFindByItemName.isSelected() ? SDataConstants.ITMX_ITEM_BY_NAME : SDataConstants.ITMX_ITEM_BY_PART_NUM);

            if (jrbFindByItemKey.isSelected()) {
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. parte", 200);
            }
            else if (jrbFindByItemName.isSelected()){
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. parte", 200);
            }
            else {
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. parte", 200);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
            }
            
            if (showStock()) {
                aoTableColumns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Existencias", STableConstants.WIDTH_QUANTITY_2X);
                aoTableColumns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            }
            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
            
            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Marca", 100);
            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Fabricante", 100);
        }
        else if (jrbFindByBrand.isSelected() || jrbFindByManufacturer.isSelected()) {
            
            if (jrbFindByBrand.isSelected()) {
                dataType = SDataConstants.ITMX_ITEM_BY_BRAND;
                titles = new String[] { "Marca", "Fabricante" };
            }
            else {
                dataType = SDataConstants.ITMX_ITEM_BY_MANUFACTURER;
                titles = new String[] { "Fabricante", "Marca" };
            }

            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, titles[0], 100);
            
            if (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. parte", 250);
            }
            else {
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. parte", 250);
                aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
            }
            
            if (showStock()) {
                aoTableColumns[col] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Existencias", STableConstants.WIDTH_QUANTITY_2X);
                aoTableColumns[col++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererQuantity());
            }
            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
            
            aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, titles[1], 100);
        }
        
        aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "ID categoría", 50);
        aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "ID clase", 50);
        aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase", 100);
        aoTableColumns[col++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Estatus", 100);

        moOptionPane.clearTable();

        for (STableColumnForm column : aoTableColumns) {
            moOptionPane.addTableColumn(column);
        }

        params.put(SLibConstants.VALUE_INV_ONLY, mbInventoriableOnly);
        mvTableRows.clear();
        mvTableRows = SDataReadTableRows.getTableRows(miClient, dataType, moFilterKey, params);
        
        moOptionPane.createTable();
        moOptionPane.getTable().addKeyListener(moKeyAdapterEnter);
        moOptionPane.getTable().getTableHeader().setReorderingAllowed(false);
        moOptionPane.getTableModel().getTableRows().addAll(mvTableRows);
        moOptionPane.renderTable();
        moOptionPane.layoutTable();

        jtfSearchText.setText("");
        jtfSearchText.requestFocus();

        if (jcbItemClass.getSelectedIndex() > 0) {
            actionFindKeyReleased();
        }

        moOptionPane.setTableRowSelection(0);
    }
    
    private void actionFindKeyReleased() {
        int length = jtfSearchText.getText().length();
        int itemClassIndex = 0;
        int[] itemClassKey = null;
        java.lang.String find = jtfSearchText.getText().toUpperCase();
        erp.lib.table.STableRow row = null;

        moOptionPane.clearTableRows();

        if (length == 0) {
            if (jcbItemClass.getSelectedIndex() <= 0) {
                // Item class filter is not needed:

                for (int i = 0; i < mvTableRows.size(); i++) {
                    moOptionPane.addTableRow(mvTableRows.get(i));
                }
            }
            else {
                // Item class filter is needed:

                itemClassKey = (int[]) ((SFormComponentItem) jcbItemClass.getSelectedItem()).getPrimaryKey();
                itemClassIndex = moOptionPane.getTableGuiColumnCount() - 4;

                for (int i = 0; i < mvTableRows.size(); i++) {
                    row = mvTableRows.get(i);
                    if ((Integer) row.getValues().get(itemClassIndex) == itemClassKey[0] && (Integer) row.getValues().get(itemClassIndex + 1) == itemClassKey[1]) {
                        moOptionPane.addTableRow(row);
                    }
                }
            }
        }
        else {
            if (jcbItemClass.getSelectedIndex() <= 0) {
                // Item class filter is not needed:

                if (jckFindExactMatch.isSelected()) {
                    for (int i = 0; i < mvTableRows.size(); i++) {
                        row = mvTableRows.get(i);
                        if (((String) row.getValues().get(0)).length() >= length && find.compareTo(((String) row.getValues().get(0)).substring(0, length)) == 0) {
                            moOptionPane.addTableRow(row);
                        }
                    }
                }
                else {
                    for (int i = 0; i < mvTableRows.size(); i++) {
                        row = mvTableRows.get(i);
                        if (((String) row.getValues().get(0)).contains(find)) {
                            moOptionPane.addTableRow(row);
                        }
                    }
                }
            }
            else {
                // Item class filter is needed:

                itemClassKey = (int[]) ((SFormComponentItem) jcbItemClass.getSelectedItem()).getPrimaryKey();
                itemClassIndex = moOptionPane.getTableGuiColumnCount() - 4;

                if (jckFindExactMatch.isSelected()) {
                    for (int i = 0; i < mvTableRows.size(); i++) {
                        row = mvTableRows.get(i);
                        if (((String) row.getValues().get(0)).length() >= length && find.compareTo(((String)row.getValues().get(0)).substring(0, length)) == 0 &&
                                (Integer) row.getValues().get(itemClassIndex) == itemClassKey[0] && (Integer) row.getValues().get(itemClassIndex + 1) == itemClassKey[1]) {
                            moOptionPane.addTableRow(row);
                        }
                    }
                }
                else {
                    for (int i = 0; i < mvTableRows.size(); i++) {
                        row = mvTableRows.get(i);
                        if (((String) row.getValues().get(0)).contains(find) &&
                                (Integer) row.getValues().get(itemClassIndex) == itemClassKey[0] && (Integer) row.getValues().get(itemClassIndex + 1) == itemClassKey[1]) {
                            moOptionPane.addTableRow(row);
                        }
                    }
                }
            }
        }
    }

    private void actionSearchText() {
        moOptionPane.setTableRowSelection(0);
        moOptionPane.getTable().requestFocus();
    }

    public void actionOk() {
        if (moOptionPane.getSelectedTableRow() == null) {
            miClient.showMsgBoxWarning("Se debe seleccionar una opción.");
            moOptionPane.getTable().requestFocus();
        }
        else {
            moPkItemId = moOptionPane.getSelectedTableRow().getPrimaryKey();

            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionOk() {
        actionOk();
    }

    public void publicActionCancel() {
        actionCancel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFind;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JComboBox jcbItemClass;
    private javax.swing.JCheckBox jckFindExactMatch;
    private javax.swing.JLabel jlCompanyBranchEntity;
    private javax.swing.JLabel jlItemClass;
    private javax.swing.JLabel jlSearchText;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpOptionPane;
    private javax.swing.JPanel jpSouth;
    private javax.swing.JRadioButton jrbFindByBrand;
    private javax.swing.JRadioButton jrbFindByItemKey;
    private javax.swing.JRadioButton jrbFindByItemName;
    private javax.swing.JRadioButton jrbFindByManufacturer;
    private javax.swing.JRadioButton jrbFindByPartNum;
    private javax.swing.JTextField jtfCompanyBranch;
    private javax.swing.JTextField jtfSearchText;
    private javax.swing.JTextField jtfWarehouse;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    /*
     * Overriden methods
     */

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        mbInventoriableOnly = false;
        moFilterKey = null;

        jtfSearchText.setText("");
        jtfYear.setText("");
        jtfCompanyBranch.setText("");
        jtfWarehouse.setText("");

        mbResetingForm = false;
    }

    @Override
    public void formRefreshOptionPane() {
        populateTable();

        readCompanyBranch();
        readWarehouse();
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getOptionType() {
        return mnOptionType;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(java.lang.Object filterKey) {
        mbResetingForm = true;

        moFilterKey = filterKey;
        if (moFilterKey != null && moFilterKey instanceof int[]) {
            SFormUtilities.locateComboBoxItem(jcbItemClass, moFilterKey);
        }

        mbResetingForm = false;
    }

    @Override
    public void setSelectedPrimaryKey(java.lang.Object pk) {
        for (int i = 0; i < moOptionPane.getTable().getRowCount(); i++) {
            if (SLibUtilities.compareKeys(pk, moOptionPane.getTableRow(i).getPrimaryKey())) {
                moOptionPane.setTableRowSelection(i);
                moPkItemId = pk;
                break;
            }
        }
    }

    @Override
    public java.lang.Object getSelectedPrimaryKey() {
        return moPkItemId;
    }

    @Override
    public erp.lib.table.STableRow getSelectedOption() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /*
     * Public methods
     */

    public void setFormParam(int param, Object value) {
        switch (param) {
            case SLibConstants.VALUE_INV_ONLY:
                mbInventoriableOnly = (Boolean) value;
                break;
            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }
    }

    /*
     * Static public methods
     */

    public static erp.form.SFormOptionPickerItems createOptionPicker(erp.client.SClientInterface client, int type, erp.form.SFormOptionPickerItems picker) {
        SFormOptionPickerItems newPicker = null;

        if (picker != null) {
            newPicker = picker;
        }
        else {
            newPicker = new SFormOptionPickerItems(client, type);
        }

        return newPicker;
    }
}
