/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormOptionPicker.java
 *
 * Created on 29/09/2009, 09:43:42 AM
 */

package erp.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadTableRows;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableUtilities;
import erp.mod.SModConsts;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JTextField;

/**
 *
 * @author Sergio Flores, Isabel Servín, Edwin Carmona
 */
public class SFormOptionPicker extends javax.swing.JDialog implements erp.lib.form.SFormOptionPickerInterface, java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private int mnOptionType;

    private int mnFormResult;
    private int mnRequiredIndex;
    private boolean mbFirstTime;
    private java.lang.Object moFilterKey;
    private erp.lib.table.STablePane moPaneOptions;

    /**
     * Creates new form SFormOptionPicker
     * @param client ERP Client interface.
     * @param type Constants defined in erp.data.SDataConstants.
     */
    public SFormOptionPicker(erp.client.SClientInterface client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnOptionType = type;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPaneOptions = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlOption = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jpSouth = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selección");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpPaneOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jpPaneOptions.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jlOption.setText("Seleccionar una opción:");
        jlOption.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(jlOption, java.awt.BorderLayout.WEST);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel2.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel2.add(jbRefresh);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        jpPaneOptions.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpPaneOptions, java.awt.BorderLayout.CENTER);

        jpSouth.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpSouth.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpSouth.add(jbCancel);

        getContentPane().add(jpSouth, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-800)/2, (screenSize.height-600)/2, 800, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        int sortingType = 0;
        String optionType = "";
        STableColumnForm[] aoTableColumns = null;

        moPaneOptions = new STablePane(miClient);
        moPaneOptions.setDoubleClickAction(this, "publicActionOk");
        jpPaneOptions.add(moPaneOptions, BorderLayout.CENTER);

        switch (mnOptionType) {
            case SDataConstants.CFGU_CUR:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_CURRENCY_KEY);
                setTitle("Seleccionar moneda");
                break;

            case SDataConstants.CFGU_CO:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empresa", 300);
                setTitle("Seleccionar empresa");
                break;

            case SDataConstants.CFGU_COB_ENT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Entidad", 300);
                setTitle("Seleccionar entidad");
                break;

            case SDataConstants.CFGU_LAN:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Idioma", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 100);
                setTitle("Seleccionar lenguaje");
                break;
                
            case SModConsts.CFGU_FUNC:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Área", 300);
                setTitle("Seleccionar área funcional");
                break;
                
            case SDataConstants.USRU_USR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usuario", 300);
                setTitle("Seleccionar usuario");
                break;

            case SDataConstants.LOCU_CTY:
                aoTableColumns = new STableColumnForm[3];
                if (miClient.getSessionXXX().getParamsErp().getFkSortingLocalityTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 75);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "País", 250);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Abr.", 50);
                }
                else {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "País", 250);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Abr.", 50);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 75);
                }
                setTitle("Seleccionar país");
                break;

            case SDataConstants.BPSS_CT_BP:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría asociado de negocios", 300);
                setTitle("Seleccionar categoría de asociado de negocios");
                break;

            case SDataConstants.BPSS_TP_BP_IDY:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Identidad", 300);
                setTitle("Seleccionar ídentidad");
                break;

            case SDataConstants.BPSS_TP_CON:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo contacto", 300);
                setTitle("Seleccionar tipo de contacto");
                break;

            case SDataConstants.BPSU_TP_BP:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo asociado de negocios", 300);
                setTitle("Seleccionar tipo de asociado de negocios");
                break;

            case SDataConstants.BPSU_BP:
                aoTableColumns = new STableColumnForm[4];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado de negocios", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre comercial", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de identidad", 150);
                setTitle("Seleccionar asociado de negocios");
                break;

            case SDataConstants.BPSU_BPB:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de sucursal", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Región de impuestos", 150);
                setTitle("Seleccionar sucursal");
                break;

            case SDataConstants.BPSU_BPB_ADD:
                aoTableColumns = new STableColumnForm[11];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo domicilio", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Domicilio", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Calle", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Colonia", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "CP", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "AP", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Localidad", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Municipio", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Estado", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "País", 50);
                setTitle("Seleccionar domicilio");
                break;

            case SDataConstants.BPSU_BANK_ACC:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta bancaria", 300);
                setTitle("Seleccionar cuenta bancaria");
                break;

            case SDataConstants.BPSX_BP_ATT_BANK:
            case SDataConstants.BPSX_BP_ATT_CARR:
                switch (mnOptionType) {
                    case SDataConstants.BPSX_BP_ATT_BANK:
                        optionType = "banco";
                        break;
                    case SDataConstants.BPSX_BP_ATT_CARR:
                        optionType = "transportista";
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[4];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre comercial", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo identidad", 150);
                setTitle("Seleccionar " + optionType);
                break;

            case SDataConstants.BPSX_BP_SUP:
            case SDataConstants.BPSX_BP_SUP_FI:
            case SDataConstants.BPSX_BP_CUS:
            case SDataConstants.BPSX_BP_CUS_FI:
            case SDataConstants.BPSX_BP_CDR:
            case SDataConstants.BPSX_BP_DBR:
                switch (mnOptionType) {
                    case SDataConstants.BPSX_BP_CUS:
                        optionType = "cliente";
                        sortingType = miClient.getSessionXXX().getParamsErp().getFkSortingCustomerTypeId();
                        break;
                    case SDataConstants.BPSX_BP_SUP:
                        optionType = "proveedor";
                        sortingType = miClient.getSessionXXX().getParamsErp().getFkSortingSupplierTypeId();
                        break;
                    case SDataConstants.BPSX_BP_DBR:
                        optionType = "deudor diverso";
                        sortingType = miClient.getSessionXXX().getParamsErp().getFkSortingDebtorTypeId();
                        break;
                    case SDataConstants.BPSX_BP_CDR:
                        optionType = "acreedor diverso";
                        sortingType = miClient.getSessionXXX().getParamsErp().getFkSortingCreditorTypeId();
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[4];
                if (sortingType == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 100);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre", 300);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre comercial", 200);
                }
                else if (sortingType == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME_COMM) {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 100);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre comercial", 200);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre", 300);
                }
                else {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre", 300);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre comercial", 200);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 100);
                }
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC", 100);

                setTitle("Seleccionar " + optionType);
                break;

            case SDataConstants.BPSX_BP_X_SUP_CUS:
            case SDataConstants.BPSX_BP_X_CDR_DBR:
            case SDataConstants.BPSX_BP_X_SUP_CDR:
            case SDataConstants.BPSX_BP_X_CUS_DBR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado de negocios", 300);
                setTitle("Seleccionar asociado de negocios");
                break;

            case SDataConstants.BPSX_BP_EMP:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 300);
                setTitle("Seleccionar empleado");
                break;

            case SDataConstants.BPSX_BP_ATT_EMP_MFG:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado/Operador", 300);
                setTitle("Seleccionar empleado/operador");
                break;

            case SDataConstants.BPSX_BP_ATT_SAL_AGT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Agente de ventas", 300);
                setTitle("Seleccionar agente de ventas");
                break;

            case SDataConstants.ITMS_CT_ITEM:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría", 200);
                setTitle("Seleccionar categoría de ítem");
                break;

            case SDataConstants.ITMS_CL_ITEM:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase", 200);
                setTitle("Seleccionar clase de ítem");
                break;

            case SDataConstants.ITMS_TP_ITEM:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo", 200);
                setTitle("Seleccionar tipo de ítem");
                break;

            case SDataConstants.ITMU_IFAM:
                aoTableColumns = new STableColumnForm[7];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Familia ítems", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. u.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. par.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. doc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/precio", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/comisión", STableConstants.WIDTH_BOOLEAN_2X);
                setTitle("Seleccionar familia de ítems");
                break;

            case SDataConstants.ITMU_IGRP:
                aoTableColumns = new STableColumnForm[8];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Familia ítems", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Grupo ítems", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. u.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. par.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. doc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/precio", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/comisión", STableConstants.WIDTH_BOOLEAN_2X);
                setTitle("Seleccionar grupo de ítems");
                break;

            case SDataConstants.ITMU_IGEN:
            case SDataConstants.ITMX_IGEN_LINE:
                aoTableColumns = new STableColumnForm[8];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem genérico", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Grupo ítems", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. u.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. par.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc. doc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/precio", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/desc.", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "S/comisión", STableConstants.WIDTH_BOOLEAN_2X);
                setTitle("Seleccionar ítem genérico");
                break;

            case SDataConstants.ITMU_LINE:
                aoTableColumns = new STableColumnForm[8];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Línea ítems", 250);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem generico", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Marca", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Fabricante", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Elemento", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo variedad 1", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo variedad 2", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo variedad 3", 150);
                setTitle("Seleccionar línea");
                break;

            case SDataConstants.ITMU_ITEM:
            case SDataConstants.ITMX_ITEM_BOM_ITEM:
            case SDataConstants.ITMX_ITEM_BOM_LEVEL:
                aoTableColumns = new STableColumnForm[3];
                if (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
                }
                else {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                }
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Estatus", 100);

                setTitle("Seleccionar ítem");
                break;

            case SDataConstants.ITMU_CFG_ITEM_BP:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
                setTitle("Seleccionar descripción propia del asociado de negocios");
                break;

            case SDataConstants.ITMU_TP_UNIT:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo unidad", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad base", STableConstants.WIDTH_UNIT_SYMBOL);
                setTitle("Seleccionar tipo de unidad");
                break;

            case SDataConstants.ITMU_UNIT:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Símbolo", STableConstants.WIDTH_UNIT_SYMBOL);
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Equiv. unidad base", 150);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererBaseEquivalence());
                setTitle("Seleccionar tipo de unidad");
                break;

            case SDataConstants.ITMU_TP_VAR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo variedad", 300);
                setTitle("Seleccionar tipo de variedad");
                break;

            case SDataConstants.ITMU_TP_BRD:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo marca", 300);
                setTitle("Seleccionar tipo de marca");
                break;

            case SDataConstants.ITMU_TP_MFR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo fabricante", 300);
                setTitle("Seleccionar tipo de fabricante");
                break;

            case SDataConstants.ITMU_TP_EMT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo elemento", 300);
                setTitle("Seleccionar tipo de elemento");
                break;

            case SDataConstants.ITMU_VAR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Variedad", 300);
                setTitle("Seleccionar variedad");
                break;

            case SDataConstants.ITMU_BRD:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Marca", 300);
                setTitle("Seleccionar marca");
                break;

            case SDataConstants.ITMU_MFR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Fabricante", 300);
                setTitle("Seleccionar fabricante");
                break;

            case SDataConstants.ITMU_EMT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Elemento", 300);
                setTitle("Seleccionar elemento");
                break;

            case SDataConstants.FINS_TP_ACC_SPE:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta especializada", 300);
                setTitle("Seleccionar tipo de cuenta especializada");
                break;

            case SDataConstants.FINS_FISCAL_ACC:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código agrupador", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta fiscal", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Elegible", 100);
                setTitle("Seleccionar código agrupador SAT");
                break;

            case SDataConstants.FINS_FISCAL_BANK:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Banco", 300);
                setTitle("Seleccionar banco SAT");
                break;

            case SDataConstants.FINU_TP_ACC_USR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta contable de la empresa", 200);
                setTitle("Seleccionar tipo de cuenta contable de la empresa");
                break;

            case SDataConstants.FINU_CL_ACC_USR:
                aoTableColumns = new STableColumnForm[4];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta contable de la empresa", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase de cuenta contable de la empresa", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "No. inicial", 75);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "No. final", 75);
                setTitle("Seleccionar clase de cuenta contable de la empresa");
                break;

            case SDataConstants.FINU_CLS_ACC_USR:
                aoTableColumns = new STableColumnForm[5];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta contable de la empresa", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase de cuenta contable de la empresa", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subclase de cuenta contable de la empresa", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "No. inicial", 75);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "No. final", 75);
                setTitle("Seleccionar subclase de cuenta contable de la empresa");
                break;

            case SDataConstants.FINU_TP_ACC_LEDGER:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta de libro mayor", 300);
                setTitle("Seleccionar tipo de cuenta de libro mayor");
                break;

            case SDataConstants.FINU_TP_ACC_EBITDA:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta EBITDA", 300);
                setTitle("Seleccionar tipo de cuenta EBITDA");
                break;

            case SDataConstants.FINU_TP_REC:
            case SDataConstants.FINX_TP_REC_ALL:
            case SDataConstants.FINX_TP_REC_USER:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de póliza contable", 300);
                setTitle("Seleccionar tipo de póliza contable");
                break;

            case SDataConstants.FINU_TP_ADM_CPT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de concepto administrativo", 300);
                setTitle("Seleccionar tipo de concepto administrativo");
                break;

            case SDataConstants.FINU_TP_TAX_CPT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de concepto de impuestos", 300);
                setTitle("Seleccionar tipo de concepto de impuestos");
                break;

            case SDataConstants.FIN_EXC_RATE:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha", STableConstants.WIDTH_DATE);
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_EXCHANGE_RATE);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
                setTitle("Seleccionar tipo de cambio");
                break;

            case SDataConstants.FIN_ACC:
                aoTableColumns = new STableColumnForm[11];
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Profundidad", STableConstants.WIDTH_NUM_SMALLINT);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Nivel", STableConstants.WIDTH_NUM_SMALLINT);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta sistema", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Centro costo", STableConstants.WIDTH_BOOLEAN);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Entidad", STableConstants.WIDTH_BOOLEAN);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Asoc. negocios", STableConstants.WIDTH_BOOLEAN);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Ítem", STableConstants.WIDTH_BOOLEAN);
                setTitle("Seleccionar cuenta contable");
                break;

            case SDataConstants.FIN_ACC_CASH:
                aoTableColumns = new STableColumnForm[7];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta de efectivo", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría de cuenta", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Banco", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Chequera", STableConstants.WIDTH_BOOLEAN);
                setTitle("Seleccionar cuenta de efectivo");
                break;

            case SDataConstants.FINX_ACC_CASH_CASH:
                aoTableColumns = new STableColumnForm[4];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Caja", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                setTitle("Seleccionar caja");
                break;

            case SDataConstants.FINX_ACC_CASH_BANK:
            case SDataConstants.FINX_ACC_CASH_BANK_CHECK:
                switch (mnOptionType) {
                    case SDataConstants.FINX_ACC_CASH_BANK:
                        optionType = "Cuenta bancaria";
                        break;
                    case SDataConstants.FINX_ACC_CASH_BANK_CHECK:
                        optionType = "Cuenta bancaria cheques";
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[6];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, optionType, 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cuenta", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Banco", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Chequera", STableConstants.WIDTH_BOOLEAN);
                setTitle("Seleccionar " + optionType.toLowerCase());
                break;

            case SDataConstants.FIN_CC:
                aoTableColumns = new STableColumnForm[6];
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. de centro", STableConstants.WIDTH_ACCOUNT_ID);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Profundidad", STableConstants.WIDTH_NUM_SMALLINT);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Nivel", STableConstants.WIDTH_NUM_SMALLINT);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);
                setTitle("Seleccionar centro costo");
                break;

            case SDataConstants.FIN_BKC:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_CODE_COB);
                setTitle("Seleccionar centro contable");
                break;

            case SDataConstants.FINU_CARD_ISS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Emisor de tarjetas", 300);
                setTitle("Seleccionar emisor de tarjetas");
                break;

            case SDataConstants.FINU_CHECK_FMT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Formato de impresión de cheques", 300);
                setTitle("Seleccionar un formato de impresión de cheques");
                break;

            case SDataConstants.FINU_CHECK_FMT_GP:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Formato de impresión de cheques", 300);
                setTitle("Seleccionar un formato de impresión de cheques");
                break;

            case SDataConstants.FINU_TAX_REG:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Región de impuestos", 300);
                setTitle("Seleccionar región de impuestos");
                break;

            case SDataConstants.FINU_TAX_IDY:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de identidad de impuestos", 300);
                setTitle("Seleccionar tipo de identidad de impuestos");
                break;

            case SDataConstants.FINU_TAX_BAS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto básico", 300);
                setTitle("Seleccionar un impuesto básico");
                break;

            case SDataConstants.FINU_TAX:
                aoTableColumns = new STableColumnForm[4];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto", 250);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Porcentaje", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor unitario", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Valor", 100);
                setTitle("Seleccionar un impuesto");
                break;

            case SDataConstants.FIN_YEAR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Año contable", 100);
                setTitle("Seleccionar año contable");
                break;

            case SDataConstants.FIN_TAX_GRP:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Grupo de impuestos", 300);
                setTitle("Seleccionar un grupo de impuestos");
                break;
                
            case SDataConstants.FINX_ACC_ETY_REF:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia contable", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", 50);
                setTitle("Seleccionar referencia contable");
                break;

            case SDataConstants.TRNS_TP_LINK:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de referencia", 300);
                setTitle("Seleccionar tipo de link");
                break;

            case SDataConstants.TRNS_TP_IOG:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de documento", 300);
                setTitle("Seleccionar tipo de documento");
                break;

            case SDataConstants.TRNS_CT_DPS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría documento", 300);
                setTitle("Seleccionar categoría de documento");
                break;

            case SDataConstants.TRNS_CL_DPS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clase de documento", 300);
                setTitle("Seleccionar clase de documento");
                break;

            case SDataConstants.TRNU_TP_DPS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de documento", 300);
                setTitle("Seleccionar tipo de documento");
                break;

            case SDataConstants.TRN_DNS_DPS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Series folios compras-ventas", 300);
                setTitle("Seleccionar serie folios de compras-ventas");
                break;
            case SDataConstants.TRNU_DPS_NAT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Naturaleza documento", 300);
                setTitle("Seleccionar naturaleza de documento");
                break;

            case SDataConstants.TRN_SYS_NTS:
                aoTableColumns = new STableColumnForm[6];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Notas predeterminadas", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo documento", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Adición automática al crear documentos", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Visible al impresión", STableConstants.WIDTH_BOOLEAN_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Complemento CFDI Leyendas Fiscales", STableConstants.WIDTH_BOOLEAN_2X);
                setTitle("Seleccionar nota");
                break;

            case SDataConstants.TRN_DPS:
                aoTableColumns = new STableColumnForm[9];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc.", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc.", STableConstants.WIDTH_CODE_DOC);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc.", STableConstants.WIDTH_DOC_NUM);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado negocios", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_EXCHANGE_RATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total mon $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
                setTitle("Seleccionar documento de compras-ventas");
                break;

            case SDataConstants.TRN_CFD:
                aoTableColumns = new STableColumnForm[8];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Fecha-hora CFD", STableConstants.WIDTH_DATE_TIME);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo CFD", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Versión CFD", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio CFD", STableConstants.WIDTH_DOC_NUM);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "UUID", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "RFC receptor", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                setTitle("Seleccionar comprobante fiscal digital");
                break;

            case SDataConstants.TRNX_DPS_PAY_PEND:
                aoTableColumns = new STableColumnForm[7];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo", 100);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio", STableConstants.WIDTH_DOC_NUM);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto mon $", STableConstants.WIDTH_VALUE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo mon $", STableConstants.WIDTH_VALUE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", 150);
                setTitle("Seleccionar documento de compras-ventas");
                break;
            
            case SDataConstants.TRNX_OPE_TYPE:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de operación", 300);
                setTitle("Seleccionar tipo de operación");
                break;
                
            case SDataConstants.MKTU_TP_CUS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de cliente", 200);
                setTitle("Seleccionar tipo de cliente");
                break;

            case SDataConstants.MKT_PLIST:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Lista de precios", 200);
                setTitle("Seleccionar lista de precios");

                break;
            case SDataConstants.MKTU_SAL_ROUTE:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ruta de ventas", 200);
                setTitle("Seleccionar ruta de ventas");
                break;

            case SDataConstants.MKTU_MKT_SEGM:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Segmento de mercado", 200);
                setTitle("Seleccionar segmento de mercado");
                break;

            case SDataConstants.MKTU_MKT_SEGM_SUB:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subsegmento de mercado", 200);
                setTitle("Seleccionar subsegmento de mercado");
                break;

            case SDataConstants.MKTU_DIST_CHAN:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Canal de distribución", 200);
                setTitle("Seleccionar canal de distribución");
                break;

            case SDataConstants.MKTU_TP_SAL_AGT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo agente ventas", 200);
                setTitle("Seleccionar tipo agente ventas");
                break;

            case SModConsts.LOGS_TP_MOT:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de modo de transportación", 300);
                setTitle("Seleccionar tipo de modo de transportación");
                break;

            case SModConsts.LOGS_TP_CAR:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo de transportista", 300);
                setTitle("Seleccionar tipo de transportista");
                break;

            case SModConsts.LOGS_INC:
                aoTableColumns = new STableColumnForm[2];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Incoterm", 300);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código", 100);
                setTitle("Seleccionar entrega (Incoterm)");
                break;

           case SModConsts.LOGU_TP_VEH:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo vehículo", 300);
                setTitle("Seleccionar tipo vehículo");
                break;

            case SModConsts.LOG_VEH:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Vehículo", 300);
                setTitle("Seleccionar vehículo");
                break;

            case SDataConstants.MFG_BOM:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Fórmula", 200);
                setTitle("Seleccionar fórmula");
                break;

            case SDataConstants.MFG_BOM_SUB:
                aoTableColumns = new STableColumnForm[4];

                if (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME) {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Insumo", 300);
                }
                else {
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Insumo", 300);
                    aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", STableConstants.WIDTH_ITEM_KEY);
                }
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Unidad", STableConstants.WIDTH_UNIT_SYMBOL);
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Porcentaje", STableConstants.WIDTH_PERCENTAGE);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());
                setTitle("Seleccionar insumo sustituto");
                break;

            case SDataConstants.MFG_LINE:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Línea", 200);
                setTitle("Seleccionar línea");
                break;

            case SDataConstants.MFG_ORD:
            case SDataConstants.MFGX_ORD:
                aoTableColumns = new STableColumnForm[3];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio", 80);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia", 350);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo", 150);
                setTitle("Seleccionar orden de producción");
                break;
                
            case SDataConstants.QLT_ANALYSIS:
                aoTableColumns = new STableColumnForm[1];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Análisis", 200);
                setTitle("Seleccionar análisis");
                break;

            default:
                SLibUtilities.renderException(this, new Exception(SLibConstants.MSG_ERR_UTIL_UNKNOWN_FORM_PICK));
        }

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneOptions.addTableColumn(aoTableColumns[i]);
        }

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtfSeek.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            moPaneOptions.getTable().requestFocus();

            // Go to required index every first time this form is activated:
            if (mnRequiredIndex != -1) {
                moPaneOptions.setTableRowSelection(mnRequiredIndex);
                mnRequiredIndex = -1;
            }
        }
    }

    private void actionOk() {
        if (moPaneOptions.getSelectedTableRow() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
            moPaneOptions.getTable().requestFocus();
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionOk() {
        actionOk();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JLabel jlOption;
    private javax.swing.JPanel jpPaneOptions;
    private javax.swing.JPanel jpSouth;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneOptions, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneOptions, getTitle());
        }
    }

    public void actionRefresh() {
        formRefreshOptionPane();
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnRequiredIndex = -1;
        mbFirstTime = true;
        moFilterKey = null;

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        moPaneOptions.setTableRowSelection(0);
    }

    @Override
    public void formRefreshOptionPane() { 
        Vector<STableRow> vTableRows = SDataReadTableRows.getTableRows(miClient, mnOptionType, moFilterKey);

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        moPaneOptions.createTable();
        moPaneOptions.clearTableRows();

        for (STableRow row : vTableRows) {
            moPaneOptions.addTableRow(row);
        }
        moPaneOptions.renderTableRows();
        moPaneOptions.setTableRowSelection(0);

        if (moPaneOptions.getTableGuiRowCount() > 0) {
            jtfSeek.setEnabled(true);
            jbSeek.setEnabled(true);
            jbExportCsv.setEnabled(true);
        }

        moPaneOptions.getTable().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                    evt.consume();
                    actionOk();
                }
            }
        });
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getOptionType() {
        return mnOptionType;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setFilterKey(java.lang.Object filterKey) {
        moFilterKey = filterKey;
    }

    @Override
    public void setSelectedPrimaryKey(java.lang.Object pk) {
        for (int i = 0; i < moPaneOptions.getTableGuiRowCount(); i++) {
            if (SLibUtilities.compareKeys(pk, moPaneOptions.getTableModel().getTableRow(i).getPrimaryKey())) {
                mnRequiredIndex = i;
                moPaneOptions.setTableRowSelection(i);
                break;
            }
        }
    }

    @Override
    public java.lang.Object getSelectedPrimaryKey() {
        Object pk = null;

        if (moPaneOptions.getSelectedTableRow() != null) {
            pk = moPaneOptions.getSelectedTableRow().getPrimaryKey();
        }

        return pk;
    }

    @Override
    public erp.lib.table.STableRow getSelectedOption() {
        return moPaneOptions.getSelectedTableRow();
    }

    public static erp.form.SFormOptionPicker createOptionPicker(erp.client.SClientInterface client, int type, erp.form.SFormOptionPicker picker) {
        SFormOptionPicker newPicker = null;

        if (picker != null) {
            newPicker = picker;
        }
        else {
            newPicker = new SFormOptionPicker(client, type);
        }

        return newPicker;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
