/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.form;

import erp.client.SClientInterface;
import erp.lib.SLibConstants;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import java.awt.event.KeyEvent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Isabel Servín
 */
public class SFormCapturingNotes extends javax.swing.JDialog implements erp.lib.form.SFormInterface, DocumentListener {

    public static final int NOTE_TEXT = 1;
    public static final int NOTE_LEN = 2;
    
    private final erp.client.SClientInterface miClient;
    private int mnFormResult;
    private boolean mbFirstTime;
    private int mnMaxLen;
    
    /**
     * Creates new form SFormCapturingNotes
     * @param client
     */
    public SFormCapturingNotes(SClientInterface client) {
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaNotes = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jlTextLength = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Escribir comentarios");
        setIconImage(null);
        setIconImages(null);
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Comentarios:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jtaNotes.setColumns(20);
        jtaNotes.setRows(5);
        jScrollPane1.setViewportView(jtaNotes);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlTextLength.setText("Caracteres restantes:");
        jlTextLength.setPreferredSize(new java.awt.Dimension(200, 16));
        jPanel3.add(jlTextLength);

        jPanel1.add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl+Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(90, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.setPreferredSize(new java.awt.Dimension(90, 23));
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
        
        jtaNotes.getDocument().addDocumentListener(this);
    }
    
    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtaNotes.requestFocus();
        }
    }
    
    private void updateCount() {
        jlTextLength.setText("Caracteres restantes: " + (mnMaxLen - jtaNotes.getText().length()));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlTextLength;
    private javax.swing.JTextArea jtaNotes;
    // End of variables declaration//GEN-END:variables

    public void actionOk() {
        if (jtaNotes.getText().isEmpty()) {
            if (miClient.showMsgBoxConfirm("Se guardará un comentario vacio ¿desea continuar?") == JOptionPane.OK_OPTION) {
                mnFormResult = SLibConstants.FORM_RESULT_OK;
                setVisible(false);
            }
        }
        else {
            if (jtaNotes.getText().length() > mnMaxLen) {
                miClient.showMsgBoxInformation("El comentario sobrepasa la cantidad de caracteres: " + mnMaxLen);
            }
            else {
                mnFormResult = SLibConstants.FORM_RESULT_OK;
                setVisible(false);
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;
        
        jtaNotes.setText("");
    }

    @Override
    public void formRefreshCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SFormValidation formValidate() {
        return null;
    }

    @Override
    public void setFormStatus(int status) {
    
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return SLibConstants.UNDEFINED;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {

    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        return null;
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case NOTE_TEXT:
                jtaNotes.setText((String) value);
                break;
            case NOTE_LEN:
                mnMaxLen = (int) value;
                updateCount();
                break;
            default:
        }
    }

    @Override
    public Object getValue(int type) {
        Object value = null;
        
        switch (type) {
            case NOTE_TEXT:
                value = jtaNotes.getText().toUpperCase();
                break;
            default:
        }
        return value;
    }

    @Override
    public JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        updateCount();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateCount();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        updateCount();
    }
}
