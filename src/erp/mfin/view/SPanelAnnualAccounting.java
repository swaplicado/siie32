/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.view;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STabFilterYear;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableSetting;
import erp.lib.table.STableUtilities;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SPanelAnnualAccountingRow;
import erp.mfin.form.SDialogAccountingDetail;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import sa.lib.SLibUtils;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Isabel Servín
 */
public class SPanelAnnualAccounting extends javax.swing.JPanel implements erp.lib.table.STableTabInterface, java.awt.event.ActionListener, javax.swing.event.ListSelectionListener {

    protected erp.client.SClientInterface miClient;
    protected java.lang.String msTabTitle;
    protected int mnTabType;
    protected int mnTabTypeAux01;

    protected java.text.DecimalFormat moIntegerFormat;
    protected erp.lib.table.STablePane moPaneAccounting;
    protected erp.lib.table.STabFilterYear moFilterYear;
    protected erp.mfin.form.SDialogAccountingDetail moDialogAccountingDetail;
    protected erp.mfin.form.SDialogRepBizPartnerAccountingMoves moDialogRepBizPartnerAccountingMoves;
    protected java.util.Vector<java.lang.Integer> mvSuscriptors;
    protected java.util.Vector<erp.lib.table.STableSetting> mvTableSettings;

    protected int mnYear;
    protected java.util.Date mtDateStartYear;
    protected java.util.Date mtDateEndYear;
    protected java.util.Date mtDateStartJan;
    protected java.util.Date mtDateEndJan;
    protected java.util.Date mtDateStartFeb;
    protected java.util.Date mtDateEndFeb;
    protected java.util.Date mtDateStartMar;
    protected java.util.Date mtDateEndMar;
    protected java.util.Date mtDateStartApr;
    protected java.util.Date mtDateEndApr;
    protected java.util.Date mtDateStartMay;
    protected java.util.Date mtDateEndMay;
    protected java.util.Date mtDateStartJun;
    protected java.util.Date mtDateEndJun;
    protected java.util.Date mtDateStartJul;
    protected java.util.Date mtDateEndJul;
    protected java.util.Date mtDateStartAgu;
    protected java.util.Date mtDateEndAgu;
    protected java.util.Date mtDateStartSep;
    protected java.util.Date mtDateEndSep;
    protected java.util.Date mtDateStartOct;
    protected java.util.Date mtDateEndOct;
    protected java.util.Date mtDateStartNov;
    protected java.util.Date mtDateEndNov;
    protected java.util.Date mtDateStartDec;
    protected java.util.Date mtDateEndDec;
    protected boolean mbFirstTime;

    protected boolean mbShowRecordAdjYearEnd;
    protected boolean mbShowRecordAdjAudit;
    
    protected java.lang.String msAuxAccountId;

    /** Creates new form SPanelAccounting
     * @param client
     * @param tabTitle
     * @param auxType */
    public SPanelAnnualAccounting(erp.client.SClientInterface client, java.lang.String tabTitle) {
        miClient = client;
        msTabTitle = tabTitle;
        mnTabType = SDataConstants.FINX_ANNUAL_ACC_BALANCE;
        
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgPeriods = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        jpPeriods = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jbDetail = new javax.swing.JButton();
        jtbMoney = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        jtbRecordAdjYearEnd = new javax.swing.JToggleButton();
        jtbRecordAdjAudit = new javax.swing.JToggleButton();
        jpControls = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlStatusRow = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpFilters.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));
        jPanel1.add(jpFilters, java.awt.BorderLayout.WEST);

        jpPeriods.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator1);

        jbDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_kardex.gif"))); // NOI18N
        jbDetail.setToolTipText("Ver movimientos del período [Ctrl+K]");
        jbDetail.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPeriods.add(jbDetail);

        jtbMoney.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_money_off.gif"))); // NOI18N
        jtbMoney.setToolTipText("Cambiar moneda");
        jtbMoney.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbMoney.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_money_on.gif"))); // NOI18N
        jpPeriods.add(jtbMoney);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator2);

        jtbRecordAdjYearEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_off.gif"))); // NOI18N
        jtbRecordAdjYearEnd.setSelected(true);
        jtbRecordAdjYearEnd.setToolTipText("Incluir ajustes de cierre");
        jtbRecordAdjYearEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjYearEnd.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjYearEnd);

        jtbRecordAdjAudit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_off.gif"))); // NOI18N
        jtbRecordAdjAudit.setSelected(true);
        jtbRecordAdjAudit.setToolTipText("Incluir ajustes de auditoria");
        jtbRecordAdjAudit.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjAudit.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjAudit);

        jPanel1.add(jpPeriods, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl + B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jpControls.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbRefresh);

        jPanel1.add(jpControls, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatusRow.setText("0/0");
        jlStatusRow.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel2.add(jlStatusRow);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        focusTab();
    }//GEN-LAST:event_formComponentShown

    private void initComponentsExtra() {
        int i;
        STableColumnForm[] aoTableColumns = null;

        moIntegerFormat = new DecimalFormat("#,##0;-#,##0");

        mvSuscriptors = new Vector<Integer>();
        mvTableSettings = new Vector<STableSetting>();
        moPaneAccounting = new STablePane(miClient);
        moFilterYear = new STabFilterYear(miClient, this);
        moDialogAccountingDetail = new SDialogAccountingDetail(miClient, SDataConstants.FINX_ACCOUNTING);
        moDialogRepBizPartnerAccountingMoves = null;
        msAuxAccountId = "";

        moPaneAccounting.setDoubleClickAction(this, "publicActionDetail");
        
        add(moPaneAccounting, BorderLayout.CENTER);

        jpFilters.add(moFilterYear);

        mnYear = miClient.getSessionXXX().getWorkingYear();
        mtDateStartYear = null;
        mtDateEndYear = null;
        mtDateStartJan = null;
        mtDateEndJan = null;
        mtDateStartFeb = null;
        mtDateEndFeb = null;
        mtDateStartMar = null;
        mtDateEndMar = null;
        mtDateStartApr = null;
        mtDateEndApr = null;
        mtDateStartMay = null;
        mtDateEndMay = null;
        mtDateStartJun = null;
        mtDateEndJun = null;
        mtDateStartJul = null;
        mtDateEndJul = null;
        mtDateStartAgu = null;
        mtDateEndAgu = null;
        mtDateStartSep = null;
        mtDateEndSep = null;
        mtDateStartOct = null;
        mtDateEndOct = null;
        mtDateStartNov = null;
        mtDateEndNov = null;
        mtDateStartDec = null;
        mtDateEndDec = null;
        mbFirstTime = true;

        jtfSeek.setText("");

        jtbRecordAdjYearEnd.addActionListener(this);
        jtbRecordAdjAudit.addActionListener(this);

        i = 0;
        aoTableColumns = new STableColumnForm[44];
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ene cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ene abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ene saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Feb cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Feb abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Feb saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Mar cargos $", STableConstants.WIDTH_VALUE_2X); //10
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Mar abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Mar saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abr cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abr abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abr saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "May cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "May abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "May saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jun cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jun abonos $", STableConstants.WIDTH_VALUE_2X); //20
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jun saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jul cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jul abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Jul saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ago cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ago abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Ago saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Sep cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Sep abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Sep saldo final $", STableConstants.WIDTH_VALUE_2X); //30
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Oct cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Oct abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Oct saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Nov cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Nov abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Nov saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Dic cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Dic abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Dic saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY); //40
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Activa", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN); //44

        mvSuscriptors.add(SDataConstants.FIN_ACC);

        mvSuscriptors.add(SDataConstants.FIN_REC);
        mvSuscriptors.add(SDataConstants.TRN_DPS);
        mvSuscriptors.add(SDataConstants.TRN_DIOG);
        mvSuscriptors.add(SDataConstants.TRN_DSM);

        for (STableColumnForm col : aoTableColumns) {
            moPaneAccounting.addTableColumn(col);
        }
        
        jbDetail.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtbMoney.addActionListener(this);
        jtfSeek.addActionListener(this);

        setYear(mnYear);
        showRocordAdjustment();

        SFormUtilities.createActionMap(this, this, "publicActionDetail", "viewDetail", KeyEvent.VK_K, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionRefresh", int.class, STableConstants.REFRESH_MODE_RESET, "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    }

    private void focusTab() {
        if (mbFirstTime = true) {
            mbFirstTime = false;
        }
    }

    private void setYear(int year) {
        mnYear = year;
        mtDateStartYear = SLibTimeUtilities.getBeginOfYear(SLibTimeUtilities.createDate(mnYear));
        mtDateEndYear = SLibTimeUtilities.getEndOfYear(SLibTimeUtilities.createDate(mnYear));
        mtDateStartJan = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 1));
        mtDateEndJan = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 1));
        mtDateStartFeb = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 2));
        mtDateEndFeb = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 2));
        mtDateStartMar = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 3));
        mtDateEndMar = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 3));
        mtDateStartApr = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 4));
        mtDateEndApr = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 4));
        mtDateStartMay = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 5));
        mtDateEndMay = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 5));
        mtDateStartJun = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 6));
        mtDateEndJun = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 6));
        mtDateStartJul = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 7));
        mtDateEndJul = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 7));
        mtDateStartAgu = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 8));
        mtDateEndAgu = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 8));
        mtDateStartSep = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 9));
        mtDateEndSep = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 9));
        mtDateStartOct = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 10));
        mtDateEndOct = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 10));
        mtDateStartNov = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 11));
        mtDateEndNov = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 11));
        mtDateStartDec = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, 12));
        mtDateEndDec = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, 12));
        populateTable();
    }

    private void showRocordAdjustment() {
        mbShowRecordAdjYearEnd = jtbRecordAdjYearEnd.isSelected();
        mbShowRecordAdjAudit = jtbRecordAdjAudit.isSelected();
        populateTable();
    }

    private void actionDetail() {
        int[] currencyKey = null;
        STableRow row = moPaneAccounting.getSelectedTableRow();

        if (row != null && !row.getIsSummary()) {
            if (row.getPrimaryKey() == null) {
                miClient.showMsgBoxInformation("No se pueden mostrar movimientos de este registro.");
            }
            else {
                if (jtbMoney.isSelected()) {
                    currencyKey = new int[] { ((SPanelAnnualAccountingRow) row).getFkCurrencyId() };                                            
                }

                moDialogAccountingDetail.refreshAccountingDetail();
                moDialogAccountingDetail.showAccountingDetail(row.getPrimaryKey(), mnYear, mtDateStartYear, mtDateEndYear, currencyKey, null, mbShowRecordAdjYearEnd, mbShowRecordAdjAudit);
            }
        }
    }

    private void actionMoney() {
        populateTable();
    }

    @SuppressWarnings("unchecked")
    private boolean populateTableAccounting() throws java.lang.Exception {
        int i;
        int nLevel;
        double dOpeningBalance;
        double dOpeningBalanceTotal = 0;
        double dDebitJan;
        double dDebitJanTotal = 0;
        double dCreditJan;
        double dCreditJanTotal = 0;
        double dCloseJan;
        double dCloseJanTotal = 0;
        double dDebitFeb;
        double dDebitFebTotal = 0;
        double dCreditFeb;
        double dCreditFebTotal = 0;
        double dCloseFeb;
        double dCloseFebTotal = 0;
        double dDebitMar;
        double dDebitMarTotal = 0;
        double dCreditMar;
        double dCreditMarTotal = 0;
        double dCloseMar;
        double dCloseMarTotal = 0;
        double dDebitApr;
        double dDebitAprTotal = 0;
        double dCreditApr;
        double dCreditAprTotal = 0;
        double dCloseApr;
        double dCloseAprTotal = 0;
        double dDebitMay;
        double dDebitMayTotal = 0;
        double dCreditMay;
        double dCreditMayTotal = 0;
        double dCloseMay;
        double dCloseMayTotal = 0;
        double dDebitJun;
        double dDebitJunTotal = 0;
        double dCreditJun;
        double dCreditJunTotal = 0;
        double dCloseJun;
        double dCloseJunTotal = 0;
        double dDebitJul;
        double dDebitJulTotal = 0;
        double dCreditJul;
        double dCreditJulTotal = 0;
        double dCloseJul;
        double dCloseJulTotal = 0;
        double dDebitAgu;
        double dDebitAguTotal = 0;
        double dCreditAgu;
        double dCreditAguTotal = 0;
        double dCloseAgu;
        double dCloseAguTotal = 0;
        double dDebitSep;
        double dDebitSepTotal = 0;
        double dCreditSep;
        double dCreditSepTotal = 0;
        double dCloseSep;
        double dCloseSepTotal = 0;
        double dDebitOct;
        double dDebitOctTotal = 0;
        double dCreditOct;
        double dCreditOctTotal = 0;
        double dCloseOct;
        double dCloseOctTotal = 0;
        double dDebitNov;
        double dDebitNovTotal = 0;
        double dCreditNov;
        double dCreditNovTotal = 0;
        double dCloseNov;
        double dCloseNovTotal = 0;
        double dDebitDec;
        double dDebitDecTotal = 0;
        double dCreditDec;
        double dCreditDecTotal = 0;
        double dCloseDec;
        double dCloseDecTotal = 0;
        boolean bExists;
        boolean bIsDataAvailable = false;
        boolean bIsInserted;
        String sSql;
        String sSqlWhere;
        String sCur;
        String sAccountId;
        String sFormatAccountId = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Vector<Object>> vQueryRows;
        Vector<Integer> vLevels = SDataUtilities.getAccountLevels(sFormatAccountId);
        Vector<SPanelAnnualAccountingRow> vParentRows;
        SDataAccount oDataAccount;
        SPanelAnnualAccountingRow oAccountingRow = null;
        SPanelAnnualAccountingRow oAccountingRowTemp;
        SPanelAnnualAccountingRow oAccountingRowParent;
        SServerRequest oRequest;
        SServerResponse oResponse;

        // I. Read all active accounts belonging to current year:

        sSql = "SELECT a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del, " +
                "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, " +
                "IF(a.lev = 1, " + STableConstants.STYLE_BOLD + ", IF(a.lev < am.deep, " + STableConstants.STYLE_ITALIC + ", " + STableConstants.UNDEFINED + ")) AS f_style " +
                "FROM fin_acc AS a INNER JOIN fin_acc AS am ON " +
                "CONCAT(LEFT(a.id_acc, " + (vLevels.get(1) - 1) + "), '" + sFormatAccountId.substring(vLevels.get(1) - 1) + "') = am.id_acc AND " +
                "a.b_act = 1 AND a.b_del = 0 AND " +
                "a.dt_start <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartYear) + "' AND " +
                "(a.dt_end_n IS NULL OR a.dt_end_n >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndYear) + "') " +
                "ORDER BY a.id_acc ";

        oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
            for (Vector<Object> queryRow : vQueryRows) {
                bIsDataAvailable = true;

                oAccountingRow = new SPanelAnnualAccountingRow();
                oAccountingRow.setPrimaryKey(new Object[] { (String) queryRow.get(0) });
                oAccountingRow.setPkAccountId((String) queryRow.get(0));
                oAccountingRow.setAccount((String) queryRow.get(1));
                oAccountingRow.setDateStart((java.util.Date) queryRow.get(2));
                oAccountingRow.setDateEnd_n((java.util.Date) queryRow.get(3));
                oAccountingRow.setIsActive((Boolean) queryRow.get(4));
                oAccountingRow.setIsDeleted((Boolean) queryRow.get(5));
                oAccountingRow.setFkCurrencyId(((Number) queryRow.get(6)).intValue());  // when currency is set by constant, a BigInteger number is get
                oAccountingRow.setCurrencyKey((String) queryRow.get(7));
                oAccountingRow.setStyle(((Number) queryRow.get(8)).intValue());
                oAccountingRow.prepareTableRow();

                moPaneAccounting.addTableRow(oAccountingRow);
            }

           sSqlWhere = (!mbShowRecordAdjYearEnd ? " AND r.b_adj_year = 0 " : "") +
                    (!mbShowRecordAdjAudit ? " AND r.b_adj_audit = 0 " : "");

            // II. Read all accounting moves belonging to current period:

            sCur = jtbMoney.isSelected() ? "_cur" : "";
            
            sSql = "SELECT a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del, " +
                    (jtbMoney.isSelected() ? "c.id_cur AS f_id_cur, c.cur_key AS f_cur_key, " :
                        "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                        "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, ") +
                    //"#ENERO " +
                    "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJan) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS inicio, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJan) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJan) + "', re.debit, 0)) AS ene_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJan) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJan) + "', re.credit, 0)) AS ene_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJan) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS ene_fin, " +
                    //"#FEBRERO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartFeb) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndFeb) + "', re.debit, 0)) AS feb_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartFeb) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndFeb) + "', re.credit, 0)) AS feb_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndFeb) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS feb_fin, " +
                    //"#MARZO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartMar) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMar) + "', re.debit, 0)) AS mar_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartMar) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMar) + "', re.credit, 0)) AS mar_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMar) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS mar_fin, " +
                    //"#ABRIL " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartApr) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndApr) + "', re.debit, 0)) AS abr_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartApr) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndApr) + "', re.credit, 0)) AS abr_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndApr) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS abr_fin, " +
                    //"#MAYO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartMay) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMay) + "', re.debit, 0)) AS may_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartMay) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMay) + "', re.credit, 0)) AS may_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndMay) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS may_fin, " +
                    //"#JUNIO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJun) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJun) + "', re.debit, 0)) AS jun_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJun) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJun) + "', re.credit, 0)) AS jun_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJun) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS jun_fin, " +
                    //"#JULIO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJul) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJul) + "', re.debit, 0)) AS jul_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartJul) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJul) + "', re.credit, 0)) AS jul_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndJul) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS jul_fin, " +
                    //"#AGOSTO " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartAgu) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndAgu) + "', re.debit, 0)) AS ago_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartAgu) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndAgu) + "', re.credit, 0)) AS ago_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndAgu) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS ago_fin, " +
                    //"#SEPTIEMBRE " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartSep) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndSep) + "', re.debit, 0)) AS sep_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartSep) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndSep) + "', re.credit, 0)) AS sep_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndSep) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS sep_fin, " +
                    //"#OCTUBRE " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartOct) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndOct) + "', re.debit, 0)) AS oct_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartOct) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndOct) + "', re.credit, 0)) AS oct_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndOct) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS oct_fin, " +
                    //"#NOVIEMBRE " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartNov) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndNov) + "', re.debit, 0)) AS nov_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartNov) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndNov) + "', re.credit, 0)) AS nov_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndNov) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS nov_fin, " +
                    //"#DICIEMBRE " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartDec) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndDec) + "', re.debit, 0)) AS dic_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStartDec) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndDec) + "', re.credit, 0)) AS dic_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndDec) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS dic_fin, " +
                    "IF(a.lev = 1, " + STableConstants.STYLE_BOLD + ", IF(a.lev < am.deep, " + STableConstants.STYLE_ITALIC + ", " + STableConstants.UNDEFINED + ")) AS f_style " +
                    "FROM fin_rec AS r " +
                    "INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = " + mnYear + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEndYear) + "' AND " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_acc AS a ON " +
                    "re.fid_acc = a.id_acc " +
                    "INNER JOIN fin_acc AS am ON " +
                    "CONCAT(LEFT(a.id_acc, " + (vLevels.get(1) - 1) + "), '" + sFormatAccountId.substring(vLevels.get(1) - 1) + "') = am.id_acc " +
                    "INNER JOIN erp.cfgu_cur AS c ON " +
                    "re.fid_cur = c.id_cur " +
                    "GROUP BY a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del " +
                    (jtbMoney.isSelected() ? ", c.id_cur, c.cur_key " : " ") +
                    "ORDER BY a.id_acc " + 
                    (jtbMoney.isSelected() ? ", c.cur_key, c.id_cur " : " ");
            
            oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
            oResponse = miClient.getSessionXXX().request(oRequest);

            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                throw new Exception(oResponse.getMessage());
            }
            else {
                vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
                for (Vector<Object> queryRow : vQueryRows) {
                    bExists = false;
                    bIsDataAvailable = true;

                    for (i = 0; i < moPaneAccounting.getTableModel().getRowCount(); i++) {
                        oAccountingRow = (SPanelAnnualAccountingRow) moPaneAccounting.getTableRow(i);
                        if (((String) queryRow.get(0)).compareTo(oAccountingRow.getPkAccountId()) == 0 && ((Number) queryRow.get(6)).intValue() == oAccountingRow.getFkCurrencyId()) {
                            bExists = true;
                            break;
                        }
                    }

                    if (!bExists) {
                        oAccountingRow = new SPanelAnnualAccountingRow();
                        oAccountingRow.setPrimaryKey(new Object[] { (String) queryRow.get(0) });
                        oAccountingRow.setPkAccountId((String) queryRow.get(0));
                        oAccountingRow.setAccount((String) queryRow.get(1));
                        oAccountingRow.setDateStart((java.util.Date) queryRow.get(2));
                        oAccountingRow.setDateEnd_n((java.util.Date) queryRow.get(3));
                        oAccountingRow.setIsActive((Boolean) queryRow.get(4));
                        oAccountingRow.setIsDeleted((Boolean) queryRow.get(5));
                        oAccountingRow.setFkCurrencyId(((Number) queryRow.get(6)).intValue());  // when currency is set by constant, a BigInteger number is get
                        oAccountingRow.setCurrencyKey((String) queryRow.get(7));
                        oAccountingRow.setStyle(((Number) queryRow.get(45)).intValue());
                    }

                    dOpeningBalance = ((Number) queryRow.get(8)).doubleValue();
                    dDebitJan = ((Number) queryRow.get(9)).doubleValue();
                    dCreditJan = ((Number) queryRow.get(10)).doubleValue();
                    dCloseJan = ((Number) queryRow.get(11)).doubleValue();
                    dDebitFeb = ((Number) queryRow.get(12)).doubleValue();
                    dCreditFeb = ((Number) queryRow.get(13)).doubleValue();
                    dCloseFeb = ((Number) queryRow.get(14)).doubleValue();
                    dDebitMar = ((Number) queryRow.get(15)).doubleValue();
                    dCreditMar = ((Number) queryRow.get(16)).doubleValue();
                    dCloseMar = ((Number) queryRow.get(17)).doubleValue();
                    dDebitApr = ((Number) queryRow.get(18)).doubleValue();
                    dCreditApr = ((Number) queryRow.get(19)).doubleValue();
                    dCloseApr = ((Number) queryRow.get(20)).doubleValue();
                    dDebitMay = ((Number) queryRow.get(21)).doubleValue();
                    dCreditMay = ((Number) queryRow.get(22)).doubleValue();
                    dCloseMay = ((Number) queryRow.get(23)).doubleValue();
                    dDebitJun = ((Number) queryRow.get(24)).doubleValue();
                    dCreditJun = ((Number) queryRow.get(25)).doubleValue();
                    dCloseJun = ((Number) queryRow.get(26)).doubleValue();
                    dDebitJul = ((Number) queryRow.get(27)).doubleValue();
                    dCreditJul = ((Number) queryRow.get(28)).doubleValue();
                    dCloseJul = ((Number) queryRow.get(29)).doubleValue();
                    dDebitAgu = ((Number) queryRow.get(30)).doubleValue();
                    dCreditAgu = ((Number) queryRow.get(31)).doubleValue();
                    dCloseAgu = ((Number) queryRow.get(32)).doubleValue();
                    dDebitSep = ((Number) queryRow.get(33)).doubleValue();
                    dCreditSep = ((Number) queryRow.get(34)).doubleValue();
                    dCloseSep = ((Number) queryRow.get(35)).doubleValue();
                    dDebitOct = ((Number) queryRow.get(36)).doubleValue();
                    dCreditOct = ((Number) queryRow.get(37)).doubleValue();
                    dCloseOct = ((Number) queryRow.get(38)).doubleValue();
                    dDebitNov = ((Number) queryRow.get(39)).doubleValue();
                    dCreditNov = ((Number) queryRow.get(40)).doubleValue();
                    dCloseNov = ((Number) queryRow.get(41)).doubleValue();
                    dDebitDec = ((Number) queryRow.get(42)).doubleValue();
                    dCreditDec = ((Number) queryRow.get(43)).doubleValue();
                    dCloseDec = ((Number) queryRow.get(44)).doubleValue();

                    if (!jtbMoney.isSelected()) {
                        dOpeningBalanceTotal = SLibUtils.roundAmount(dOpeningBalanceTotal + dOpeningBalance);
                        dDebitJanTotal = SLibUtils.roundAmount(dDebitJanTotal + dDebitJan);
                        dCreditJanTotal = SLibUtils.roundAmount(dCreditJanTotal + dCreditJan);
                        dCloseJanTotal = SLibUtils.roundAmount(dCloseJanTotal + dCloseJan);
                        dDebitFebTotal = SLibUtils.roundAmount(dDebitFebTotal + dDebitFeb);
                        dCreditFebTotal = SLibUtils.roundAmount(dCreditFebTotal + dCreditFeb);
                        dCloseFebTotal = SLibUtils.roundAmount(dCloseFebTotal + dCloseFeb);
                        dDebitMarTotal = SLibUtils.roundAmount(dDebitMarTotal + dDebitMar);
                        dCreditMarTotal = SLibUtils.roundAmount(dCreditMarTotal + dCreditMar);
                        dCloseMarTotal = SLibUtils.roundAmount(dCloseMarTotal + dCloseMar);
                        dDebitAprTotal = SLibUtils.roundAmount(dDebitAprTotal + dDebitApr);
                        dCreditAprTotal = SLibUtils.roundAmount(dCreditAprTotal + dCreditApr);
                        dCloseAprTotal = SLibUtils.roundAmount(dCloseAprTotal + dCloseApr);
                        dDebitMayTotal = SLibUtils.roundAmount(dDebitMayTotal + dDebitMay);
                        dCreditMayTotal = SLibUtils.roundAmount(dCreditMayTotal + dCreditMay);
                        dCloseMayTotal = SLibUtils.roundAmount(dCloseMayTotal + dCloseMay);
                        dDebitJunTotal = SLibUtils.roundAmount(dDebitJunTotal + dDebitJun);
                        dCreditJunTotal = SLibUtils.roundAmount(dCreditJunTotal + dCreditJun);
                        dCloseJunTotal = SLibUtils.roundAmount(dCloseJunTotal + dCloseJun);
                        dDebitJulTotal = SLibUtils.roundAmount(dDebitJulTotal + dDebitJul);
                        dCreditJulTotal = SLibUtils.roundAmount(dCreditJulTotal + dCreditJul);
                        dCloseJulTotal = SLibUtils.roundAmount(dCloseJulTotal + dCloseJul);
                        dDebitAguTotal = SLibUtils.roundAmount(dDebitAguTotal + dDebitAgu);
                        dCreditAguTotal = SLibUtils.roundAmount(dCreditAguTotal + dCreditAgu);
                        dCloseAguTotal = SLibUtils.roundAmount(dCloseAguTotal + dCloseAgu);
                        dDebitSepTotal = SLibUtils.roundAmount(dDebitSepTotal + dDebitSep);
                        dCreditSepTotal = SLibUtils.roundAmount(dCreditSepTotal + dCreditSep);
                        dCloseSepTotal = SLibUtils.roundAmount(dCloseSepTotal + dCloseSep);
                        dDebitOctTotal = SLibUtils.roundAmount(dDebitOctTotal + dDebitOct);
                        dCreditOctTotal = SLibUtils.roundAmount(dCreditOctTotal + dCreditOct);
                        dCloseOctTotal = SLibUtils.roundAmount(dCloseOctTotal + dCloseOct);
                        dDebitNovTotal = SLibUtils.roundAmount(dDebitNovTotal + dDebitNov);
                        dCreditNovTotal = SLibUtils.roundAmount(dCreditNovTotal + dCreditNov);
                        dCloseNovTotal = SLibUtils.roundAmount(dCloseNovTotal + dCloseNov);
                        dDebitDecTotal = SLibUtils.roundAmount(dDebitDecTotal + dDebitDec);
                        dCreditDecTotal = SLibUtils.roundAmount(dCreditDecTotal + dCreditDec);
                        dCloseDecTotal = SLibUtils.roundAmount(dCloseDecTotal + dCloseDec);
                    }

                    oAccountingRow.setOpeningBalance(oAccountingRow.getOpeningBalance() + dOpeningBalance);
                    oAccountingRow.setDebitJan(oAccountingRow.getDebitJan() + dDebitJan);
                    oAccountingRow.setCreditJan(oAccountingRow.getCreditJan() + dCreditJan);
                    oAccountingRow.setClosingJan(oAccountingRow.getClosingJan() + dCloseJan);
                    oAccountingRow.setDebitFeb(oAccountingRow.getDebitFeb() + dDebitFeb);
                    oAccountingRow.setCreditFeb(oAccountingRow.getCreditFeb() + dCreditFeb);
                    oAccountingRow.setClosingFeb(oAccountingRow.getClosingFeb() + dCloseFeb);
                    oAccountingRow.setDebitMar(oAccountingRow.getDebitMar() + dDebitMar);
                    oAccountingRow.setCreditMar(oAccountingRow.getCreditMar() + dCreditMar);
                    oAccountingRow.setClosingMar(oAccountingRow.getClosingMar() + dCloseMar);
                    oAccountingRow.setDebitApr(oAccountingRow.getDebitApr() + dDebitApr);
                    oAccountingRow.setCreditApr(oAccountingRow.getCreditApr() + dCreditApr);
                    oAccountingRow.setClosingApr(oAccountingRow.getClosingApr() + dCloseApr);
                    oAccountingRow.setDebitMay(oAccountingRow.getDebitMay() + dDebitMay);
                    oAccountingRow.setCreditMay(oAccountingRow.getCreditMay() + dCreditMay);
                    oAccountingRow.setClosingMay(oAccountingRow.getClosingMay() + dCloseMay);
                    oAccountingRow.setDebitJun(oAccountingRow.getDebitJun() + dDebitJun);
                    oAccountingRow.setCreditJun(oAccountingRow.getCreditJun() + dCreditJun);
                    oAccountingRow.setClosingJun(oAccountingRow.getClosingJun() + dCloseJun);
                    oAccountingRow.setDebitJul(oAccountingRow.getDebitJul() + dDebitJul);
                    oAccountingRow.setCreditJul(oAccountingRow.getCreditJul() + dCreditJul);
                    oAccountingRow.setClosingJul(oAccountingRow.getClosingJul() + dCloseJul);
                    oAccountingRow.setDebitAgu(oAccountingRow.getDebitAgu() + dDebitAgu);
                    oAccountingRow.setCreditAgu(oAccountingRow.getCreditAgu() + dCreditAgu);
                    oAccountingRow.setClosingAgu(oAccountingRow.getClosingAgu() + dCloseAgu);
                    oAccountingRow.setDebitSep(oAccountingRow.getDebitSep() + dDebitSep);
                    oAccountingRow.setCreditSep(oAccountingRow.getCreditSep() + dCreditSep);
                    oAccountingRow.setClosingSep(oAccountingRow.getClosingSep() + dCloseSep);
                    oAccountingRow.setDebitOct(oAccountingRow.getDebitOct() + dDebitOct);
                    oAccountingRow.setCreditOct(oAccountingRow.getCreditOct() + dCreditOct);
                    oAccountingRow.setClosingOct(oAccountingRow.getClosingOct() + dCloseOct);
                    oAccountingRow.setDebitNov(oAccountingRow.getDebitNov() + dDebitNov);
                    oAccountingRow.setCreditNov(oAccountingRow.getCreditNov() + dCreditNov);
                    oAccountingRow.setClosingNov(oAccountingRow.getClosingNov() + dCloseNov);
                    oAccountingRow.setDebitDec(oAccountingRow.getDebitDec() + dDebitDec);
                    oAccountingRow.setCreditDec(oAccountingRow.getCreditDec() + dCreditDec);
                    oAccountingRow.setClosingDec(oAccountingRow.getClosingDec() + dCloseDec);

                    oAccountingRow.prepareTableRow();

                    if (bExists) {
                        moPaneAccounting.setTableRow(oAccountingRow, i);
                    }
                    else {
                        bIsInserted = false;
                        for (i = 0; i < moPaneAccounting.getTableGuiRowCount(); i++) {
                            oAccountingRowTemp = (SPanelAnnualAccountingRow) moPaneAccounting.getTableRow(i);
                            if ((oAccountingRow.getPkAccountId() + oAccountingRow.getCurrencyKey()).compareTo(oAccountingRowTemp.getPkAccountId() + oAccountingRowTemp.getCurrencyKey()) < 0) {
                                    moPaneAccounting.insertTableRow(oAccountingRow, i);
                                    bIsInserted = true;
                                    break;
                            }
                        }

                        if (!bIsInserted) {
                            moPaneAccounting.addTableRow(oAccountingRow);
                        }
                    }
                }

                // III. Add all parent accounts of current account rows:

                vParentRows = new Vector<SPanelAnnualAccountingRow>();

                for (STableRow tableRow : moPaneAccounting.getTableModel().getTableRows()) {
                    oAccountingRow = (SPanelAnnualAccountingRow) tableRow;
                    nLevel = SDataUtilities.getAccountUsedLevelsCount(oAccountingRow.getPkAccountId(), vLevels);
                    while (nLevel > 1) {
                        oAccountingRowParent = null;
                        sAccountId = SDataUtilities.obtainAccountIdByLevel(miClient, oAccountingRow.getPkAccountId(), nLevel - 1);

                        for (SPanelAnnualAccountingRow row : vParentRows) {
                            if (row.getPkAccountId().compareTo(sAccountId) == 0 && row.getFkCurrencyId() == oAccountingRow.getFkCurrencyId()) {
                                oAccountingRowParent = row;
                                break;
                            }
                        }

                        if (oAccountingRowParent == null) {
                            oDataAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { sAccountId }, SLibConstants.EXEC_MODE_VERBOSE);
                            oAccountingRowParent = new SPanelAnnualAccountingRow();
                            oAccountingRowParent.setPrimaryKey(new Object[] { oDataAccount.getPkAccountIdXXX() });
                            oAccountingRowParent.setPkAccountId(oDataAccount.getPkAccountIdXXX());
                            oAccountingRowParent.setAccount(oDataAccount.getAccount());
                            oAccountingRowParent.setDateStart(oDataAccount.getDateStart());
                            oAccountingRowParent.setDateEnd_n(oDataAccount.getDateEnd_n());
                            oAccountingRowParent.setIsActive(oDataAccount.getIsActive());
                            oAccountingRowParent.setIsDeleted(oDataAccount.getIsDeleted());
                            oAccountingRowParent.setFkCurrencyId(oAccountingRow.getFkCurrencyId());
                            oAccountingRowParent.setCurrencyKey(oAccountingRow.getCurrencyKey());
                            oAccountingRowParent.setStyle(oDataAccount.getLevel() == 1 ? STableConstants.STYLE_BOLD : oDataAccount.getLevel() < oDataAccount.getDbmsLedgerAccountDeep() ? STableConstants.STYLE_ITALIC : STableConstants.UNDEFINED);

                            vParentRows.add(oAccountingRowParent);
                        }

                        oAccountingRowParent.setOpeningBalance(oAccountingRowParent.getOpeningBalance() + oAccountingRow.getOpeningBalance());
                        oAccountingRowParent.setDebitJan(oAccountingRowParent.getDebitJan() + oAccountingRow.getDebitJan());
                        oAccountingRowParent.setCreditJan(oAccountingRowParent.getCreditJan() + oAccountingRow.getCreditJan());
                        oAccountingRowParent.setClosingJan(oAccountingRowParent.getClosingJan() + oAccountingRow.getClosingJan());
                        oAccountingRowParent.setDebitFeb(oAccountingRowParent.getDebitFeb() + oAccountingRow.getDebitFeb());
                        oAccountingRowParent.setCreditFeb(oAccountingRowParent.getCreditFeb() + oAccountingRow.getCreditFeb());
                        oAccountingRowParent.setClosingFeb(oAccountingRowParent.getClosingFeb() + oAccountingRow.getClosingFeb());
                        oAccountingRowParent.setDebitMar(oAccountingRowParent.getDebitMar() + oAccountingRow.getDebitMar());
                        oAccountingRowParent.setCreditMar(oAccountingRowParent.getCreditMar() + oAccountingRow.getCreditMar());
                        oAccountingRowParent.setClosingMar(oAccountingRowParent.getClosingMar() + oAccountingRow.getClosingMar());
                        oAccountingRowParent.setDebitApr(oAccountingRowParent.getDebitApr() + oAccountingRow.getDebitApr());
                        oAccountingRowParent.setCreditApr(oAccountingRowParent.getCreditApr() + oAccountingRow.getCreditApr());
                        oAccountingRowParent.setClosingApr(oAccountingRowParent.getClosingApr() + oAccountingRow.getClosingApr());
                        oAccountingRowParent.setDebitMay(oAccountingRowParent.getDebitMay()+ oAccountingRow.getDebitMay());
                        oAccountingRowParent.setCreditMay(oAccountingRowParent.getCreditMay() + oAccountingRow.getCreditMay());
                        oAccountingRowParent.setClosingMay(oAccountingRowParent.getClosingMay() + oAccountingRow.getClosingMay());
                        oAccountingRowParent.setDebitJun(oAccountingRowParent.getDebitJun() + oAccountingRow.getDebitJun());
                        oAccountingRowParent.setCreditJun(oAccountingRowParent.getCreditJun() + oAccountingRow.getCreditJun());
                        oAccountingRowParent.setClosingJun(oAccountingRowParent.getClosingJun() + oAccountingRow.getClosingJun());
                        oAccountingRowParent.setDebitJul(oAccountingRowParent.getDebitJul() + oAccountingRow.getDebitJul());
                        oAccountingRowParent.setCreditJul(oAccountingRowParent.getCreditJul() + oAccountingRow.getCreditJul());
                        oAccountingRowParent.setClosingJul(oAccountingRowParent.getClosingJul() + oAccountingRow.getClosingJul());
                        oAccountingRowParent.setDebitAgu(oAccountingRowParent.getDebitAgu() + oAccountingRow.getDebitAgu());
                        oAccountingRowParent.setCreditAgu(oAccountingRowParent.getCreditAgu() + oAccountingRow.getCreditAgu());
                        oAccountingRowParent.setClosingAgu(oAccountingRowParent.getClosingAgu() + oAccountingRow.getClosingAgu());
                        oAccountingRowParent.setDebitSep(oAccountingRowParent.getDebitSep() + oAccountingRow.getDebitSep());
                        oAccountingRowParent.setCreditSep(oAccountingRowParent.getCreditSep() + oAccountingRow.getCreditSep());
                        oAccountingRowParent.setClosingSep(oAccountingRowParent.getClosingSep() + oAccountingRow.getClosingSep());
                        oAccountingRowParent.setDebitOct(oAccountingRowParent.getDebitOct() + oAccountingRow.getDebitOct());
                        oAccountingRowParent.setCreditOct(oAccountingRowParent.getCreditOct() + oAccountingRow.getCreditOct());
                        oAccountingRowParent.setClosingOct(oAccountingRowParent.getClosingOct() + oAccountingRow.getClosingOct());
                        oAccountingRowParent.setDebitNov(oAccountingRowParent.getDebitNov() + oAccountingRow.getDebitNov());
                        oAccountingRowParent.setCreditNov(oAccountingRowParent.getCreditNov() + oAccountingRow.getCreditNov());
                        oAccountingRowParent.setClosingNov(oAccountingRowParent.getClosingNov() + oAccountingRow.getClosingNov());
                        oAccountingRowParent.setDebitDec(oAccountingRowParent.getDebitDec() + oAccountingRow.getDebitDec());
                        oAccountingRowParent.setCreditDec(oAccountingRowParent.getCreditDec() + oAccountingRow.getCreditDec());
                        oAccountingRowParent.setClosingDec(oAccountingRowParent.getClosingDec() + oAccountingRow.getClosingDec());

                        nLevel--;
                    }
                }

                // IV. Insert all parent accounts into table pane:

                for (SPanelAnnualAccountingRow row : vParentRows) {
                    bIsInserted = false;
                    row.prepareTableRow();

                    for (i = 0; i < moPaneAccounting.getTableGuiRowCount(); i++) {
                        oAccountingRow = (SPanelAnnualAccountingRow) moPaneAccounting.getTableRow(i);
                        if (row.getPkAccountId().compareTo(oAccountingRow.getPkAccountId()) == 0 && row.getFkCurrencyId() == oAccountingRow.getFkCurrencyId()) {
                            moPaneAccounting.setTableRow(row, i);
                            bIsInserted = true;
                            break;
                        }
                        else if ((row.getPkAccountId() + row.getCurrencyKey()).compareTo(oAccountingRow.getPkAccountId() + oAccountingRow.getCurrencyKey()) < 0) {
                                moPaneAccounting.insertTableRow(row, i);
                                bIsInserted = true;
                                break;
                        }
                    }

                    if (!bIsInserted) {
                        moPaneAccounting.addTableRow(row);
                    }
                }
            }
        }

        if (!jtbMoney.isSelected()) {
            bIsDataAvailable = true;

            oAccountingRow = new SPanelAnnualAccountingRow();
            oAccountingRow.setIsSummary(true);
            oAccountingRow.setPkAccountId("[TOTALES]");
            oAccountingRow.setAccount("");
            oAccountingRow.setDateStart(null);
            oAccountingRow.setDateEnd_n(null);
            oAccountingRow.setIsActive(false);
            oAccountingRow.setIsDeleted(false);
            oAccountingRow.setOpeningBalance(dOpeningBalanceTotal);
            oAccountingRow.setDebitJan(dDebitJanTotal);
            oAccountingRow.setCreditJan(dCreditJanTotal);
            oAccountingRow.setClosingJan(dCloseJanTotal);
            oAccountingRow.setDebitFeb(dDebitFebTotal);
            oAccountingRow.setCreditFeb(dCreditFebTotal);
            oAccountingRow.setClosingFeb(dCloseFebTotal);
            oAccountingRow.setDebitMar(dDebitMarTotal);
            oAccountingRow.setCreditMar(dCreditMarTotal);
            oAccountingRow.setClosingMar(dCloseMarTotal);
            oAccountingRow.setDebitApr(dDebitAprTotal);
            oAccountingRow.setCreditApr(dCreditAprTotal);
            oAccountingRow.setClosingApr(dCloseAprTotal);
            oAccountingRow.setDebitMay(dDebitMayTotal);
            oAccountingRow.setCreditMay(dCreditMayTotal);
            oAccountingRow.setClosingMay(dCloseMayTotal);
            oAccountingRow.setDebitJun(dDebitJunTotal);
            oAccountingRow.setCreditJun(dCreditJunTotal);
            oAccountingRow.setClosingJun(dCloseJunTotal);
            oAccountingRow.setDebitJul(dDebitJulTotal);
            oAccountingRow.setCreditJul(dCreditJulTotal);
            oAccountingRow.setClosingJul(dCloseJulTotal);
            oAccountingRow.setDebitAgu(dDebitAguTotal);
            oAccountingRow.setCreditAgu(dCreditAguTotal);
            oAccountingRow.setClosingAgu(dCloseAguTotal);
            oAccountingRow.setDebitSep(dDebitSepTotal);
            oAccountingRow.setCreditSep(dCreditSepTotal);
            oAccountingRow.setClosingSep(dCloseSepTotal);
            oAccountingRow.setDebitOct(dDebitOctTotal);
            oAccountingRow.setCreditOct(dCreditOctTotal);
            oAccountingRow.setClosingOct(dCloseOctTotal);
            oAccountingRow.setDebitNov(dDebitNovTotal);
            oAccountingRow.setCreditNov(dCreditNovTotal);
            oAccountingRow.setClosingNov(dCloseNovTotal);
            oAccountingRow.setDebitDec(dDebitDecTotal);
            oAccountingRow.setCreditDec(dCreditDecTotal);
            oAccountingRow.setClosingDec(dCloseDecTotal);
            oAccountingRow.prepareTableRow();

            moPaneAccounting.addTableRow(oAccountingRow);
        }

        return bIsDataAvailable;
    }

    private void populateTable() {
        int index = -1;
        int valueV = 0;
        int valueH = 0;
        boolean isDataAvailable = false;
        Cursor cursor = getCursor();

        if (moPaneAccounting.getTable() != null) {
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        jlStatusRow.setText("0/0");
        moPaneAccounting.clearTableRows();
        moPaneAccounting.createTable(this);

        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            isDataAvailable = populateTableAccounting();   
        }
        catch(java.lang.Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            if (isDataAvailable) {
                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);

                moPaneAccounting.validate();
                moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
                moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

                if (index == -1) {
                    index = 0;
                }

                if (index >= moPaneAccounting.getTableGuiRowCount()) {
                    index = moPaneAccounting.getTableGuiRowCount() - 1;
                }
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }

            setCursor(cursor);
        }
    }

    public void publicActionDetail() {
        actionDetail();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbDetail;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.ButtonGroup jbgPeriods;
    private javax.swing.JLabel jlStatusRow;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpPeriods;
    private javax.swing.JToggleButton jtbMoney;
    private javax.swing.JToggleButton jtbRecordAdjAudit;
    private javax.swing.JToggleButton jtbRecordAdjYearEnd;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneAccounting, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneAccounting, msTabTitle);
        }
    }

    @Override
    public int getTabType() {
        return mnTabType;
    }

    @Override
    public int getTabTypeAux01() {
        return mnTabTypeAux01;
    }

    @Override
    public int getTabTypeAux02() {
        return 0;
    }

    @Override
    public java.util.Vector<java.lang.Integer> getSuscriptors() {
        return mvSuscriptors;
    }

    @Override
    public java.util.Vector<erp.lib.table.STableSetting> getTableSettings() {
        return mvTableSettings;
    }

    @Override
    public void addSetting(erp.lib.table.STableSetting setting) {
        boolean add = true;
        erp.lib.table.STableSetting settingAux;

        for (int i = 0; i < mvTableSettings.size(); i++) {
            settingAux = (erp.lib.table.STableSetting) mvTableSettings.get(i);
            if (settingAux.getType() == setting.getType()) {
                add = false;
                mvTableSettings.set(i, setting);
                break;
            }
        }

        if (add) {
            mvTableSettings.add(setting);
        }
    }

    @Override
    public void updateSetting(erp.lib.table.STableSetting setting) {
        addSetting(setting);

        if (setting.getType() == STableConstants.SETTING_FILTER_YEAR) {
            setYear((Integer) setting.getSetting());
        }
        else {
            populateTable();
        }
    }

    @Override
    public void actionRefresh(int mode) {
        int count = 0;
        int index = -1;
        int valueV = 0;
        int valueH = 0;

        if (mode == STableConstants.REFRESH_MODE_RELOAD) {
            count = moPaneAccounting.getTableGuiRowCount();
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        moPaneAccounting.clearTableRows();
        populateTable();

        mbFirstTime = true;
        focusTab();

        if (mode == STableConstants.REFRESH_MODE_RELOAD && count <= moPaneAccounting.getTableGuiRowCount()) {
            moPaneAccounting.validate();
            moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
            moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

            if (index < moPaneAccounting.getTableGuiRowCount() && index >= 0) {
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDetail) {
                actionDetail();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh(STableConstants.REFRESH_MODE_RESET);
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            boolean performed = false;
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            if (!performed) {
                if (toggleButton == jtbMoney) {
                    actionMoney();
                }
            }

            if (toggleButton == jtbRecordAdjYearEnd) {
                showRocordAdjustment();
            }
            else if (toggleButton == jtbRecordAdjAudit) {
                showRocordAdjustment();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }

    @Override
    public void valueChanged(javax.swing.event.ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            jlStatusRow.setText(moIntegerFormat.format(moPaneAccounting.getTable().getSelectedRow() + 1) + "/" + moIntegerFormat.format(moPaneAccounting.getTableGuiRowCount()));
        }
    }
}
