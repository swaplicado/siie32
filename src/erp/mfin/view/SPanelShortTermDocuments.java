/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.view;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STabFilterYear;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableUtilities;
import erp.mfin.data.SPanelShortTermDocumentsRow;
import erp.mfin.form.SDialogAccountingDetail;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import sa.lib.srv.SSrvConsts;

/**
 * Clase para visualizar movimientos contables que representan documentos por cobrar y por pagar a corto plazo, así como el detalle de los movimientos individuales que los integran.
 * @author Isabel Servín
 */
public class SPanelShortTermDocuments extends javax.swing.JPanel implements erp.lib.table.STableTabInterface, java.awt.event.ActionListener, javax.swing.event.ListSelectionListener {

    public static final String WITHOUT_REFERENCE = "(SIN REFERENCIA)";
    
    protected erp.client.SClientInterface miClient;
    protected java.lang.String msTabTitle;
    protected int mnTabType;
    protected int mnTabTypeAux01;

    protected java.text.DecimalFormat moIntegerFormat;
    protected erp.lib.table.STablePane moPaneAccounting;
    protected erp.lib.table.STabFilterYear moFilterYear;
    protected erp.mfin.form.SDialogAccountingDetail moDialogAccountingDetail;
    protected java.util.Vector<java.lang.Integer> mvSuscriptors;
    protected java.util.Vector<erp.lib.table.STableSetting> mvTableSettings;

    protected int mnYear;
    protected java.util.Date mtDateStart;
    protected java.util.Date mtDateEnd;
    protected javax.swing.JToggleButton[] majtbPeriods;
    protected boolean mbFirstTime;

    protected boolean mbShowRecordAdjYearEnd;
    protected boolean mbShowRecordAdjAudit;
    
    protected java.lang.String msAuxAccountId;

    /** Creates new form SPanelAccounting
     * @param client
     * @param tabTitle
     * @param auxType */
    public SPanelShortTermDocuments(erp.client.SClientInterface client, java.lang.String tabTitle, int auxType) {
        miClient = client;
        msTabTitle = tabTitle;
        mnTabType = SDataConstants.FINX_SHORT_TERM_DOCS;
        mnTabTypeAux01 = auxType;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgPeriods = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        jpPeriods = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jbDetail = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jtbPeriod01 = new javax.swing.JToggleButton();
        jtbPeriod02 = new javax.swing.JToggleButton();
        jtbPeriod03 = new javax.swing.JToggleButton();
        jtbPeriod04 = new javax.swing.JToggleButton();
        jtbPeriod05 = new javax.swing.JToggleButton();
        jtbPeriod06 = new javax.swing.JToggleButton();
        jtbPeriod07 = new javax.swing.JToggleButton();
        jtbPeriod08 = new javax.swing.JToggleButton();
        jtbPeriod09 = new javax.swing.JToggleButton();
        jtbPeriod10 = new javax.swing.JToggleButton();
        jtbPeriod11 = new javax.swing.JToggleButton();
        jtbPeriod12 = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        jtbRecordAdjYearEnd = new javax.swing.JToggleButton();
        jtbRecordAdjAudit = new javax.swing.JToggleButton();
        jpControls = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlStatusRow = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpFilters.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));
        jPanel1.add(jpFilters, java.awt.BorderLayout.WEST);

        jpPeriods.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator1);

        jbDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_kardex.gif"))); // NOI18N
        jbDetail.setToolTipText("Ver movimientos del período [Ctrl+K]");
        jbDetail.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPeriods.add(jbDetail);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator2);

        jbgPeriods.add(jtbPeriod01);
        jtbPeriod01.setText("01");
        jtbPeriod01.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod01.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod01);

        jbgPeriods.add(jtbPeriod02);
        jtbPeriod02.setText("02");
        jtbPeriod02.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod02.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod02);

        jbgPeriods.add(jtbPeriod03);
        jtbPeriod03.setText("03");
        jtbPeriod03.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod03.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod03);

        jbgPeriods.add(jtbPeriod04);
        jtbPeriod04.setText("04");
        jtbPeriod04.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod04.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod04);

        jbgPeriods.add(jtbPeriod05);
        jtbPeriod05.setText("05");
        jtbPeriod05.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod05.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod05);

        jbgPeriods.add(jtbPeriod06);
        jtbPeriod06.setText("06");
        jtbPeriod06.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod06.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod06);

        jbgPeriods.add(jtbPeriod07);
        jtbPeriod07.setText("07");
        jtbPeriod07.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod07.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod07);

        jbgPeriods.add(jtbPeriod08);
        jtbPeriod08.setText("08");
        jtbPeriod08.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod08.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod08);

        jbgPeriods.add(jtbPeriod09);
        jtbPeriod09.setText("09");
        jtbPeriod09.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod09.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod09);

        jbgPeriods.add(jtbPeriod10);
        jtbPeriod10.setText("10");
        jtbPeriod10.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod10.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod10);

        jbgPeriods.add(jtbPeriod11);
        jtbPeriod11.setText("11");
        jtbPeriod11.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod11.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod11);

        jbgPeriods.add(jtbPeriod12);
        jtbPeriod12.setText("12");
        jtbPeriod12.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod12.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod12);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator3);

        jtbRecordAdjYearEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_off.gif"))); // NOI18N
        jtbRecordAdjYearEnd.setSelected(true);
        jtbRecordAdjYearEnd.setToolTipText("Incluir ajustes de cierre");
        jtbRecordAdjYearEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjYearEnd.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjYearEnd);

        jtbRecordAdjAudit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_off.gif"))); // NOI18N
        jtbRecordAdjAudit.setSelected(true);
        jtbRecordAdjAudit.setToolTipText("Incluir ajustes de auditoria");
        jtbRecordAdjAudit.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjAudit.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjAudit);

        jPanel1.add(jpPeriods, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl + B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jpControls.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbRefresh);

        jPanel1.add(jpControls, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatusRow.setText("0/0");
        jlStatusRow.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel2.add(jlStatusRow);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        focusTab();
    }//GEN-LAST:event_formComponentShown

    private void initComponentsExtra() {
        int i = 0;
        int period = SLibTimeUtilities.digestYearMonth(miClient.getSessionXXX().getWorkingDate())[1];
        String[] months = SLibTimeUtilities.createMonthsOfYear(Locale.getDefault(), Calendar.LONG);
        STableColumnForm[] aoTableColumns;
        
        moIntegerFormat = new DecimalFormat("#,##0;-#,##0");

        mvSuscriptors = new Vector<>();
        mvTableSettings = new Vector<>();
        moPaneAccounting = new STablePane(miClient);
        moFilterYear = new STabFilterYear(miClient, this);
        moDialogAccountingDetail = new SDialogAccountingDetail(miClient, mnTabTypeAux01);
        msAuxAccountId = "";

        moPaneAccounting.setDoubleClickAction(this, "publicActionDetail");
        
        add(moPaneAccounting, BorderLayout.CENTER);

        jpFilters.add(moFilterYear);

        mnYear = miClient.getSessionXXX().getWorkingYear();
        mtDateStart = null;
        mtDateEnd = null;
        mbFirstTime = true;

        jtfSeek.setText("");

        majtbPeriods = new JToggleButton[12];
        majtbPeriods[0] = jtbPeriod01;
        majtbPeriods[1] = jtbPeriod02;
        majtbPeriods[2] = jtbPeriod03;
        majtbPeriods[3] = jtbPeriod04;
        majtbPeriods[4] = jtbPeriod05;
        majtbPeriods[5] = jtbPeriod06;
        majtbPeriods[6] = jtbPeriod07;
        majtbPeriods[7] = jtbPeriod08;
        majtbPeriods[8] = jtbPeriod09;
        majtbPeriods[9] = jtbPeriod10;
        majtbPeriods[10] = jtbPeriod11;
        majtbPeriods[11] = jtbPeriod12;

        for (i = 0; i < majtbPeriods.length; i++) {
            majtbPeriods[i].setToolTipText("Ver " + months[i]);
            majtbPeriods[i].addActionListener(this);
        }

        jtbRecordAdjYearEnd.addActionListener(this);
        jtbRecordAdjAudit.addActionListener(this);

        i = 0;
        
        aoTableColumns = new STableColumnForm[14];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Referencia contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial mon $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos mon $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos mon $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final mon $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T cambio", STableConstants.WIDTH_EXCHANGE_RATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda local", STableConstants.WIDTH_CURRENCY_KEY);

        mvSuscriptors.add(SDataConstants.FIN_ACC);
        mvSuscriptors.add(SDataConstants.FIN_REC);

        for (STableColumnForm col : aoTableColumns) {
            moPaneAccounting.addTableColumn(col);
        }
        
        jbDetail.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtfSeek.addActionListener(this);

        jbgPeriods.setSelected(majtbPeriods[period - 1].getModel(), true);
        setPeriod(period);
        showRocordAdjustment();

        SFormUtilities.createActionMap(this, this, "publicActionDetail", "viewDetail", KeyEvent.VK_K, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionRefresh", int.class, STableConstants.REFRESH_MODE_RESET, "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    }

    private void focusTab() {
        if (mbFirstTime = true) {
            mbFirstTime = false;

            for (JToggleButton tb : majtbPeriods) {
                if (tb.isSelected()) {
                    tb.requestFocus();
                    break;
                }
            }
        }
    }

    private void setYear(int year) {
        int period = SLibTimeUtilities.digestYearMonth(mtDateStart)[1];

        mnYear = year;
        mtDateStart = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        mtDateEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        populateTable();
    }

    private void setPeriod(int period) {
        mtDateStart = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        mtDateEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        populateTable();
    }

    private void showRocordAdjustment() {
        mbShowRecordAdjYearEnd = jtbRecordAdjYearEnd.isSelected();
        mbShowRecordAdjAudit = jtbRecordAdjAudit.isSelected();
        populateTable();
    }

    private void actionDetail() {
        int[] currencyKey = null;
        STableRow row = moPaneAccounting.getSelectedTableRow();

        if (row != null && !row.getIsSummary()) {
            if (row.getPrimaryKey() == null) {
                miClient.showMsgBoxInformation("No se pueden mostrar movimientos de este registro.");
            }
            else {
                moDialogAccountingDetail.refreshAccountingDetail();
                moDialogAccountingDetail.showAccountingDetail(row.getPrimaryKey(), mnYear, mtDateStart, mtDateEnd, 
                        new int[] { ((SPanelShortTermDocumentsRow) row).getCurrencyId() }, mbShowRecordAdjYearEnd, mbShowRecordAdjAudit);
            }
        }
    }
    
    @SuppressWarnings("unchecked")
    private boolean populateTableAccounting() throws java.lang.Exception {
        boolean bIsDataAvailable = false;
        String sSql;
        String sSqlWhere;
        String sFormatAccountId = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Vector<Object>> vQueryRows;
        Vector<Integer> vLevels = SDataUtilities.getAccountLevels(sFormatAccountId);
        SPanelShortTermDocumentsRow oAccountingRow;
        SServerRequest oRequest;
        SServerResponse oResponse;
        
        sSqlWhere = (!mbShowRecordAdjYearEnd ? " AND r.b_adj_year = 0 " : "") +
                    (!mbShowRecordAdjAudit ? " AND r.b_adj_audit = 0 " : "");

        // I. Read all accounting moves belonging to current period:
        
        sSql = "SELECT acc.id_acc, acc.acc, IF(re.ref = '', '" + WITHOUT_REFERENCE + "', re.ref) AS ref, " +
                    "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "', re.debit_cur - re.credit_cur, 0)) AS f_si_cur, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit_cur, 0))  AS debit_cur, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.credit_cur, 0)) AS credit_cur, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit_cur - re.credit_cur, 0)) AS f_sf_cur, " +
                    "c.cur_key, " +
                    "re.exc_rate, " +
                    "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "', re.debit - re.credit, 0)) AS f_si, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit, 0))  AS debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.credit, 0)) AS credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit - re.credit, 0)) AS f_sf, " +
                    "'MXN' AS mon_loc, " +
                    "c.id_cur " +
                    "FROM fin_rec AS r " +
                    "INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                    "INNER JOIN fin_acc AS m_acc ON " +
                    "CONCAT(LEFT(re.fid_acc, " + (vLevels.get(1) - 1) + "), '" + sFormatAccountId.substring(vLevels.get(1) - 1) + "') = m_acc.id_acc " +
                    "INNER JOIN fin_acc AS acc ON " +
                    "re.fk_acc = acc.pk_acc " +
                    "INNER JOIN erp.fins_tp_acc_spe AS spe ON " +
                    "m_acc.fid_tp_acc_spe = spe.id_tp_acc_spe " +
                    "INNER JOIN erp.cfgu_cur AS c ON " +
                    "re.fid_cur = c.id_cur " +
                    "WHERE r.id_year = " + mnYear + " " +
                    "AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "' " +
                    "AND spe.id_tp_acc_spe = " + mnTabTypeAux01 + " " +
                    "AND NOT r.b_del AND NOT re.b_del " +
                    sSqlWhere +
                    "GROUP BY re.fid_acc, re.ref, re.fid_cur;";
        
        oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
            for (Vector<Object> queryRow : vQueryRows) {
                bIsDataAvailable = true;

                oAccountingRow = new SPanelShortTermDocumentsRow();
                oAccountingRow.setPrimaryKey(new Object[] { (String) queryRow.get(0) });
                oAccountingRow.setPkAccountId((String) queryRow.get(0));
                oAccountingRow.setAccount((String) queryRow.get(1));
                oAccountingRow.setReference((String) queryRow.get(2));
                oAccountingRow.setOpeningBalanceCy(((Number) queryRow.get(3)).doubleValue());
                oAccountingRow.setDebitCy(((Number) queryRow.get(4)).doubleValue());
                oAccountingRow.setCreditCy(((Number) queryRow.get(5)).doubleValue());
                oAccountingRow.setClosingBalanceCy(((Number) queryRow.get(6)).doubleValue());
                oAccountingRow.setCurrencyKey((String) queryRow.get(7));
                oAccountingRow.setExchangeRate(((Number) queryRow.get(8)).doubleValue());
                oAccountingRow.setOpeningBalance(((Number) queryRow.get(9)).doubleValue());
                oAccountingRow.setDebit(((Number) queryRow.get(10)).doubleValue());
                oAccountingRow.setCredit(((Number) queryRow.get(11)).doubleValue());
                oAccountingRow.setClosingBalance(((Number) queryRow.get(12)).doubleValue());
                oAccountingRow.setCurrencyLocalKey((String) queryRow.get(13));
                oAccountingRow.setCurrencyId(((Number) queryRow.get(14)).intValue());
                
                oAccountingRow.prepareTableRow();
                moPaneAccounting.addTableRow(oAccountingRow);
            }
        }
        
        return bIsDataAvailable;
    }

    private void populateTable() {
        int index = -1;
        int valueV = 0;
        int valueH = 0;
        boolean isDataAvailable = false;
        Cursor cursor = getCursor();

        if (moPaneAccounting.getTable() != null) {
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        jlStatusRow.setText("0/0");
        moPaneAccounting.clearTableRows();
        moPaneAccounting.createTable(this);

        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            isDataAvailable = populateTableAccounting();    
        }
        catch(java.lang.Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            if (isDataAvailable) {
                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);

                moPaneAccounting.validate();
                moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
                moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

                if (index == -1) {
                    index = 0;
                }

                if (index >= moPaneAccounting.getTableGuiRowCount()) {
                    index = moPaneAccounting.getTableGuiRowCount() - 1;
                }
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }

            setCursor(cursor);
        }
    }

    public void publicActionDetail() {
        actionDetail();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbDetail;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.ButtonGroup jbgPeriods;
    private javax.swing.JLabel jlStatusRow;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpPeriods;
    private javax.swing.JToggleButton jtbPeriod01;
    private javax.swing.JToggleButton jtbPeriod02;
    private javax.swing.JToggleButton jtbPeriod03;
    private javax.swing.JToggleButton jtbPeriod04;
    private javax.swing.JToggleButton jtbPeriod05;
    private javax.swing.JToggleButton jtbPeriod06;
    private javax.swing.JToggleButton jtbPeriod07;
    private javax.swing.JToggleButton jtbPeriod08;
    private javax.swing.JToggleButton jtbPeriod09;
    private javax.swing.JToggleButton jtbPeriod10;
    private javax.swing.JToggleButton jtbPeriod11;
    private javax.swing.JToggleButton jtbPeriod12;
    private javax.swing.JToggleButton jtbRecordAdjAudit;
    private javax.swing.JToggleButton jtbRecordAdjYearEnd;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneAccounting, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneAccounting, msTabTitle);
        }
    }

    @Override
    public int getTabType() {
        return mnTabType;
    }

    @Override
    public int getTabTypeAux01() {
        return mnTabTypeAux01;
    }

    @Override
    public int getTabTypeAux02() {
        return 0;
    }

    @Override
    public java.util.Vector<java.lang.Integer> getSuscriptors() {
        return mvSuscriptors;
    }

    @Override
    public java.util.Vector<erp.lib.table.STableSetting> getTableSettings() {
        return mvTableSettings;
    }

    @Override
    public void addSetting(erp.lib.table.STableSetting setting) {
        boolean add = true;
        erp.lib.table.STableSetting settingAux;

        for (int i = 0; i < mvTableSettings.size(); i++) {
            settingAux = (erp.lib.table.STableSetting) mvTableSettings.get(i);
            if (settingAux.getType() == setting.getType()) {
                add = false;
                mvTableSettings.set(i, setting);
                break;
            }
        }

        if (add) {
            mvTableSettings.add(setting);
        }
    }

    @Override
    public void updateSetting(erp.lib.table.STableSetting setting) {
        addSetting(setting);

        if (setting.getType() == STableConstants.SETTING_FILTER_YEAR) {
            setYear((Integer) setting.getSetting());
        }
        else {
            populateTable();
        }
    }

    @Override
    public void actionRefresh(int mode) {
        int count = 0;
        int index = -1;
        int valueV = 0;
        int valueH = 0;

        if (mode == STableConstants.REFRESH_MODE_RELOAD) {
            count = moPaneAccounting.getTableGuiRowCount();
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        moPaneAccounting.clearTableRows();
        populateTable();

        mbFirstTime = true;
        focusTab();

        if (mode == STableConstants.REFRESH_MODE_RELOAD && count <= moPaneAccounting.getTableGuiRowCount()) {
            moPaneAccounting.validate();
            moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
            moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

            if (index < moPaneAccounting.getTableGuiRowCount() && index >= 0) {
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDetail) {
                actionDetail();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh(STableConstants.REFRESH_MODE_RESET);
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            for (int i = 0; i < majtbPeriods.length; i++) {
                if (toggleButton == majtbPeriods[i]) {
                    setPeriod(i + 1);
                    break;
                }
            }
            if (toggleButton == jtbRecordAdjYearEnd) {
                showRocordAdjustment();
            }
            else if (toggleButton == jtbRecordAdjAudit) {
                showRocordAdjustment();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }

    @Override
    public void valueChanged(javax.swing.event.ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            jlStatusRow.setText(moIntegerFormat.format(moPaneAccounting.getTable().getSelectedRow() + 1) + "/" + moIntegerFormat.format(moPaneAccounting.getTableGuiRowCount()));
        }
    }
}
