/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.view;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STabFilterYear;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRow;
import erp.lib.table.STableSetting;
import erp.lib.table.STableUtilities;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SPanelAccountingRow;
import erp.mfin.data.SPanelSubsystemEntityCashRow;
import erp.mfin.data.SPanelSubsystemEntityRow;
import erp.mfin.data.SPanelSubsystemRow;
import erp.mfin.data.SPanelSubsystemTaxRow;
import erp.mfin.form.SDialogAccountingDetail;
import erp.mfin.form.SDialogRepBizPartnerAccountingMoves;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Sergio Flores
 */
public class SPanelAccounting extends javax.swing.JPanel implements erp.lib.table.STableTabInterface, java.awt.event.ActionListener, javax.swing.event.ListSelectionListener {

    protected erp.client.SClientInterface miClient;
    protected java.lang.String msTabTitle;
    protected int mnTabType;
    protected int mnTabTypeAux01;

    protected java.text.DecimalFormat moIntegerFormat;
    protected erp.lib.table.STablePane moPaneAccounting;
    protected erp.lib.table.STabFilterYear moFilterYear;
    protected erp.mfin.form.SDialogAccountingDetail moDialogAccountingDetail;
    protected erp.mfin.form.SDialogRepBizPartnerAccountingMoves moDialogRepBizPartnerAccountingMoves;
    protected java.util.Vector<java.lang.Integer> mvSuscriptors;
    protected java.util.Vector<erp.lib.table.STableSetting> mvTableSettings;

    protected int mnYear;
    protected java.util.Date mtDateStart;
    protected java.util.Date mtDateEnd;
    protected javax.swing.JToggleButton[] majtbPeriods;
    protected boolean mbFirstTime;

    protected boolean mbShowRecordAdjYearEnd;
    protected boolean mbShowRecordAdjAudit;
    
    protected java.lang.String msAuxAccountId;

    /** Creates new form SPanelAccounting */
    public SPanelAccounting(erp.client.SClientInterface client, java.lang.String tabTitle, int auxType) {
        miClient = client;
        msTabTitle = tabTitle;
        mnTabType = SDataConstants.FINX_ACCOUNTING;
        mnTabTypeAux01 = auxType;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgPeriods = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jpFilters = new javax.swing.JPanel();
        jpPeriods = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jbDetail = new javax.swing.JButton();
        jbAccountingMoves = new javax.swing.JButton();
        jtbMoney = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        jtbPeriod01 = new javax.swing.JToggleButton();
        jtbPeriod02 = new javax.swing.JToggleButton();
        jtbPeriod03 = new javax.swing.JToggleButton();
        jtbPeriod04 = new javax.swing.JToggleButton();
        jtbPeriod05 = new javax.swing.JToggleButton();
        jtbPeriod06 = new javax.swing.JToggleButton();
        jtbPeriod07 = new javax.swing.JToggleButton();
        jtbPeriod08 = new javax.swing.JToggleButton();
        jtbPeriod09 = new javax.swing.JToggleButton();
        jtbPeriod10 = new javax.swing.JToggleButton();
        jtbPeriod11 = new javax.swing.JToggleButton();
        jtbPeriod12 = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JSeparator();
        jtbRecordAdjYearEnd = new javax.swing.JToggleButton();
        jtbRecordAdjAudit = new javax.swing.JToggleButton();
        jpControls = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlStatusRow = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpFilters.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));
        jPanel1.add(jpFilters, java.awt.BorderLayout.WEST);

        jpPeriods.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 0));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator1);

        jbDetail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_kardex.gif"))); // NOI18N
        jbDetail.setToolTipText("Ver movimientos del per√≠odo [Ctrl+K]");
        jbDetail.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPeriods.add(jbDetail);

        jbAccountingMoves.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_query_bp.gif"))); // NOI18N
        jbAccountingMoves.setToolTipText("Ver movimientos contables [Ctrl+M]");
        jbAccountingMoves.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPeriods.add(jbAccountingMoves);

        jtbMoney.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_money_off.gif"))); // NOI18N
        jtbMoney.setToolTipText("Cambiar moneda");
        jtbMoney.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbMoney.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_money_on.gif"))); // NOI18N
        jpPeriods.add(jtbMoney);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator2);

        jbgPeriods.add(jtbPeriod01);
        jtbPeriod01.setText("01");
        jtbPeriod01.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod01.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod01);

        jbgPeriods.add(jtbPeriod02);
        jtbPeriod02.setText("02");
        jtbPeriod02.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod02.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod02);

        jbgPeriods.add(jtbPeriod03);
        jtbPeriod03.setText("03");
        jtbPeriod03.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod03.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod03);

        jbgPeriods.add(jtbPeriod04);
        jtbPeriod04.setText("04");
        jtbPeriod04.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod04.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod04);

        jbgPeriods.add(jtbPeriod05);
        jtbPeriod05.setText("05");
        jtbPeriod05.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod05.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod05);

        jbgPeriods.add(jtbPeriod06);
        jtbPeriod06.setText("06");
        jtbPeriod06.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod06.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod06);

        jbgPeriods.add(jtbPeriod07);
        jtbPeriod07.setText("07");
        jtbPeriod07.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod07.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod07);

        jbgPeriods.add(jtbPeriod08);
        jtbPeriod08.setText("08");
        jtbPeriod08.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod08.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod08);

        jbgPeriods.add(jtbPeriod09);
        jtbPeriod09.setText("09");
        jtbPeriod09.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod09.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod09);

        jbgPeriods.add(jtbPeriod10);
        jtbPeriod10.setText("10");
        jtbPeriod10.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod10.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod10);

        jbgPeriods.add(jtbPeriod11);
        jtbPeriod11.setText("11");
        jtbPeriod11.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod11.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod11);

        jbgPeriods.add(jtbPeriod12);
        jtbPeriod12.setText("12");
        jtbPeriod12.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jtbPeriod12.setPreferredSize(new java.awt.Dimension(40, 23));
        jpPeriods.add(jtbPeriod12);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(3, 23));
        jpPeriods.add(jSeparator3);

        jtbRecordAdjYearEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_off.gif"))); // NOI18N
        jtbRecordAdjYearEnd.setSelected(true);
        jtbRecordAdjYearEnd.setToolTipText("Incluir ajustes de cierre");
        jtbRecordAdjYearEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjYearEnd.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_year_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjYearEnd);

        jtbRecordAdjAudit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_off.gif"))); // NOI18N
        jtbRecordAdjAudit.setSelected(true);
        jtbRecordAdjAudit.setToolTipText("Incluir ajustes de auditoria");
        jtbRecordAdjAudit.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbRecordAdjAudit.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_adj_audit_on.gif"))); // NOI18N
        jpPeriods.add(jtbRecordAdjAudit);

        jPanel1.add(jpPeriods, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl + B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jpControls.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jpControls.add(jbRefresh);

        jPanel1.add(jpControls, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatusRow.setText("0/0");
        jlStatusRow.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel2.add(jlStatusRow);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        focusTab();
    }//GEN-LAST:event_formComponentShown

    private void initComponentsExtra() {
        int i = 0;
        int period = SLibTimeUtilities.digestYearMonth(miClient.getSessionXXX().getWorkingDate())[1];
        int columnWidth = 0;
        String column = "";
        String[] months = SLibTimeUtilities.createMonthsOfYear(Locale.getDefault(), Calendar.LONG);
        STableColumnForm[] aoTableColumns = null;

        moIntegerFormat = new DecimalFormat("#,##0;-#,##0");

        mvSuscriptors = new Vector<Integer>();
        mvTableSettings = new Vector<STableSetting>();
        moPaneAccounting = new STablePane(miClient);
        moFilterYear = new STabFilterYear(miClient, this);
        moDialogAccountingDetail = new SDialogAccountingDetail(miClient, mnTabTypeAux01);
        moDialogRepBizPartnerAccountingMoves = null;
        msAuxAccountId = "";

        if (mnTabTypeAux01 != SDataConstants.FINX_ACCOUNTING_ALL) {
            moPaneAccounting.setDoubleClickAction(this, "publicActionDetail");
        }
        add(moPaneAccounting, BorderLayout.CENTER);

        jpFilters.add(moFilterYear);

        mnYear = miClient.getSessionXXX().getWorkingYear();
        mtDateStart = null;
        mtDateEnd = null;
        mbFirstTime = true;

        jtfSeek.setText("");

        majtbPeriods = new JToggleButton[12];
        majtbPeriods[0] = jtbPeriod01;
        majtbPeriods[1] = jtbPeriod02;
        majtbPeriods[2] = jtbPeriod03;
        majtbPeriods[3] = jtbPeriod04;
        majtbPeriods[4] = jtbPeriod05;
        majtbPeriods[5] = jtbPeriod06;
        majtbPeriods[6] = jtbPeriod07;
        majtbPeriods[7] = jtbPeriod08;
        majtbPeriods[8] = jtbPeriod09;
        majtbPeriods[9] = jtbPeriod10;
        majtbPeriods[10] = jtbPeriod11;
        majtbPeriods[11] = jtbPeriod12;

        for (i = 0; i < majtbPeriods.length; i++) {
            majtbPeriods[i].setToolTipText("Ver " + months[i]);
            majtbPeriods[i].addActionListener(this);
        }

        jtbRecordAdjYearEnd.addActionListener(this);
        jtbRecordAdjAudit.addActionListener(this);

        jbAccountingMoves.setEnabled(false);

        i = 0;
        switch (mnTabTypeAux01) {
            case SDataConstants.FINX_ACCOUNTING:
            case SDataConstants.FINX_ACCOUNTING_ALL:
                aoTableColumns = new STableColumnForm[11];
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
                aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererStyle());
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fin. vigencia", STableConstants.WIDTH_DATE);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Activa", STableConstants.WIDTH_BOOLEAN);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);

                mvSuscriptors.add(SDataConstants.FIN_ACC);
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                switch (mnTabTypeAux01) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                        column = "Caja";
                        mvSuscriptors.add(SDataConstants.CFGU_COB_ENT);
                        mvSuscriptors.add(SDataConstants.FINX_ACC_CASH_CASH);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                        column = "Cuenta bancaria";
                        mvSuscriptors.add(SDataConstants.CFGU_COB_ENT);
                        mvSuscriptors.add(SDataConstants.FINX_ACC_CASH_BANK);
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[10];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, column, 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda " + column.toLowerCase(), STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                aoTableColumns = new STableColumnForm[9];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Inventario", 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);

                mvSuscriptors.add(SDataConstants.CFGU_COB_ENT);
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
            case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
            case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                switch (mnTabTypeAux01) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                        column = "Cliente";
                        columnWidth = 300;
                        mvSuscriptors.add(SDataConstants.BPSU_BP);
                        mvSuscriptors.add(SDataConstants.BPSX_BP_CUS);
                        moDialogRepBizPartnerAccountingMoves = new SDialogRepBizPartnerAccountingMoves(miClient, SDataConstantsSys.BPSS_CT_BP_CUS);
                        jbAccountingMoves.setEnabled(true);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                        column = "Proveedor";
                        columnWidth = 300;
                        mvSuscriptors.add(SDataConstants.BPSU_BP);
                        mvSuscriptors.add(SDataConstants.BPSX_BP_SUP);
                        moDialogRepBizPartnerAccountingMoves = new SDialogRepBizPartnerAccountingMoves(miClient, SDataConstantsSys.BPSS_CT_BP_SUP);
                        jbAccountingMoves.setEnabled(true);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                        column = "Deudor diversos";
                        columnWidth = 300;
                        mvSuscriptors.add(SDataConstants.BPSU_BP);
                        mvSuscriptors.add(SDataConstants.BPSX_BP_DBR);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        column = "Acreedor diverso";
                        columnWidth = 300;
                        mvSuscriptors.add(SDataConstants.BPSU_BP);
                        mvSuscriptors.add(SDataConstants.BPSX_BP_CDR);
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                        column = "Ejercicio";
                        columnWidth = STableConstants.WIDTH_YEAR;
                        mvSuscriptors.add(SDataConstants.FIN_YEAR);
                        mvSuscriptors.add(SDataConstants.FIN_YEAR_PER);
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[7];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, column, columnWidth);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
            case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                switch (mnTabTypeAux01) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                        column = "Impuesto a favor";
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                        column = "Impuesto a cargo";
                        break;
                    default:
                }

                aoTableColumns = new STableColumnForm[8];
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Impuesto b√°sico", 200);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, column, 150);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo inicial $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo final $", STableConstants.WIDTH_VALUE_2X);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
                aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);

                mvSuscriptors.add(SDataConstants.FINU_TAX_BAS);
                mvSuscriptors.add(SDataConstants.FINU_TAX);
                break;

            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        mvSuscriptors.add(SDataConstants.FIN_REC);
        mvSuscriptors.add(SDataConstants.TRN_DPS);
        mvSuscriptors.add(SDataConstants.TRN_DIOG);
        mvSuscriptors.add(SDataConstants.TRN_DSM);

        for (STableColumnForm col : aoTableColumns) {
            moPaneAccounting.addTableColumn(col);
        }
        
        if (mnTabTypeAux01 == SDataConstants.FINX_ACCOUNTING_ALL) {
            jbDetail.setEnabled(false);
        }

        jbDetail.addActionListener(this);
        jbAccountingMoves.addActionListener(this);
        jbSeek.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jbRefresh.addActionListener(this);
        jtbMoney.addActionListener(this);
        jtfSeek.addActionListener(this);

        jbgPeriods.setSelected(majtbPeriods[period - 1].getModel(), true);
        setPeriod(period);
        showRocordAdjustment();

        SFormUtilities.createActionMap(this, this, "publicActionDetail", "viewDetail", KeyEvent.VK_K, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "publicActionAccountingMoves", "accountingMoves", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this, this, "actionRefresh", int.class, STableConstants.REFRESH_MODE_RESET, "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);
    }

    private void focusTab() {
        if (mbFirstTime = true) {
            mbFirstTime = false;

            for (JToggleButton tb : majtbPeriods) {
                if (tb.isSelected()) {
                    tb.requestFocus();
                    break;
                }
            }
        }
    }

    private void setYear(int year) {
        int period = SLibTimeUtilities.digestYearMonth(mtDateStart)[1];

        mnYear = year;
        mtDateStart = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        mtDateEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        populateTable();
    }

    private void setPeriod(int period) {
        mtDateStart = SLibTimeUtilities.getBeginOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        mtDateEnd = SLibTimeUtilities.getEndOfMonth(SLibTimeUtilities.createDate(mnYear, period));
        populateTable();
    }

    private void showRocordAdjustment() {
        mbShowRecordAdjYearEnd = jtbRecordAdjYearEnd.isSelected();
        mbShowRecordAdjAudit = jtbRecordAdjAudit.isSelected();
        populateTable();
    }

    private void actionDetail() {
        int[] currencyKey = null;
        STableRow row = moPaneAccounting.getSelectedTableRow();

        if (row != null && !row.getIsSummary()) {
            if (row.getPrimaryKey() == null) {
                miClient.showMsgBoxInformation("No se pueden mostrar movimientos de este registro.");
            }
            else {
                if (jtbMoney.isSelected()) {
                    switch (mnTabTypeAux01) {
                        case SDataConstants.FINX_ACCOUNTING:
                        case SDataConstants.FINX_ACCOUNTING_ALL:
                            currencyKey = new int[] { ((SPanelAccountingRow) row).getFkCurrencyId() };
                            break;

                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                            currencyKey = new int[] { ((SPanelSubsystemEntityCashRow) row).getFkCurrencyId() };
                            break;

                        case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                            currencyKey = new int[] { ((SPanelSubsystemEntityRow) row).getFkCurrencyId() };
                            break;

                        case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                            currencyKey = new int[] { ((SPanelSubsystemRow) row).getFkCurrencyId() };
                            break;

                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                            currencyKey = new int[] { ((SPanelSubsystemTaxRow) row).getFkCurrencyId() };
                            break;

                        default:
                    }
                }

                moDialogAccountingDetail.refreshAccountingDetail();
                moDialogAccountingDetail.showAccountingDetail(row.getPrimaryKey(), mnYear, mtDateStart, mtDateEnd, currencyKey, null, mbShowRecordAdjYearEnd, mbShowRecordAdjAudit);
            }
        }
    }

    private void actionMoney() {
        populateTable();
    }

    private void actionAccountingMoves() {
        STableRow row = null;

        if (jbAccountingMoves.isEnabled()) {
            if (moDialogRepBizPartnerAccountingMoves == null) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_FORM);
            }
            else {
                row = moPaneAccounting.getSelectedTableRow();

                if (row != null && !row.getIsSummary()) {
                    if (row.getPrimaryKey() == null) {
                        miClient.showMsgBoxInformation("No se pueden mostrar movimientos de este registro.");
                    }
                    else {
                        moDialogRepBizPartnerAccountingMoves.setBizPartnerId(((int[]) row.getPrimaryKey())[0]);
                        moDialogRepBizPartnerAccountingMoves.initForm();
                        moDialogRepBizPartnerAccountingMoves.setVisible(true);
                    }
                }
            }
        }
    }

    private java.lang.String createParamSqlAccount() {
        int len = 0;
        String sql = "";
        String sSqlWhere = "";
        String account = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Integer> levels = SDataUtilities.getAccountLevels(account);

        sSqlWhere = (!jtbRecordAdjYearEnd.isSelected() ? " AND r.b_adj_year = 0 " : "") +
                    (!jtbRecordAdjAudit.isSelected() ? " AND r.b_adj_audit = 0 " : "");

        for (int i = 1; i <= miClient.getSessionXXX().getParamsErp().getDeepAccounts(); i++) {
            len = i < levels.size() ? levels.get(i) - 1 : account.length();

            /*
             * 'a' stands for account
             * 'am' stands for major account
             */

            sql += (sql.length() == 0 ? "" : "UNION ") +
                    "SELECT " + ("CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')") + " AS f_id_acc, " +
                    "re.fid_acc, am.deep, am.fid_tp_acc_sys, am.fid_tp_acc_r, " + i + " AS f_lev, " +
                    "(SELECT a.acc FROM fin_acc AS a WHERE a.id_acc = CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "')) AS f_acc, " +
                    "a.dt_start, a.dt_end_n, a.b_act, a.b_del, " +
                    "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                    "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, " +
                    "IF(" + i + " = 1, " + STableConstants.STYLE_BOLD + ", IF(" + i + " < " + levels.size() + " AND " + i + " < am.deep, " + STableConstants.STYLE_ITALIC + ", " + STableConstants.UNDEFINED + ")) AS f_style, " +
                    "COUNT(*) AS f_count, " +
                    "SUM(CASE WHEN r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + mnYear + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "' AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_acc AS a ON " +
                    "a.id_acc = re.fid_acc " +
                    "INNER JOIN fin_acc AS am ON " +
                    "am.id_acc = CONCAT(LEFT(re.fid_acc, " + (levels.get(1) - 1) + "), '" + account.substring(levels.get(1) - 1) + "') " +
                    "GROUP BY " + ("CONCAT(LEFT(re.fid_acc, " + len + "), '" + account.substring(len) + "') ");
        }

        sql += "ORDER BY f_id_acc, f_lev ";

        return sql;
    }
    
    private java.lang.String createParamSqlAccountSubsystem(final int accountSubsytemType) {
        return createParamSqlAccountSubsystem(SLibConstants.UNDEFINED, accountSubsytemType);
    }
    
    private java.lang.String createParamSqlAccountSubsystem(final int accountType, final int accountSubsytemType) {
        String sSql = "";
        String sSqlWhere = "";
        String sCur = "";
        String sSelect = "";
        String sGroupBy = "";
        String sOrderBy = "";
        
        sCur = jtbMoney.isSelected() ? "_cur" : "";

        sSqlWhere = (!mbShowRecordAdjYearEnd ? " AND b_adj_year = 0 " : "") +
                    (!mbShowRecordAdjAudit ? " AND b_adj_audit = 0 " : "");

        if (accountType != SLibConstants.UNDEFINED) {
            sSql += "SELECT " +
                    "i.id_item, IF(LENGTH(i.item_short) = 0, i.item, i.item_short) AS f_item, i.item_key, " +
                    "SUM(CASE WHEN r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.debit ELSE 0 END) - " +
                    "SUM(CASE WHEN r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.credit ELSE 0 END) AS f_ob, " +
                    "SUM(CASE WHEN r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.debit ELSE 0 END) AS f_dbt, " +
                    "SUM(CASE WHEN r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' THEN re.credit ELSE 0 END) AS f_cdt " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND " +
                    "r.id_year = " + mnYear + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "' AND r.b_del = 0 AND re.b_del = 0 " +
                    (msAuxAccountId.isEmpty() ? "" : " AND re.fid_acc = '" + msAuxAccountId + "' ") + sSqlWhere +
                    "LEFT OUTER JOIN erp.itmu_item AS i ON " +
                    "re.fid_item_n = i.id_item " +
                    "GROUP BY i.id_item, i.item, i.item_key " +
                    "ORDER BY " +
                    (miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() == SDataConstantsSys.CFGS_TP_SORT_KEY_NAME ?
                    "i.item_key, f_item, i.id_item " :
                    "f_item, i.item_key, i.id_item ");
        }
        else {
            switch (accountSubsytemType) {
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    sSelect = "e.id_cob, e.id_ent, bb.bpb, e.ent, e.code, ce.cur_key, e.b_del";
                    sGroupBy = "e.id_cob, e.id_ent, bb.bpb, e.ent, e.code, ce.cur_key, e.b_del";
                    sOrderBy = "bb.bpb, e.id_cob, e.ent, e.id_ent";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                    sSelect = "e.id_cob, e.id_ent, bb.bpb, e.ent, e.code, e.b_del";
                    sGroupBy = "e.id_cob, e.id_ent, bb.bpb, e.ent, e.code, e.b_del";
                    sOrderBy = "bb.bpb, e.id_cob, e.ent, e.id_ent";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                    sSelect = "b.id_bp, b.bp, b.b_del";
                    sGroupBy = "b.id_bp, b.bp, b.b_del";
                    sOrderBy = "b.bp, b.id_bp";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                    sSelect = "y.id_year, CONVERT(y.id_year, CHAR(4)) AS f_year, y.b_del";
                    sGroupBy = "y.id_year, y.b_del";
                    sOrderBy = "y.id_year";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                    sSelect = "t.id_tax_bas, t.id_tax, tb.tax_bas, t.tax, t.b_del";
                    sGroupBy = "t.id_tax_bas, t.id_tax, tb.tax_bas, t.tax, t.b_del";
                    sOrderBy = "tb.tax_bas, t.id_tax_bas, t.tax, t.id_tax";
                    break;
                case SDataConstantsSys.FINS_TP_ACC_SYS_PUR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_PUR_ADJ:
                    break;

                default:
            }

            // II. Read all accounting moves belonging to current period:

            sSql = "SELECT " + sSelect + ", " +
                    (jtbMoney.isSelected() ? "c.id_cur AS f_id_cur, c.cur_key AS f_cur_key, " :
                        "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                        "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, ") +
                    "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS f_si, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit" + sCur + ", 0)) AS f_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.credit" + sCur + ", 0)) AS f_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS f_sf " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = " + mnYear + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "' AND " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    (msAuxAccountId.isEmpty() ? "" : " AND re.fid_acc = '" + msAuxAccountId + "' ") +
                    "INNER JOIN erp.cfgu_cur AS c ON " +
                    "re.fid_cur = c.id_cur " +
                    "INNER JOIN fin_acc AS a ON " +
                    "re.fid_acc = a.id_acc ";

            switch (accountSubsytemType) {
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    switch (accountSubsytemType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1] + " ";
                            break;
                        default:
                    }

                    sSql += "INNER JOIN erp.cfgu_cob_ent AS e ON " +
                            "re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                            "INNER JOIN erp.bpsu_bpb AS bb ON " +
                            "e.id_cob = bb.id_bpb " +
                            "INNER JOIN fin_acc_cash AS ac ON " +
                            "e.id_cob = ac.id_cob AND e.id_ent = ac.id_acc_cash " +
                            "INNER JOIN erp.cfgu_cur AS ce ON " +
                            "ac.fid_cur = ce.id_cur ";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                    sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[0] + " " +
                            "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[1] + " " +
                            "LEFT OUTER JOIN erp.cfgu_cob_ent AS e ON " +
                            "re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                            "LEFT OUTER JOIN erp.bpsu_bpb AS bb ON " +
                            "e.id_cob = bb.id_bpb ";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                    switch (accountSubsytemType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                            sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1] + " ";
                            break;
                        default:
                    }

                    sSql += "INNER JOIN erp.bpsu_bp AS b ON " +
                            "re.fid_bp_nr = b.id_bp ";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                    sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_CT_SYS_MOV_PROF + " " +
                            "LEFT OUTER JOIN fin_year AS y ON " +
                            "re.fid_year_n = y.id_year ";
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                    sSql += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_CT_SYS_MOV_TAX + " ";

                    switch (accountSubsytemType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                            sSql += "AND re.fid_tp_sys_mov_xxx in (" +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT_PEND[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT_PEND_ADV[1] + ") ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                            sSql += "AND re.fid_tp_sys_mov_xxx in (" +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND_ADV[1] + ") ";
                            break;
                        default:
                    }

                    sSql += "LEFT OUTER JOIN erp.finu_tax AS t ON " +
                            "re.fid_tax_bas_n = t.id_tax_bas AND re.fid_tax_n = t.id_tax " +
                            "LEFT OUTER JOIN erp.finu_tax_bas AS tb ON " +
                            "t.id_tax_bas = tb.id_tax_bas ";
                    break;

                default:
            }

            sSql += "GROUP BY " + sGroupBy +
                    (jtbMoney.isSelected() ? ", c.id_cur, c.cur_key " : " ") +
                    "ORDER BY " + sOrderBy +
                    (jtbMoney.isSelected() ? ", c.cur_key, c.id_cur " : " ");
        }
        return sSql;
    }

    @SuppressWarnings("unchecked")
    private boolean populateTableAccountingAll() throws java.lang.Exception {
        int nDeep = 0;
        int nLevel = 0;
        int accountType = 0;
        int accountSubsytemType = 0;
        double dOpeningBalance = 0;
        double dOpeningBalanceTotal = 0;
        double dDebit = 0;
        double dDebitTotal = 0;
        double dCredit = 0;
        double dCreditTotal = 0;
        boolean bIsDataAvailable = false;
        String sSql = "";
        String sAccountId = "";
        Vector<Vector<Object>> vQueryRows = null;
        SPanelAccountingRow oAccountingRow = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;
        
        
        // I. Read all active accounts belonging to current period:

        sSql = createParamSqlAccount();

        oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
            for (Vector<Object> queryRow : vQueryRows) {
                bIsDataAvailable = true;
                
                nDeep = ((Number) queryRow.get(2)).intValue();
                accountType = ((Number) queryRow.get(4)).intValue();
                accountSubsytemType = ((Number) queryRow.get(3)).intValue();
                nLevel = ((Number) queryRow.get(5)).intValue();
                msAuxAccountId = "";

                oAccountingRow = new SPanelAccountingRow();
                sAccountId = (String) queryRow.get(0);
                
                oAccountingRow.setPrimaryKey(new Object[] { sAccountId });
                oAccountingRow.setPkAccountId(sAccountId);
                oAccountingRow.setAccount((String) queryRow.get(6));
                oAccountingRow.setDateStart((java.util.Date) queryRow.get(7));
                oAccountingRow.setDateEnd_n((java.util.Date) queryRow.get(8));
                oAccountingRow.setIsActive(((Number) queryRow.get(9)).intValue() == 1);
                oAccountingRow.setIsDeleted(((Number) queryRow.get(10)).intValue() == 1);
                oAccountingRow.setFkCurrencyId(((Number) queryRow.get(11)).intValue());  // when currency is set by constant, a BigInteger number is get
                oAccountingRow.setCurrencyKey((String) queryRow.get(12));
                oAccountingRow.setStyle(((Number) queryRow.get(13)).intValue());
                
                dOpeningBalance = ((Number) queryRow.get(15)).doubleValue();
                dDebit = ((Number) queryRow.get(16)).doubleValue();
                dCredit = ((Number) queryRow.get(17)).doubleValue();

                if (!jtbMoney.isSelected() && nLevel == nDeep) {
                    dOpeningBalanceTotal += dOpeningBalance;
                    dDebitTotal += dDebit;
                    dCreditTotal += dCredit;
                }

                oAccountingRow.setOpeningBalance(oAccountingRow.getOpeningBalance() + dOpeningBalance);
                oAccountingRow.setDebit(oAccountingRow.getDebit() + dDebit);
                oAccountingRow.setCredit(oAccountingRow.getCredit() + dCredit);
                
                oAccountingRow.prepareTableRow();

                if (nLevel <= nDeep) {
                    moPaneAccounting.addTableRow(oAccountingRow);
                }
                
                if ((SLibUtilities.belongsTo(accountSubsytemType , new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH, SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK,
                        SDataConstantsSys.FINS_TP_ACC_SYS_INV, SDataConstantsSys.FINS_TP_ACC_SYS_SUP, SDataConstantsSys.FINS_TP_ACC_SYS_CUS, SDataConstantsSys.FINS_TP_ACC_SYS_CDR,
                        SDataConstantsSys.FINS_TP_ACC_SYS_DBR, SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS, SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT, SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT,
                        SDataConstantsSys.FINS_TP_ACC_SYS_PUR, SDataConstantsSys.FINS_TP_ACC_SYS_PUR_ADJ }) || 
                        SLibUtilities.belongsTo(accountType , new int[] { SDataConstantsSys.FINS_TP_ACC_RES})) &&
                        nLevel == nDeep) {
                    msAuxAccountId = sAccountId;
                    
                    if (SLibUtilities.belongsTo(accountType , new int[] { SDataConstantsSys.FINS_TP_ACC_RES})) {
                        sSql = createParamSqlAccountSubsystem(accountType, accountSubsytemType);
                    }
                    else {
                        sSql = createParamSqlAccountSubsystem(accountSubsytemType);
                    }
                    
                    oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
                    oResponse = miClient.getSessionXXX().request(oRequest);

                    if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                        throw new Exception(oResponse.getMessage());
                    }
                    else {
                        vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
                        for (Vector<Object> queryRowAux : vQueryRows) {
                            oAccountingRow = new SPanelAccountingRow();
                            
                            switch (accountSubsytemType) {
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                                    //oAccountingRow.setPrimaryKey(new Object[] { ((Number) queryRowAux.get(0)).intValue(), ((Number) queryRowAux.get(1)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount((String) queryRowAux.get(3));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    //oAccountingRow.setIsDeleted(((Number) queryRowAux.get(6)).intValue() == 1);
                                    oAccountingRow.setIsDeleted((Boolean) queryRowAux.get(6));
                                    oAccountingRow.setFkCurrencyId(((Number) queryRowAux.get(7)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRowAux.get(8));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(9)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(10)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(11)).doubleValue();
                                    break;

                                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                                    //oAccountingRow.setPrimaryKey(new Object[] {  queryRowAux.get(0) == null ? 1 : ((Number) queryRowAux.get(0)).intValue(), ((Number) queryRowAux.get(1)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount(queryRowAux.get(0) == null ? "(N/D)" : (String) queryRowAux.get(3));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    oAccountingRow.setIsDeleted(queryRowAux.get(0) == null ? false : (Boolean) queryRowAux.get(5));
                                    oAccountingRow.setFkCurrencyId(((Number) queryRowAux.get(6)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRowAux.get(7));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(8)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(9)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(10)).doubleValue();
                                    break;

                                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                                    //oAccountingRow.setPrimaryKey(new Object[] { ((Number) queryRowAux.get(0)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount((String) queryRowAux.get(1));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    oAccountingRow.setIsDeleted((Boolean) queryRowAux.get(2));
                                    oAccountingRow.setFkCurrencyId(((Number) queryRowAux.get(3)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRowAux.get(4));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(5)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(6)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(7)).doubleValue();
                                break;

                                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                                    //oAccountingRow.setPrimaryKey(new Object[] { queryRowAux.get(0) == null ? 1 : ((Number) queryRowAux.get(0)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount(queryRowAux.get(0) == null ? "(N/D)" : (String) queryRowAux.get(1));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    oAccountingRow.setIsDeleted(queryRowAux.get(0) == null ? false : (Boolean) queryRowAux.get(2));
                                    oAccountingRow.setFkCurrencyId(((Number) queryRowAux.get(3)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRowAux.get(4));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(5)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(6)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(7)).doubleValue();
                                    
                                    break;

                                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                                    //oAccountingRow.setPrimaryKey(new Object[] { queryRowAux.get(0) == null ? 2 : ((Number) queryRowAux.get(0)).intValue(), ((Number) queryRowAux.get(1)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount(queryRowAux.get(0) == null ? "(N/D)" : (String) queryRowAux.get(3));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    oAccountingRow.setIsDeleted(queryRowAux.get(0) == null ? false : (Boolean) queryRowAux.get(4));
                                    oAccountingRow.setFkCurrencyId(((Number) queryRowAux.get(5)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRowAux.get(6));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(7)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(8)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(9)).doubleValue();
                                    break;

                                default:
                            }
                            
                            switch (accountType) {
                                case SDataConstantsSys.FINS_TP_ACC_RES:
                                    //oAccountingRow.setPrimaryKey(new Object[] { ((Number) queryRowAux.get(0)).intValue(), ((Number) queryRowAux.get(1)).intValue() });
                                    oAccountingRow.setPrimaryKey(null);
                                    oAccountingRow.setPkAccountId("");
                                    oAccountingRow.setAccount((String) queryRowAux.get(2) + " - " + (String) queryRowAux.get(1));
                                    oAccountingRow.setDateStart(null);
                                    oAccountingRow.setDateEnd_n(null);
                                    oAccountingRow.setIsActive(true);
                                    oAccountingRow.setIsDeleted(((Number) queryRow.get(10)).intValue() == 1);
                                    oAccountingRow.setFkCurrencyId(((Number) queryRow.get(11)).intValue());  // when currency is set by constant, a BigInteger number is get
                                    oAccountingRow.setCurrencyKey((String) queryRow.get(12));
                                    oAccountingRow.setStyle(SLibConstants.UNDEFINED);

                                    dOpeningBalance = ((Number) queryRowAux.get(3)).doubleValue();
                                    dDebit = ((Number) queryRowAux.get(4)).doubleValue();
                                    dCredit = ((Number) queryRowAux.get(5)).doubleValue();
                                    break;

                                default:
                            }
                                    
                            
                            oAccountingRow.setOpeningBalance(dOpeningBalance);
                            oAccountingRow.setDebit(dDebit);
                            oAccountingRow.setCredit(dCredit);

                            oAccountingRow.prepareTableRow();
                            
                            moPaneAccounting.addTableRow(oAccountingRow);
                        }
                    }
                }
            }
            
            if (!jtbMoney.isSelected()) {
                bIsDataAvailable = true;

                oAccountingRow = new SPanelAccountingRow();
                oAccountingRow.setIsSummary(true);
                oAccountingRow.setPkAccountId("[TOTALES]");
                oAccountingRow.setAccount("");
                oAccountingRow.setDateStart(null);
                oAccountingRow.setDateEnd_n(null);
                oAccountingRow.setIsActive(false);
                oAccountingRow.setIsDeleted(false);
                oAccountingRow.setOpeningBalance(dOpeningBalanceTotal);
                oAccountingRow.setDebit(dDebitTotal);
                oAccountingRow.setCredit(dCreditTotal);
                oAccountingRow.prepareTableRow();

                moPaneAccounting.addTableRow(oAccountingRow);
            }
        }
        
        return bIsDataAvailable; 
    }

    @SuppressWarnings("unchecked")
    private boolean populateTableAccounting() throws java.lang.Exception {
        int i = 0;
        int j = 0;
        int nLevel = 0;
        double dOpeningBalance = 0;
        double dOpeningBalanceTotal = 0;
        double dDebit = 0;
        double dDebitTotal = 0;
        double dCredit = 0;
        double dCreditTotal = 0;
        boolean bExists = false;
        boolean bIsDataAvailable = false;
        boolean bIsInserted = false;
        String sSql = "";
        String sSqlWhere = "";
        String sCur = "";
        String sAccountId = "";
        String sFormatAccountId = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Vector<Object>> vQueryRows = null;
        Vector<Integer> vLevels = SDataUtilities.getAccountLevels(sFormatAccountId);
        Vector<SPanelAccountingRow> vParentRows = null;
        SDataAccount oDataAccount = null;
        SPanelAccountingRow oAccountingRow = null;
        SPanelAccountingRow oAccountingRowTemp = null;
        SPanelAccountingRow oAccountingRowParent = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;

        // I. Read all active accounts belonging to current period:

        sSql = "SELECT a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del, " +
                "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, " +
                "IF(a.lev = 1, " + STableConstants.STYLE_BOLD + ", IF(a.lev < am.deep, " + STableConstants.STYLE_ITALIC + ", " + STableConstants.UNDEFINED + ")) AS f_style " +
                "FROM fin_acc AS a INNER JOIN fin_acc AS am ON " +
                "CONCAT(LEFT(a.id_acc, " + (vLevels.get(1) - 1) + "), '" + sFormatAccountId.substring(vLevels.get(1) - 1) + "') = am.id_acc AND " +
                "a.b_act = 1 AND a.b_del = 0 AND " +
                "a.dt_start <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND " +
                "(a.dt_end_n IS NULL OR a.dt_end_n >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "') " +
                "ORDER BY a.id_acc ";

        oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
            for (Vector<Object> queryRow : vQueryRows) {
                bIsDataAvailable = true;

                oAccountingRow = new SPanelAccountingRow();
                oAccountingRow.setPrimaryKey(new Object[] { (String) queryRow.get(0) });
                oAccountingRow.setPkAccountId((String) queryRow.get(0));
                oAccountingRow.setAccount((String) queryRow.get(1));
                oAccountingRow.setDateStart((java.util.Date) queryRow.get(2));
                oAccountingRow.setDateEnd_n((java.util.Date) queryRow.get(3));
                oAccountingRow.setIsActive((Boolean) queryRow.get(4));
                oAccountingRow.setIsDeleted((Boolean) queryRow.get(5));
                oAccountingRow.setFkCurrencyId(((Number) queryRow.get(6)).intValue());  // when currency is set by constant, a BigInteger number is get
                oAccountingRow.setCurrencyKey((String) queryRow.get(7));
                oAccountingRow.setStyle(((Number) queryRow.get(8)).intValue());
                oAccountingRow.prepareTableRow();

                moPaneAccounting.addTableRow(oAccountingRow);
            }

           sSqlWhere = (!mbShowRecordAdjYearEnd ? " AND r.b_adj_year = 0 " : "") +
                    (!mbShowRecordAdjAudit ? " AND r.b_adj_audit = 0 " : "");

            // II. Read all accounting moves belonging to current period:

            sCur = jtbMoney.isSelected() ? "_cur" : "";
            sSql = "SELECT a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del, " +
                    (jtbMoney.isSelected() ? "c.id_cur AS f_id_cur, c.cur_key AS f_cur_key, " :
                        "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                        "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, ") +
                    "SUM(IF(r.dt < '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS f_si, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit" + sCur + ", 0)) AS f_debit, " +
                    "SUM(IF(r.dt >= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateStart) + "' AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.credit" + sCur + ", 0)) AS f_credit, " +
                    "SUM(IF(r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "', re.debit" + sCur + " - re.credit" + sCur + ", 0)) AS f_sf, " +
                    "IF(a.lev = 1, " + STableConstants.STYLE_BOLD + ", IF(a.lev < am.deep, " + STableConstants.STYLE_ITALIC + ", " + STableConstants.UNDEFINED + ")) AS f_style " +
                    "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = " + mnYear + " AND r.dt <= '" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtDateEnd) + "' AND " +
                    "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND r.b_del = 0 AND re.b_del = 0 " + sSqlWhere +
                    "INNER JOIN fin_acc AS a ON " +
                    "re.fid_acc = a.id_acc " +
                    "INNER JOIN fin_acc AS am ON " +
                    "CONCAT(LEFT(a.id_acc, " + (vLevels.get(1) - 1) + "), '" + sFormatAccountId.substring(vLevels.get(1) - 1) + "') = am.id_acc " +
                    "INNER JOIN erp.cfgu_cur AS c ON " +
                    "re.fid_cur = c.id_cur " +
                    "GROUP BY a.id_acc, a.acc, a.dt_start, a.dt_end_n, a.b_act, a.b_del" +
                    (jtbMoney.isSelected() ? ", c.id_cur, c.cur_key " : " ") +
                    "ORDER BY a.id_acc" +
                    (jtbMoney.isSelected() ? ", c.cur_key, c.id_cur " : " ");

            oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
            oResponse = miClient.getSessionXXX().request(oRequest);

            if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
                throw new Exception(oResponse.getMessage());
            }
            else {
                vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();
                for (Vector<Object> queryRow : vQueryRows) {
                    bExists = false;
                    bIsDataAvailable = true;

                    for (i = 0; i < moPaneAccounting.getTableModel().getRowCount(); i++) {
                        oAccountingRow = (SPanelAccountingRow) moPaneAccounting.getTableRow(i);
                        if (((String) queryRow.get(0)).compareTo(oAccountingRow.getPkAccountId()) == 0 && ((Number) queryRow.get(6)).intValue() == oAccountingRow.getFkCurrencyId()) {
                            bExists = true;
                            break;
                        }
                    }

                    if (!bExists) {
                        oAccountingRow = new SPanelAccountingRow();
                        oAccountingRow.setPrimaryKey(new Object[] { (String) queryRow.get(0) });
                        oAccountingRow.setPkAccountId((String) queryRow.get(0));
                        oAccountingRow.setAccount((String) queryRow.get(1));
                        oAccountingRow.setDateStart((java.util.Date) queryRow.get(2));
                        oAccountingRow.setDateEnd_n((java.util.Date) queryRow.get(3));
                        oAccountingRow.setIsActive((Boolean) queryRow.get(4));
                        oAccountingRow.setIsDeleted((Boolean) queryRow.get(5));
                        oAccountingRow.setFkCurrencyId(((Number) queryRow.get(6)).intValue());  // when currency is set by constant, a BigInteger number is get
                        oAccountingRow.setCurrencyKey((String) queryRow.get(7));
                        oAccountingRow.setStyle(((Number) queryRow.get(12)).intValue());
                    }

                    dOpeningBalance = ((Number) queryRow.get(8)).doubleValue();
                    dDebit = ((Number) queryRow.get(9)).doubleValue();
                    dCredit = ((Number) queryRow.get(10)).doubleValue();

                    if (!jtbMoney.isSelected()) {
                        dOpeningBalanceTotal += dOpeningBalance;
                        dDebitTotal += dDebit;
                        dCreditTotal += dCredit;
                    }

                    oAccountingRow.setOpeningBalance(oAccountingRow.getOpeningBalance() + dOpeningBalance);
                    oAccountingRow.setDebit(oAccountingRow.getDebit() + dDebit);
                    oAccountingRow.setCredit(oAccountingRow.getCredit() + dCredit);

                    oAccountingRow.prepareTableRow();

                    if (bExists) {
                        moPaneAccounting.setTableRow(oAccountingRow, i);
                    }
                    else {
                        bIsInserted = false;
                        for (i = 0; i < moPaneAccounting.getTableGuiRowCount(); i++) {
                            oAccountingRowTemp = (SPanelAccountingRow) moPaneAccounting.getTableRow(i);
                            if ((oAccountingRow.getPkAccountId() + oAccountingRow.getCurrencyKey()).compareTo(oAccountingRowTemp.getPkAccountId() + oAccountingRowTemp.getCurrencyKey()) < 0) {
                                    moPaneAccounting.insertTableRow(oAccountingRow, i);
                                    bIsInserted = true;
                                    break;
                            }
                        }

                        if (!bIsInserted) {
                            moPaneAccounting.addTableRow(oAccountingRow);
                        }
                    }
                }

                // III. Add all parent accounts of current account rows:

                vParentRows = new Vector<SPanelAccountingRow>();

                for (STableRow tableRow : moPaneAccounting.getTableModel().getTableRows()) {
                    oAccountingRow = (SPanelAccountingRow) tableRow;
                    nLevel = SDataUtilities.getAccountUsedLevelsCount(oAccountingRow.getPkAccountId(), vLevels);
                    while (nLevel > 1) {
                        oAccountingRowParent = null;
                        sAccountId = SDataUtilities.obtainAccountIdByLevel(miClient, oAccountingRow.getPkAccountId(), nLevel - 1);

                        for (SPanelAccountingRow row : vParentRows) {
                            if (row.getPkAccountId().compareTo(sAccountId) == 0 && row.getFkCurrencyId() == oAccountingRow.getFkCurrencyId()) {
                                oAccountingRowParent = row;
                                break;
                            }
                        }

                        if (oAccountingRowParent == null) {
                            oDataAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { sAccountId }, SLibConstants.EXEC_MODE_VERBOSE);
                            oAccountingRowParent = new SPanelAccountingRow();
                            oAccountingRowParent.setPrimaryKey(new Object[] { oDataAccount.getPkAccountIdXXX() });
                            oAccountingRowParent.setPkAccountId(oDataAccount.getPkAccountIdXXX());
                            oAccountingRowParent.setAccount(oDataAccount.getAccount());
                            oAccountingRowParent.setDateStart(oDataAccount.getDateStart());
                            oAccountingRowParent.setDateEnd_n(oDataAccount.getDateEnd_n());
                            oAccountingRowParent.setIsActive(oDataAccount.getIsActive());
                            oAccountingRowParent.setIsDeleted(oDataAccount.getIsDeleted());
                            oAccountingRowParent.setFkCurrencyId(oAccountingRow.getFkCurrencyId());
                            oAccountingRowParent.setCurrencyKey(oAccountingRow.getCurrencyKey());
                            oAccountingRowParent.setStyle(oDataAccount.getLevel() == 1 ? STableConstants.STYLE_BOLD : oDataAccount.getLevel() < oDataAccount.getDbmsLedgerAccountDeep() ? STableConstants.STYLE_ITALIC : STableConstants.UNDEFINED);

                            vParentRows.add(oAccountingRowParent);
                        }

                        oAccountingRowParent.setOpeningBalance(oAccountingRowParent.getOpeningBalance() + oAccountingRow.getOpeningBalance());
                        oAccountingRowParent.setDebit(oAccountingRowParent.getDebit() + oAccountingRow.getDebit());
                        oAccountingRowParent.setCredit(oAccountingRowParent.getCredit() + oAccountingRow.getCredit());

                        nLevel--;
                    }
                }

                // IV. Insert all parent accounts into table pane:

                for (SPanelAccountingRow row : vParentRows) {
                    bIsInserted = false;
                    row.prepareTableRow();

                    for (i = 0; i < moPaneAccounting.getTableGuiRowCount(); i++) {
                        oAccountingRow = (SPanelAccountingRow) moPaneAccounting.getTableRow(i);
                        if (row.getPkAccountId().compareTo(oAccountingRow.getPkAccountId()) == 0 && row.getFkCurrencyId() == oAccountingRow.getFkCurrencyId()) {
                            moPaneAccounting.setTableRow(row, i);
                            bIsInserted = true;
                            break;
                        }
                        else if ((row.getPkAccountId() + row.getCurrencyKey()).compareTo(oAccountingRow.getPkAccountId() + oAccountingRow.getCurrencyKey()) < 0) {
                                moPaneAccounting.insertTableRow(row, i);
                                bIsInserted = true;
                                break;
                        }
                    }

                    if (!bIsInserted) {
                        moPaneAccounting.addTableRow(row);
                    }
                }
            }
        }

        if (!jtbMoney.isSelected()) {
            bIsDataAvailable = true;

            oAccountingRow = new SPanelAccountingRow();
            oAccountingRow.setIsSummary(true);
            oAccountingRow.setPkAccountId("[TOTALES]");
            oAccountingRow.setAccount("");
            oAccountingRow.setDateStart(null);
            oAccountingRow.setDateEnd_n(null);
            oAccountingRow.setIsActive(false);
            oAccountingRow.setIsDeleted(false);
            oAccountingRow.setOpeningBalance(dOpeningBalanceTotal);
            oAccountingRow.setDebit(dDebitTotal);
            oAccountingRow.setCredit(dCreditTotal);
            oAccountingRow.prepareTableRow();

            moPaneAccounting.addTableRow(oAccountingRow);
        }

        return bIsDataAvailable;
    }


    @SuppressWarnings("unchecked")
    private boolean populateTableSubsystem() throws java.lang.Exception {
        double dOpeningBalance = 0;
        double dOpeningBalanceTotal = 0;
        double dDebit = 0;
        double dDebitTotal = 0;
        double dCredit = 0;
        double dCreditTotal = 0;
        boolean bIsDataAvailable = false;
        String sSql = "";
        String sSqlWhere = "";
        String sCur = "";
        String sSelect = "";
        String sGroupBy = "";
        String sOrderBy = "";
        String sFormatAccountId = miClient.getSessionXXX().getParamsErp().getFormatAccountId().replace('9', '0');
        Vector<Vector<Object>> vQueryRows = null;
        Vector<Integer> vLevels = SDataUtilities.getAccountLevels(sFormatAccountId);
        SPanelSubsystemRow oSubsystemRow = null;
        SPanelSubsystemTaxRow oSubsystemTaxRow = null;
        SPanelSubsystemEntityRow oSubsystemEntityRow = null;
        SPanelSubsystemEntityCashRow oSubsystemEntityCashRow = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;

        sSql = createParamSqlAccountSubsystem(mnTabTypeAux01);

        oRequest = new SServerRequest(SServerConstants.REQ_DB_QUERY_SIMPLE, sSql);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            vQueryRows = (Vector<Vector<Object>>) oResponse.getPacket();

            switch (mnTabTypeAux01) {
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:

                    for (Vector<Object> queryRow : vQueryRows) {
                        bIsDataAvailable = true;

                        oSubsystemEntityCashRow = new SPanelSubsystemEntityCashRow();
                        oSubsystemEntityCashRow.setPrimaryKey(new int[] { ((Number) queryRow.get(0)).intValue(), ((Number) queryRow.get(1)).intValue() });
                        oSubsystemEntityCashRow.setCompanyBranch((String) queryRow.get(2));
                        oSubsystemEntityCashRow.setEntity((String) queryRow.get(3));
                        oSubsystemEntityCashRow.setEntityKey((String) queryRow.get(4));
                        oSubsystemEntityCashRow.setCashCurrencyKey((String) queryRow.get(5));
                        oSubsystemEntityCashRow.setIsDeleted((Boolean) queryRow.get(6));
                        oSubsystemEntityCashRow.setFkCurrencyId(((Number) queryRow.get(7)).intValue()); // when currency is set by constant, a BigInteger number is get
                        oSubsystemEntityCashRow.setCurrencyKey((String) queryRow.get(8));

                        dOpeningBalance = ((Number) queryRow.get(9)).doubleValue();
                        dDebit = ((Number) queryRow.get(10)).doubleValue();
                        dCredit = ((Number) queryRow.get(11)).doubleValue();

                        if (!jtbMoney.isSelected()) {
                            dOpeningBalanceTotal += dOpeningBalance;
                            dDebitTotal += dDebit;
                            dCreditTotal += dCredit;
                        }

                        oSubsystemEntityCashRow.setOpeningBalance(dOpeningBalance);
                        oSubsystemEntityCashRow.setDebit(dDebit);
                        oSubsystemEntityCashRow.setCredit(dCredit);
                        oSubsystemEntityCashRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemEntityCashRow);
                    }

                    if (!jtbMoney.isSelected()) {
                        bIsDataAvailable = true;

                        oSubsystemEntityCashRow = new SPanelSubsystemEntityCashRow();
                        oSubsystemEntityCashRow.setIsSummary(true);
                        oSubsystemEntityCashRow.setCompanyBranch("[TOTALES]");
                        oSubsystemEntityCashRow.setEntity("");
                        oSubsystemEntityCashRow.setEntityKey("");
                        oSubsystemEntityCashRow.setCashCurrencyKey("");
                        oSubsystemEntityCashRow.setIsDeleted(false);
                        oSubsystemEntityCashRow.setOpeningBalance(dOpeningBalanceTotal);
                        oSubsystemEntityCashRow.setDebit(dDebitTotal);
                        oSubsystemEntityCashRow.setCredit(dCreditTotal);
                        oSubsystemEntityCashRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemEntityCashRow);
                    }
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:

                    for (Vector<Object> queryRow : vQueryRows) {
                        bIsDataAvailable = true;

                        oSubsystemEntityRow = new SPanelSubsystemEntityRow();

                        if (queryRow.get(0) == null) {
                            oSubsystemEntityRow.setPrimaryKey(new int[2]);
                            oSubsystemEntityRow.setCompanyBranch("(N/D)");
                            oSubsystemEntityRow.setEntity("(N/D)");
                            oSubsystemEntityRow.setEntityKey("(N/D)");
                            oSubsystemEntityRow.setIsDeleted(false);
                        }
                        else {
                            oSubsystemEntityRow.setPrimaryKey(new int[] { ((Number) queryRow.get(0)).intValue(), ((Number) queryRow.get(1)).intValue() });
                            oSubsystemEntityRow.setCompanyBranch((String) queryRow.get(2));
                            oSubsystemEntityRow.setEntity((String) queryRow.get(3));
                            oSubsystemEntityRow.setEntityKey((String) queryRow.get(4));
                            oSubsystemEntityRow.setIsDeleted((Boolean) queryRow.get(5));
                        }

                        oSubsystemEntityRow.setFkCurrencyId(((Number) queryRow.get(6)).intValue()); // when currency is set by constant, a BigInteger number is get
                        oSubsystemEntityRow.setCurrencyKey((String) queryRow.get(7));

                        dOpeningBalance = ((Number) queryRow.get(8)).doubleValue();
                        dDebit = ((Number) queryRow.get(9)).doubleValue();
                        dCredit = ((Number) queryRow.get(10)).doubleValue();

                        if (!jtbMoney.isSelected()) {
                            dOpeningBalanceTotal += dOpeningBalance;
                            dDebitTotal += dDebit;
                            dCreditTotal += dCredit;
                        }

                        oSubsystemEntityRow.setOpeningBalance(dOpeningBalance);
                        oSubsystemEntityRow.setDebit(dDebit);
                        oSubsystemEntityRow.setCredit(dCredit);
                        oSubsystemEntityRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemEntityRow);
                    }

                    if (!jtbMoney.isSelected()) {
                        bIsDataAvailable = true;

                        oSubsystemEntityRow = new SPanelSubsystemEntityRow();
                        oSubsystemEntityRow.setIsSummary(true);
                        oSubsystemEntityRow.setCompanyBranch("[TOTALES]");
                        oSubsystemEntityRow.setEntity("");
                        oSubsystemEntityRow.setEntityKey("");
                        oSubsystemEntityRow.setIsDeleted(false);
                        oSubsystemEntityRow.setOpeningBalance(dOpeningBalanceTotal);
                        oSubsystemEntityRow.setDebit(dDebitTotal);
                        oSubsystemEntityRow.setCredit(dCreditTotal);
                        oSubsystemEntityRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemEntityRow);
                    }
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:

                    for (Vector<Object> queryRow : vQueryRows) {
                        bIsDataAvailable = true;

                        oSubsystemRow = new SPanelSubsystemRow();
                        oSubsystemRow.setPrimaryKey(new int[] { ((Number) queryRow.get(0)).intValue() });
                        oSubsystemRow.setSubsystem((String) queryRow.get(1));
                        oSubsystemRow.setIsDeleted((Boolean) queryRow.get(2));
                        oSubsystemRow.setFkCurrencyId(((Number) queryRow.get(3)).intValue());   // when currency is set by constant, a BigInteger number is get
                        oSubsystemRow.setCurrencyKey((String) queryRow.get(4));

                        dOpeningBalance = ((Number) queryRow.get(5)).doubleValue();
                        dDebit = ((Number) queryRow.get(6)).doubleValue();
                        dCredit = ((Number) queryRow.get(7)).doubleValue();

                        if (!jtbMoney.isSelected()) {
                            dOpeningBalanceTotal += dOpeningBalance;
                            dDebitTotal += dDebit;
                            dCreditTotal += dCredit;
                        }

                        oSubsystemRow.setOpeningBalance(dOpeningBalance);
                        oSubsystemRow.setDebit(dDebit);
                        oSubsystemRow.setCredit(dCredit);
                        oSubsystemRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemRow);
                    }

                    if (!jtbMoney.isSelected()) {
                        bIsDataAvailable = true;

                        oSubsystemRow = new SPanelSubsystemRow();
                        oSubsystemRow.setIsSummary(true);
                        oSubsystemRow.setSubsystem("[TOTALES]");
                        oSubsystemRow.setIsDeleted(false);
                        oSubsystemRow.setOpeningBalance(dOpeningBalanceTotal);
                        oSubsystemRow.setDebit(dDebitTotal);
                        oSubsystemRow.setCredit(dCreditTotal);
                        oSubsystemRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemRow);
                    }
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:

                    for (Vector<Object> queryRow : vQueryRows) {
                        bIsDataAvailable = true;

                        oSubsystemRow = new SPanelSubsystemRow();

                        if (queryRow.get(0) == null) {
                            oSubsystemRow.setPrimaryKey(new int[1]);
                            oSubsystemRow.setSubsystem("(N/D)");
                            oSubsystemRow.setIsDeleted(false);
                        }
                        else {
                            oSubsystemRow.setPrimaryKey(new int[] { ((Number) queryRow.get(0)).intValue() });
                            oSubsystemRow.setSubsystem((String) queryRow.get(1));
                            oSubsystemRow.setIsDeleted((Boolean) queryRow.get(2));
                        }

                        oSubsystemRow.setFkCurrencyId(((Number) queryRow.get(3)).intValue());   // when currency is set by constant, a BigInteger number is get
                        oSubsystemRow.setCurrencyKey((String) queryRow.get(4));

                        dOpeningBalance = ((Number) queryRow.get(5)).doubleValue();
                        dDebit = ((Number) queryRow.get(6)).doubleValue();
                        dCredit = ((Number) queryRow.get(7)).doubleValue();

                        if (!jtbMoney.isSelected()) {
                            dOpeningBalanceTotal += dOpeningBalance;
                            dDebitTotal += dDebit;
                            dCreditTotal += dCredit;
                        }

                        oSubsystemRow.setOpeningBalance(dOpeningBalance);
                        oSubsystemRow.setDebit(dDebit);
                        oSubsystemRow.setCredit(dCredit);
                        oSubsystemRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemRow);
                    }

                    if (!jtbMoney.isSelected()) {
                        bIsDataAvailable = true;

                        oSubsystemRow = new SPanelSubsystemRow();
                        oSubsystemRow.setIsSummary(true);
                        oSubsystemRow.setSubsystem("[TOTALES]");
                        oSubsystemRow.setIsDeleted(false);
                        oSubsystemRow.setOpeningBalance(dOpeningBalanceTotal);
                        oSubsystemRow.setDebit(dDebitTotal);
                        oSubsystemRow.setCredit(dCreditTotal);
                        oSubsystemRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemRow);
                    }
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:

                    for (Vector<Object> queryRow : vQueryRows) {
                        bIsDataAvailable = true;

                        oSubsystemTaxRow = new SPanelSubsystemTaxRow();

                        if (queryRow.get(0) == null) {
                            oSubsystemTaxRow.setPrimaryKey(new int[2]);
                            oSubsystemTaxRow.setFkTaxBasicId(0);
                            oSubsystemTaxRow.setFkTaxId(0);
                            oSubsystemTaxRow.setTaxBasic("(N/D)");
                            oSubsystemTaxRow.setTax("(N/D)");
                            oSubsystemTaxRow.setIsDeleted(false);
                        }
                        else {
                            oSubsystemTaxRow.setPrimaryKey(new int[] { ((Number) queryRow.get(0)).intValue(), ((Number) queryRow.get(1)).intValue() });
                            oSubsystemTaxRow.setFkTaxBasicId((Integer) queryRow.get(0));
                            oSubsystemTaxRow.setFkTaxId((Integer) queryRow.get(1));
                            oSubsystemTaxRow.setTaxBasic((String) queryRow.get(2));
                            oSubsystemTaxRow.setTax((String) queryRow.get(3));
                            oSubsystemTaxRow.setIsDeleted((Boolean) queryRow.get(4));
                        }

                        oSubsystemTaxRow.setFkCurrencyId(((Number) queryRow.get(5)).intValue());   // when currency is set by constant, a BigInteger number is get
                        oSubsystemTaxRow.setCurrencyKey((String) queryRow.get(6));

                        dOpeningBalance = ((Number) queryRow.get(7)).doubleValue();
                        dDebit = ((Number) queryRow.get(8)).doubleValue();
                        dCredit = ((Number) queryRow.get(9)).doubleValue();

                        if (!jtbMoney.isSelected()) {
                            dOpeningBalanceTotal += dOpeningBalance;
                            dDebitTotal += dDebit;
                            dCreditTotal += dCredit;
                        }

                        oSubsystemTaxRow.setOpeningBalance(dOpeningBalance);
                        oSubsystemTaxRow.setDebit(dDebit);
                        oSubsystemTaxRow.setCredit(dCredit);
                        oSubsystemTaxRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemTaxRow);
                    }

                    if (!jtbMoney.isSelected()) {
                        bIsDataAvailable = true;

                        oSubsystemTaxRow = new SPanelSubsystemTaxRow();
                        oSubsystemTaxRow.setIsSummary(true);
                        oSubsystemTaxRow.setTaxBasic("[TOTALES]");
                        oSubsystemTaxRow.setTax("");
                        oSubsystemTaxRow.setIsDeleted(false);
                        oSubsystemTaxRow.setOpeningBalance(dOpeningBalanceTotal);
                        oSubsystemTaxRow.setDebit(dDebitTotal);
                        oSubsystemTaxRow.setCredit(dCreditTotal);
                        oSubsystemTaxRow.prepareTableRow();

                        moPaneAccounting.addTableRow(oSubsystemTaxRow);
                    }
                    break;

                default:
            }
        }

        return bIsDataAvailable;
    }

    private void populateTable() {
        int index = -1;
        int valueV = 0;
        int valueH = 0;
        boolean isDataAvailable = false;
        Cursor cursor = getCursor();

        if (moPaneAccounting.getTable() != null) {
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        jlStatusRow.setText("0/0");
        moPaneAccounting.clearTableRows();
        moPaneAccounting.createTable(this);

        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            switch (mnTabTypeAux01) {
                case SDataConstants.FINX_ACCOUNTING:
                    isDataAvailable = populateTableAccounting();
                    break;
                case SDataConstants.FINX_ACCOUNTING_ALL:
                    isDataAvailable = populateTableAccountingAll();
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                    isDataAvailable = populateTableSubsystem();
                    break;

                default:
            }
        }
        catch(java.lang.Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            if (isDataAvailable) {
                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);

                moPaneAccounting.validate();
                moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
                moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

                if (index == -1) {
                    index = 0;
                }

                if (index >= moPaneAccounting.getTableGuiRowCount()) {
                    index = moPaneAccounting.getTableGuiRowCount() - 1;
                }
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }

            setCursor(cursor);
        }
    }

    public void publicActionDetail() {
        actionDetail();
    }

    public void publicActionAccountingMoves() {
        actionAccountingMoves();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton jbAccountingMoves;
    private javax.swing.JButton jbDetail;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.ButtonGroup jbgPeriods;
    private javax.swing.JLabel jlStatusRow;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpFilters;
    private javax.swing.JPanel jpPeriods;
    private javax.swing.JToggleButton jtbMoney;
    private javax.swing.JToggleButton jtbPeriod01;
    private javax.swing.JToggleButton jtbPeriod02;
    private javax.swing.JToggleButton jtbPeriod03;
    private javax.swing.JToggleButton jtbPeriod04;
    private javax.swing.JToggleButton jtbPeriod05;
    private javax.swing.JToggleButton jtbPeriod06;
    private javax.swing.JToggleButton jtbPeriod07;
    private javax.swing.JToggleButton jtbPeriod08;
    private javax.swing.JToggleButton jtbPeriod09;
    private javax.swing.JToggleButton jtbPeriod10;
    private javax.swing.JToggleButton jtbPeriod11;
    private javax.swing.JToggleButton jtbPeriod12;
    private javax.swing.JToggleButton jtbRecordAdjAudit;
    private javax.swing.JToggleButton jtbRecordAdjYearEnd;
    private javax.swing.JTextField jtfSeek;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneAccounting, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneAccounting, msTabTitle);
        }
    }

    @Override
    public int getTabType() {
        return mnTabType;
    }

    @Override
    public int getTabTypeAux01() {
        return mnTabTypeAux01;
    }

    @Override
    public int getTabTypeAux02() {
        return 0;
    }

    @Override
    public java.util.Vector<java.lang.Integer> getSuscriptors() {
        return mvSuscriptors;
    }

    @Override
    public java.util.Vector<erp.lib.table.STableSetting> getTableSettings() {
        return mvTableSettings;
    }

    @Override
    public void addSetting(erp.lib.table.STableSetting setting) {
        boolean add = true;
        erp.lib.table.STableSetting settingAux;

        for (int i = 0; i < mvTableSettings.size(); i++) {
            settingAux = (erp.lib.table.STableSetting) mvTableSettings.get(i);
            if (settingAux.getType() == setting.getType()) {
                add = false;
                mvTableSettings.set(i, setting);
                break;
            }
        }

        if (add) {
            mvTableSettings.add(setting);
        }
    }

    @Override
    public void updateSetting(erp.lib.table.STableSetting setting) {
        addSetting(setting);

        if (setting.getType() == STableConstants.SETTING_FILTER_YEAR) {
            setYear((Integer) setting.getSetting());
        }
        else {
            populateTable();
        }
    }

    @Override
    public void actionRefresh(int mode) {
        int count = 0;
        int index = -1;
        int valueV = 0;
        int valueH = 0;

        if (mode == STableConstants.REFRESH_MODE_RELOAD) {
            count = moPaneAccounting.getTableGuiRowCount();
            index = moPaneAccounting.getTable().getSelectedRow();
            valueV = moPaneAccounting.getVerticalScrollBar().getValue();
            valueH = moPaneAccounting.getHorizontalScrollBar().getValue();
        }

        moPaneAccounting.clearTableRows();
        populateTable();

        mbFirstTime = true;
        focusTab();

        if (mode == STableConstants.REFRESH_MODE_RELOAD && count <= moPaneAccounting.getTableGuiRowCount()) {
            moPaneAccounting.validate();
            moPaneAccounting.getVerticalScrollBar().setValue(valueV < moPaneAccounting.getVerticalScrollBar().getMaximum() ? valueV : moPaneAccounting.getVerticalScrollBar().getMaximum());
            moPaneAccounting.getHorizontalScrollBar().setValue(valueH < moPaneAccounting.getHorizontalScrollBar().getMaximum() ? valueH : moPaneAccounting.getHorizontalScrollBar().getMaximum());

            if (index < moPaneAccounting.getTableGuiRowCount() && index >= 0) {
                moPaneAccounting.getTable().setRowSelectionInterval(index, index);
            }
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDetail) {
                actionDetail();
            }
            else if (button == jbAccountingMoves) {
                actionAccountingMoves();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh(STableConstants.REFRESH_MODE_RESET);
            }
        }
        else if (e.getSource() instanceof javax.swing.JToggleButton) {
            boolean performed = false;
            JToggleButton toggleButton = (JToggleButton) e.getSource();

            for (int i = 0; i < majtbPeriods.length; i++) {
                if (toggleButton == majtbPeriods[i]) {
                    setPeriod(i + 1);
                    performed = true;
                    break;
                }
            }

            if (!performed) {
                if (toggleButton == jtbMoney) {
                    actionMoney();
                }
            }

            if (toggleButton == jtbRecordAdjYearEnd) {
                showRocordAdjustment();
            }
            else if (toggleButton == jtbRecordAdjAudit) {
                showRocordAdjustment();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }

    @Override
    public void valueChanged(javax.swing.event.ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            jlStatusRow.setText(moIntegerFormat.format(moPaneAccounting.getTable().getSelectedRow() + 1) + "/" + moIntegerFormat.format(moPaneAccounting.getTableGuiRowCount()));
        }
    }
}
