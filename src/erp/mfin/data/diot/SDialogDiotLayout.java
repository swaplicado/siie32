/*
 * SDialogDiotLayout.java
 *
 * Created on 29/06/2010, 05:02:26 PM
 */

package erp.mfin.data.diot;

import cfd.DCfdConsts;
import erp.data.SDataConstants;
import erp.data.SDataReadDescriptions;
import erp.gui.SGuiUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataTax;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiConsts;

/**
 * For DIOT layout valid until 2024-12-31.
 * @author Sergio Flores, Isabel Servín, Sergio Flores
 */
public class SDialogDiotLayout extends javax.swing.JDialog implements java.awt.event.ActionListener, java.awt.event.ItemListener {

    private final erp.client.SClientInterface miClient;
    private final int mnDiotVersion;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldRequiredFiscalIds;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private SDataTax moConfigDiotTax;
    private String[] msConfigDiotAccounts;
    private int[] manConfigDiotTaxRegionsIgnored;

    /** Creates new form SDialogDiotLayout
     * @param client GUI client.
     * @param diotVersion Supported options: constants SDiotConsts.VER_1 & SDiotConsts.VER_2.
     */
    public SDialogDiotLayout(erp.client.SClientInterface client, int diotVersion) {
        super(client.getFrame(), false);
        miClient = client;
        mnDiotVersion = diotVersion;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgFormat = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbPickDateStart = new javax.swing.JButton();
        jlDummy1 = new javax.swing.JLabel();
        jckExcludeTotallyZero = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbPickDateEnd = new javax.swing.JButton();
        jlDummy2 = new javax.swing.JLabel();
        jckGenerateDetailedInfoFile = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jlRequiredFiscalIds = new javax.swing.JLabel();
        jtfRequiredFiscalIds = new javax.swing.JTextField();
        jbEditRequiredFiscalIds = new javax.swing.JButton();
        jlRequiredFiscalIdsHint = new javax.swing.JLabel();
        jlFormat = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jrbFormatCsv = new javax.swing.JRadioButton();
        jPanel13 = new javax.swing.JPanel();
        jrbFormatPipe = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jspDiotConfig = new javax.swing.JScrollPane();
        jtaDiotConfig = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jspWarnings = new javax.swing.JScrollPane();
        jtaWarnings = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jbGenerate = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Layout de la DIOT");
        setResizable(false);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros para generar el layout de la DIOT:"));
        jPanel6.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateStart);

        jbPickDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPickDateStart.setToolTipText("Seleccionar fecha");
        jbPickDateStart.setFocusable(false);
        jbPickDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbPickDateStart);

        jlDummy1.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jlDummy1);

        jckExcludeTotallyZero.setText("Excluir del layout a terceros totalmente en cero");
        jckExcludeTotallyZero.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel3.add(jckExcludeTotallyZero);

        jPanel6.add(jPanel3);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jftDateEnd);

        jbPickDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPickDateEnd.setToolTipText("Seleccionar fecha");
        jbPickDateEnd.setFocusable(false);
        jbPickDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbPickDateEnd);

        jlDummy2.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jlDummy2);

        jckGenerateDetailedInfoFile.setText("Generar archivo informativo con todos los movimientos del layout (en la misma carpeta)");
        jckGenerateDetailedInfoFile.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel8.add(jckGenerateDetailedInfoFile);

        jPanel6.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRequiredFiscalIds.setText("RFC a filtrar:");
        jlRequiredFiscalIds.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlRequiredFiscalIds);

        jtfRequiredFiscalIds.setText("ABC010101000, ABCD010101000");
        jtfRequiredFiscalIds.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel9.add(jtfRequiredFiscalIds);

        jbEditRequiredFiscalIds.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditRequiredFiscalIds.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbEditRequiredFiscalIds);

        jlRequiredFiscalIdsHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlRequiredFiscalIdsHint.setText("(separar varios RFC entre sí con coma)");
        jlRequiredFiscalIdsHint.setPreferredSize(new java.awt.Dimension(230, 23));
        jPanel9.add(jlRequiredFiscalIdsHint);

        jPanel6.add(jPanel9);

        jlFormat.setText("Formato del archivo del layout:");
        jPanel6.add(jlFormat);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgFormat.add(jrbFormatCsv);
        jrbFormatCsv.setText("Archivo CSV con valores sin redondear, separados por coma, más resumen informativo y lista de excepciones, en carácteres ASCII");
        jrbFormatCsv.setPreferredSize(new java.awt.Dimension(750, 23));
        jPanel14.add(jrbFormatCsv);

        jPanel6.add(jPanel14);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgFormat.add(jrbFormatPipe);
        jrbFormatPipe.setText("Archivo TXT con valores redondeados como enteros, separados por el carácter denominado pipe o barra vertical (\"|\"), en carácteres UTF-8");
        jrbFormatPipe.setPreferredSize(new java.awt.Dimension(750, 23));
        jPanel13.add(jrbFormatPipe);

        jPanel6.add(jPanel13);

        jPanel2.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración actual de la DIOT:"));
        jPanel7.setLayout(new java.awt.BorderLayout());

        jspDiotConfig.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspDiotConfig.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspDiotConfig.setPreferredSize(new java.awt.Dimension(100, 100));

        jtaDiotConfig.setEditable(false);
        jtaDiotConfig.setBackground(java.awt.SystemColor.control);
        jtaDiotConfig.setColumns(20);
        jtaDiotConfig.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jtaDiotConfig.setLineWrap(true);
        jtaDiotConfig.setRows(5);
        jtaDiotConfig.setText("1) IVA predeterminado para la DIOT: ...\n\n2) Cuentas contables para la DIOT: ...\n\n3) Regiones de impuestos ignoradas para la DIOT:...");
        jtaDiotConfig.setWrapStyleWord(true);
        jspDiotConfig.setViewportView(jtaDiotConfig);

        jPanel7.add(jspDiotConfig, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Advertencias sobre la generación del layout de la DIOT:"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jspWarnings.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspWarnings.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaWarnings.setEditable(false);
        jtaWarnings.setBackground(java.awt.SystemColor.control);
        jtaWarnings.setColumns(20);
        jtaWarnings.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jtaWarnings.setLineWrap(true);
        jtaWarnings.setRows(5);
        jtaWarnings.setText("1) Los importes de pagos realizados a operaciones de IVA tasa 0 o exento que en su momento fueron provisionadas equivocadamente a otras tasas de IVA, p. ej., a tasa general, pero intencionalmente manipuladas para que el monto del IVA fuera igual a cero, serán por defecto clasificados como operaciones de IVA tasa 0 en el archivo del layout de la DIOT.\n\n2) Los importes de pagos realizados a operaciones de IVA tasa 0 o exento que en su momento fueron provisionadas simultáneamente en el mismo asiento contable con operaciones a otras tasas de IVA, p. ej., a tasa general, serán por defecto clasificados como operaciones de IVA exento en el archivo del layout de la DIOT.");
        jtaWarnings.setWrapStyleWord(true);
        jspWarnings.setViewportView(jtaWarnings);

        jPanel5.add(jspWarnings, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbGenerate.setText("Generar");
        jbGenerate.setToolTipText("[Ctrl + Enter]");
        jbGenerate.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbGenerate);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initComponentsExtra() {
        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbPickDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbPickDateEnd);
        moFieldRequiredFiscalIds = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfRequiredFiscalIds, jlRequiredFiscalIds);
        moFieldRequiredFiscalIds.setLengthMax((DCfdConsts.LEN_RFC_PER + 2) * 10); // e.g., string "XAXX010101000, " 10 times

        mvFields = new Vector<>();
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldRequiredFiscalIds);

        jbPickDateStart.addActionListener(this);
        jbPickDateEnd.addActionListener(this);
        jbEditRequiredFiscalIds.addActionListener(this);
        jbGenerate.addActionListener(this);
        jbCancel.addActionListener(this);
        jrbFormatCsv.addItemListener(this);
        jrbFormatPipe.addItemListener(this);

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldRequiredFiscalIds.setFieldValue("");
        
        jckExcludeTotallyZero.setSelected(true);
        jrbFormatCsv.setSelected(true);
        jtfRequiredFiscalIds.setEditable(false);
        jtfRequiredFiscalIds.setFocusable(false);
        jtfRequiredFiscalIds.setText("");
        
        switch (mnDiotVersion) {
            case SDiotConsts.VER_1:
                setTitle("Layout de la DIOT");
                jlRequiredFiscalIds.setEnabled(false);
                jbEditRequiredFiscalIds.setEnabled(false);
                jckGenerateDetailedInfoFile.setEnabled(false);
                jckGenerateDetailedInfoFile.setSelected(false);
                break;
                
            case SDiotConsts.VER_2:
                setTitle("Layout de la DIOT 2025");
                jlRequiredFiscalIds.setEnabled(true);
                jbEditRequiredFiscalIds.setEnabled(true);
                jckGenerateDetailedInfoFile.setEnabled(true);
                jckGenerateDetailedInfoFile.setSelected(true);
                break;
                
            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }
        
        processConfig();
                
        SFormUtilities.createActionMap(rootPane, this, "actionPerformedGenerate", "generate", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionPerformedCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }
    
    private void processConfig() {
        moConfigDiotTax = null;
        msConfigDiotAccounts = null;
        manConfigDiotTaxRegionsIgnored = null;

        String diotConfig = "";
        
        try {
            // process DIOT tax:
            
            moConfigDiotTax = SDiotUtils.getDiotVatDefault(miClient);
            
            diotConfig = "1) IVA predeterminado para la DIOT: " + (moConfigDiotTax != null ? moConfigDiotTax.getTax() + " "
                    + "(PK: " + SLibUtils.textKey((int[]) moConfigDiotTax.getPrimaryKey()) + ")" : "ND");
            
            // process DIOT accounts:
            
            String accounts = "";
            
            msConfigDiotAccounts = SDiotUtils.getDiotAccounts(miClient.getSession().getStatement());
            
            if (msConfigDiotAccounts.length == 1 && msConfigDiotAccounts[0].isEmpty()) {
                msConfigDiotAccounts = null;
            }
            else {
                for (int i = 0; i < msConfigDiotAccounts.length; i++) {
                    if (!msConfigDiotAccounts[i].isEmpty()) {
                        accounts += (accounts.isEmpty() ? "" : (i + 1 < msConfigDiotAccounts.length ? ", " : " y ")) + msConfigDiotAccounts[i];
                    }
                }
            }
            
            diotConfig += "\n\n2) Cuentas contables para la DIOT: " + (!accounts.isEmpty() ? accounts : "ND");
            
            // process DIOT tax regions ignored:
            
            String taxRegionsIgnored = "";
            
            manConfigDiotTaxRegionsIgnored = SDiotUtils.getDiotTaxRegionsIgnored(miClient.getSession().getStatement());
            
            if (manConfigDiotTaxRegionsIgnored != null) {
                for (int i = 0; i < manConfigDiotTaxRegionsIgnored.length; i++) {
                    taxRegionsIgnored += (taxRegionsIgnored.isEmpty() ? "" : (i + 1 < manConfigDiotTaxRegionsIgnored.length ? ", " : " y ")) + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_REG, new int[] { manConfigDiotTaxRegionsIgnored[i] }) + " "
                            + "(PK: " + manConfigDiotTaxRegionsIgnored[i] + ")";
                }
            }
            
            diotConfig += "\n\n3) Regiones de impuestos ignoradas para la DIOT: " + (!taxRegionsIgnored.isEmpty() ? taxRegionsIgnored : "ND");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        
        jtaDiotConfig.setText(!diotConfig.isEmpty() ? diotConfig : "ND");
        jtaDiotConfig.setCaretPosition(0);
    }
    
    private ArrayList<String> createRequiredFiscalIds() throws Exception {
        HashSet<String> fiscalIds = new HashSet<>();
        
        if (jtfRequiredFiscalIds.isEditable()) {
            String requiredFiscalIds = moFieldRequiredFiscalIds.getString();

            if (!requiredFiscalIds.isEmpty()) {
                for (String requiredFiscalId : SLibUtils.textExplode(requiredFiscalIds, ",")) {
                    String fiscalId = SLibUtils.textTrim(requiredFiscalId);

                    if (fiscalId.isEmpty()) {
                        throw new Exception("Uno de los valores del campo '" + jlRequiredFiscalIds.getText() + "' es un texto vacío.");
                    }
                    else if (fiscalId.length() < DCfdConsts.LEN_RFC_ORG || fiscalId.length() > DCfdConsts.LEN_RFC_PER) {
                        throw new Exception("El valor '" + fiscalId + "' del campo '" + jlRequiredFiscalIds.getText() + "' tiene " + fiscalId.length() + " carácteres, no los " + DCfdConsts.LEN_RFC_ORG + " o " + DCfdConsts.LEN_RFC_PER + " de un RFC.");
                    }
                    else {
                        fiscalIds.add(fiscalId);
                    }
                }
            }
        }
        
        return new ArrayList<>(fiscalIds);
    }
    
    @SuppressWarnings("deprecation")
    private void computeLayout() {
        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            String charset;
            String stringLayout;
            String stringDetailedInfo;
            
            switch (mnDiotVersion) {
                case SDiotConsts.VER_1:
                    charset = "ASCII";
                    erp.mfin.data.diot.ver1.SDiotLayout diotLayout1 = new erp.mfin.data.diot.ver1.SDiotLayout(miClient, 
                            moFieldDateStart.getDate(), moFieldDateEnd.getDate());
                    
                    stringLayout = diotLayout1.getLayout(jrbFormatPipe.isSelected() ? SDiotConsts.FORMAT_PIPE : SDiotConsts.FORMAT_CSV,
                            jckExcludeTotallyZero.isSelected());
                    stringDetailedInfo = "";
                    break;
                    
                case SDiotConsts.VER_2:
                    charset = "UTF-8";
                    erp.mfin.data.diot.ver2.SDiotLayout diotLayout2 = new erp.mfin.data.diot.ver2.SDiotLayout(miClient, 
                            moFieldDateStart.getDate(), moFieldDateEnd.getDate(), createRequiredFiscalIds());
                    
                    String[] strings = diotLayout2.getLayout(jrbFormatPipe.isSelected() ? SDiotConsts.FORMAT_PIPE : SDiotConsts.FORMAT_CSV,
                            jckExcludeTotallyZero.isSelected(), jckGenerateDetailedInfoFile.isSelected());
                    stringLayout = strings[0];
                    stringDetailedInfo = strings[1];
                    break;
                    
                default:
                    throw new Exception(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
            }
            
            String fileExt = jrbFormatPipe.isSelected() ? ".txt" : ".csv";
            SimpleDateFormat periodFormat = new SimpleDateFormat("yyyy-MM");

            miClient.getFileChooser().setSelectedFile(
                    new File("DIOT " +
                            miClient.getSessionXXX().getCompany().getDbmsDataCompany().getFiscalId() + " " +
                            periodFormat.format(moFieldDateEnd.getDate()) + " " +
                            SLibUtils.FileDateFormatDatetime.format(new Date()) +
                            fileExt));

            if (miClient.getFileChooser().showSaveDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                String fileNameDiotLayout = miClient.getFileChooser().getSelectedFile().getAbsolutePath();
                File fileDiotLayout = new File(fileNameDiotLayout.endsWith(fileExt) ? fileNameDiotLayout : fileNameDiotLayout + fileExt);

                try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDiotLayout), charset))) {
                    bw.write(stringLayout);
                }
                
                if (jckGenerateDetailedInfoFile.isSelected()) {
                    String fileNameDetailedInfo = fileDiotLayout.getAbsolutePath();
                    File fileDetailedInfo = new File(fileNameDetailedInfo.replaceAll(fileExt, "-info" + fileExt));

                    try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileDetailedInfo), charset))) {
                        bw.write(stringDetailedInfo);
                    }
                }
                
                if (miClient.showMsgBoxConfirm(SLibConstants.MSG_INF_FILE_CREATE + fileDiotLayout.getPath() + "\n" + SLibConstants.MSG_CNF_FILE_OPEN) == JOptionPane.YES_OPTION) {
                    SLibUtilities.launchFile(fileDiotLayout.getPath());
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    private void itemStateChangedFormat(final int format) {
        switch (format) {
            case SDiotConsts.FORMAT_CSV:
                jckGenerateDetailedInfoFile.setEnabled(true);
                jckGenerateDetailedInfoFile.setSelected(true);
                break;
            case SDiotConsts.FORMAT_PIPE:
                jckGenerateDetailedInfoFile.setEnabled(false);
                jckGenerateDetailedInfoFile.setSelected(false);
                break;
            default:
                // nothing
        }
    }

    private void actionPerformedDateBegin() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionPerformedDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    public void actionPerformedEditRequiredFiscalIds() {
        jbEditRequiredFiscalIds.setEnabled(false);
        jtfRequiredFiscalIds.setEditable(true);
        jtfRequiredFiscalIds.setFocusable(true);
        jtfRequiredFiscalIds.requestFocusInWindow();
    }

    public void actionPerformedGenerate() {
        SFormValidation validation = validateDialog();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (!validation.getMessage().isEmpty()) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            String confirm = "Antes de proseguir, de favor:\n"
                    + "1) asegúrate de validar que la configuración actual de la DIOT es correcta;\n"
                    + "2) considera las advertencias sobre la generación del layout de la DIOT.\n"
                    + (!jtfRequiredFiscalIds.isEnabled() || moFieldRequiredFiscalIds.getString().isEmpty() ? "" : "\nLa DIOT se generará solamente para el o los RFC especificados:\n" + moFieldRequiredFiscalIds.getString() + ".\n")
                    + "\nLa generación del layout de la DIOT puede demorar algunos minutos.\n";
            
            if (miClient.showMsgBoxConfirm(confirm + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                computeLayout();
                setVisible(false);
            }
        }
    }

    public void actionPerformedCancel() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFormat;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbEditRequiredFiscalIds;
    private javax.swing.JButton jbGenerate;
    private javax.swing.JButton jbPickDateEnd;
    private javax.swing.JButton jbPickDateStart;
    private javax.swing.JCheckBox jckExcludeTotallyZero;
    private javax.swing.JCheckBox jckGenerateDetailedInfoFile;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlFormat;
    private javax.swing.JLabel jlRequiredFiscalIds;
    private javax.swing.JLabel jlRequiredFiscalIdsHint;
    private javax.swing.JRadioButton jrbFormatCsv;
    private javax.swing.JRadioButton jrbFormatPipe;
    private javax.swing.JScrollPane jspDiotConfig;
    private javax.swing.JScrollPane jspWarnings;
    private javax.swing.JTextArea jtaDiotConfig;
    private javax.swing.JTextArea jtaWarnings;
    private javax.swing.JTextField jtfRequiredFiscalIds;
    // End of variables declaration//GEN-END:variables

    public SFormValidation validateDialog() {
        SFormValidation validation = new SFormValidation();
        
        if (moConfigDiotTax == null) {
            validation.setMessage("¡No se puede generar la DIOT!:\n"
                    + "No se ha definido en la configuración de la empresa el IVA predeterminado para la DIOT.");
        }
        else if (msConfigDiotAccounts == null) {
            validation.setMessage("¡No se puede generar la DIOT!:\n"
                    + "No se han definido en la configuración de la empresa las cuentas contables para la DIOT.");
        }
        else {
            for (SFormField field : mvFields) {
                if (!field.validateField()) {
                    validation.setIsError(true);
                    validation.setComponent(field.getComponent());
                    break;
                }
            }

            if (!validation.getIsError()) {
                try {
                    createRequiredFiscalIds();
                }
                catch (Exception e) {
                    validation.setMessage(e.getMessage());
                    validation.setComponent(jtfRequiredFiscalIds);
                }
                
                if (!validation.getIsError()) {
                    String message = SGuiUtilities.validateDateRange(moFieldDateStart.getDate(), moFieldDateEnd.getDate());

                    if (!message.isEmpty()) {
                        validation.setMessage(message);
                        validation.setComponent(jftDateEnd);
                    }
                }
            }
        }
        
        return validation;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickDateStart) {
                actionPerformedDateBegin();
            }
            else if (button == jbPickDateEnd) {
                actionPerformedDateEnd();
            }
            else if (button == jbEditRequiredFiscalIds) {
                actionPerformedEditRequiredFiscalIds();
            }
            else if (button == jbGenerate) {
                actionPerformedGenerate();
            }
            else if (button == jbCancel) {
                actionPerformedCancel();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton && e.getStateChange() == ItemEvent.SELECTED) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            
            if (radioButton == jrbFormatCsv) {
                itemStateChangedFormat(SDiotConsts.FORMAT_CSV);
            }
            else if (radioButton == jrbFormatPipe) {
                itemStateChangedFormat(SDiotConsts.FORMAT_PIPE);
            }
        }
    }
}
