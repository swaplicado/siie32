/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRecordPaymentComplete.java
 *
 * Created on 22/09/2009, 04:24:20 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRow;
import erp.mbps.data.SDataBizPartner;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SFinAccountConfigEntry;
import erp.mfin.data.SFinAccountUtilities;
import erp.mfin.data.SFinBalanceTax;
import erp.mfin.data.SRowDpsPaymentMultiple;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SFinConsts;
import erp.mtrn.data.SDataDsm;
import erp.mtrn.data.SDataDsmEntry;
import erp.mtrn.data.SThinDps;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.TableCellEditor;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiConsts;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRecordPaymentMultiple extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ListSelectionListener, javax.swing.event.CellEditorListener {
    
    public static final int MODE = 1000;
    public static final int MODE_BP_ONLY = 1001; // accounting of business partner only
    public static final int MODE_BP_CASH_ACC = 1002; // accounting of business partner & cash account

    private erp.client.SClientInterface miClient;
    private int mnBizPartnerCategory;
    private int mnBizPartnerCategoryX; // to populate combo box of business parnters
    private double mdBalanceFactor;

    private int mnFormResult;
    private int mnFormStatus;
    private int mnFormMode;
    private boolean mbFirstTime;
    private java.util.Vector<SFormField> mvFields;

    private erp.lib.form.SFormField moFieldAccValueCy;
    private erp.lib.form.SFormField moFieldAccValue;
    private erp.lib.form.SFormField moFieldAccExchangeRateSys;
    private erp.lib.form.SFormField moFieldAccExchangeRate;
    private erp.lib.form.SFormField moFieldBizPartner;
    private erp.lib.form.SFormField moFieldDateCutoff;
    private erp.lib.table.STablePaneGrid moGridDocs;
    private int[] manSysMoveTypeKey;
    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataAccountCash moParamAccountCash;
    private erp.mbps.data.SDataBizPartner moBizPartner;
    private double mdParamExchangeRateToday;
    private double[] madParamAccountCashBal;
    private boolean mbIsAccountCashLocalCurrency;
    private double mdTotalPaymentCy;
    private double mdTotalPayment;
    private double mdAccValueCyTemp;

    /** Creates new form SDialogRecordPaymentComplete
     * @param client ERP Client interface.
     * @param bizPartnerCategory Business partner category:
     * a) SDataConstantsSys.BPSS_CT_BP_SUP
     * b) SDataConstantsSys.BPSS_CT_BP_CUS
     */
    public SDialogRecordPaymentMultiple(erp.client.SClientInterface client, int bizPartnerCategory) {
        super(client.getFrame(), true);
        miClient = client;
        mnBizPartnerCategory = bizPartnerCategory;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtButtonGroup = new javax.swing.ButtonGroup();
        jpInput = new javax.swing.JPanel();
        jpPayment = new javax.swing.JPanel();
        jpAccountCash = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jtfCompanyBranchRo = new javax.swing.JTextField();
        jtfAccountCashRo = new javax.swing.JTextField();
        jtfAccountCashCodeRo = new javax.swing.JTextField();
        jtfAccountCashCurRo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jtfDateRo = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlAccValueCy = new javax.swing.JLabel();
        jtfAccValueCy = new javax.swing.JTextField();
        jtfAccValueCyKeyRo = new javax.swing.JTextField();
        jbUpdateAccValueCy = new javax.swing.JButton();
        jlDummy01 = new javax.swing.JLabel();
        jlAccExchangeRateSys = new javax.swing.JLabel();
        jtfAccExchangeRateSysRo = new javax.swing.JTextField();
        jbPickAccExchangeRateSys = new javax.swing.JButton();
        jbShowAccExchangeRateAcum = new javax.swing.JButton();
        jlDummy6 = new javax.swing.JLabel();
        jfFomMode = new javax.swing.JLabel();
        jtfFormMode = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlAccValue = new javax.swing.JLabel();
        jtfAccValue = new javax.swing.JTextField();
        jtfAccValueKeyRo = new javax.swing.JTextField();
        jbUpdateAccValue = new javax.swing.JButton();
        jlDummy02 = new javax.swing.JLabel();
        jlAccExchangeRate = new javax.swing.JLabel();
        jtfAccExchangeRate = new javax.swing.JTextField();
        jbUpdateAccExchangeRate = new javax.swing.JButton();
        jbSetAccExchangeRateAcum = new javax.swing.JButton();
        jlDummy05 = new javax.swing.JLabel();
        jckIsExchangeRatePreserved = new javax.swing.JCheckBox();
        jpBizPartner = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        jcbBizPartner = new javax.swing.JComboBox<SFormComponentItem>();
        jbPickBizPartner = new javax.swing.JButton();
        jlDateCutoff = new javax.swing.JLabel();
        jftDateCutoff = new javax.swing.JFormattedTextField();
        jbPickDateCutoff = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jbShowDocs = new javax.swing.JButton();
        jbResetDocs = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jbApplyPays = new javax.swing.JButton();
        jbClearPays = new javax.swing.JButton();
        jpDocs = new javax.swing.JPanel();
        jpTotals = new javax.swing.JPanel();
        jpTotals1 = new javax.swing.JPanel();
        jlTotalBalanceCy = new javax.swing.JLabel();
        jtfTotalBalanceCy = new javax.swing.JTextField();
        jtfTotalBalanceCyKeyRo = new javax.swing.JTextField();
        jlDummy3 = new javax.swing.JLabel();
        jlTotalPaymentCy = new javax.swing.JLabel();
        jtfTotalPaymentCy = new javax.swing.JTextField();
        jtfTotalPaymentCyKeyRo = new javax.swing.JTextField();
        jpTotals2 = new javax.swing.JPanel();
        jlTotalBalance = new javax.swing.JLabel();
        jtfTotalBalance = new javax.swing.JTextField();
        jtfTotalBalanceKeyRo = new javax.swing.JTextField();
        jlDummy4 = new javax.swing.JLabel();
        jlTotalPayment = new javax.swing.JLabel();
        jtfTotalPayment = new javax.swing.JTextField();
        jtfTotalPaymentKeyRo = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pago integral de asociado de negocios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpInput.setLayout(new java.awt.BorderLayout());

        jpPayment.setLayout(new java.awt.BorderLayout());

        jpAccountCash.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la cuenta de dinero:"));
        jpAccountCash.setLayout(new java.awt.GridLayout(4, 1, 0, 2));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCash.setText("Cuenta de dinero:");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel11.add(jlAccountCash);

        jtfCompanyBranchRo.setEditable(false);
        jtfCompanyBranchRo.setText("COMPANY BRANCH");
        jtfCompanyBranchRo.setFocusable(false);
        jtfCompanyBranchRo.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jtfCompanyBranchRo);

        jtfAccountCashRo.setEditable(false);
        jtfAccountCashRo.setText("CASH ACCOUNT");
        jtfAccountCashRo.setFocusable(false);
        jtfAccountCashRo.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jtfAccountCashRo);

        jtfAccountCashCodeRo.setEditable(false);
        jtfAccountCashCodeRo.setText("CODE");
        jtfAccountCashCodeRo.setFocusable(false);
        jtfAccountCashCodeRo.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfAccountCashCodeRo);

        jtfAccountCashCurRo.setEditable(false);
        jtfAccountCashCurRo.setText("CURRENCY");
        jtfAccountCashCurRo.setFocusable(false);
        jtfAccountCashCurRo.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jtfAccountCashCurRo);

        jpAccountCash.add(jPanel11);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jlDate);

        jtfDateRo.setEditable(false);
        jtfDateRo.setText("dd/mm/yyyy");
        jtfDateRo.setFocusable(false);
        jtfDateRo.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jtfDateRo);

        jpAccountCash.add(jPanel1);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccValueCy.setText("Monto por aplicar: *");
        jlAccValueCy.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel10.add(jlAccValueCy);

        jtfAccValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccValueCy.setText("0.00");
        jtfAccValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfAccValueCy);

        jtfAccValueCyKeyRo.setEditable(false);
        jtfAccValueCyKeyRo.setText("CUR");
        jtfAccValueCyKeyRo.setFocusable(false);
        jtfAccValueCyKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel10.add(jtfAccValueCyKeyRo);

        jbUpdateAccValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbUpdateAccValueCy.setToolTipText("Calcular");
        jbUpdateAccValueCy.setFocusable(false);
        jbUpdateAccValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbUpdateAccValueCy);

        jlDummy01.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jlDummy01);

        jlAccExchangeRateSys.setText("Tipo de cambio sistema:");
        jlAccExchangeRateSys.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlAccExchangeRateSys);

        jtfAccExchangeRateSysRo.setEditable(false);
        jtfAccExchangeRateSysRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccExchangeRateSysRo.setText("0.0000");
        jtfAccExchangeRateSysRo.setFocusable(false);
        jtfAccExchangeRateSysRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfAccExchangeRateSysRo);

        jbPickAccExchangeRateSys.setText("...");
        jbPickAccExchangeRateSys.setToolTipText("Seleccionar tipo de cambio");
        jbPickAccExchangeRateSys.setFocusable(false);
        jbPickAccExchangeRateSys.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbPickAccExchangeRateSys);

        jbShowAccExchangeRateAcum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbShowAccExchangeRateAcum.setToolTipText("Ver tipo de cambio acumulado");
        jbShowAccExchangeRateAcum.setFocusable(false);
        jbShowAccExchangeRateAcum.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbShowAccExchangeRateAcum);

        jlDummy6.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel10.add(jlDummy6);

        jfFomMode.setText("Modo contabilización:");
        jfFomMode.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jfFomMode);

        jtfFormMode.setEditable(false);
        jtfFormMode.setText("FORM MODE");
        jtfFormMode.setFocusable(false);
        jtfFormMode.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel10.add(jtfFormMode);

        jpAccountCash.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccValue.setText("Monto por aplicar (ML): *");
        jlAccValue.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel12.add(jlAccValue);

        jtfAccValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccValue.setText("0.00");
        jtfAccValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfAccValue);

        jtfAccValueKeyRo.setEditable(false);
        jtfAccValueKeyRo.setText("CUR");
        jtfAccValueKeyRo.setFocusable(false);
        jtfAccValueKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel12.add(jtfAccValueKeyRo);

        jbUpdateAccValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbUpdateAccValue.setToolTipText("Calcular");
        jbUpdateAccValue.setFocusable(false);
        jbUpdateAccValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbUpdateAccValue);

        jlDummy02.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(jlDummy02);

        jlAccExchangeRate.setText("Tipo de cambio: *");
        jlAccExchangeRate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlAccExchangeRate);

        jtfAccExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccExchangeRate.setText("0.0000");
        jtfAccExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfAccExchangeRate);

        jbUpdateAccExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbUpdateAccExchangeRate.setToolTipText("Calcular");
        jbUpdateAccExchangeRate.setFocusable(false);
        jbUpdateAccExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbUpdateAccExchangeRate);

        jbSetAccExchangeRateAcum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbSetAccExchangeRateAcum.setToolTipText("Asignar tipo de cambio acumulado");
        jbSetAccExchangeRateAcum.setFocusable(false);
        jbSetAccExchangeRateAcum.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbSetAccExchangeRateAcum);

        jlDummy05.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel12.add(jlDummy05);

        jckIsExchangeRatePreserved.setText("Conservar TC doc.");
        jckIsExchangeRatePreserved.setEnabled(false);
        jckIsExchangeRatePreserved.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jckIsExchangeRatePreserved);

        jpAccountCash.add(jPanel12);

        jpPayment.add(jpAccountCash, java.awt.BorderLayout.NORTH);

        jpBizPartner.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del asociado de negocios:"));
        jpBizPartner.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBizPartner.setText("Asociado de negocios: *");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel5.add(jlBizPartner);

        jcbBizPartner.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(jcbBizPartner);

        jbPickBizPartner.setText("...");
        jbPickBizPartner.setToolTipText("Buscar asociado de negocios");
        jbPickBizPartner.setFocusable(false);
        jbPickBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPickBizPartner);

        jlDateCutoff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateCutoff.setText("Corte:");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jlDateCutoff);

        jftDateCutoff.setText("yyyy/mm/dd");
        jftDateCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jftDateCutoff);

        jbPickDateCutoff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPickDateCutoff.setToolTipText("Seleccionar fecha");
        jbPickDateCutoff.setFocusable(false);
        jbPickDateCutoff.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPickDateCutoff);

        jpBizPartner.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 0));

        jbShowDocs.setText("Mostrar");
        jbShowDocs.setToolTipText("Mostrar documentos");
        jbShowDocs.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbShowDocs.setMaximumSize(new java.awt.Dimension(65, 23));
        jbShowDocs.setMinimumSize(new java.awt.Dimension(65, 23));
        jbShowDocs.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jbShowDocs);

        jbResetDocs.setText("Reiniciar");
        jbResetDocs.setToolTipText("Borrar documentos");
        jbResetDocs.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbResetDocs.setMaximumSize(new java.awt.Dimension(65, 23));
        jbResetDocs.setMinimumSize(new java.awt.Dimension(65, 23));
        jbResetDocs.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jbResetDocs);

        jLabel2.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel8.add(jLabel2);

        jbApplyPays.setText("Aplicar");
        jbApplyPays.setToolTipText("Aplicar pagos");
        jbApplyPays.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbApplyPays.setMaximumSize(new java.awt.Dimension(65, 23));
        jbApplyPays.setMinimumSize(new java.awt.Dimension(65, 23));
        jbApplyPays.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jbApplyPays);

        jbClearPays.setText("Limpiar");
        jbClearPays.setToolTipText("Limpiar pagos");
        jbClearPays.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbClearPays.setMaximumSize(new java.awt.Dimension(65, 23));
        jbClearPays.setMinimumSize(new java.awt.Dimension(65, 23));
        jbClearPays.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel8.add(jbClearPays);

        jpBizPartner.add(jPanel8, java.awt.BorderLayout.EAST);

        jpPayment.add(jpBizPartner, java.awt.BorderLayout.SOUTH);

        jpInput.add(jpPayment, java.awt.BorderLayout.PAGE_START);

        jpDocs.setBorder(javax.swing.BorderFactory.createTitledBorder("Documentos del asociado de negocios:"));
        jpDocs.setLayout(new java.awt.BorderLayout());
        jpInput.add(jpDocs, java.awt.BorderLayout.CENTER);

        jpTotals.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jpTotals.setLayout(new java.awt.GridLayout(2, 1, 0, 2));

        jpTotals1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 0));

        jlTotalBalanceCy.setText("Saldo asociado de negocios:");
        jlTotalBalanceCy.setPreferredSize(new java.awt.Dimension(175, 23));
        jpTotals1.add(jlTotalBalanceCy);

        jtfTotalBalanceCy.setEditable(false);
        jtfTotalBalanceCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalBalanceCy.setText("0.00");
        jtfTotalBalanceCy.setFocusable(false);
        jtfTotalBalanceCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTotals1.add(jtfTotalBalanceCy);

        jtfTotalBalanceCyKeyRo.setEditable(false);
        jtfTotalBalanceCyKeyRo.setText("CUR");
        jtfTotalBalanceCyKeyRo.setFocusable(false);
        jtfTotalBalanceCyKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jpTotals1.add(jtfTotalBalanceCyKeyRo);

        jlDummy3.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTotals1.add(jlDummy3);

        jlTotalPaymentCy.setText("Total aplicado:");
        jlTotalPaymentCy.setPreferredSize(new java.awt.Dimension(110, 23));
        jpTotals1.add(jlTotalPaymentCy);

        jtfTotalPaymentCy.setEditable(false);
        jtfTotalPaymentCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalPaymentCy.setText("0.00");
        jtfTotalPaymentCy.setFocusable(false);
        jtfTotalPaymentCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTotals1.add(jtfTotalPaymentCy);

        jtfTotalPaymentCyKeyRo.setEditable(false);
        jtfTotalPaymentCyKeyRo.setText("CUR");
        jtfTotalPaymentCyKeyRo.setFocusable(false);
        jtfTotalPaymentCyKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jpTotals1.add(jtfTotalPaymentCyKeyRo);

        jpTotals.add(jpTotals1);

        jpTotals2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 2, 0));

        jlTotalBalance.setText("Saldo asociado de negocios (ML):");
        jlTotalBalance.setPreferredSize(new java.awt.Dimension(175, 23));
        jpTotals2.add(jlTotalBalance);

        jtfTotalBalance.setEditable(false);
        jtfTotalBalance.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalBalance.setText("0.00");
        jtfTotalBalance.setFocusable(false);
        jtfTotalBalance.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTotals2.add(jtfTotalBalance);

        jtfTotalBalanceKeyRo.setEditable(false);
        jtfTotalBalanceKeyRo.setText("CUR");
        jtfTotalBalanceKeyRo.setFocusable(false);
        jtfTotalBalanceKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jpTotals2.add(jtfTotalBalanceKeyRo);

        jlDummy4.setPreferredSize(new java.awt.Dimension(35, 23));
        jpTotals2.add(jlDummy4);

        jlTotalPayment.setText("Total aplicado (ML):");
        jlTotalPayment.setPreferredSize(new java.awt.Dimension(110, 23));
        jpTotals2.add(jlTotalPayment);

        jtfTotalPayment.setEditable(false);
        jtfTotalPayment.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalPayment.setText("0.00");
        jtfTotalPayment.setFocusable(false);
        jtfTotalPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jpTotals2.add(jtfTotalPayment);

        jtfTotalPaymentKeyRo.setEditable(false);
        jtfTotalPaymentKeyRo.setText("CUR");
        jtfTotalPaymentKeyRo.setFocusable(false);
        jtfTotalPaymentKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jpTotals2.add(jtfTotalPaymentKeyRo);

        jpTotals.add(jpTotals2);

        jpInput.add(jpTotals, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpInput, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setText("frpm");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jLabel1);

        jpControls.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel3.add(jbCancel);

        jpControls.add(jPanel3);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(1056, 689));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        switch (mnBizPartnerCategory) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                setTitle("Pago múltiple a proveedor");
                manSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                mnBizPartnerCategoryX = SDataConstants.BPSX_BP_SUP;
                mdBalanceFactor = -1;
                break;
                
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                setTitle("Cobro múltiple a cliente");
                manSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                mnBizPartnerCategoryX = SDataConstants.BPSX_BP_CUS;
                mdBalanceFactor = 1;
                break;

            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        String localCurrencyKey = miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey(); 
        jtfAccValueKeyRo.setText(localCurrencyKey);
        jtfTotalBalanceKeyRo.setText(localCurrencyKey);
        jtfTotalPaymentKeyRo.setText(localCurrencyKey);
        
        moFieldAccValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccValueCy, jlAccValueCy);
        moFieldAccValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccValue, jlAccValue);
        moFieldAccExchangeRateSys = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfAccExchangeRateSysRo, jlAccExchangeRateSys);
        moFieldAccExchangeRateSys.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldAccExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccExchangeRate, jlAccExchangeRate);
        moFieldAccExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldBizPartner = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbBizPartner, jlBizPartner);
        moFieldBizPartner.setPickerButton(jbPickBizPartner);
        moFieldDateCutoff = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDateCutoff, jlDateCutoff);

        mvFields = new Vector<>();
        mvFields.add(moFieldAccValueCy);
        mvFields.add(moFieldAccValue);
        mvFields.add(moFieldAccExchangeRateSys);
        mvFields.add(moFieldAccExchangeRate);
        mvFields.add(moFieldBizPartner);
        mvFields.add(moFieldDateCutoff);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbUpdateAccValueCy.addActionListener(this);
        jbUpdateAccValue.addActionListener(this);
        jbUpdateAccExchangeRate.addActionListener(this);
        jbPickAccExchangeRateSys.addActionListener(this);
        jbShowAccExchangeRateAcum.addActionListener(this);
        jbSetAccExchangeRateAcum.addActionListener(this);
        jbPickBizPartner.addActionListener(this);
        jbShowDocs.addActionListener(this);
        jbResetDocs.addActionListener(this);
        jbApplyPays.addActionListener(this);
        jbClearPays.addActionListener(this);

        jtfAccValueCy.addFocusListener(this);
        jtfAccValue.addFocusListener(this);
        jtfAccExchangeRate.addFocusListener(this);
        jtfTotalPaymentCy.addFocusListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        
        moGridDocs = new STablePaneGrid(miClient);
        jpDocs.add(moGridDocs, BorderLayout.CENTER);
        
        int i = 0;
        STableColumnForm[] aoTableColumns = new STableColumnForm[13];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo doc.", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio doc.", STableConstants.WIDTH_DOC_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha doc.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Inicio créd.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Días créd.", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Venc. doc.", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Área func.", STableConstants.WIDTH_CODE_DOC);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Pagar", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Pago mon. $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Pago $", STableConstants.WIDTH_VALUE_2X);
        
        for (i = 0; i < aoTableColumns.length; i++) {
            moGridDocs.addTableColumn(aoTableColumns[i]);
        }
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jtfAccValueCy.isEnabled()) {
                jtfAccValueCy.requestFocusInWindow();
            }
            else {
                jbCancel.requestFocusInWindow();
            }
        }
    }
    
    private void enableFields(final boolean enable) {
        jtfAccValueCy.setEnabled(enable);
        
        jcbBizPartner.setEnabled(enable);
        jbPickBizPartner.setEnabled(enable);
        jftDateCutoff.setEnabled(enable);
        jbPickDateCutoff.setEnabled(enable);
        
        if (moParamAccountCash == null || !enable) {
            jtfAccValue.setEnabled(false);
            jtfAccExchangeRate.setEnabled(false);

            jbUpdateAccValueCy.setEnabled(false);
            jbUpdateAccValue.setEnabled(false);
            jbUpdateAccExchangeRate.setEnabled(false);
            jbPickAccExchangeRateSys.setEnabled(false);
            jbShowAccExchangeRateAcum.setEnabled(false);
            jbSetAccExchangeRateAcum.setEnabled(false);
        }
        else {
            if (mbIsAccountCashLocalCurrency) {
                jtfAccValue.setEnabled(false);
                jtfAccExchangeRate.setEnabled(false);

                jbUpdateAccValueCy.setEnabled(false);
                jbUpdateAccValue.setEnabled(false);
                jbUpdateAccExchangeRate.setEnabled(false);
                jbPickAccExchangeRateSys.setEnabled(false);
                jbShowAccExchangeRateAcum.setEnabled(false);
                jbSetAccExchangeRateAcum.setEnabled(false);
            }
            else {
                jtfAccValue.setEnabled(true);
                jtfAccExchangeRate.setEnabled(true);

                jbUpdateAccValueCy.setEnabled(true);
                jbUpdateAccValue.setEnabled(true);
                jbUpdateAccExchangeRate.setEnabled(true);
                jbPickAccExchangeRateSys.setEnabled(true);
                jbShowAccExchangeRateAcum.setEnabled(true);
                jbSetAccExchangeRateAcum.setEnabled(true);
            }
        }
    }

    private void renderParamsSettings() {
        if (moParamAccountCash == null) {
            moFieldAccValueCy.setFieldValue(0d);
            moFieldAccValue.setFieldValue(0d);
            
            moFieldAccExchangeRateSys.setFieldValue(1d);
            moFieldAccExchangeRate.setFieldValue(1d);

            jtfCompanyBranchRo.setText("");
            jtfAccountCashRo.setText("");
            jtfAccountCashCodeRo.setText("");
            jtfAccountCashCurRo.setText(miClient.getSession().getSessionCustom().getLocalCurrency());
            jtfDateRo.setText("");
            
            jtfAccValueCyKeyRo.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());

            jckIsExchangeRatePreserved.setSelected(false);
        }
        else {
            moFieldAccValueCy.setFieldValue(0d);
            moFieldAccValue.setFieldValue(0d);

            if (mbIsAccountCashLocalCurrency) {
                moFieldAccExchangeRateSys.setFieldValue(1d);
                moFieldAccExchangeRate.setFieldValue(1d);
            }
            else {
                moFieldAccExchangeRateSys.setFieldValue(mdParamExchangeRateToday);
                moFieldAccExchangeRate.setFieldValue(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ?
                    madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1] : mdParamExchangeRateToday);

                if (moFieldAccExchangeRate.getDouble() == 0d) {
                    moFieldAccExchangeRate.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                }
            }

            SDataBizPartnerBranch branch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(
                    miClient, SDataConstants.BPSU_BPB, new int[] { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId() }, SLibConstants.EXEC_MODE_SILENT);
            
            jtfCompanyBranchRo.setText(branch.getBizPartnerBranch());
            jtfAccountCashRo.setText(moParamAccountCash.getDbmsCompanyBranchEntity().getEntity());
            jtfAccountCashCodeRo.setText(moParamAccountCash.getDbmsCompanyBranchEntity().getCode());
            jtfAccountCashCurRo.setText(miClient.getSession().getSessionCustom().getCurrency(new int[] { moParamAccountCash.getFkCurrencyId() }));
            jtfDateRo.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()));
            
            jtfAccValueCyKeyRo.setText(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moParamAccountCash.getFkCurrencyId() }));

            jckIsExchangeRatePreserved.setSelected(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ?
                miClient.getSessionXXX().getParamsCompany().getIsExchangeRatePurPreserved() :
                miClient.getSessionXXX().getParamsCompany().getIsExchangeRateSalPreserved());
        }
        
        jtfTotalBalanceCyKeyRo.setText(jtfAccValueCyKeyRo.getText());
        jtfTotalPaymentCyKeyRo.setText(jtfAccValueCyKeyRo.getText());
    }
    
    private void renderFormMode() {
        switch (mnFormMode) {
            case MODE_BP_ONLY:
                jtfFormMode.setText("Asociado de negocios solamente");
                break;
            case MODE_BP_CASH_ACC:
                jtfFormMode.setText("Asociado de negocios y cuenta de dinero");
                break;
            default:
                jtfFormMode.setText("?");
        }
        
        jtfFormMode.setCaretPosition(0);
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntryAccountCash(final String concept) {
        int[] keySystemMoveType = null;
        int[] keySystemMoveTypeXXX = null;
        SDataRecordEntry entry = new SDataRecordEntry();

        if (moParamAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            keySystemMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
        }
        else {
            keySystemMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
        }

        entry.setConcept(concept);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        entry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));

        if (mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP) {
            entry.setDebit(0);
            entry.setCredit(moFieldAccValue.getDouble());
            entry.setExchangeRate(moFieldAccExchangeRate.getDouble());
            entry.setExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
            entry.setDebitCy(0);
            entry.setCreditCy(moFieldAccValueCy.getDouble());
            keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY;
        }
        else {
            entry.setDebit(moFieldAccValue.getDouble());
            entry.setCredit(0);
            entry.setExchangeRate(moFieldAccExchangeRate.getDouble());
            entry.setExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
            entry.setDebitCy(moFieldAccValueCy.getDouble());
            entry.setCreditCy(0);
            keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_PAY;
        }

        entry.setFkCurrencyId(moParamAccountCash.getFkCurrencyId());
        entry.setFkAccountIdXXX(moParamAccountCash.getFkAccountId());
        entry.setFkCostCenterIdXXX_n("");
        entry.setIsExchangeDifference(false);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);

        entry.setFkSystemMoveClassId(keySystemMoveType[0]);
        entry.setFkSystemMoveTypeId(keySystemMoveType[1]);

        if (moParamAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
        }
        else {
            entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
        }

        entry.setFkSystemMoveCategoryIdXXX(keySystemMoveTypeXXX[0]);
        entry.setFkSystemMoveTypeIdXXX(keySystemMoveTypeXXX[1]);

        entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { moParamAccountCash.getFkAccountId() }));
        entry.setDbmsAccountComplement(moParamAccountCash.getDbmsCompanyBranchEntity().getEntity());
        entry.setDbmsCostCenter_n("");
        entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moParamAccountCash.getFkCurrencyId() }));

        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);

        entry.setFkBizPartnerId_nr(moBizPartner.getPkBizPartnerId());
        entry.setFkBizPartnerBranchId_n(moBizPartner.getDbmsBizPartnerBranchHq().getPkBizPartnerBranchId());

        entry.setFkCompanyBranchId_n(moParamAccountCash.getPkCompanyBranchId());
        entry.setFkEntityId_n(moParamAccountCash.getPkAccountCashId());
        entry.setUnits(0d);
        entry.setFkItemId_n(0);
        entry.setFkItemAuxId_n(0);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(0); // TODO: link together this accounting entry to multiple invoices (2022-09-20 Sergio Flores)
        entry.setFkDpsDocId_n(0);  // TODO: link together this accounting entry to multiple invoices (2022-09-20 Sergio Flores)
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);

        return entry;
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntryXrtDiff(final String concept, final double xrtDiff) {
        int[] keySystemMoveType = null;
        int[] keySystemAccountType = null;
        SDataRecordEntry entry = new SDataRecordEntry();
        
        entry.setConcept(concept);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

        entry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));

        if (mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP) {
            // Payment:

            keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;

            if (xrtDiff > 0) {
                entry.setDebit(xrtDiff);
                entry.setCredit(0);
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(xrtDiff);
                entry.setCreditCy(0);
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceExpenseId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_DEC_EXR;
            }
            else {
                entry.setDebit(0);
                entry.setCredit(Math.abs(xrtDiff));
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(0);
                entry.setCreditCy(Math.abs(xrtDiff));
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceIncomeId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_INC_EXR;
            }
        }
        else {
            // Collect:

            keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;

            if (xrtDiff > 0) {
                entry.setDebit(xrtDiff);
                entry.setCredit(0);
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(xrtDiff);
                entry.setCreditCy(0);
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceExpenseId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_INC_EXR;
            }
            else {
                entry.setDebit(0);
                entry.setCredit(Math.abs(xrtDiff));
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(0);
                entry.setCreditCy(Math.abs(xrtDiff));
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceIncomeId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_DEC_EXR;
            }
        }

        entry.setFkCurrencyId(moParamAccountCash.getFkCurrencyId());
        entry.setFkCostCenterIdXXX_n("");
        entry.setIsExchangeDifference(true);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);

        entry.setFkSystemMoveClassId(keySystemMoveType[0]);
        entry.setFkSystemMoveTypeId(keySystemMoveType[1]);
        entry.setFkSystemAccountClassId(keySystemAccountType[0]);
        entry.setFkSystemAccountTypeId(keySystemAccountType[1]);
        entry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[0]);
        entry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[1]);

        entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { entry.getFkAccountIdXXX() }));
        entry.setDbmsAccountComplement("");
        entry.setDbmsCostCenter_n("");
        entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moParamAccountCash.getFkCurrencyId() }));

        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);

        entry.setFkBizPartnerId_nr(moBizPartner.getPkBizPartnerId());
        entry.setFkBizPartnerBranchId_n(moBizPartner.getDbmsBizPartnerBranchHq().getPkBizPartnerBranchId());

        entry.setFkCompanyBranchId_n(moParamAccountCash.getPkCompanyBranchId());
        entry.setFkEntityId_n(moParamAccountCash.getPkAccountCashId());
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);
        entry.setUnits(0d);
        entry.setFkItemId_n(0);
        entry.setFkItemAuxId_n(0);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(0); // TODO: link together this accounting entry to multiple invoices (2022-09-20 Sergio Flores)
        entry.setFkDpsDocId_n(0);  // TODO: link together this accounting entry to multiple invoices (2022-09-20 Sergio Flores)
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);

        return entry;
    }

    private boolean validateFields() {
        SFormValidation validation = new SFormValidation();
        
        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocusInWindow();
            }
            if (!validation.getMessage().isEmpty()) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        
        return !validation.getIsError();
    }
    
    private void printNewValue(Object newValue) {
        System.out.println("row: " + moGridDocs.getTable().getSelectedRow() + ", "
                + "col: " + moGridDocs.getTable().getSelectedColumn() + ", "
                + "new value: " + (newValue == null ? null : newValue + ", " + newValue.getClass()));
    }
    
    private void editedBoolean(Boolean newValue) {
        printNewValue(newValue);
        
        SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) moGridDocs.getSelectedTableRow();
        
        if (rowDpsPm != null) {
            rowDpsPm.setRowValueAt(newValue, moGridDocs.getTable().getSelectedColumn());
            
            if (rowDpsPm.IsPayed) {
                if (rowDpsPm.PaymentCy == 0) {
                    double paymentCy = SLibUtils.roundAmount(moFieldAccValueCy.getDouble() - mdTotalPaymentCy);
                    
                    if (rowDpsPm.BalanceCy < paymentCy) {
                        paymentCy = rowDpsPm.BalanceCy;
                    }
                    
                    rowDpsPm.PaymentCy = paymentCy;
                }
            }
            else {
                if (rowDpsPm.PaymentCy != 0) {
                    rowDpsPm.PaymentCy = 0;
                }
            }
            
            rowDpsPm.prepareTableRow();
        }
        
        updateGridDocs();
    }

    private void editedNumber(Number newValue) {
        printNewValue(newValue);
        
        SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) moGridDocs.getSelectedTableRow();
        
        if (rowDpsPm != null) {
            rowDpsPm.setRowValueAt(newValue, moGridDocs.getTable().getSelectedColumn());
            
            rowDpsPm.prepareTableRow();
        }
        
        updateGridDocs();
    }
    
    private void updateTotals() {
        double balanceCy = 0;
        double balance = 0;
        double paymentCy = 0;
        double payment = 0;
        
        for (STableRow row : moGridDocs.getGridRows()) {
            SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) row;
            balanceCy = SLibUtils.roundAmount(balanceCy + rowDpsPm.BalanceCy);
            balance = SLibUtils.roundAmount(balance + rowDpsPm.Balance);
            paymentCy = SLibUtils.roundAmount(paymentCy + rowDpsPm.PaymentCy);
            payment = SLibUtils.roundAmount(payment + rowDpsPm.Payment);
        }
        
        jtfTotalBalanceCy.setText(SLibUtils.getDecimalFormatAmount().format(balanceCy));
        jtfTotalBalance.setText(SLibUtils.getDecimalFormatAmount().format(balance));
        
        jtfTotalPaymentCy.setText(SLibUtils.getDecimalFormatAmount().format(paymentCy));
        jtfTotalPayment.setText(SLibUtils.getDecimalFormatAmount().format(payment));
        
        mdTotalPaymentCy = paymentCy;
        mdTotalPayment = payment;
    }
    
    private void updateGridDocs() {
        int currentRow = moGridDocs.getTable().getSelectedRow();
        int currentColumn = moGridDocs.getTable().getSelectedColumn();
        
        moGridDocs.renderTableRows();
        moGridDocs.setTableRowSelection(currentRow);
        moGridDocs.setTableColumnSelection(currentColumn);
        
        updateTotals();
    }
    
    private void reloadGridDocs() {
        moGridDocs.renderTableRows();
        moGridDocs.setTableRowSelection(0);
        moGridDocs.setTableColumnSelection(0);

        updateTotals();
    }
    
    private void resetGridDocs() throws Exception {
        moGridDocs.getTableColumn(SRowDpsPaymentMultiple.COL_IS_PAYED).setEditable(true);
        moGridDocs.getTableColumn(SRowDpsPaymentMultiple.COL_PAYMENT_CY).setEditable(true);
        moGridDocs.getTableColumn(SRowDpsPaymentMultiple.COL_PAYMENT_XRT).setEditable(moParamAccountCash != null && !mbIsAccountCashLocalCurrency);
        
        moGridDocs.createTable(this);
        moGridDocs.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(this);
        moGridDocs.getTable().getDefaultEditor(Number.class).addCellEditorListener(this);
        moGridDocs.clearTableRows();
        
        updateTotals();
        
        moBizPartner = null;
    }
    
    private void showGridDocs() throws Exception {
        resetGridDocs();
        
        Date due = moFieldDateCutoff.getDate();
        String sql = "SELECT * "
                + "FROM trnv_dps_bal "
                + "WHERE rec_id_year = " + moParamRecord.getPkYearId() + " "
                + "AND rec_id_tp_sys_mov_xxx = " + manSysMoveTypeKey[1] + " "
                + "AND bp_id_bp = " + moFieldBizPartner.getKeyAsIntArray()[0] + " "
                + "AND cur_id_cur = " + (moParamAccountCash != null ? moParamAccountCash.getFkCurrencyId() : miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0])
                + (due == null ? "" : " AND dps_dt_due <= '" + SLibUtils.DbmsDateFormatDate.format(due) + "'") + " "
                + "ORDER BY dps_dt_due, dps_num, dps_id_year, dps_id_doc;";
        
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            while (resultSet.next()) {
                SRowDpsPaymentMultiple rowDpsPm = new SRowDpsPaymentMultiple();
                
                rowDpsPm.RecYear = resultSet.getInt("rec_id_year");
                rowDpsPm.DpsKey = new int[] { resultSet.getInt("dps_id_year"), resultSet.getInt("dps_id_doc") };
                rowDpsPm.DpsNumber = resultSet.getString("dps_num");
                rowDpsPm.DpsDate = resultSet.getDate("dps_dt");
                rowDpsPm.DpsDateStartCredit = resultSet.getDate("dps_dt_start_cred");
                rowDpsPm.DpsCreditDays = resultSet.getInt("dps_days_cred");
                rowDpsPm.DpsDateDue = resultSet.getDate("dps_dt_due");
                rowDpsPm.Total = SLibUtils.roundAmount(resultSet.getDouble("dps_tot"));
                rowDpsPm.TotalXrt = resultSet.getDouble("dps_xrt");
                rowDpsPm.TotalCy = SLibUtils.roundAmount(resultSet.getDouble("dps_tot_cur"));
                rowDpsPm.Balance = SLibUtils.roundAmount(resultSet.getDouble("dps_bal") * mdBalanceFactor);
                rowDpsPm.BalanceCy = SLibUtils.roundAmount(resultSet.getDouble("dps_bal_cur") * mdBalanceFactor);
                rowDpsPm.IsPayed = false;
                rowDpsPm.Payment = 0;
                rowDpsPm.PaymentXrt = jckIsExchangeRatePreserved.isSelected() ? rowDpsPm.TotalXrt : moFieldAccExchangeRate.getDouble();
                rowDpsPm.PaymentCy = 0;
                rowDpsPm.DpsTypeKey = new int[] { resultSet.getInt("id_ct_dps"), resultSet.getInt("id_cl_dps"), resultSet.getInt("id_tp_dps") };
                rowDpsPm.DpsTypeName = resultSet.getString("tp_dps_name");
                rowDpsPm.DpsTypeCode = resultSet.getString("tp_dps_code");
                rowDpsPm.CurrencyId = resultSet.getInt("cur_id_cur");
                rowDpsPm.CurrencyName = resultSet.getString("cur_name");
                rowDpsPm.CurrencyCode = resultSet.getString("cur_code");
                rowDpsPm.BizPartnerId = resultSet.getInt("bp_id_bp");
                rowDpsPm.BizPartnerName = resultSet.getString("bp_name");
                rowDpsPm.BizPartnerFiscalId = resultSet.getString("bp_fiscal_id");
                rowDpsPm.ComBranchId = resultSet.getInt("cob_id_cob");
                rowDpsPm.ComBranchCode = resultSet.getString("cob_code");
                rowDpsPm.FuncAreaId = resultSet.getInt("func_id_func");
                rowDpsPm.FuncAreaName = resultSet.getString("func_name");
                rowDpsPm.FuncAreaCode = resultSet.getString("func_code");
                
                rowDpsPm.prepareTableRow();
                moGridDocs.addTableRow(rowDpsPm);
            }
        }
        
        reloadGridDocs();
        
        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldBizPartner.getKey(), SLibConstants.EXEC_MODE_SILENT);
        
        if (moGridDocs.getGridRows().isEmpty()) {
            miClient.showMsgBoxInformation("No se encontraron documentos con saldo en " + jtfAccValueCyKeyRo.getText() + " para '" + moBizPartner.getBizPartner() + "'"
                    + (due == null ? "" : " con corte al " + SLibUtils.DateFormatDate.format(due)) + ".");
        }
    }
    
    private void focusLostAccValueCy() {
        if (moFieldAccValue.getDouble() == 0d || !jtfAccValue.isEnabled() || mdAccValueCyTemp != moFieldAccValueCy.getDouble()) {
            moFieldAccValue.setFieldValue(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccExchangeRate.getDouble() == 0d && moFieldAccValueCy.getDouble() != 0d) {
            moFieldAccExchangeRate.setFieldValue(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble());
        }
    }

    private void focusLostAccValue() {
        if (moFieldAccValueCy.getDouble() == 0 && moFieldAccExchangeRate.getDouble() != 0d) {
            moFieldAccValueCy.setFieldValue(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccExchangeRate.getDouble() == 0d && moFieldAccValueCy.getDouble() != 0d) {
            moFieldAccExchangeRate.setFieldValue(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble());
        }
    }

    private void focusLostAccExchangeRate() {
        if (moFieldAccValueCy.getDouble() == 0 && moFieldAccExchangeRate.getDouble() != 0d) {
            moFieldAccValueCy.setFieldValue(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccValue.getDouble() == 0d) {
            moFieldAccValue.setFieldValue(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble());
        }
    }

    private void actionUpdateAccValueCy() {
        if (moFieldAccExchangeRate.getDouble() == 0d) {
            moFieldAccExchangeRate.getComponent().requestFocusInWindow();
        }
        else {
            moFieldAccValueCy.setFieldValue(SLibUtilities.round(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldAccValueCy.getComponent().requestFocusInWindow();
        }
    }

    private void actionUpdateAccValue() {
        if (moFieldAccExchangeRate.getDouble() == 0d) {
            moFieldAccExchangeRate.getComponent().requestFocusInWindow();
        }
        else {
            moFieldAccValue.setFieldValue(SLibUtilities.round(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldAccValue.getComponent().requestFocusInWindow();
        }
    }

    private void actionUpdateAccExchangeRate() {
        if (moFieldAccValueCy.getDouble() != 0d) {
            if (moFieldAccValue.getDouble() == 0d) {
                moFieldAccValue.getComponent().requestFocusInWindow();
            }
            else {
                moFieldAccExchangeRate.setFieldValue(SLibUtilities.round(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
                moFieldAccExchangeRate.getComponent().requestFocusInWindow();
            }
        }
        else if (moFieldAccValue.getDouble() != 0d) {
            moFieldAccValue.getComponent().requestFocusInWindow();
        }
        else {
            moFieldAccExchangeRate.getComponent().requestFocusInWindow();
        }
    }

    private void actionPickAccExchangeRateSys() {
        double rate = miClient.pickExchangeRate(moParamAccountCash.getFkCurrencyId(), moParamRecord.getDate());

        if (rate != 0d) {
            moFieldAccExchangeRateSys.setFieldValue(rate);
            moFieldAccExchangeRate.setFieldValue(rate);
            moFieldAccExchangeRate.getComponent().requestFocusInWindow();
        }
    }

    private void actionShowAccExchangeRateAcum() {
        miClient.showMsgBoxInformation(
                "Tipo de cambio acumulado al día: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(madParamAccountCashBal[0]) + ".\n" +
                "Saldo " + jtfAccValueCyKeyRo.getText() + ": $ " +
                miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(madParamAccountCashBal[1]) + ".\n" +
                "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1]) + ".");
    }

    private void actionSetAccExchangeRateAcum() {
        moFieldAccExchangeRate.setFieldValue(madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1]);
        moFieldAccExchangeRate.getComponent().requestFocusInWindow();
    }

    private void actionSearchBizPartnerId() {
        miClient.pickOption(mnBizPartnerCategoryX, moFieldBizPartner, null);
    }
    
    private void actionShowDocs() {
        if (validateFields()) {
            jbShowDocs.setEnabled(false);
            jbResetDocs.setEnabled(true);

            jbApplyPays.setEnabled(true);
            jbClearPays.setEnabled(true);

            enableFields(false);
            
            try {
                showGridDocs();
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }

            jbApplyPays.requestFocusInWindow();
        }
    }

    private void actionResetDocs() {
        jbShowDocs.setEnabled(true);
        jbResetDocs.setEnabled(false);
        
        jbApplyPays.setEnabled(false);
        jbClearPays.setEnabled(false);
        
        enableFields(true);
        
        try {
            resetGridDocs();
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        
        jtfAccValueCy.requestFocusInWindow();
    }

    private void actionApplyPays() {
        if (mdTotalPaymentCy == 0 || miClient.showMsgBoxConfirm("Se borrarán los pagos capturados previamente.\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
            if (mdTotalPaymentCy != 0) {
                actionClearPays();
            }
            
            double paymentCyAccum = 0;

            for (STableRow row : moGridDocs.getGridRows()) {
                if (paymentCyAccum < moFieldAccValueCy.getDouble()) {
                    SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) row;
                    double paymentCy = SLibUtils.roundAmount(moFieldAccValueCy.getDouble() - paymentCyAccum);
                    
                    if (rowDpsPm.BalanceCy < paymentCy) {
                        paymentCy = rowDpsPm.BalanceCy;
                    }
                    
                    rowDpsPm.PaymentCy = paymentCy;
                    
                    rowDpsPm.prepareTableRow();
                    
                    paymentCyAccum = SLibUtils.roundAmount(paymentCyAccum + paymentCy);
                }
                else {
                    break;
                }
            }

            reloadGridDocs();
        }
    }

    private void actionClearPays() {
        for (STableRow row : moGridDocs.getGridRows()) {
            SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) row;
            
            rowDpsPm.PaymentXrt = jckIsExchangeRatePreserved.isSelected() ? rowDpsPm.TotalXrt : moFieldAccExchangeRate.getDouble();
            rowDpsPm.PaymentCy = 0;
            
            rowDpsPm.prepareTableRow();
        }
        
        reloadGridDocs();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocusInWindow();
            }
            if (!validation.getMessage().isEmpty()) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbApplyPays;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbClearPays;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPickAccExchangeRateSys;
    private javax.swing.JButton jbPickBizPartner;
    private javax.swing.JButton jbPickDateCutoff;
    private javax.swing.JButton jbResetDocs;
    private javax.swing.JButton jbSetAccExchangeRateAcum;
    private javax.swing.JButton jbShowAccExchangeRateAcum;
    private javax.swing.JButton jbShowDocs;
    private javax.swing.JButton jbUpdateAccExchangeRate;
    private javax.swing.JButton jbUpdateAccValue;
    private javax.swing.JButton jbUpdateAccValueCy;
    private javax.swing.ButtonGroup jbtButtonGroup;
    private javax.swing.JComboBox<SFormComponentItem> jcbBizPartner;
    private javax.swing.JCheckBox jckIsExchangeRatePreserved;
    private javax.swing.JLabel jfFomMode;
    private javax.swing.JFormattedTextField jftDateCutoff;
    private javax.swing.JLabel jlAccExchangeRate;
    private javax.swing.JLabel jlAccExchangeRateSys;
    private javax.swing.JLabel jlAccValue;
    private javax.swing.JLabel jlAccValueCy;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy02;
    private javax.swing.JLabel jlDummy05;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlDummy4;
    private javax.swing.JLabel jlDummy6;
    private javax.swing.JLabel jlTotalBalance;
    private javax.swing.JLabel jlTotalBalanceCy;
    private javax.swing.JLabel jlTotalPayment;
    private javax.swing.JLabel jlTotalPaymentCy;
    private javax.swing.JPanel jpAccountCash;
    private javax.swing.JPanel jpBizPartner;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpDocs;
    private javax.swing.JPanel jpInput;
    private javax.swing.JPanel jpPayment;
    private javax.swing.JPanel jpTotals;
    private javax.swing.JPanel jpTotals1;
    private javax.swing.JPanel jpTotals2;
    private javax.swing.JTextField jtfAccExchangeRate;
    private javax.swing.JTextField jtfAccExchangeRateSysRo;
    private javax.swing.JTextField jtfAccValue;
    private javax.swing.JTextField jtfAccValueCy;
    private javax.swing.JTextField jtfAccValueCyKeyRo;
    private javax.swing.JTextField jtfAccValueKeyRo;
    private javax.swing.JTextField jtfAccountCashCodeRo;
    private javax.swing.JTextField jtfAccountCashCurRo;
    private javax.swing.JTextField jtfAccountCashRo;
    private javax.swing.JTextField jtfCompanyBranchRo;
    private javax.swing.JTextField jtfDateRo;
    private javax.swing.JTextField jtfFormMode;
    private javax.swing.JTextField jtfTotalBalance;
    private javax.swing.JTextField jtfTotalBalanceCy;
    private javax.swing.JTextField jtfTotalBalanceCyKeyRo;
    private javax.swing.JTextField jtfTotalBalanceKeyRo;
    private javax.swing.JTextField jtfTotalPayment;
    private javax.swing.JTextField jtfTotalPaymentCy;
    private javax.swing.JTextField jtfTotalPaymentCyKeyRo;
    private javax.swing.JTextField jtfTotalPaymentKeyRo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = 0;
        mnFormStatus = 0;
        mnFormMode = MODE_BP_ONLY;
        mbFirstTime = true;

        moParamRecord = null;
        moParamAccountCash = null;
        mdParamExchangeRateToday = 0;
        madParamAccountCashBal = null;
        mbIsAccountCashLocalCurrency = false;

        for (SFormField field : mvFields) {
            field.resetField();
        }

        try {
            resetGridDocs();
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        
        renderParamsSettings();
        renderFormMode();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbBizPartner, mnBizPartnerCategoryX);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String msg = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            msg = SDataUtilities.validateExchangeRate(miClient, moFieldAccValueCy.getDouble(), moFieldAccExchangeRate.getDouble(), moFieldAccValue.getDouble(), jlAccValueCy.getText());

            if (msg.length() > 0) {
                if (miClient.showMsgBoxConfirm(msg + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlAccValueCy.getText() + "'.");
                    validation.setComponent(jtfAccValueCy);
                }
            }

            if (!validation.getIsError()) {
                if (moGridDocs.getGridRows().isEmpty()) {
                    validation.setMessage("No hay documentos para aplicar pagos.");
                }
                else {
                    try {
                        // validate accounting configuration of business partner until there is an business partner selected:
                        
                        Vector<SFinAccountConfigEntry> config = SFinAccountUtilities.obtainBizPartnerAccountConfigs(miClient, moBizPartner.getPkBizPartnerId(), mnBizPartnerCategory,
                                moParamRecord.getPkBookkeepingCenterId(), moParamRecord.getDate(), SDataConstantsSys.FINS_TP_ACC_BP_OP, mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_CUS, null);
                        if (config == null || config.isEmpty()) {
                            validation.setMessage("No se encontró o no está configurada la cuenta contable del asociado de negocios.");
                        }
                    }
                    catch (Exception e) {
                        SLibUtilities.renderException(this, e);
                    }
                    
                    if (!validation.getIsError()) {
                        if (mdTotalPaymentCy == 0) {
                            validation.setMessage("No se han aplicado pagos en " + jtfAccValueCyKeyRo.getText() + ".");
                        }
                        else if (mdTotalPaymentCy > moFieldAccValueCy.getDouble() && miClient.showMsgBoxConfirm("El total aplicado en " + jtfAccValueCyKeyRo.getText() + ", "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPaymentCy) + ", no debería ser mayor que el monto del pago, "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValueCy.getDouble()) + ".\n"
                                + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage("Ajustar el total aplicado en " + jtfAccValueCyKeyRo.getText() + ", "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPaymentCy) + ", para que no sea mayor que el monto del pago, "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValueCy.getDouble()) + ".");
                        }
                        else if (mdTotalPaymentCy < moFieldAccValueCy.getDouble() && miClient.showMsgBoxConfirm("El total aplicado en " + jtfAccValueCyKeyRo.getText() + ", "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPaymentCy) + ", debería ser igual que el monto del pago, "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValueCy.getDouble()) + ".\n"
                                + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage("Ajustar el total aplicado en " + jtfAccValueCyKeyRo.getText() + ", "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPaymentCy) + ", para que sea igual que el monto del pago, "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValueCy.getDouble()) + ".");
                        }
                    }
                    
                    if (!validation.getIsError() && !mbIsAccountCashLocalCurrency) {
                        if (mdTotalPayment == 0) {
                            validation.setMessage("No se han aplicado pagos en " + jtfAccValueKeyRo.getText() + ".");
                        }
                        else if (mdTotalPayment > moFieldAccValue.getDouble() && miClient.showMsgBoxConfirm("El total aplicado en " + jtfAccValueKeyRo.getText() + ", "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPayment) + ", no debería ser mayor que el monto del pago, "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValue.getDouble()) + ".\n"
                                + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage("Ajustar el total aplicado en " + jtfAccValueKeyRo.getText() + ", "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPayment) + ", para que no sea mayor que el monto del pago, "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValue.getDouble()) + ".");
                        }
                        else if (mdTotalPayment < moFieldAccValue.getDouble() && miClient.showMsgBoxConfirm("El total aplicado en " + jtfAccValueKeyRo.getText() + ", "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPayment) + ", debería ser igual que el monto del pago, "
                                + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValue.getDouble()) + ".\n"
                                + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage("Ajustar el total aplicado en " + jtfAccValueKeyRo.getText() + ", "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(mdTotalPayment) + ", para que sea igual que el monto del pago, "
                                    + "$" + SLibUtils.getDecimalFormatAmount().format(moFieldAccValue.getDouble()) + ".");
                        }
                    }
                    
                    if (!validation.getIsError()) {
                        for (STableRow row : moGridDocs.getGridRows()) {
                            SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) row;

                            if (rowDpsPm.IsPayed && rowDpsPm.PaymentCy > rowDpsPm.BalanceCy) {
                                msg = "El monto del pago del documento '" + rowDpsPm.DpsNumber + "', $" + SLibUtils.getDecimalFormatAmount().format(rowDpsPm.PaymentCy) + " " + jtfAccValueCyKeyRo.getText() + ", "
                                        + "no debería ser mayor que su saldo, $" + SLibUtils.getDecimalFormatAmount().format(rowDpsPm.BalanceCy) + " " + jtfAccValueCyKeyRo.getText() + ".\n"
                                        + SLibConstants.MSG_CNF_MSG_CONT;
                                if (miClient.showMsgBoxConfirm(msg) != JOptionPane.YES_OPTION) {
                                    validation.setMessage("Ajustar el monto del pago del documento '" + rowDpsPm.DpsNumber + "' para que no sea mayor que su saldo.");
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataRecord record = new SDataRecord();
        String concept = "";
        String docsNumbers = "";
        
        for (STableRow row : moGridDocs.getGridRows()) {
            SRowDpsPaymentMultiple rowDpsPm = (SRowDpsPaymentMultiple) row;
            
            if (rowDpsPm.IsPayed) {
                // Settings of document:
                
                SThinDps thinDps = new SThinDps();

                try {
                    thinDps.read(rowDpsPm.DpsKey, miClient.getSession().getStatement());
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                    return null;
                }
                
                docsNumbers += (docsNumbers.isEmpty() ? "" : ", ") + thinDps.getDpsNumber();
                
                /*
                 * ADVERTENCIA DE CÓDIGO FUENTE ESPEJEADO:
                 * Este mismo algoritmo está en los métodos getRegistry() de las clases SDialogRecordPayment y SDialogRecordPaymentComplete.
                 * ¡Sin embargo, el algoritmo de la clase SDialogRecordPaymentComplete aún carece de la diferenciación de pagos por agrupación de impuestos!
                 * ¡Cualquier modificación realizado en este código fuente, hay que espejearlo con las clases mencionadas!
                 * 2024-03-06, Edwin Carmona
                 * 2024-08-15, Sergio Flores: Revisión y espejeo de este código fuente contra el de las clases mencionadas, ¡porque no eran iguales entre sí!
                 */
                
                ////////////////////////////////////////////////////////////////////////
                // ¡El código fuente espejeado empieza aquí!
                ////////////////////////////////////////////////////////////////////////
                
                ArrayList<SFinBalanceTax> balances = erp.mod.fin.db.SFinUtils.getBalanceByTax(miClient.getSession().getDatabase().getConnection(),
                        SLibTimeUtils.digestYear(moParamRecord.getDate())[0],
                        rowDpsPm.DpsKey[0], rowDpsPm.DpsKey[1],
                        mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0],
                        mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1],
                        null);

                double dTotalBalance = 0d;
                double dTotalBalanceCur = 0d;

                for (SFinBalanceTax balance : balances) {
                    dTotalBalance = SLibUtils.roundAmount(dTotalBalance + balance.getBalance());
                    dTotalBalanceCur = SLibUtils.roundAmount(dTotalBalanceCur + balance.getBalanceCurrency());
                }

                double perc;
                double percCur;
                double amtToPay = 0;
                double amtToPayCur = 0;
                int[] taxMax = new int[] {0, 0};
                double amtMax = 0d;
                HashMap<String, double[]> taxBalances = new HashMap<>();
                ArrayList<SDataDsmEntry> dsmEntries = new ArrayList<>();

                for (SFinBalanceTax balance : balances) {
                    perc = balance.getBalance() / dTotalBalance;
                    percCur = balance.getBalanceCurrency() / dTotalBalanceCur;

                    String taxKey = balance.getTaxBasicId() + "_" + balance.getTaxId();
                    taxBalances.put(taxKey, new double[] { perc, percCur });

                    amtToPay += SLibUtilities.round(rowDpsPm.Payment * perc, miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate());
                    amtToPayCur += SLibUtilities.round(rowDpsPm.PaymentCy * percCur, miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate());

                    if (balance.getBalanceCurrency() > amtMax) {
                        amtMax = balance.getBalanceCurrency();
                        taxMax = new int[] { balance.getTaxBasicId(), balance.getTaxId() };
                    }
                }

                double diffCur = 0;
                if (rowDpsPm.PaymentCy != amtToPayCur) {
                    diffCur = SLibUtilities.round(rowDpsPm.PaymentCy - amtToPayCur, miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate());
                }
                double diff = 0;
                if (rowDpsPm.Payment != amtToPay) {
                    diff = SLibUtilities.round(rowDpsPm.Payment - amtToPay, miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate());
                }

                // DSM entries:
                
                for (SFinBalanceTax balance : balances) {
                    if (rowDpsPm.PaymentCy <= 0d) {
                        break;
                    }
                    
                    SDataDsmEntry dsmEntry = new SDataDsmEntry();
                    String taxKey = balance.getTaxBasicId() + "_" + balance.getTaxId();
                    
                    dsmEntry.setSourceValue(SLibUtilities.round(rowDpsPm.Payment * taxBalances.get(taxKey)[0], miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                    dsmEntry.setDestinyValue(SLibUtilities.round(rowDpsPm.Payment * taxBalances.get(taxKey)[0], miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                    dsmEntry.setSourceValueCy(SLibUtilities.round(rowDpsPm.PaymentCy * taxBalances.get(taxKey)[1], miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                    dsmEntry.setDestinyValueCy(SLibUtilities.round(rowDpsPm.PaymentCy * taxBalances.get(taxKey)[1], miClient.getSessionXXX().getParamsErp().getDecimalsValue()));

                    if (balance.getTaxBasicId() == taxMax[0] && balance.getTaxId() == taxMax[1]) {
                        dsmEntry.setSourceValue(SLibUtilities.round(rowDpsPm.Payment + diff, miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                        dsmEntry.setDestinyValue(SLibUtilities.round(rowDpsPm.Payment + diff, miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                        dsmEntry.setSourceValueCy(SLibUtilities.round(rowDpsPm.PaymentCy + diffCur, miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                        dsmEntry.setDestinyValueCy(SLibUtilities.round(rowDpsPm.PaymentCy + diffCur, miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
                    }

                    dsmEntry.setFkTaxBasId_n(balance.getTaxBasicId());
                    dsmEntry.setFkTaxId_n(balance.getTaxId());

                    dsmEntry.setPkYearId(miClient.getSessionXXX().getWorkingYear());
                    dsmEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                    dsmEntry.setUserNewTs(miClient.getSessionXXX().getSystemDate());

                    // Settings of account cash (emulated, because is not needed):

                    dsmEntry.setSourceReference("");
                    dsmEntry.setFkSourceCurrencyId(moParamAccountCash != null ? moParamAccountCash.getFkCurrencyId() : miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]);
                    //dsmEntry.setSourceValueCy(...); // not required, but preserved for consistence with mirrowed source code!
                    //dsmEntry.setSourceValue(...); // not required, but preserved for consistence with mirrowed source code!
                    dsmEntry.setSourceExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
                    dsmEntry.setSourceExchangeRate(rowDpsPm.PaymentXrt);

                    // Settings of document:

                    dsmEntry.setFkDestinyDpsYearId_n(thinDps.getPkYearId());
                    dsmEntry.setFkDestinyDpsDocId_n(thinDps.getPkDocId());
                    dsmEntry.setFkDestinyCurrencyId(thinDps.getFkCurrencyId());
                    //dsmEntry.setDestinyValueCy(...); // not required, but preserved for consistence with mirrowed source code!
                    //dsmEntry.setDestinyValue(...); // not required, but preserved for consistence with mirrowed source code!
                    dsmEntry.setDestinyExchangeRateSystem(moFieldAccExchangeRateSys.getDouble() != 0 ? moFieldAccExchangeRateSys.getDouble() : rowDpsPm.PaymentXrt);
                    dsmEntry.setDestinyExchangeRate(rowDpsPm.PaymentXrt);
                    dsmEntry.setDbmsFkDpsCategoryId(thinDps.getFkDpsCategoryId());
                    dsmEntry.setDbmsDestinyDps(thinDps.getDpsNumber());
                    dsmEntry.setDbmsSubclassMove(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP));
                    dsmEntry.setDbmsBizPartner(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { thinDps.getFkBizPartnerId_r() }));
                    dsmEntry.setDbmsDestinyTpDps(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNU_TP_DPS, new int[] { thinDps.getFkDpsCategoryId(), thinDps.getFkDpsClassId(), thinDps.getFkDpsTypeId() }, SLibConstants.DESCRIPTION_CODE));

                    dsmEntry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[0]);
                    dsmEntry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[1]);
                    dsmEntry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[2]);
                    dsmEntry.setDbmsCtSysMovId(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0]);
                    dsmEntry.setDbmsTpSysMovId(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1]);
                    dsmEntry.setFkBizPartnerId(thinDps.getFkBizPartnerId_r());
                    dsmEntry.setDbmsFkBizPartnerBranchId_n(thinDps.getFkBizPartnerBranchId());
                    //dsmEntry.setDbmsAccountOp(...); // not required, but preserved for consistence with mirrowed source code!
                    
                    try {
                        // Get accounting configuration:
                        
                        Vector<SFinAccountConfigEntry> config = SFinAccountUtilities.obtainBizPartnerAccountConfigs(miClient, rowDpsPm.BizPartnerId, mnBizPartnerCategory,
                                moParamRecord.getPkBookkeepingCenterId(), moParamRecord.getDate(), SDataConstantsSys.FINS_TP_ACC_BP_OP, thinDps.getFkDpsCategoryId() == SDataConstantsSys.TRNS_CT_DPS_SAL, balance.getTaxKey());
                        if (config.size() > 0) {
                            dsmEntry.setDbmsAccountOp(config.get(0).getAccountId());
                        }

                        dsmEntries.add(dsmEntry);
                    }
                    catch (Exception e) {
                        SLibUtilities.renderException(this, e);
                    }
                }

                // DSM:

                SDataDsm dsm = new SDataDsm();
                dsm.setDbmsSubsystemTypeBiz(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSS_CT_BP, new int[] { mnBizPartnerCategory }, SLibConstants.DESCRIPTION_CODE));

                switch (mnBizPartnerCategory) {
                    case SDataConstantsSys.BPSS_CT_BP_SUP:
                        dsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_SUP);
                        break;
                    case SDataConstantsSys.BPSS_CT_BP_CUS:
                        dsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_CUS);
                        break;
                    default:
                        // do nothing
                }

                int branchId = moParamRecord.getFkCompanyBranchId_n() != 0 ? moParamRecord.getFkCompanyBranchId_n() : moParamRecord.getFkCompanyBranchId();
                SDataBizPartnerBranch branch = miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsBizPartnerBranch(new int[] { branchId });

                dsm.setDbmsErpTaxModel(miClient.getSessionXXX().getParamsErp().getTaxModel());
                dsm.setDate(miClient.getSessionXXX().getWorkingDate());
                dsm.setFkSubsystemCategoryId(mnBizPartnerCategory);
                dsm.setFkCompanyBranchId(branchId);
                dsm.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                dsm.setDbmsFkCompanyBranch(moParamRecord.getFkCompanyBranchId());
                dsm.setDbmsCompanyBranchCode(branch.getCode());
                dsm.setDbmsErpDecimalsValue(miClient.getSessionXXX().getParamsErp().getDecimalsValue());
                dsm.setDbmsIsRecordSaved(false);
                dsm.getDbmsEntries().addAll(dsmEntries); // WARNING: difference in mirrowed source code: a collection of entries!

                try {
                    dsm = (SDataDsm) miClient.getGuiModule(SDataConstants.MOD_FIN).processRegistry(dsm);
                    Vector<SDataRecordEntry> entries = new Vector<>(dsm.getDbmsRecord().getDbmsRecordEntries());

                    concept = SFinConsts.TXT_INVOICE + " " + thinDps.getDpsNumber() + " ";
                    concept += moBizPartner.getBizPartnerCommercial();

                    for (SDataRecordEntry entry : entries) {
                        entry.setConcept(concept);
                        entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { entry.getFkAccountIdXXX() }));
                        entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { entry.getFkCurrencyId() }));

                        if (entry.getFkSystemMoveCategoryIdXXX() == SDataConstantsSys.FINS_CT_SYS_MOV_BPS) {
                            entry.setDbmsAccountComplement(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { thinDps.getFkBizPartnerId_r() }));
                            //entry.setAuxCheckNumber(...); // not required, but preserved for consistence with mirrowed source code!
                        }
                    }

                    record.getDbmsRecordEntries().addAll(entries);
                }
                catch(Exception e) {
                    SLibUtilities.renderException(this, e);
                    return null;
                }
            }
        }
        
        if (mnFormMode == MODE_BP_CASH_ACC && moParamAccountCash != null) {
            // Check if an exchange-rate-difference entry is needed:

            String conceptCash = SFinConsts.TXT_INVOICE + " VARIAS ";
            conceptCash += moBizPartner.getBizPartnerCommercial();
            conceptCash += " (" + docsNumbers + ")";

            if (!mbIsAccountCashLocalCurrency && SLibUtils.compareAmount(moFieldAccValueCy.getDouble(), mdTotalPaymentCy)) {
                double xrtDiff = SLibUtils.roundAmount(moFieldAccValue.getDouble() - mdTotalPayment);

                if (xrtDiff != 0) {
                    record.getDbmsRecordEntries().add(createRecordEntryXrtDiff(conceptCash, xrtDiff));
                }
            }

            // Cash account entry:

            record.getDbmsRecordEntries().insertElementAt(createRecordEntryAccountCash(conceptCash), 0);
        }

        return record;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.FIN_ACC_CASH:
                moParamRecord = (SDataRecord) ((Object[]) value)[0];
                moParamAccountCash = (SDataAccountCash) ((Object[]) value)[1];
                mdParamExchangeRateToday = (Double) ((Object[]) value)[2];
                madParamAccountCashBal = (double[]) ((Object[]) value)[3];
                mbIsAccountCashLocalCurrency = moParamAccountCash != null ? miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moParamAccountCash.getFkCurrencyId() }) : true;
                renderParamsSettings();
                actionResetDocs();
                break;

            case MODE:
                mnFormMode = (Integer) value;
                renderFormMode();
                break;
                
            default:
                // do nothing
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbUpdateAccValueCy) {
                actionUpdateAccValueCy();
            }
            else if (button == jbUpdateAccValue) {
                actionUpdateAccValue();
            }
            else if (button == jbUpdateAccExchangeRate) {
                actionUpdateAccExchangeRate();
            }
            else if (button == jbPickAccExchangeRateSys) {
                actionPickAccExchangeRateSys();
            }
            else if (button == jbShowAccExchangeRateAcum) {
                actionShowAccExchangeRateAcum();
            }
            else if (button == jbSetAccExchangeRateAcum) {
                actionSetAccExchangeRateAcum();
            }
            else if (button == jbPickBizPartner) {
                actionSearchBizPartnerId();
            }
            else if (button == jbShowDocs) {
                actionShowDocs();
            }
            else if (button == jbResetDocs) {
                actionResetDocs();
            }
            else if (button == jbApplyPays) {
                actionApplyPays();
            }
            else if (button == jbClearPays) {
                actionClearPays();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfAccValueCy) {
                mdAccValueCyTemp = moFieldAccValueCy.getDouble();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfAccValueCy) {
                focusLostAccValueCy();
            }
            else if (textField == jtfAccValue) {
                focusLostAccValue();
            }
            else if (textField == jtfAccExchangeRate) {
                focusLostAccExchangeRate();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        // add code here!
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        //System.out.println("editingStopped: " + e.getSource().getClass().getName());
        
        if (e.getSource() == moGridDocs.getTable().getDefaultEditor(Boolean.class)) {
            editedBoolean((Boolean) ((TableCellEditor) e.getSource()).getCellEditorValue());
        }
        else if (e.getSource() == moGridDocs.getTable().getDefaultEditor(Number.class)) {
            editedNumber((Number) ((TableCellEditor) e.getSource()).getCellEditorValue());
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        //System.out.println("editingCanceled: " + e.getSource().getClass().getName());
    }
}
