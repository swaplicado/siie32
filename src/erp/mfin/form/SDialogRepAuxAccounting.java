/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepAuxAccounting.java
 *
 * Created on 16/03/2012
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.account.SAccountConsts;
import erp.gui.account.SAccountUtils;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.mcfg.data.SDataParamsCompany;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.Map;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;

/**
 *
 * @author Juan Barajas, Isabel Servín, Claudio Peña
 */
public class SDialogRepAuxAccounting extends JDialog implements ActionListener, ItemListener, ChangeListener {

    private boolean mbFirstTime;
    private final erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldEntity;
    private erp.lib.form.SFormField moFieldBizPartner;
    private erp.lib.form.SFormField moFieldItem;
    private erp.lib.form.SFormField moFieldTax;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private int mnMaskAcc = 0;
    private int mnMaskCc = 0;
    private String msCodeAccMin;
    private String msCodeAccMax;
    private String msCodeCcMin;
    private String msCodeCcMax;

    /** Creates new form SDialogRepAuxAccounting
     * @param client */
    public SDialogRepAuxAccounting(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jpMainStart = new javax.swing.JPanel();
        moPanelAccountStart = new erp.gui.account.SBeanPanelAccount();
        jpMainEnd = new javax.swing.JPanel();
        moPanelAccountEnd = new erp.gui.account.SBeanPanelAccount();
        jPanel13 = new javax.swing.JPanel();
        jpFilterStart = new javax.swing.JPanel();
        moPanelCostCenterStart = new erp.gui.account.SBeanPanelAccount();
        jpFilterEnd = new javax.swing.JPanel();
        moPanelCostCenterEnd = new erp.gui.account.SBeanPanelAccount();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlLevel = new javax.swing.JLabel();
        jsLevel = new javax.swing.JSpinner();
        jlLevelMax = new javax.swing.JLabel();
        jtfLevelMax = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jckShowCostCenter = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        jckShowEntity = new javax.swing.JCheckBox();
        jlEntity = new javax.swing.JLabel();
        jcbEntity = new javax.swing.JComboBox();
        jbPickEntity = new javax.swing.JButton();
        jbClearEntity = new javax.swing.JButton();
        jckShowFiscalId = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        jckShowBizPartner = new javax.swing.JCheckBox();
        jlBizPartner = new javax.swing.JLabel();
        jcbBizPartner = new javax.swing.JComboBox();
        jbPickBizPartner = new javax.swing.JButton();
        jbClearBizPartner = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jckShowItems = new javax.swing.JCheckBox();
        jlItem = new javax.swing.JLabel();
        jcbItem = new javax.swing.JComboBox();
        jbPickItem = new javax.swing.JButton();
        jbClearItem = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jckShowTax = new javax.swing.JCheckBox();
        jlTax = new javax.swing.JLabel();
        jcbTax = new javax.swing.JComboBox();
        jbPickTax = new javax.swing.JButton();
        jbClearTax = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jckShowRecordAdjAudit = new javax.swing.JCheckBox();
        jckShowRecordAdjYearEnd = new javax.swing.JCheckBox();
        jckDontShowIncludeCounts = new javax.swing.JCheckBox();
        jPanel19 = new javax.swing.JPanel();
        jckStrechWithOverflow = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporte de auxiliares contables");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.GridLayout(1, 2, 0, 5));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel3.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbDateStart);

        jPanel3.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbDateEnd);

        jPanel3.add(jPanel16);

        jPanel6.add(jPanel3);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        jPanel10.setLayout(new java.awt.BorderLayout());

        jpMainStart.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable inicial:"));
        jpMainStart.setLayout(new java.awt.BorderLayout());
        jpMainStart.add(moPanelAccountStart, java.awt.BorderLayout.CENTER);

        jPanel10.add(jpMainStart, java.awt.BorderLayout.NORTH);

        jpMainEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuenta contable final:"));
        jpMainEnd.setLayout(new java.awt.BorderLayout());
        jpMainEnd.add(moPanelAccountEnd, java.awt.BorderLayout.CENTER);

        jPanel10.add(jpMainEnd, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel10);

        jPanel13.setLayout(new java.awt.BorderLayout());

        jpFilterStart.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo inicial:"));
        jpFilterStart.setLayout(new java.awt.BorderLayout());
        jpFilterStart.add(moPanelCostCenterStart, java.awt.BorderLayout.CENTER);

        jPanel13.add(jpFilterStart, java.awt.BorderLayout.NORTH);

        jpFilterEnd.setBorder(javax.swing.BorderFactory.createTitledBorder("Centro de costo final:"));
        jpFilterEnd.setLayout(new java.awt.BorderLayout());
        jpFilterEnd.add(moPanelCostCenterEnd, java.awt.BorderLayout.CENTER);

        jPanel13.add(jpFilterEnd, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel13);

        jPanel5.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(8, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLevel.setText("Profundidad ctas. contables:");
        jlLevel.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlLevel);

        jsLevel.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jsLevel);

        jlLevelMax.setText(" Nivel máximo:");
        jlLevelMax.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jlLevelMax);

        jtfLevelMax.setEditable(false);
        jtfLevelMax.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfLevelMax.setText("0");
        jtfLevelMax.setFocusable(false);
        jtfLevelMax.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jtfLevelMax);

        jPanel9.add(jPanel7);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowCostCenter.setText("Mostrar centros de costos");
        jckShowCostCenter.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jckShowCostCenter);

        jPanel9.add(jPanel11);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowEntity.setText("Mostrar entidades");
        jckShowEntity.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jckShowEntity);

        jlEntity.setText("Filtrar entidad:");
        jlEntity.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel18.add(jlEntity);

        jcbEntity.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel18.add(jcbEntity);

        jbPickEntity.setText("...");
        jbPickEntity.setToolTipText("Seleccionar entidad");
        jbPickEntity.setFocusable(false);
        jbPickEntity.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbPickEntity);

        jbClearEntity.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbClearEntity.setToolTipText("Limpiar entidad");
        jbClearEntity.setFocusable(false);
        jbClearEntity.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbClearEntity);

        jckShowFiscalId.setText("Mostrar RFC caja y bancos");
        jckShowFiscalId.setPreferredSize(new java.awt.Dimension(160, 23));
        jPanel18.add(jckShowFiscalId);

        jPanel9.add(jPanel18);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowBizPartner.setText("Mostrar asoc. negocios");
        jckShowBizPartner.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jckShowBizPartner);

        jlBizPartner.setText("Filtrar asoc. negocios:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel17.add(jlBizPartner);

        jcbBizPartner.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel17.add(jcbBizPartner);

        jbPickBizPartner.setText("...");
        jbPickBizPartner.setToolTipText("Seleccionar asociado de negocios");
        jbPickBizPartner.setFocusable(false);
        jbPickBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbPickBizPartner);

        jbClearBizPartner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbClearBizPartner.setToolTipText("Limpiar asociado de negocios");
        jbClearBizPartner.setFocusable(false);
        jbClearBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel17.add(jbClearBizPartner);

        jPanel9.add(jPanel17);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowItems.setText("Mostrar ítems");
        jckShowItems.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jckShowItems);

        jlItem.setText("Filtrar ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlItem);

        jcbItem.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel14.add(jcbItem);

        jbPickItem.setText("...");
        jbPickItem.setToolTipText("Seleccionar ítem");
        jbPickItem.setFocusable(false);
        jbPickItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbPickItem);

        jbClearItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbClearItem.setToolTipText("Limpiar ítem");
        jbClearItem.setFocusable(false);
        jbClearItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbClearItem);

        jPanel9.add(jPanel14);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowTax.setText("Mostrar impuesto");
        jckShowTax.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jckShowTax);

        jlTax.setText("Filtrar impuesto:");
        jlTax.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlTax);

        jcbTax.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel12.add(jcbTax);

        jbPickTax.setText("...");
        jbPickTax.setToolTipText("Seleccionar impuesto");
        jbPickTax.setFocusable(false);
        jbPickTax.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbPickTax);

        jbClearTax.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_del.gif"))); // NOI18N
        jbClearTax.setToolTipText("Limpiar impuesto");
        jbClearTax.setFocusable(false);
        jbClearTax.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbClearTax);

        jPanel9.add(jPanel12);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckShowRecordAdjAudit.setText("Incluir ajustes de auditoría");
        jckShowRecordAdjAudit.setOpaque(false);
        jckShowRecordAdjAudit.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jckShowRecordAdjAudit);

        jckShowRecordAdjYearEnd.setText("Incluir ajustes de cierre");
        jckShowRecordAdjYearEnd.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jckShowRecordAdjYearEnd);

        jckDontShowIncludeCounts.setText("No mostrar cuentas en 0");
        jckDontShowIncludeCounts.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jckDontShowIncludeCounts);

        jPanel9.add(jPanel8);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckStrechWithOverflow.setText("Ampliar altura del renglón del detalle para conceptos contables largos");
        jckStrechWithOverflow.setOpaque(false);
        jckStrechWithOverflow.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel19.add(jckStrechWithOverflow);

        jPanel9.add(jPanel19);

        jPanel5.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jbPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jbPrint);

        jbClose.setText("Cerrar");
        jbClose.setToolTipText("[Escape]");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jbClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 548));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jbPrintActionPerformed

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    /*
     * Private methods
     */

    @SuppressWarnings("unchecked")
    private void initComponentsExtra() {
        mbFirstTime = true;

        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldEntity = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbEntity, jlEntity);
        moFieldEntity.setPickerButton(jbPickEntity);
        moFieldBizPartner = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbBizPartner, jlBizPartner);
        moFieldBizPartner.setPickerButton(jbPickBizPartner);
        moFieldItem = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbItem, jlItem);
        moFieldItem.setPickerButton(jbPickItem);
        moFieldTax = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbTax, jlTax);
        moFieldTax.setPickerButton(jbPickTax);

        moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSessionXXX().getWorkingDate()));
        moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSessionXXX().getWorkingDate()));
        jlLevel.setText("Profundidad ctas. contables:");
        jsLevel.setModel(new SpinnerNumberModel(1, 1, miClient.getSessionXXX().getParamsErp().getDeepAccounts(), 1));
        jtfLevelMax.setText("" + miClient.getSessionXXX().getParamsErp().getDeepAccounts());

        moPanelAccountStart.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, false, true, false);
        moPanelAccountEnd.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, false, true, false);
        moPanelCostCenterStart.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, false, true, false);
        moPanelCostCenterEnd.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, false, true, false);

        moPanelAccountStart.setAccountNameWidth(275);
        moPanelAccountEnd.setAccountNameWidth(275);
        moPanelCostCenterStart.setAccountNameWidth(275);
        moPanelCostCenterEnd.setAccountNameWidth(275);

        moPanelAccountStart.setComponentPrevious(jftDateEnd);
        moPanelAccountStart.setComponentNext(moPanelAccountEnd);
        moPanelAccountEnd.setComponentPrevious(moPanelAccountStart);
        moPanelAccountEnd.setComponentNext(moPanelCostCenterStart.getTextNumberFirst());
        moPanelCostCenterStart.setComponentPrevious(moPanelAccountEnd.getTextNumberFirst());
        moPanelCostCenterStart.setComponentNext(moPanelCostCenterEnd);
        moPanelCostCenterEnd.setComponentPrevious(moPanelCostCenterStart);
        moPanelCostCenterEnd.setComponentNext(((JSpinner.DefaultEditor) jsLevel.getEditor()).getTextField());   // proper model of JSpiner must be set before!

        moPanelAccountStart.initPanel();
        moPanelAccountEnd.initPanel();
        moPanelCostCenterStart.initPanel();
        moPanelCostCenterEnd.initPanel();

        SFormUtilities.populateComboBox(miClient, jcbEntity, SDataConstants.CFGU_COB_ENT);
        SFormUtilities.populateComboBox(miClient, jcbItem, SDataConstants.ITMU_ITEM);
        SFormUtilities.populateComboBox(miClient, jcbTax, SDataConstants.FINU_TAX);
        SFormUtilities.populateComboBox(miClient, jcbBizPartner, SDataConstants.BPSU_BP);

        mvFields = new Vector<>();
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldEntity);
        mvFields.add(moFieldBizPartner);
        mvFields.add(moFieldItem);
        mvFields.add(moFieldTax);

        jckShowEntity.setEnabled(false);
        jckShowBizPartner.setEnabled(false);
        jckShowItems.setEnabled(false);
        jckShowTax.setEnabled(false);

        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbPickEntity.addActionListener(this);
        jbPickBizPartner.addActionListener(this);
        jbPickItem.addActionListener(this);
        jbPickTax.addActionListener(this);
        jbClearEntity.addActionListener(this);
        jbClearBizPartner.addActionListener(this);
        jbClearItem.addActionListener(this);
        jbClearTax.addActionListener(this);
        jbPrint.addActionListener(this);
        jbClose.addActionListener(this);
        jckShowEntity.addItemListener(this);
        jckShowBizPartner.addItemListener(this);
        jckShowItems.addItemListener(this);
        jckShowTax.addItemListener(this);
        jsLevel.addChangeListener(this);

        setModalityType(ModalityType.MODELESS); // this allows interaction between SIIE client and JasperReports Preview
        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jftDateStart.requestFocus();
            jckShowCostCenter.setSelected(true);
            jckShowRecordAdjYearEnd.setSelected(true);
            jckDontShowIncludeCounts.setSelected(false);
            jckShowRecordAdjAudit.setSelected(true);

            actionEntityCheck();
            actionBizPartnerCheck();
            actionItemCheck();
            actionTaxCheck();
        }
    }

    private int[] composeMaskAccount() {
        int[] aMask = new int[8];
        int mask = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount();

        for (int i = 0; i < SAccountConsts.LEVELS; i++) {
            aMask[i] = ((int) (mask / Math.pow(10, SAccountConsts.LEVELS - (i + 1)))) * ((int) Math.pow(10, SAccountConsts.LEVELS - (i + 1)));
        }

        return aMask;
    }

    private void print() {
        int report = SLibConstants.UNDEFINED;
        Cursor cursor = getCursor();
        Map<String, Object> map = null;
        JasperPrint jasperPrint = null;
        JasperViewer jasperViewer = null;
        int[] aMask = new int[8];

        try {
            setCursor(new Cursor(Cursor.WAIT_CURSOR));
                      
            report = SDataConstantsSys.REP_FIN_AUX_ACC;
                        
            aMask = composeMaskAccount();

            map = miClient.createReportParams();
            map.put("nYear", SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]);
            map.put("tDateStart", moFieldDateStart.getDate());
            map.put("tDateEnd", moFieldDateEnd.getDate());
            map.put("nDeepLevel", (Integer) jsLevel.getValue());
            map.put("nDeep", miClient.getSessionXXX().getParamsErp().getDeepAccounts());
            map.put("nLengthLevel", SAccountConsts.LENGTH_LEVEL);
            map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
            map.put("sTitle", getTitle().toUpperCase());
            map.put("sCodeAccMin", msCodeAccMin);
            map.put("sCodeAccMax", msCodeAccMax);
            map.put("sAccountRank", "DE " + SAccountUtils.convertCodeUsr(mnMaskAcc, msCodeAccMin) + " A " + SAccountUtils.convertCodeUsr(mnMaskAcc, msCodeAccMax));
            map.put("sCostCenterRank", "DE " + SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMin) + " A " + SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMax));
            map.put("nMaskAcc_1", aMask[0]);
            map.put("nMaskAcc_2", aMask[1]);
            map.put("nMaskAcc_3", aMask[2]);
            map.put("nMaskAcc_4", aMask[3]);
            map.put("nMaskAcc_5", aMask[4]);
            map.put("nMaskAcc_6", aMask[5]);
            map.put("nMaskAcc_7", aMask[6]);
            map.put("nMaskAcc_8", aMask[7]);
            map.put("nMaskCc", mnMaskCc);
            if (moPanelCostCenterStart.getSelectedAccount() != null && moPanelCostCenterEnd.getSelectedAccount() != null) {
                map.put("sSqlWhereCc", " AND re.fid_cc_n >= '" + SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMin) + "' AND re.fid_cc_n <= '" + SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMax) + "' ");
                map.put("sSqlCcStart", SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMin));
                map.put("sSqlCcEnd", SAccountUtils.convertCodeUsr(mnMaskCc, msCodeCcMax));
            }
            map.put("sSqlCob", moFieldEntity.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_cob_n = " + moFieldEntity.getKeyAsIntArray()[0] + " ");
            map.put("sSqlEntity", moFieldEntity.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_ent_n = " + moFieldEntity.getKeyAsIntArray()[1] + " ");
            map.put("sSqlBizPartner", moFieldBizPartner.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_bp_nr = " + moFieldBizPartner.getKeyAsIntArray()[0] + " ");
            map.put("sSqlItem", moFieldItem.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_item_n = " + moFieldItem.getKeyAsIntArray()[0] + " ");
            map.put("sSqlTax", moFieldTax.getKeyAsIntArray()[0] == 0 ? "" : " AND re.fid_tax_bas_n = " + moFieldTax.getKeyAsIntArray()[0] + " AND re.fid_tax_n = " + moFieldTax.getKeyAsIntArray()[1] + " ");
            map.put("sEntity", moFieldEntity.getKeyAsIntArray()[0] == 0 ? "(TODAS)" : jcbEntity.getSelectedItem().toString());
            map.put("bShowFiscalId", jckShowFiscalId.isSelected());
            map.put("sBizPartner", moFieldBizPartner.getKeyAsIntArray()[0] == 0 ? "(TODOS)" : jcbBizPartner.getSelectedItem().toString());
            map.put("sItem", moFieldItem.getKeyAsIntArray()[0] == 0 ? "(TODOS)" : jcbItem.getSelectedItem().toString());
            map.put("sTax", moFieldTax.getKeyAsIntArray()[0] == 0 ? "(TODOS)" : jcbTax.getSelectedItem().toString());
            map.put("bShowCostCenter", jckShowCostCenter.isSelected());
            map.put("bShowEntity", jckShowEntity.isSelected());
            map.put("bShowBizPartner", jckShowBizPartner.isSelected());
            map.put("bShowItem", jckShowItems.isSelected());
            map.put("bShowTax", jckShowTax.isSelected());
            map.put("bWithZeroBalance", jckDontShowIncludeCounts.isSelected());
            map.put("bOrderItemName", miClient.getSessionXXX().getParamsErp().getFkSortingItemTypeId() != SDataConstantsSys.CFGS_TP_SORT_KEY_NAME);
            map.put("bStrechWithOverflow", jckStrechWithOverflow.isSelected());
            map.put("sSqlWhere", (!jckShowRecordAdjYearEnd.isSelected() ? " AND  b_adj_year = 0 " : "") +
                    (!jckShowRecordAdjAudit.isSelected() ? " AND  b_adj_audit = 0 " : ""));

            jasperPrint = SDataUtilities.fillReport(miClient, report, map);
            jasperViewer = new JasperViewer(jasperPrint, false);
            jasperViewer.setTitle(getTitle());
            jasperViewer.setVisible(true);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
        finally {
            setCursor(cursor);
        }
    }

    private void actionSpinner() {
        if ((Integer) jsLevel.getValue() == 1) {
            jckShowEntity.setEnabled(false);
            jckShowBizPartner.setEnabled(false);
            jckShowItems.setEnabled(false);
            jckShowTax.setEnabled(false);
            jckShowEntity.setSelected(false);
            jckShowBizPartner.setSelected(false);
            jckShowItems.setSelected(false);
            jckShowTax.setSelected(false);
        }
        else {
            jckShowEntity.setEnabled(true);
            jckShowBizPartner.setEnabled(true);
            jckShowItems.setEnabled(true);
            jckShowTax.setEnabled(true);
            jckShowEntity.setSelected(true);
            jckShowBizPartner.setSelected(true);
            jckShowItems.setSelected(true);
            jckShowTax.setSelected(true);
        }
    }

    /*
     * Public methods
     */

    private void actionDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }

    private void actionPickEntity() {
        miClient.pickOption(SDataConstants.CFGU_COB_ENT, moFieldEntity, null);
    }

    private void actionPickBizPartner() {
        miClient.pickOption(SDataConstants.BPSU_BP, moFieldBizPartner, null);
    }

    private void actionPickItem() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldItem, null);
    }

    private void actionPickTax() {
        miClient.pickOption(SDataConstants.FINU_TAX, moFieldTax, null);
    }

    private void actionClearEntity() {
        jcbEntity.setSelectedIndex(0);
        jcbEntity.requestFocus();
    }

    private void actionClearBizPartner() {
        jcbBizPartner.setSelectedIndex(0);
        jcbBizPartner.requestFocus();
    }

    private void actionClearItem() {
        jcbItem.setSelectedIndex(0);
        jcbItem.requestFocus();
    }

    private void actionClearTax() {
        jcbTax.setSelectedIndex(0);
        jcbTax.requestFocus();
    }

    public void actionPrint() {
        boolean error = false;
        String msg = "";
        JComponent component = null;

        mnMaskAcc = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount();
        mnMaskCc = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskCostCenter();

        msCodeAccMin = moPanelAccountStart.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMin() : moPanelAccountStart.getSelectedAccount().getCodeStd();
        msCodeAccMax = moPanelAccountEnd.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMax(mnMaskAcc) : moPanelAccountEnd.getSelectedAccount().getCodeStd();
        msCodeCcMin = moPanelCostCenterStart.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMin() : moPanelCostCenterStart.getSelectedAccount().getCodeStd();
        msCodeCcMax = moPanelCostCenterEnd.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMax(mnMaskCc) : moPanelCostCenterEnd.getSelectedAccount().getCodeStd();

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            if (moFieldDateStart.getDate().after(moFieldDateEnd.getDate())) {
                msg = SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + jlDateStart.getText() + "' " +
                        SGuiConsts.ERR_MSG_FIELD_DATE_LESS+ "'" + jlDateEnd.getText() + "'.";
            }
            else if (SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0]) {
                msg = SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + jlDateStart.getText() + "' y '" + jlDateEnd.getText() + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_YEAR_SAME;
            }
            else if (msCodeAccMin.compareTo(msCodeAccMax) > 0) {
                msg = SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + ((TitledBorder) jpMainStart.getBorder()).getTitle() + "'" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS + "'" + ((TitledBorder) jpMainEnd.getBorder()).getTitle() + "'.";
            }
            else if (msCodeCcMin.compareTo(msCodeCcMax) > 0) {
                msg = SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + ((TitledBorder) jpFilterStart.getBorder()).getTitle() + "'" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS + "'" + ((TitledBorder) jpFilterEnd.getBorder()).getTitle() + "'.";
            }

            if (msg.length() > 0) {
                miClient.showMsgBoxWarning(msg);
            }
            else {
                print();
            }
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    private void actionEntityCheck() {
        if (!jckShowEntity.isSelected()) {
            jlEntity.setEnabled(false);
            jcbEntity.setEnabled(false);
            jbPickEntity.setEnabled(false);
            jbClearEntity.setEnabled(false);
            jckShowFiscalId.setEnabled(false);
            jcbEntity.setSelectedIndex(0);
        }
        else {
            jlEntity.setEnabled(true);
            jcbEntity.setEnabled(true);
            jbPickEntity.setEnabled(true);
            jbClearEntity.setEnabled(true);
            jckShowFiscalId.setEnabled(true);
        }
    }

    private void actionBizPartnerCheck() {
        if (!jckShowBizPartner.isSelected()) {
            jlBizPartner.setEnabled(false);
            jcbBizPartner.setEnabled(false);
            jbPickBizPartner.setEnabled(false);
            jbClearBizPartner.setEnabled(false);
            jcbBizPartner.setSelectedIndex(0);
        }
        else {
            jlBizPartner.setEnabled(true);
            jcbBizPartner.setEnabled(true);
            jbPickBizPartner.setEnabled(true);
            jbClearBizPartner.setEnabled(true);
        }
    }

    private void actionItemCheck() {
        if (!jckShowItems.isSelected()) {
            jlItem.setEnabled(false);
            jcbItem.setEnabled(false);
            jbPickItem.setEnabled(false);
            jbClearItem.setEnabled(false);
            jcbItem.setSelectedIndex(0);
        }
        else {
            jlItem.setEnabled(true);
            jcbItem.setEnabled(true);
            jbPickItem.setEnabled(true);
            jbClearItem.setEnabled(true);
        }
    }

    private void actionTaxCheck() {
        if (!jckShowTax.isSelected()) {
            jlTax.setEnabled(false);
            jcbTax.setEnabled(false);
            jbPickTax.setEnabled(false);
            jbClearTax.setEnabled(false);
            jcbTax.setSelectedIndex(0);
        }
        else {
            jlTax.setEnabled(true);
            jcbTax.setEnabled(true);
            jbPickTax.setEnabled(true);
            jbClearTax.setEnabled(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClearBizPartner;
    private javax.swing.JButton jbClearEntity;
    private javax.swing.JButton jbClearItem;
    private javax.swing.JButton jbClearTax;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbPickBizPartner;
    private javax.swing.JButton jbPickEntity;
    private javax.swing.JButton jbPickItem;
    private javax.swing.JButton jbPickTax;
    private javax.swing.JButton jbPrint;
    private javax.swing.JComboBox jcbBizPartner;
    private javax.swing.JComboBox jcbEntity;
    private javax.swing.JComboBox jcbItem;
    private javax.swing.JComboBox jcbTax;
    private javax.swing.JCheckBox jckDontShowIncludeCounts;
    private javax.swing.JCheckBox jckShowBizPartner;
    private javax.swing.JCheckBox jckShowCostCenter;
    private javax.swing.JCheckBox jckShowEntity;
    private javax.swing.JCheckBox jckShowFiscalId;
    private javax.swing.JCheckBox jckShowItems;
    private javax.swing.JCheckBox jckShowRecordAdjAudit;
    private javax.swing.JCheckBox jckShowRecordAdjYearEnd;
    private javax.swing.JCheckBox jckShowTax;
    private javax.swing.JCheckBox jckStrechWithOverflow;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlEntity;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlLevel;
    private javax.swing.JLabel jlLevelMax;
    private javax.swing.JLabel jlTax;
    private javax.swing.JPanel jpFilterEnd;
    private javax.swing.JPanel jpFilterStart;
    private javax.swing.JPanel jpMainEnd;
    private javax.swing.JPanel jpMainStart;
    private javax.swing.JSpinner jsLevel;
    private javax.swing.JTextField jtfLevelMax;
    private erp.gui.account.SBeanPanelAccount moPanelAccountEnd;
    private erp.gui.account.SBeanPanelAccount moPanelAccountStart;
    private erp.gui.account.SBeanPanelAccount moPanelCostCenterEnd;
    private erp.gui.account.SBeanPanelAccount moPanelCostCenterStart;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbDateStart) {
                actionDateStart();
            }
            else if (button == jbDateEnd) {
                actionDateEnd();
            }
            else if (button == jbPickEntity) {
                actionPickEntity();
            }
            else if (button == jbPickBizPartner) {
                actionPickBizPartner();
            }
            else if (button == jbPickItem) {
                actionPickItem();
            }
            else if (button == jbPickTax) {
                actionPickTax();
            }
            else if (button == jbClearEntity) {
                actionClearEntity();
            }
            else if (button == jbClearBizPartner) {
                actionClearBizPartner();
            }
            else if (button == jbClearItem) {
                actionClearItem();
            }
            else if (button == jbClearTax) {
                actionClearTax();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();

            if (checkBox == jckShowEntity) {
                actionEntityCheck();
            }
            else if (checkBox == jckShowBizPartner) {
                actionBizPartnerCheck();
            }
            else if (checkBox == jckShowItems) {
                actionItemCheck();
            }
            else if (checkBox == jckShowTax) {
                actionTaxCheck();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsLevel) {
                actionSpinner();
            }
        }
    }
}
