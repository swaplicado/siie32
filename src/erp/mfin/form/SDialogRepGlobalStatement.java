/*
 * SDialogRepGlobalStatement.java
 *
 * Created on 24/11/2020, 02:36:00 PM
 */

package erp.mfin.form;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.Vector;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFCreationHelper;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import sa.lib.SLibUtils;

/**
 *
 * @author Isabel Servín
 */
public class SDialogRepGlobalStatement extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private final erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldDateCutoff;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    
    private XSSFWorkbook moLibro;
    
    private double mdVentasNetasAñoAnterior;
    private double mdVentasNetasAñoActual;
    private double mdCostoVentaAñoAnterior;
    private double mdCostoVentaAñoActual;
    private double mdGastosAñoAnterior;
    private double mdGastosAñoActual;
    
    private final int mnSheetMaxColumns = 9;
    private final int mnCantMeses = 12;
    
    private final short msnNoneFormat = (short)0;
    private final short msnCashFormat = (short)8; //8 = "($#,##0.00_);[Red]($#,##0.00)"
    private final short msnPercentageFormat = (short)10; //10 = "_(*#,##0.00_);_(*(#,##0.00);_(*\"-\"??_);_(@_)"
    
    private final int[] maDpsCategories = {SDataConstantsSys.TRNS_CT_DPS_SAL, SDataConstantsSys.TRNS_CT_DPS_PUR};

    /** Creates new form SDialogRepGlobalStatement
     * @param client */
    public SDialogRepGlobalStatement(erp.client.SClientInterface client) {
        super(client.getFrame(), false);
        miClient = client;
        
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDateCutoff = new javax.swing.JLabel();
        jftDateCutoff = new javax.swing.JFormattedTextField();
        jbPickDateCutoff = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpPrint = new javax.swing.JButton();
        jpClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Informe de situación general");
        setResizable(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del informe:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.GridLayout(5, 1));
        jPanel2.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutoff.setText("Fecha de corte: *");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDateCutoff);

        jftDateCutoff.setText("dd/mm/yyyy");
        jftDateCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jftDateCutoff);

        jbPickDateCutoff.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbPickDateCutoff.setToolTipText("Seleccionar fecha");
        jbPickDateCutoff.setFocusable(false);
        jbPickDateCutoff.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbPickDateCutoff);

        jPanel6.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel6.add(jPanel4);

        jPanel2.add(jPanel6, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jpPrint.setText("Imprimir");
        jpPrint.setToolTipText("[Ctrl + Enter]");
        jpPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpPrintActionPerformed(evt);
            }
        });
        jPanel1.add(jpPrint);

        jpClose.setText("Cerrar");
        jpClose.setToolTipText("[Escape]");
        jpClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jpClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jpCloseActionPerformed(evt);
            }
        });
        jPanel1.add(jpClose);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(416, 289));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jpPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpPrintActionPerformed
        actionPrint();
    }//GEN-LAST:event_jpPrintActionPerformed

    private void jpCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jpCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jpCloseActionPerformed

    private void initComponentsCustom() {
        moFieldDateCutoff = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateCutoff, jlDateCutoff);
        moFieldDateCutoff.setPickerButton(jbPickDateCutoff);

        mvFields = new Vector<>();
        mvFields.add(moFieldDateCutoff);
        
        moFieldDateCutoff.setFieldValue(miClient.getSessionXXX().getWorkingDate());
        
        jbPickDateCutoff.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionPrint", "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionClose", "close", KeyEvent.VK_ESCAPE, 0);
    }
    
    private String[][] clearArray(String[][] array) {
        for (String[] array1 : array) {
            for (int j = 0; j < array1.length; j++) {
                array1[j] = "";
            }
        }
        return array;
    }
    
    private String getMonthName(int mes) {
        String nombre = "";
        switch (mes){
            case 1: nombre = "Enero"; break;
            case 2: nombre = "Febrero"; break;
            case 3: nombre = "Marzo"; break;
            case 4: nombre = "Abril"; break;
            case 5: nombre = "Mayo"; break;
            case 6: nombre = "Junio"; break;
            case 7: nombre = "Julio"; break;
            case 8: nombre = "Agosto"; break;
            case 9: nombre = "Septiembre"; break;
            case 10: nombre = "Octubre"; break;
            case 11: nombre = "Noviembre"; break;
            case 12: nombre = "Diciembre"; break;
        }
        return nombre;
    }
    
    private CellStyle getCellStyle (boolean bold, short format, short foreground){
        XSSFFont font;
        CellStyle cellStyle = moLibro.createCellStyle();
        font = moLibro.createFont();
        font.setBold(bold);
        font.setFontName("Liberation Sans");
        font.setFontHeight(10);
        cellStyle.setFont(font);
        if (format != (short) 0) {
            cellStyle.setDataFormat(format);
        }
        cellStyle.setFillForegroundColor(foreground);
        cellStyle.setFillPattern(CellStyle.SOLID_FOREGROUND);
        cellStyle.setBorderBottom(XSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderTop(XSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderRight(XSSFCellStyle.BORDER_THIN);
        cellStyle.setBorderLeft(XSSFCellStyle.BORDER_THIN);
        return cellStyle;
    }
    
    private String getNowQuery() {
        return "SELECT NOW() AS _now;";
    }
    
    private String getClientsSuppliersQuery(int category, int lastYear, int year) {
        return "SELECT " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0), 0)  AS 1_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 1 THEN de.stot_r ELSE 0 END), 0), 0)  AS 1_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0), 0)  AS 2_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 2 THEN de.stot_r ELSE 0 END), 0), 0)  AS 2_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0), 0)  AS 3_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 3 THEN de.stot_r ELSE 0 END), 0), 0)  AS 3_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0), 0)  AS 4_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 4 THEN de.stot_r ELSE 0 END), 0), 0)  AS 4_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0), 0)  AS 5_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 5 THEN de.stot_r ELSE 0 END), 0), 0)  AS 5_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0), 0)  AS 6_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 6 THEN de.stot_r ELSE 0 END), 0), 0)  AS 6_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0), 0)  AS 7_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 7 THEN de.stot_r ELSE 0 END), 0), 0)  AS 7_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0), 0)  AS 8_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 8 THEN de.stot_r ELSE 0 END), 0), 0)  AS 8_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0), 0)  AS 9_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 9 THEN de.stot_r ELSE 0 END), 0), 0)  AS 9_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0), 0)  AS 10_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 10 THEN de.stot_r ELSE 0 END), 0), 0)  AS 10_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0), 0)  AS 11_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 11 THEN de.stot_r ELSE 0 END), 0), 0)  AS 11_act, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + lastYear + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0), 0)  AS 12_ant, " +
                "COALESCE(COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 3 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 1 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 2 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0) - COALESCE(SUM(CASE WHEN (d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 5 AND d.fid_tp_dps = 1 AND de.fid_tp_dps_adj = 3 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1) AND YEAR(d.dt) = " + year + " AND MONTH(d.dt) = 12 THEN de.stot_r ELSE 0 END), 0), 0)  AS 12_act " +
                "FROM trn_dps AS d " +
                "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "WHERE d.b_del = 0 AND de.b_del = 0  AND d.dt " +
                "HAVING 1_ant <> 0 OR 2_ant <> 0 OR 3_ant <> 0 OR 4_ant <> 0 OR 5_ant <> 0 OR 6_ant <> 0 OR 7_ant <> 0 OR 8_ant <> 0 OR 9_ant <> 0 OR 10_ant <> 0 OR 11_ant <> 0 OR 12_ant <> 0 " +
                "OR 1_act <> 0 OR 2_act <> 0 OR 3_act <> 0 OR 4_act <> 0 OR 5_act <> 0 OR 6_act <> 0 OR 7_act <> 0 OR 8_act <> 0 OR 9_act <> 0 OR 10_act <> 0 OR 11_act <> 0 OR 12_act <> 0;";
    }
    
    private String getInvoicedTodayQuery(int category) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        return "SELECT COALESCE(SUM(IF(fid_cl_dps = 5, -1, 1) * stot_r), 0) AS total FROM trn_dps " +
                "WHERE b_del = FALSE AND fid_ct_dps = " + category + " AND fid_cl_dps IN (3, 5) AND fid_tp_dps = 1 " +
                "AND fid_st_dps = 2 AND dt = '" + cutOff + "';";
    }
    
    private String getOrderedNotInvoicedQuery(int category) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        return "SELECT SUM(f_stot_pend) AS f_stot_pend FROM( " +
                "SELECT " +
                "de.qty - " +
                "(SELECT COALESCE(SUM(s.qty), 0) " +
                "FROM trn_dps_dps_supply AS s " +
                "INNER JOIN trn_dps AS t ON s.id_des_year = t.id_year AND s.id_des_doc = t.id_doc " +
                "INNER JOIN trn_dps_ety AS te ON s.id_des_year = te.id_year AND s.id_des_doc = te.id_doc AND s.id_des_ety = te.id_ety " +
                "WHERE s.id_src_year = de.id_year AND s.id_src_doc = de.id_doc AND s.id_src_ety = de.id_ety AND t.b_del = 0 AND te.b_del = 0 " +
                "AND t.dt <= '" + cutOff + "' ) AS f_qty_pend, " +
                "((de.qty - " +
                "(SELECT COALESCE(SUM(s.qty), 0) " +
                "FROM trn_dps_dps_supply AS s " +
                "INNER JOIN trn_dps AS t ON s.id_des_year = t.id_year AND s.id_des_doc = t.id_doc " +
                "INNER JOIN trn_dps_ety AS te ON s.id_des_year = te.id_year AND s.id_des_doc = te.id_doc AND s.id_des_ety = te.id_ety " +
                "WHERE s.id_src_year = de.id_year AND s.id_src_doc = de.id_doc AND s.id_src_ety = de.id_ety AND t.b_del = 0 " +
                "AND te.b_del = 0 AND t.dt <= '" + cutOff + "' ) " +
                ") * de.price_u) AS f_stot_pend " +
                "FROM trn_dps AS d " +
                "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps " +
                "AND d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 2 AND d.fid_tp_dps = 1 " +
                "WHERE d.b_del = 0 AND de.b_del = 0 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1 AND d.b_link = 0 " +
                "AND d.dt <= '" + cutOff + "' " +
                "HAVING f_qty_pend > 0 ) " +
                "AS a;";
    }
    
    private String getQuotedNotInvoicedQuery(int category) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        return "SELECT SUM(f_stot_pend) AS f_stot_pend FROM ( " +
                "SELECT " +
                "de.qty - " +
                "(SELECT COALESCE(SUM(s.qty), 0) " +
                "FROM trn_dps_dps_supply AS s " +
                "INNER JOIN trn_dps AS t ON s.id_des_year = t.id_year AND s.id_des_doc = t.id_doc " +
                "INNER JOIN trn_dps_ety AS te ON s.id_des_year = te.id_year AND s.id_des_doc = te.id_doc AND s.id_des_ety = te.id_ety " +
                "WHERE s.id_src_year = de.id_year AND s.id_src_doc = de.id_doc AND s.id_src_ety = de.id_ety AND t.b_del = 0 AND te.b_del = 0 " +
                "AND t.dt <= '" + cutOff + "' ) AS f_qty_pend, " +
                "((de.qty - " +
                "(SELECT COALESCE(SUM(s.qty), 0) " +
                "FROM trn_dps_dps_supply AS s " +
                "INNER JOIN trn_dps AS t ON s.id_des_year = t.id_year AND s.id_des_doc = t.id_doc " +
                "INNER JOIN trn_dps_ety AS te ON s.id_des_year = te.id_year AND s.id_des_doc = te.id_doc AND s.id_des_ety = te.id_ety " +
                "WHERE s.id_src_year = de.id_year AND s.id_src_doc = de.id_doc AND s.id_src_ety = de.id_ety AND t.b_del = 0 AND te.b_del = 0 " +
                "AND t.dt <= '" + cutOff + "' ) " +
                ") * de.price_u) AS f_stot_pend " +
                "FROM trn_dps AS d " +
                "INNER JOIN trn_dps_ety AS de ON d.id_year = de.id_year AND d.id_doc = de.id_doc " +
                "INNER JOIN erp.trnu_tp_dps AS dt ON d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps " +
                "AND d.fid_ct_dps = " + category + " AND d.fid_cl_dps = 1 AND d.fid_tp_dps = 2 " +
                "WHERE d.b_del = 0 AND de.b_del = 0 AND d.fid_st_dps = 2 AND d.fid_st_dps_val = 1 AND d.b_link = 0 " +
                "AND d.dt <= '" + cutOff + "' " +
                "HAVING f_qty_pend > 0 ) " +
                "AS a;";
    }
    
    private String getToCollectPayQuery(int category) {
        String year = SLibUtils.DateFormatDateYear.format(moFieldDateCutoff.getDate());
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        int tp_sys_mov = category == SDataConstantsSys.TRNS_CT_DPS_SAL ? 3 : 2;
        return "SELECT " + 
                "SUM(IF(r.dt <= '" + cutOff + "', re.debit - re.credit, 0)) AS f_sf " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = " + year + " AND r.dt <= '" + cutOff + "' AND r.id_year = re.id_year AND r.id_per = re.id_per " +
                "AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND r.b_del = 0 AND re.b_del = 0 " +
                "WHERE re.fid_ct_sys_mov_xxx = 4 AND re.fid_tp_sys_mov_xxx = " + tp_sys_mov + ";";
        
    }
    
    private String getTotalOverdueQuery(int category) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        String year = SLibUtils.DateFormatDateYear.format(moFieldDateCutoff.getDate());
        int tp_sys_mov = category == SDataConstantsSys.TRNS_CT_DPS_SAL ? 3 : 2;
        return "SELECT SUM(def) AS def FROM( " +
                "SELECT SUM(IF(re.fid_ct_sys_mov_xxx = 4 AND re.fid_tp_sys_mov_xxx = 2 , -1, 1) * (re.debit - re.credit)) AS f_balance, " +
                "IF (DATEDIFF('" + cutOff + "', DATE_ADD(d.dt_start_cred, INTERVAL d.days_cred DAY)) > 0, SUM(IF(re.fid_ct_sys_mov_xxx = 4 AND re.fid_tp_sys_mov_xxx = 2, -1, 1) * (re.debit - re.credit)), 0) AS def " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec " +
                "AND r.id_num = re.id_num AND r.b_del = FALSE AND re.b_del = FALSE AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' " +
                "AND re.fid_ct_sys_mov_xxx = 4 AND re.fid_tp_sys_mov_xxx = " + tp_sys_mov + " " +
                "INNER JOIN fin_acc AS ac ON LEFT(re.fid_acc, INSTR(re.fid_acc, '-')) = LEFT(ac.id_acc, INSTR(ac.id_acc, '-')) AND ac.lev = 1 " +
                "LEFT OUTER JOIN erp.bpsu_bp AS bp ON re.fid_bp_nr = bp.id_bp " +
                "LEFT OUTER JOIN erp.bpsu_bp_ct AS ct ON bp.id_bp = ct.id_bp AND ct.id_ct_bp = 3 " +
                "LEFT OUTER JOIN erp.bpsu_tp_bp AS btp ON ct.fid_tp_bp = btp.id_tp_bp AND btp.id_ct_bp = 3 " +
                "LEFT OUTER JOIN trn_dps AS d ON re.fid_dps_year_n = d.id_year AND re.fid_dps_doc_n = d.id_doc AND d.fid_cob = 2890 " +
                "LEFT OUTER JOIN erp.bpsu_bpb AS bpb ON d.fid_bpb = bpb.id_bpb " +
                "LEFT OUTER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur " +
                "LEFT OUTER JOIN erp.bpsu_bpb AS cb ON re.fid_bpb_n = cb.id_bpb " +
                "LEFT OUTER JOIN erp.bpsu_bpb_add AS a ON re.fid_bpb_n = a.id_bpb AND  IF(d.fid_add IS NULL, 1, d.fid_add) = a.id_add AND a.b_del = FALSE " +
                "LEFT OUTER JOIN erp.bpss_tp_add AS ta ON a.fid_tp_add = ta.id_tp_add " +
                "LEFT OUTER JOIN erp.bpsu_bpb_con AS bpb_con ON re.fid_bpb_n = bpb_con.id_bpb  AND bpb_con.id_con = 1 " +
                "LEFT OUTER JOIN mkt_cfg_cus AS cus ON re.fid_bp_nr = cus.id_cus " +
                "LEFT OUTER JOIN erp.bpsu_bp AS bp1 ON re.fid_bpb_n = cus.fid_sal_agt_n " +
                "LEFT OUTER JOIN mkt_cfg_cusb AS cusb ON re.fid_bpb_n = cusb.id_cusb " +
                "LEFT OUTER JOIN mktu_sal_route AS rt ON cusb.fid_sal_route = rt.id_sal_route " +
                "GROUP BY btp.tp_bp, bp.bp, d.id_year, d.id_doc, d.fid_bpb " +
                "HAVING f_balance <> 0 " +
                "ORDER BY btp.tp_bp, bp.bp, ct.bp_key, bp.bp_comm, bp.id_bp, ac.fid_tp_acc_r, ac.fid_cl_acc_r DESC, " +
                "CONCAT(d.num_ser, '-', d.num), d.dt, re.fid_dps_year_n, re.fid_dps_doc_n, ct.bp_key,  c.cur_key " +
                ") AS a;" ;
    }
    
    private String getCapitalQuery(int typeAccount) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        String year = SLibUtils.DateFormatDateYear.format(moFieldDateCutoff.getDate());
        int ledger = 0; 
        switch(typeAccount) {
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                ledger = SDataConstantsSys.FINU_TP_ACC_LEDGER_CASH;
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK: 
                ledger = SDataConstantsSys.FINU_TP_ACC_LEDGER_BANK; 
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                ledger = SDataConstantsSys.FINU_TP_ACC_LEDGER_INV;
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                ledger = SDataConstantsSys.FINU_TP_ACC_LEDGER_CDR;
                break;
            case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                ledger = SDataConstantsSys. FINU_TP_ACC_LEDGER_DBR;
                break;
            default:
        }
        return "SELECT am.acc, SUM(re.debit - re.credit) / 1.0 AS f_bal " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' AND r.b_del = FALSE AND re.b_del = FALSE " +
                "INNER JOIN fin_acc AS am ON CONCAT(LEFT(re.fid_acc, 4), '-0000-0000') = am.id_acc " +
                "WHERE am.fid_tp_acc_sys = " + typeAccount + " AND am.fid_tp_acc_ledger = " + ledger + ";";
    }
    
    private String getExpensesByMonthQuery(int lastYear, int year) {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        return "SELECT re.id_year, re.id_per, " +
                "SUM(re.credit - re.debit) / 1.0 AS f_bal " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "AND (r.id_year = " + lastYear + " OR r.id_year = " + year + ") AND r.dt <= '" + cutOff + "' AND r.b_del = FALSE AND re.b_del = FALSE " +
                "INNER JOIN fin_acc AS am ON CONCAT(LEFT(re.fid_acc, 4), '-0000-0000') = am.id_acc " +
                "WHERE am.fid_tp_acc_usr = 3 AND am.fid_cl_acc_usr = 1 AND (am.fid_cls_acc_usr = 6 OR am.fid_cls_acc_usr = 7 OR am.fid_cls_acc_usr = 8) " +
                "AND NOT am.b_del AND NOT r.b_adj_year " +
                "GROUP BY re.id_year, re.id_per HAVING SUM(re.debit - re.credit) <> 0;";
    }
    
    private String getBanksBalanceQuery() {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        String year = SLibUtils.DateFormatDateYear.format(moFieldDateCutoff.getDate());
        return "SELECT  e.ent, e.code,  SUM(IF(r.dt <= '" + cutOff + "', re.debit - re.credit, 0)) AS f_sf " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "INNER JOIN erp.cfgu_cob_ent AS e ON re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                "WHERE r.b_del = 0 AND re.b_del = 0 AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' " +
                "AND re.fid_ct_sys_mov_xxx = 3 AND re.fid_tp_sys_mov_xxx = 2 AND e.b_act = 1 " +
                "GROUP BY e.id_cob, e.id_ent, e.ent, e.code, e.b_act, e.b_del " +
                "ORDER BY e.id_cob, re.fid_tp_sys_mov_xxx, e.ent, e.id_ent;";
    }
    
    private String getSalPurQuery(int category, int year) {
        String startYear = year + "-01-01";
        String endYear = year + "-12-31";
        int id_ct_bp = category == SDataConstantsSys.TRNS_CT_DPS_SAL ? 3 : 2;
        int fid_ct_dps = category == SDataConstantsSys.TRNS_CT_DPS_SAL ? 2 : 1;
        return "SELECT bp, bp_key, SUM(f_stot_net) AS f_stot_net FROM (" +
                "(SELECT bp, bp_key, COALESCE(SUM(e.stot_r), 0) AS f_stot_net " +
                "FROM trn_dps_ety AS e " +
                "INNER JOIN trn_dps AS doc ON e.id_year = doc.id_year AND e.id_doc = doc.id_doc " +
                "INNER JOIN erp.bpsu_bp AS bp ON doc.fid_bp_r = bp.id_bp " +
                "INNER JOIN erp.bpsu_bp_ct AS ct ON bp.id_bp = ct.id_bp AND ct.id_ct_bp = " + id_ct_bp + " " + 
                "INNER JOIN erp.bpsu_tp_bp AS tp ON ct.fid_ct_bp = tp.id_ct_bp AND ct.fid_tp_bp = tp.id_tp_bp " +
                "INNER JOIN erp.itmu_item AS i ON e.fid_item = i.id_item " +
                "INNER JOIN erp.bpsu_bpb AS cob ON doc.fid_cob = cob.id_bpb " +
                "WHERE e.b_del = FALSE AND doc.b_del = FALSE AND doc.fid_ct_dps = " + fid_ct_dps + " " + 
                "AND doc.fid_cl_dps = 3 AND doc.fid_tp_dps = 1 " +
                "AND doc.fid_st_dps = 2 AND doc.fid_st_dps_val = 1 AND doc.fid_cob = 2890 " +
                "AND doc.dt BETWEEN '" + startYear + "' AND '" + endYear + "' " +
                "GROUP BY bp, bp_key ORDER BY bp, bp_key ) " +
                "UNION " +
                "(SELECT bp, bp_key, 0 - COALESCE(SUM(e.stot_r), 0) AS f_stot_net " +
                "FROM trn_dps_ety AS e " +
                "INNER JOIN trn_dps AS doc ON e.id_year = doc.id_year AND e.id_doc = doc.id_doc " +
                "INNER JOIN trn_dps_dps_adj AS j ON e.id_year = j.id_adj_year AND e.id_doc = j.id_adj_doc AND e.id_ety = j.id_adj_ety " +
                "INNER JOIN trn_dps_ety AS o ON j.id_dps_year = o.id_year AND j.id_dps_doc = o.id_doc AND j.id_dps_ety = o.id_ety " +
                "INNER JOIN erp.bpsu_bp AS bp ON doc.fid_bp_r = bp.id_bp " +
                "INNER JOIN erp.bpsu_bp_ct AS ct ON bp.id_bp = ct.id_bp AND ct.id_ct_bp = " + id_ct_bp + " " + 
                "INNER JOIN erp.bpsu_tp_bp AS tp ON ct.fid_ct_bp = tp.id_ct_bp AND ct.fid_tp_bp = tp.id_tp_bp " +
                "INNER JOIN erp.itmu_item AS i ON o.fid_item = i.id_item " +
                "INNER JOIN erp.bpsu_bpb AS cob ON doc.fid_cob = cob.id_bpb " +
                "WHERE e.b_del = FALSE AND doc.b_del = FALSE AND doc.fid_ct_dps = " + fid_ct_dps + " " + 
                "AND doc.fid_cl_dps = 5 AND doc.fid_tp_dps = 1 " +
                "AND doc.fid_st_dps = 2 AND doc.fid_st_dps_val = 1 AND e.fid_tp_dps_adj = 2 AND doc.fid_cob = 2890 " +
                "AND doc.dt BETWEEN '" + startYear + "' AND '" + endYear + "' " +
                "GROUP BY bp, bp_key ORDER BY bp, bp_key ) " +
                "UNION " +
                "(SELECT bp, bp_key, 0 - COALESCE(SUM(e.stot_r), 0) AS f_stot_net " +
                "FROM trn_dps_ety AS e " +
                "INNER JOIN trn_dps AS doc ON e.id_year = doc.id_year AND e.id_doc = doc.id_doc " +
                "INNER JOIN trn_dps_dps_adj AS j ON e.id_year = j.id_adj_year AND e.id_doc = j.id_adj_doc AND e.id_ety = j.id_adj_ety " +
                "INNER JOIN trn_dps_ety AS o ON j.id_dps_year = o.id_year AND j.id_dps_doc = o.id_doc AND j.id_dps_ety = o.id_ety " +
                "INNER JOIN erp.bpsu_bp AS bp ON doc.fid_bp_r = bp.id_bp " +
                "INNER JOIN erp.bpsu_bp_ct AS ct ON bp.id_bp = ct.id_bp AND ct.id_ct_bp = " + id_ct_bp + " " + 
                "INNER JOIN erp.bpsu_tp_bp AS tp ON ct.fid_ct_bp = tp.id_ct_bp AND ct.fid_tp_bp = tp.id_tp_bp " +
                "INNER JOIN erp.itmu_item AS i ON o.fid_item = i.id_item " +
                "INNER JOIN erp.bpsu_bpb AS cob ON doc.fid_cob = cob.id_bpb " +
                "WHERE e.b_del = FALSE AND doc.b_del = FALSE AND doc.fid_ct_dps = " + fid_ct_dps + " " + 
                "AND doc.fid_cl_dps = 5 AND doc.fid_tp_dps = 1 " +
                "AND doc.fid_st_dps = 2 AND doc.fid_st_dps_val = 1 AND e.fid_tp_dps_adj = 3 AND doc.fid_cob = 2890 " +
                "AND doc.dt BETWEEN '" + startYear + "' AND '" + endYear + "' " +
                "GROUP BY bp, bp_key ORDER BY bp, bp_key )" +
                ") AS t GROUP BY bp, bp_key ORDER BY bp, bp_key;";
    }
        
    private String[][] getClientsSuppliersArr() throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        String[][] arrClientesProveedores = clearArray(new String[15][mnSheetMaxColumns]);
        
        for (int dpsCategory : maDpsCategories) {
            String sql = getClientsSuppliersQuery(dpsCategory, lastYear, year);
            String categoria = "";
            int columnaInicial = 0;
            switch (dpsCategory) {
                case SDataConstantsSys.TRNS_CT_DPS_SAL:
                    categoria = "CLIENTES";
                    columnaInicial = 0;
                    break;
                case SDataConstantsSys.TRNS_CT_DPS_PUR:
                    categoria = "PROVEEDORES";
                    columnaInicial = 5;
                    break;
                default:
            }
            arrClientesProveedores[0][columnaInicial] = categoria;
            arrClientesProveedores[1][columnaInicial] = "FACTURACIÓN MENSUAL";
            arrClientesProveedores[1][columnaInicial + 1] = lastYear + "";
            arrClientesProveedores[1][columnaInicial + 2] = year + "";
            arrClientesProveedores[1][columnaInicial + 3] = "Variación";

            try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                if (resultSet.next()){
                    double totalSaldoAñoAnterior = 0;
                    double totalSaldoAñoActual = 0;
                    for (int i = 0, j = 2; i < mnCantMeses ; i++, j++) {
                        int mes = i + 1;
                        double saldoAñoAnterior = resultSet.getDouble(mes + "_ant");
                        double saldoAñoActual = resultSet.getDouble(mes + "_act");
                        totalSaldoAñoAnterior += saldoAñoAnterior;
                        totalSaldoAñoActual += saldoAñoActual;
                        String porcentaje = saldoAñoAnterior == 0 ? "-" : (saldoAñoActual-saldoAñoAnterior)/saldoAñoAnterior + "";
                        arrClientesProveedores[j][columnaInicial] = getMonthName(mes);
                        arrClientesProveedores[j][columnaInicial + 1] = saldoAñoAnterior + "";
                        arrClientesProveedores[j][columnaInicial + 2] = saldoAñoActual + "";
                        arrClientesProveedores[j][columnaInicial + 3] = porcentaje;
                    }
                    arrClientesProveedores[14][columnaInicial] = "Total";
                    arrClientesProveedores[14][columnaInicial + 1] = totalSaldoAñoAnterior + "";
                    arrClientesProveedores[14][columnaInicial + 2] = totalSaldoAñoActual + "";
                    arrClientesProveedores[14][columnaInicial + 3] = totalSaldoAñoAnterior == 0 ? "-" : (totalSaldoAñoActual-totalSaldoAñoAnterior)/totalSaldoAñoAnterior + "";
                }
            }
        }
        return arrClientesProveedores;
    }
    
    private String[][] getTotalInvoicedArr() throws Exception {
        String[][] totalFacturacion = clearArray(new String[9][mnSheetMaxColumns]);
        
        for (int dpsCategory : maDpsCategories) {
            int columnaInicial = dpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? 0 : 5;
            String encabezado = dpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? "CUENTAS POR COBRAR" : "CUENTAS POR PAGAR";  
            String complemento = dpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? " (clientes)" : " (proveedores)";
            String sql = getInvoicedTodayQuery(dpsCategory);
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                totalFacturacion[0][columnaInicial] = "Total facturado el día de hoy" + complemento;
                totalFacturacion[0][columnaInicial + 1] = resultSet.getDouble("total") + "";
            }
            
            sql = getOrderedNotInvoicedQuery(dpsCategory);
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()){
                totalFacturacion[2][columnaInicial] = "Total pedido pero todavia no facturado";
                totalFacturacion[2][columnaInicial + 1] = resultSet.getDouble("f_stot_pend") + "";
            }

            sql = getQuotedNotInvoicedQuery(dpsCategory);
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()){
                totalFacturacion[4][columnaInicial] = "Total cotizado pero todavia no pedido";
                totalFacturacion[4][columnaInicial + 1] = resultSet.getDouble("f_stot_pend") + "";
            }
            
            totalFacturacion[6][columnaInicial] = encabezado;
            sql = getToCollectPayQuery(dpsCategory);
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()){
                totalFacturacion[7][columnaInicial] = dpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ?  "Total por cobrar" : "Total por pagar";
                totalFacturacion[7][columnaInicial + 1] = dpsCategory == SDataConstantsSys.TRNS_CT_DPS_SAL ? resultSet.getDouble("f_sf") + "" : resultSet.getDouble("f_sf") * -1 + "";
            }
            sql = getTotalOverdueQuery(dpsCategory);
            resultSet = miClient.getSession().getStatement().executeQuery(sql);
            double totalVencido = 0;
            while (resultSet.next()){
                totalVencido += resultSet.getDouble("def");
            }
            totalFacturacion[8][columnaInicial] = "Total vencido";
            totalFacturacion[8][columnaInicial + 1] = totalVencido + "";
              
            resultSet.close();
        }
        
        return totalFacturacion;
    }
    
    private String[][] getCapitalInventoryExpensesArr() throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        String[][] capitalInventarioGastos = clearArray(new String[24][mnSheetMaxColumns]);
        
        capitalInventarioGastos[0][0] = "CAPITAL";
        capitalInventarioGastos[1][0] = "Caja";
        capitalInventarioGastos[2][0] = "Banco";
        capitalInventarioGastos[3][0] = "Cuentas por cobrar (clientes)";
        capitalInventarioGastos[4][0] = "Deudores diversos";
        capitalInventarioGastos[5][0] = "Total disponible en inventario";
        capitalInventarioGastos[6][0] = "Cuentas por pagar (proveedores)";
        capitalInventarioGastos[7][0] = "Acreedores diversos";
        capitalInventarioGastos[8][0] = "Total";
        double total = 0;
        String inventario = "";
        String sql = getCapitalQuery(SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH);
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[1][1] = resultSet.getDouble("f_bal") + "";
            total += resultSet.getDouble("f_bal");
        }
        sql = getCapitalQuery(SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK); 
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[2][1] = resultSet.getDouble("f_bal") + "";
            total += resultSet.getDouble("f_bal");
        }
        sql = getToCollectPayQuery(SDataConstantsSys.TRNS_CT_DPS_SAL);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[3][1] = resultSet.getDouble("f_sf") + "";
            total += resultSet.getDouble("f_sf");
        }
        sql = getCapitalQuery(SDataConstantsSys.FINS_TP_ACC_SYS_DBR);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[4][1] = resultSet.getDouble("f_bal") + "";
            total += resultSet.getDouble("f_bal");
        }
        sql = getCapitalQuery(SDataConstantsSys.FINS_TP_ACC_SYS_INV);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            inventario = capitalInventarioGastos[5][1] = resultSet.getDouble("f_bal") + "";
            total += resultSet.getDouble("f_bal");
        }
        sql = getToCollectPayQuery(SDataConstantsSys.TRNS_CT_DPS_PUR);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[6][1] = resultSet.getDouble("f_sf") * -1 + "";
            total -= resultSet.getDouble("f_sf") * -1;
        }
        sql = getCapitalQuery(SDataConstantsSys.FINS_TP_ACC_SYS_CDR);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            capitalInventarioGastos[7][1] = resultSet.getDouble("f_bal") * -1 + "";
            total -= resultSet.getDouble("f_bal") * -1;
        }
        capitalInventarioGastos[8][1] = total + "";
        
        capitalInventarioGastos[0][5] = "INVENTARIO";
        capitalInventarioGastos[1][5] = "Total en inventario";
        capitalInventarioGastos[1][6] = inventario;
        
        capitalInventarioGastos[10][0] = "GASTOS";
        capitalInventarioGastos[10][1] = lastYear + "";
        capitalInventarioGastos[10][2] = year + "";
        capitalInventarioGastos[10][3] = "Variación";
        sql = getExpensesByMonthQuery(lastYear, year);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        double totalAñoAnterior = 0;
        double totalAñoActual = 0;
        int columnaAñoAnterior = 0;
        int columnaAñoActual = 0; 
        double[][] gastos = new double[mnCantMeses][2];
        while (resultSet.next()){
            double gasto = resultSet.getDouble("f_bal") * -1;
            if(resultSet.getInt("id_year") == lastYear) {
                totalAñoAnterior += gasto;
                gastos[columnaAñoAnterior][0] = gasto;
                columnaAñoAnterior++;
            }
            else if (resultSet.getInt("id_year") == year) {
                totalAñoActual += gasto;
                gastos[columnaAñoActual][1] = gasto;
                columnaAñoActual++;
            }
        }
        for (int columna = 11, mes = 1; columna < 23; columna++, mes++) {
            capitalInventarioGastos[columna][0] = getMonthName(mes);
            capitalInventarioGastos[columna][1] = gastos[mes-1][0] + "";
            capitalInventarioGastos[columna][2] = gastos[mes-1][1] + "";
            capitalInventarioGastos[columna][3] = gastos[mes-1][0] == 0 ? "-" : (gastos[mes-1][1]-gastos[mes-1][0])/gastos[mes-1][0] + "";
        }
        capitalInventarioGastos[23][0] = "Total";
        capitalInventarioGastos[23][1] = totalAñoAnterior + "";
        capitalInventarioGastos[23][2] = totalAñoActual + "";
        capitalInventarioGastos[23][3] = totalAñoAnterior == 0 ? "-" : (totalAñoActual-totalAñoAnterior)/totalAñoAnterior + "";
        
        return capitalInventarioGastos;
    }
    
    private double[][] getSummaryArr(double utilidadAñoAnterior, double utilidadAñoActual, int lastYear, int year) {
        double[][] resumen = {
            { 
                lastYear, 
                mdVentasNetasAñoAnterior,
                mdCostoVentaAñoAnterior, 
                mdGastosAñoAnterior,
                utilidadAñoAnterior
            },
            {
                year,
                mdVentasNetasAñoActual,
                mdCostoVentaAñoActual, 
                mdGastosAñoActual,
                utilidadAñoActual
            }
        };
        
        return resumen;
    }
    
    private double getNetSales(int year) throws Exception {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        double ventaNeta = 0;
        String sql = "SELECT " +
                "SUM(re.credit - re.debit) / 1.0 AS f_bal " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' AND r.b_del = FALSE AND re.b_del = FALSE " +
                "INNER JOIN fin_acc AS am ON CONCAT(LEFT(re.fid_acc, 4), '-0000-0000') = am.id_acc " +
                "WHERE am.fid_tp_acc_usr = 3 AND ((am.fid_cl_acc_usr = 2 AND am.fid_cls_acc_usr = 1) OR (am.fid_cl_acc_usr = 1 AND am.fid_cls_acc_usr = 2)) " +
                "AND NOT am.b_del AND NOT r.b_adj_year;";
        
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            ventaNeta = resultSet.getDouble("f_bal");
        }
        
        return ventaNeta;
    }
    
    private double getSalesCosts(int year) throws Exception {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        double costoVenta = 0;
        String sql = "SELECT " +
                "SUM(re.credit - re.debit) / 1.0 AS f_bal " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' AND r.b_del = FALSE AND re.b_del = FALSE " +
                "INNER JOIN fin_acc AS am ON CONCAT(LEFT(re.fid_acc, 4), '-0000-0000') = am.id_acc " +
                "WHERE am.fid_tp_acc_usr = 3 AND ((am.fid_cl_acc_usr = 1 AND am.fid_cls_acc_usr = 1) OR (am.fid_cl_acc_usr = 2 AND am.fid_cls_acc_usr = 2) OR (am.fid_cl_acc_usr = 1 AND am.fid_cls_acc_usr = 3)) " +
                "AND NOT am.b_del AND NOT r.b_adj_year;";
        
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            costoVenta = resultSet.getDouble("f_bal") * -1;
        }
        
        return costoVenta;
    }
    
    private double getExpenses(int year) throws Exception {
        String cutOff = SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate());
        double gastos = 0;
        String sql = "SELECT " +
                "SUM(re.credit - re.debit) / 1.0 AS f_bal " +
                "FROM fin_rec AS r " +
                "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                "AND r.id_year = " + year + " AND r.dt <= '" + cutOff + "' AND r.b_del = FALSE AND re.b_del = FALSE " +
                "INNER JOIN fin_acc AS am ON CONCAT(LEFT(re.fid_acc, 4), '-0000-0000') = am.id_acc " +
                "WHERE am.fid_tp_acc_usr = 3 AND am.fid_cl_acc_usr = 1 AND (am.fid_cls_acc_usr = 6 OR am.fid_cls_acc_usr = 7 OR am.fid_cls_acc_usr = 8) " +
                "AND NOT am.b_del AND NOT r.b_adj_year;";
        
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        if (resultSet.next()) {
            gastos = resultSet.getDouble("f_bal") * -1;
        }
        
        return gastos;
    }
    
    private void printDates(Sheet pagina, int numFila) throws Exception {
        CellStyle negritas = getCellStyle(true, msnNoneFormat, IndexedColors.GREY_40_PERCENT.getIndex());
        
        String sqlFechaEmision = getNowQuery();
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sqlFechaEmision);
        Timestamp fechaEmision = new Timestamp(0); 
        if (resultSet.next()) {
            fechaEmision = resultSet.getTimestamp("_now");
        }
        
        Row fila = pagina.createRow(numFila);
        Cell cutOffCellText = fila.createCell(0);
        Cell cutOffCell = fila.createCell(1);
        Cell currentDateCellText = fila.createCell(5);
        Cell currentDateCell = fila.createCell(6);
        
        cutOffCellText.setCellValue("Fecha de corte:");
        cutOffCell.setCellValue(SLibUtils.DateFormatDate.format(moFieldDateCutoff.getDate()));
        currentDateCellText.setCellValue("Fecha de emisión:");
        currentDateCell.setCellValue(SLibUtils.DateFormatDatetime.format(fechaEmision));
        
        cutOffCellText.setCellStyle(negritas);
        cutOffCell.setCellStyle(negritas);
        currentDateCellText.setCellStyle(negritas);
        currentDateCell.setCellStyle(negritas);
    }
    
    private int printClientsSuppliersTables(Sheet pagina, int numFila) throws Exception {
        CellStyle negritasClientes = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_GREEN.getIndex());
        CellStyle monedaClientes = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
        CellStyle porcentajeClientes = getCellStyle(false, msnPercentageFormat, IndexedColors.LIGHT_GREEN.getIndex());
        CellStyle negritasMonedaClientes = getCellStyle(true, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
        CellStyle negritasPorcentajeClientes = getCellStyle(true, msnPercentageFormat, IndexedColors.LIGHT_GREEN.getIndex());
        
        CellStyle negritasProveedores = getCellStyle(true, msnNoneFormat, IndexedColors.ROSE.getIndex());
        CellStyle monedaProveedores = getCellStyle(false, msnCashFormat, IndexedColors.ROSE.getIndex());
        CellStyle porcentajeProveedores = getCellStyle(false, msnPercentageFormat, IndexedColors.ROSE.getIndex());
        CellStyle negritasMonedaProveedores = getCellStyle(true, msnCashFormat, IndexedColors.ROSE.getIndex());
        CellStyle negritasPorcentajeProveedores = getCellStyle(true, msnPercentageFormat, IndexedColors.ROSE.getIndex());
        
        String[][] arrClientesProveedores = getClientsSuppliersArr();
        // Fila:
        for (int i = 0; i < arrClientesProveedores.length; i++, numFila++) {
            Row fila = pagina.createRow(numFila);
            // Columna: 
            for (int j = 0; j < arrClientesProveedores[i].length; j++) {
                Cell celda = fila.createCell(j);
                // Encabezados de la tabla:
                if (i <= 1) {
                    celda.setCellValue(arrClientesProveedores[i][j]);
                    if (j >= 0 && j <= 3) {
                        celda.setCellStyle(negritasClientes);
                    }
                    else if (j >= 5 && j <= 8) {
                        celda.setCellStyle(negritasProveedores);
                    }
                }
                // Totales
                else if (i == 14) {
                    if (j >= 0 && j <= 3) {
                        try {
                            celda.setCellValue(Double.parseDouble(arrClientesProveedores[i][j]));
                        }
                        catch (Exception e){
                            celda.setCellValue(arrClientesProveedores[i][j]);
                        }
                        celda.setCellStyle(negritasMonedaClientes);
                    }
                    else if (j >= 5 && j <= 8) {
                        try {
                            celda.setCellValue(Double.parseDouble(arrClientesProveedores[i][j]));
                        }
                        catch (Exception e){
                            celda.setCellValue(arrClientesProveedores[i][j]);
                        }
                        celda.setCellStyle(negritasMonedaProveedores);
                    }
                    // Variaciones del total
                    if (j == 3 || j == 8){
                        try {
                            celda.setCellValue(Double.parseDouble(arrClientesProveedores[i][j]));
                        }
                        catch (Exception e){
                            celda.setCellValue(arrClientesProveedores[i][j]);
                        }
                        switch (j) {
                            case 3: celda.setCellStyle(negritasPorcentajeClientes); break;
                            case 8: celda.setCellStyle(negritasPorcentajeProveedores); break;
                        }
                    }
                }
                // Variaciónes
                else if (j == 3 || j == 8){
                    try {
                        celda.setCellValue(Double.parseDouble(arrClientesProveedores[i][j]));
                    }
                    catch (Exception e){
                        celda.setCellValue(arrClientesProveedores[i][j]);
                    }
                    switch (j) {
                        case 3: celda.setCellStyle(porcentajeClientes); break;
                        case 8: celda.setCellStyle(porcentajeProveedores); break;
                    }
                }
                else {
                    // Si se puede convertir a double, se le asigna formato moneda, de lo contrario sólo se agrega tal cual
                    try {
                        celda.setCellValue(Double.parseDouble(arrClientesProveedores[i][j]));
                        if (j >= 0 && j <= 3) {
                            celda.setCellStyle(monedaClientes); 
                        }
                        else if (j >= 5 && j <= 8) {
                            celda.setCellStyle(monedaProveedores);
                        }
                    }
                    catch (Exception e) {
                        celda.setCellValue(arrClientesProveedores[i][j]);
                        if (j >= 0 && j <= 3) {
                            celda.setCellStyle(monedaClientes);
                        }
                        else if (j >= 5 && j <= 8) {
                            celda.setCellStyle(monedaProveedores);
                        }
                    }
                }
            }
        }
        return numFila;
    }
    
    private int printCapitalInventoryExpensesTables(Sheet pagina, int numFila) throws Exception {
        CellStyle negritasMonedaCapital = getCellStyle(true, msnCashFormat, IndexedColors.GREY_25_PERCENT.getIndex());
        CellStyle monedaCapital = getCellStyle(false, msnCashFormat, IndexedColors.GREY_25_PERCENT.getIndex());
        
        CellStyle negritasInventario = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_YELLOW.getIndex());
        CellStyle monedaInventario = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_YELLOW.getIndex());
        
        CellStyle negritasGastos = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle monedaGastos = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle porcentajeGastos = getCellStyle(false, msnPercentageFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle negritasMonedaGastos = getCellStyle(true, msnCashFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle negritasPorcentajeGastos = getCellStyle(true, msnPercentageFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        
        String[][] arrCapitalInventarioGastos = getCapitalInventoryExpensesArr();
        // Fila:
        for (int i = 0; i < arrCapitalInventarioGastos.length; i++, numFila++) {
            Row fila = pagina.createRow(numFila);
            // Columna:
            for (int j = 0; j < arrCapitalInventarioGastos[i].length; j++) {
                Cell celda = fila.createCell(j);
                if (i == 0) {
                    celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                    switch (j) {
                        case 0: 
                        case 1: celda.setCellStyle(negritasMonedaCapital); break;
                        case 5: 
                        case 6: celda.setCellStyle(negritasInventario); break;
                        default:
                    }
                }
                else if (i != 0 && i < 8) {
                    if (!arrCapitalInventarioGastos[i][j].isEmpty()){
                        if (j == 0 || j == 1){
                            try{
                                celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                                celda.setCellStyle(monedaCapital); 
                            }
                            catch (Exception e){
                                celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                                celda.setCellStyle(monedaCapital); 
                            }
                        }
                        else if (j == 5 || j == 6){
                            try{
                                celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                                celda.setCellStyle(monedaInventario); 
                            }
                            catch (Exception e){
                                celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                                celda.setCellStyle(monedaInventario); 
                            }
                        }
                    }
                }
                else if (i == 8) {
                    if (!arrCapitalInventarioGastos[i][j].isEmpty()){
                        try {
                            celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                            celda.setCellStyle(negritasMonedaCapital);
                        }
                        catch (Exception e) {
                            celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                            celda.setCellStyle(negritasMonedaCapital);
                        }
                    }
                }
                else if (i == 10) {
                    if (!arrCapitalInventarioGastos[i][j].isEmpty()) {
                        celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                        celda.setCellStyle(negritasGastos);
                    }
                }
                else if (i > 10){
                    if (!arrCapitalInventarioGastos[i][j].isEmpty()) {
                        if (i == 23) {
                            try {
                                celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                                celda.setCellStyle(negritasMonedaGastos);
                            }
                            catch (Exception e) {
                                celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                                celda.setCellStyle(negritasMonedaGastos);
                            }
                            if (j == 3) {
                                celda.setCellStyle(negritasPorcentajeGastos);
                            }
                        }
                        else if (j <= 2) {
                            try {
                                celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                                celda.setCellStyle(monedaGastos); 
                            }
                            catch (Exception e) {
                                celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                                celda.setCellStyle(monedaGastos); 
                            }
                        }
                        else if (j == 3){
                            if (!arrCapitalInventarioGastos[i][j].isEmpty()) {
                                try {
                                    celda.setCellValue(Double.parseDouble(arrCapitalInventarioGastos[i][j]));
                                    celda.setCellStyle(porcentajeGastos);
                                }
                                catch (Exception e) {
                                    celda.setCellValue(arrCapitalInventarioGastos[i][j]);
                                    celda.setCellStyle(porcentajeGastos);
                                }
                            }
                        }
                    }
                }
            }
        }
        return numFila;
    }
    
    private int printBanksAndSummaryTables(Sheet pagina, int numFila) throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        
        CellStyle monedaBancos = getCellStyle(false, msnCashFormat, IndexedColors.AQUA.getIndex());
        CellStyle negritasBancos = getCellStyle(true, msnNoneFormat, IndexedColors.AQUA.getIndex());
        CellStyle negritasMonedaBancos = getCellStyle(true, msnCashFormat, IndexedColors.AQUA.getIndex());
        
        CellStyle monedaResumen = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        CellStyle negritasResumen = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
        
        String[][] encabezadoBancosYResumen = {{"BANCOS", ""}, 
            {"BANCO" , "Saldo", "", "", "", "", "Ventas", "Costo de ventas", "Gastos", "Utilidad"}};
        for (int i = 0; i < encabezadoBancosYResumen.length; i++, numFila++) {
            Row fila = pagina.createRow(numFila);
            for (int j = 0; j < encabezadoBancosYResumen[i].length; j++) {
                Cell celda = fila.createCell(j);
                celda.setCellValue(encabezadoBancosYResumen[i][j]); 
                if (j <= 1) {
                    celda.setCellStyle(negritasBancos);
                }
                if (j > 4) {
                    celda.setCellStyle(negritasResumen);
                }
            }
        }
        int numFilaAux = numFila;
        double total = 0;
        String bancosQuery = getBanksBalanceQuery();
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(bancosQuery);
        while (resultSet.next()) {
            Row fila = pagina.createRow(numFila);
            Cell banco = fila.createCell(0);
            Cell monto = fila.createCell(1);
            banco.setCellValue(resultSet.getString("ent"));
            banco.setCellStyle(monedaBancos);
            double mont = resultSet.getDouble("f_sf");
            monto.setCellValue(mont);
            monto.setCellStyle(monedaBancos);
            total += mont;
            numFila++;
        }
        Row fila = pagina.createRow(numFila);
        Cell banco = fila.createCell(0);
        Cell monto = fila.createCell(1);
        banco.setCellValue("Total");
        banco.setCellStyle(negritasBancos);
        monto.setCellValue(total);
        monto.setCellStyle(negritasMonedaBancos);
        
        mdVentasNetasAñoAnterior = getNetSales(lastYear);
        mdVentasNetasAñoActual = getNetSales(year);
        mdCostoVentaAñoAnterior = getSalesCosts(lastYear);
        mdCostoVentaAñoActual = getSalesCosts(year);
        mdGastosAñoAnterior = getExpenses(lastYear);
        mdGastosAñoActual = getExpenses(year);        
                
        double utilidadAñoAnterior = mdVentasNetasAñoAnterior - mdCostoVentaAñoAnterior - mdGastosAñoAnterior;
        double utilidadAñoActual = mdVentasNetasAñoActual - mdCostoVentaAñoActual - mdGastosAñoActual;
        double resumen[][] = getSummaryArr(utilidadAñoAnterior, utilidadAñoActual, lastYear, year);
        for (int i = 0; i < resumen.length; i++, numFilaAux++) {
            fila = pagina.getRow(numFilaAux);
            if (fila != null) {
                for (int j = 0, columna = 5; j < resumen[i].length; j++, columna++) {
                    Cell celda = fila.createCell(columna);
                    celda.setCellValue(resumen[i][j]); 
                    if (j != 0) {
                        celda.setCellStyle(monedaResumen);
                    }
                    else {
                        celda.setCellStyle(negritasResumen);
                    }
                }
            }
        }
        return numFila;
    }
    
    @SuppressWarnings("deprecation")
    private void generalPage() throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        int numFila = 0;
        Sheet pagina = moLibro.createSheet("General");
        pagina.setDisplayGridlines(false);
        
        CellStyle estiloTitulo = getCellStyle(true, msnNoneFormat, IndexedColors.GREY_50_PERCENT.getIndex());
        XSSFFont font = moLibro.createFont();
        font.setBold(true);
        font.setFontHeight(22);
        font.setFontName("Arial");
        font.setColor(new XSSFColor(Color.decode("#FFFFFF")).getIndexed());
        estiloTitulo.setFont(font);
        
        CellStyle negritasFacturacion = getCellStyle(true, msnNoneFormat, IndexedColors.YELLOW.getIndex());
        CellStyle monedaFacturacion = getCellStyle(false, msnCashFormat, IndexedColors.YELLOW.getIndex());
        
        pagina.addMergedRegion(new org.apache.poi.hssf.util.CellRangeAddress(0,0,0,8));
        pagina.autoSizeColumn(0);
        Row filaTitulo = pagina.createRow(numFila);
        filaTitulo.setHeightInPoints((float)28.80);
        Cell titulo = filaTitulo.createCell(0);
        titulo.setCellValue("Situación general - " + miClient.getSessionXXX().getCurrentCompanyName());
        titulo.setCellStyle(estiloTitulo);

        numFila += 2;
        printDates(pagina, numFila);
        
        numFila += 2;
        numFila = printClientsSuppliersTables(pagina, numFila);
        numFila++;
        
        String[][] arrTotalFacturacion = getTotalInvoicedArr();
        // Filas:
        for (int i = 0; i < arrTotalFacturacion.length; i++, numFila++) {
            Row fila = pagina.createRow(numFila);
            // Columnas: 
            for (int j = 0; j < arrTotalFacturacion[i].length; j++) {
                if (!arrTotalFacturacion[i][j].isEmpty()) {
                    Cell celda = fila.createCell(j);
                    try {
                        celda.setCellValue(Double.parseDouble(arrTotalFacturacion[i][j]));
                        celda.setCellStyle(monedaFacturacion); 
                    }
                    catch (Exception e) {
                        celda.setCellValue(arrTotalFacturacion[i][j]);
                        celda.setCellStyle(monedaFacturacion); 
                    }
                    if (i == 6) {
                        celda.setCellStyle(negritasFacturacion);
                        Cell vacio = fila.createCell(j + 1);
                        vacio.setCellStyle(negritasFacturacion);
                    }
                }
            }
        }

        numFila++;
        numFila = printCapitalInventoryExpensesTables(pagina, numFila);
        
        numFila ++;
        printBanksAndSummaryTables(pagina, numFila);
        
        double utilidadAñoAnterior = mdVentasNetasAñoAnterior - mdCostoVentaAñoAnterior - mdGastosAñoAnterior;
        double utilidadAñoActual = mdVentasNetasAñoActual - mdCostoVentaAñoActual - mdGastosAñoActual;
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(mdVentasNetasAñoAnterior, lastYear + "", "Ventas");
        dataset.addValue(mdVentasNetasAñoActual,  year + "", "Ventas");
        dataset.addValue(mdCostoVentaAñoAnterior, lastYear + "", "Costo de venta");
        dataset.addValue(mdCostoVentaAñoActual, year + "", "Costo de venta");
        dataset.addValue(mdGastosAñoAnterior,  lastYear + "", "Gastos");
        dataset.addValue(mdGastosAñoActual, year + "", "Gastos");
        dataset.addValue(utilidadAñoAnterior,  lastYear + "", "Utilidad");
        dataset.addValue(utilidadAñoActual, year + "", "Utilidad");
        JFreeChart chart = ChartFactory.createBarChart("", null, 
            null, dataset, PlotOrientation.VERTICAL, true, true, false);

        BufferedImage image = chart.createBufferedImage(480, 295);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(image,"png",baos);

        int pictureIdx = moLibro.addPicture(baos.toByteArray(), Workbook.PICTURE_TYPE_PNG);

        XSSFDrawing drawing = (XSSFDrawing) pagina.createDrawingPatriarch();
        XSSFCreationHelper helper = moLibro.getCreationHelper();
        XSSFClientAnchor anchor = helper.createClientAnchor();
        anchor.setCol1(5);
        anchor.setRow1(38);

        Picture picture = drawing.createPicture(anchor, pictureIdx);
        for (int c = 0; c < mnSheetMaxColumns + 1; c++){
            pagina.setColumnWidth(c, 4000);
            switch (c) {
                case 0:
                case 5: pagina.setColumnWidth(c, 8200); break;
                default:
            }
        }
        picture.resize();
    }
    
    private void salPurPages(int dpsCategory) throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        int numFila = 0;
        
        String titulo = "";
        
        CellStyle negritas = moLibro.createCellStyle();
        CellStyle moneda = moLibro.createCellStyle();
        CellStyle porcentaje = moLibro.createCellStyle();         
        CellStyle negritasMoneda = moLibro.createCellStyle();
        CellStyle negritasPorcentaje = moLibro.createCellStyle();         
        
        switch (dpsCategory) {
            case SDataConstantsSys.TRNS_CT_DPS_SAL:
                titulo = "Clientes";
                negritas = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_GREEN.getIndex());
                moneda = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
                porcentaje = getCellStyle(false, msnPercentageFormat, IndexedColors.LIGHT_GREEN.getIndex());
                negritasMoneda = getCellStyle(true, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
                negritasPorcentaje = getCellStyle(true, msnPercentageFormat, IndexedColors.LIGHT_GREEN.getIndex());
                break;
            case SDataConstantsSys.TRNS_CT_DPS_PUR:
                titulo = "Proveedores";
                negritas = getCellStyle(true, msnNoneFormat, IndexedColors.ROSE.getIndex());
                moneda = getCellStyle(false, msnCashFormat, IndexedColors.ROSE.getIndex());
                porcentaje = getCellStyle(false, msnPercentageFormat, IndexedColors.ROSE.getIndex());
                negritasMoneda = getCellStyle(true, msnCashFormat, IndexedColors.ROSE.getIndex());
                negritasPorcentaje = getCellStyle(true, msnPercentageFormat, IndexedColors.ROSE.getIndex());
                break;
            default:
        }
        
        Sheet pagina = moLibro.createSheet(titulo);
        
        pagina.setColumnWidth(0, 10000);
        for (int c = 1; c < mnSheetMaxColumns ; c++){
            pagina.setColumnWidth(c, 4000);
        }
        
        String encabezado[][] = {{titulo.toUpperCase(), "","",""},{"FACTURACIÓN MENSUAL", lastYear + "", year + "", "Variación"}};
        for (int i = 0; i < encabezado.length; i++, numFila++) {
            Row fila = pagina.createRow(numFila);
            for (int j = 0; j < encabezado[i].length; j++) {
                Cell celda = fila.createCell(j);
                celda.setCellValue(encabezado[i][j]); 
                celda.setCellStyle(negritas);
            }
        }
        
        numFila--;
        int numFilaInicio = numFila + 1;
        String sql = getSalPurQuery(dpsCategory, lastYear);
        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
        while (resultSet.next()) {
            numFila++;
            Row fila = pagina.createRow(numFila);
            Cell asociado = fila.createCell(0);
            Cell montoAñoAnterior = fila.createCell(1);
            Cell montoAñoActual = fila.createCell(2);
            asociado.setCellValue(resultSet.getString("bp"));
            montoAñoAnterior.setCellValue(resultSet.getDouble("f_stot_net"));
            montoAñoActual.setCellValue(0);
            asociado.setCellStyle(moneda);
            montoAñoAnterior.setCellStyle(moneda);
            montoAñoActual.setCellStyle(moneda);
        } 
        sql = getSalPurQuery(dpsCategory, year);
        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        while (resultSet.next()) {
            boolean isRegistered = false;
            for (int i = numFilaInicio; i <= numFila; i++) {
                Row fila = pagina.getRow(i);
                Cell asociado = fila.getCell(0);
                if (asociado.getStringCellValue().equals(resultSet.getString("bp"))){
                    Cell montoAñoActual = fila.getCell(2);
                    montoAñoActual.setCellValue(resultSet.getDouble("f_stot_net"));
                    isRegistered = true;
                    break;
                }
            }
            if (!isRegistered) {
                numFila++;
                Row fila = pagina.createRow(numFila);
                Cell asociado = fila.createCell(0);
                Cell montoAñoAnterior = fila.createCell(1);
                Cell montoAñoActual = fila.createCell(2);
                asociado.setCellValue(resultSet.getString("bp"));
                montoAñoAnterior.setCellValue(0);
                montoAñoActual.setCellValue(resultSet.getDouble("f_stot_net"));
                asociado.setCellStyle(moneda);
                montoAñoAnterior.setCellStyle(moneda);
                montoAñoActual.setCellStyle(moneda);
            }
        }
        resultSet.close();
        double totalMontoAñoAnterior = 0;
        double totalMontoAñoActual = 0;
        for (int i = numFilaInicio; i <= numFila; i++) {
            Row fila = pagina.getRow(i);
            Cell montoAñoAnterior = fila.getCell(1);
            Cell montoAñoActual = fila.getCell(2);
            Cell variacion = fila.createCell(3);
            double añoAnterior = montoAñoAnterior.getNumericCellValue();
            totalMontoAñoAnterior += añoAnterior;
            double añoActual = montoAñoActual.getNumericCellValue();
            totalMontoAñoActual += añoActual;
            if (añoAnterior == 0) {
                variacion.setCellValue("-");
                variacion.setCellStyle(porcentaje);
            }
            else {
                variacion.setCellValue((añoActual-añoAnterior)/añoAnterior);
                variacion.setCellStyle(porcentaje);
            }
        }
        numFila++;
        Row filaTotal = pagina.createRow(numFila);
        Cell total = filaTotal.createCell(0);
        Cell totalAñoAnterior = filaTotal.createCell(1);
        Cell totalAñoActual = filaTotal.createCell(2);
        Cell totalVariacion = filaTotal.createCell(3);
        total.setCellValue("Total");
        totalAñoAnterior.setCellValue(totalMontoAñoAnterior);
        totalAñoActual.setCellValue(totalMontoAñoActual); 
        total.setCellStyle(negritasMoneda);
        totalAñoAnterior.setCellStyle(negritasMoneda);
        totalAñoActual.setCellStyle(negritasMoneda);
        if (totalMontoAñoAnterior == 0) {
            totalVariacion.setCellValue("-");
            totalVariacion.setCellStyle(negritasPorcentaje);
        }
        else {
            totalVariacion.setCellValue((totalMontoAñoActual-totalMontoAñoAnterior)/totalMontoAñoAnterior);
            totalVariacion.setCellStyle(negritasPorcentaje);
        }
    }
    
    private void monthlySalPurPages(int dpsCategory) throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        String titulo = "";
        
        CellStyle negritas = moLibro.createCellStyle();
        CellStyle moneda = moLibro.createCellStyle();
        CellStyle negritasMoneda = moLibro.createCellStyle();
        
        switch (dpsCategory) {
            case SDataConstantsSys.TRNS_CT_DPS_SAL:
                titulo = "Facturación mensual";
                negritas = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_GREEN.getIndex());
                moneda = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
                negritasMoneda = getCellStyle(true, msnCashFormat, IndexedColors.LIGHT_GREEN.getIndex());
                break;
            case SDataConstantsSys.TRNS_CT_DPS_PUR:
                titulo = "Compras a proveedor";
                negritas = getCellStyle(true, msnNoneFormat, IndexedColors.ROSE.getIndex());
                moneda = getCellStyle(false, msnCashFormat, IndexedColors.ROSE.getIndex());
                negritasMoneda = getCellStyle(true, msnCashFormat, IndexedColors.ROSE.getIndex());
                break;
            default:
        }
        
        Sheet pagina = moLibro.createSheet(titulo);
        Row filaMeses = pagina.createRow(23);
        Row filaAñoAnterior = pagina.createRow(24);
        Row filaAñoActual = pagina.createRow(25);
        Cell m = filaMeses.createCell(0);
        Cell ant = filaAñoAnterior.createCell(0);
        Cell act = filaAñoActual.createCell(0);
        ant.setCellValue(lastYear);
        act.setCellValue(year);
        m.setCellStyle(negritas);
        ant.setCellStyle(negritas);
        act.setCellStyle(negritas); 
        
        String sql = getClientsSuppliersQuery(dpsCategory, lastYear, year);
        DefaultCategoryDataset dataset;
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            dataset = new DefaultCategoryDataset();
            if (resultSet.next()) {
                double totalSaldoAñoAnterior = 0;
                double totalSaldoAñoActual = 0;
                for (int i = 0; i < mnCantMeses ; i++) {
                    int mes = i + 1;
                    double saldoAñoAnterior = resultSet.getDouble(mes + "_ant");
                    double saldoAñoActual = resultSet.getDouble(mes + "_act");
                    totalSaldoAñoAnterior += saldoAñoAnterior;
                    totalSaldoAñoActual += saldoAñoActual;
                    dataset.addValue(saldoAñoAnterior, lastYear + "", getMonthName(mes));
                    dataset.addValue(saldoAñoActual,  year + "", getMonthName(mes));
                    Cell celdaMes = filaMeses.createCell(mes);
                    Cell celdaAñoAnterior = filaAñoAnterior.createCell(mes);
                    Cell celdaAñoActual = filaAñoActual.createCell(mes);
                    celdaMes.setCellValue(getMonthName(mes));
                    celdaAñoAnterior.setCellValue(saldoAñoAnterior);
                    celdaAñoActual.setCellValue(saldoAñoActual);
                    celdaMes.setCellStyle(negritas);
                    celdaAñoAnterior.setCellStyle(moneda);
                    celdaAñoActual.setCellStyle(moneda);
                }
                Cell celdaTotal = filaMeses.createCell(13);
                Cell celdaTotalAñoAnterior = filaAñoAnterior.createCell(13);
                Cell celdaTotalAñoActual = filaAñoActual.createCell(13);
                celdaTotal.setCellValue("Total");
                celdaTotalAñoAnterior.setCellValue(totalSaldoAñoAnterior);
                celdaTotalAñoActual.setCellValue(totalSaldoAñoActual);
                celdaTotal.setCellStyle(negritas);
                celdaTotalAñoAnterior.setCellStyle(negritasMoneda);
                celdaTotalAñoActual.setCellStyle(negritasMoneda);
            }
        }
        JFreeChart chart = ChartFactory.createBarChart("", null, 
            null, dataset, PlotOrientation.VERTICAL, true, true, false);

        BufferedImage image = chart.createBufferedImage(945, 450);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(image,"png",baos);

        int pictureIdx = moLibro.addPicture(baos.toByteArray(), Workbook.PICTURE_TYPE_PNG);

        XSSFDrawing drawing = (XSSFDrawing) pagina.createDrawingPatriarch();
        XSSFCreationHelper helper = moLibro.getCreationHelper();
        XSSFClientAnchor anchor = helper.createClientAnchor();
        anchor.setCol1(0);
        anchor.setRow1(0);

        Picture picture = drawing.createPicture(anchor, pictureIdx);
        for (int c=0; c<20; c++) pagina.setColumnWidth(c, 4000);
        picture.resize();
    }
    
    private void expensesPage() throws Exception {
        int year = SLibTimeUtilities.digestYear(moFieldDateCutoff.getDate())[0];
        int lastYear = year - 1;
        Sheet pagina = moLibro.createSheet("Gastos");
        
        CellStyle negritas = getCellStyle(true, msnNoneFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle moneda = getCellStyle(false, msnCashFormat, IndexedColors.LIGHT_ORANGE.getIndex());
        CellStyle negritasMoneda = getCellStyle(true, msnCashFormat, IndexedColors.LIGHT_ORANGE.getIndex());
                
        Row filaMeses = pagina.createRow(23);
        Row filaAñoAnterior = pagina.createRow(24);
        Row filaAñoActual = pagina.createRow(25);
        Cell m = filaMeses.createCell(0);
        Cell ant = filaAñoAnterior.createCell(0);
        Cell act = filaAñoActual.createCell(0);
        ant.setCellValue(lastYear);
        act.setCellValue(year);
        m.setCellStyle(negritas);
        ant.setCellStyle(negritas);
        act.setCellStyle(negritas);
        
        double totalSaldoAñoAnterior = 0;
        double totalSaldoAñoActual = 0;
        String sql = getExpensesByMonthQuery(lastYear, year);
        DefaultCategoryDataset dataset;
        try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
            dataset = new DefaultCategoryDataset();
            while (resultSet.next()) {
                int año = resultSet.getInt("id_year");
                int mes = resultSet.getInt("id_per");
                double monto = resultSet.getDouble("f_bal") * -1;
                dataset.addValue(monto, año + "", getMonthName(mes));
                if (año == lastYear) {
                    totalSaldoAñoAnterior += monto; 
                    Cell celdaMes = filaMeses.createCell(mes);
                    Cell celdaAñoAnterior = filaAñoAnterior.createCell(mes);
                    celdaMes.setCellValue(getMonthName(mes));
                    celdaAñoAnterior.setCellValue(monto);
                    celdaMes.setCellStyle(negritas);
                    celdaAñoAnterior.setCellStyle(moneda); 
                }
                else if (año == year) {
                    totalSaldoAñoActual += monto;
                    Cell celdaAñoActual = filaAñoActual.createCell(mes);
                    celdaAñoActual.setCellValue(monto);
                    celdaAñoActual.setCellStyle(moneda);
                }
            }
        }
        Cell celdaTotal = filaMeses.createCell(13);
        Cell celdaTotalAñoAnterior = filaAñoAnterior.createCell(13);
        Cell celdaTotalAñoActual = filaAñoActual.createCell(13);
        celdaTotal.setCellValue("Total");
        celdaTotalAñoAnterior.setCellValue(totalSaldoAñoAnterior);
        celdaTotalAñoActual.setCellValue(totalSaldoAñoActual);
        celdaTotal.setCellStyle(negritas);
        celdaTotalAñoAnterior.setCellStyle(negritasMoneda);
        celdaTotalAñoActual.setCellStyle(negritasMoneda);
        JFreeChart chart = ChartFactory.createBarChart("", null, 
            null, dataset, PlotOrientation.VERTICAL, true, true, false);

        BufferedImage image = chart.createBufferedImage(945, 450);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(image,"png",baos);

        int pictureIdx = moLibro.addPicture(baos.toByteArray(), Workbook.PICTURE_TYPE_PNG);

        XSSFDrawing drawing = (XSSFDrawing) pagina.createDrawingPatriarch();
        XSSFCreationHelper helper = moLibro.getCreationHelper();
        XSSFClientAnchor anchor = helper.createClientAnchor();
        anchor.setCol1(0);
        anchor.setRow1(0);

        Picture picture = drawing.createPicture(anchor, pictureIdx);
        for (int c=0; c<20; c++) pagina.setColumnWidth(c, 4000);
        picture.resize();
    }
    
    private void print() {
        try {
            moLibro = new XSSFWorkbook();
            generalPage();
            for (int dpsCategory : maDpsCategories){
                salPurPages(dpsCategory);
            }
            for (int dpsCategory : maDpsCategories){
                monthlySalPurPages(dpsCategory);
            }
            expensesPage();
            JFileChooser chooser = miClient.getFileChooser();
            chooser.setSelectedFile(new File("Informe situación general " + SLibUtils.DbmsDateFormatDate.format(moFieldDateCutoff.getDate()) + ".xlsx"));
            chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            
            if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
           
                String[] split = (chooser.getSelectedFile() + "").split("\\."); 
                File archivo;

                if (split[split.length-1].equals("xlsx")) {
                    archivo = new File(chooser.getSelectedFile() + "");
                }
                else {
                    archivo = new File(chooser.getSelectedFile() + ".xlsx");
                }
                FileOutputStream salida = new FileOutputStream(archivo);

                moLibro.write(salida);

                if (archivo.exists()) {
                    if (miClient.showMsgBoxConfirm("El informe se ha guardado con exito.\n¿Desea abrirlo?") == JOptionPane.OK_OPTION) {
                        Desktop.getDesktop().open(archivo);
                    }
                }
            }

        }
        catch (Exception e){
            miClient.showMsgBoxWarning(e.getMessage());
        }
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateCutoff.getDate(), moFieldDateCutoff);
    }

    public void actionPrint() {
        boolean error = false;
        JComponent component = null;

        for (SFormField field : mvFields) {
            if (!field.validateField()) {
                error = true;
                component = field.getComponent();
            }
        }

        if (error) {
            if (component != null) {
                component.requestFocus();
            }
        }
        else {
            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
            print();
            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }

    public void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPickDateCutoff;
    private javax.swing.JFormattedTextField jftDateCutoff;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JButton jpClose;
    private javax.swing.JButton jpPrint;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickDateCutoff) {
                actionDate();
            }
        }
    }
}
