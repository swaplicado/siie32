/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.form;

import cfd.DCfdConsts;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.account.SAccountConsts;
import erp.gui.account.SBeanPanelAccountOwner;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormInterface;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDialogRecordApportionmentRow;
import erp.mfin.data.SValidationUtils;
import erp.mfin.data.diot.SDiotUtils;
import erp.mitm.data.SDataItem;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JTextField;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Isabel Servín 
 */
public class SDialogRecordApportionment extends javax.swing.JDialog implements SFormInterface, ActionListener, FocusListener, ItemListener, SBeanPanelAccountOwner {

    private static final String LABEL_BIZ_PARTNER = "Asociado negocios";
    
    private final SClientInterface miClient;
    
    private int mnFormResult;
    private int mnFormStatus;
    private int mnAccountSystemTypeId;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private boolean mbIsTaxCfg;
    private boolean mbIsCurrentAccountDiogAccount;
    private java.util.Vector<SFormField> mvFields;
    
    private SDataRecordEntry moRecordEntry;
    private SDataRecord moRecord;
    private SDataItem moItem;
    private SDataItem moItemAux;
    private SFormField moFieldConcept;
    private SFormField moFieldFkBizPartnerId_nr;
    private SFormField moFieldOccasionalFiscalId;
    private SFormField moFieldFkTaxId_n;
    private SFormField moFieldFkItemId_n;
    private SFormField moFieldUnits;
    private SFormField moFieldFkItemAuxId_n;
    private SFormField moFieldFkCurrencyId;
    private SFormField moFieldDebitCy;
    private SFormField moFieldCreditCy;
    private SFormField moFieldExchangeRate;
    private SFormField moFieldDebit;
    private SFormField moFieldCredit;
    private SFormField moFieldApportionment;
    private SFormField moFieldTotalApportionment;
    private SFormField moFieldTotalDebit;
    private SFormField moFieldTotalCredit;
    private SFormField moFieldTotalDebitCy;
    private SFormField moFieldTotalCreditCy;
    
    private int mnOptionsBizPartnerType;
    private int mnOptionsItemType;
    private boolean mbIsBizPartnerRequired;
    private boolean mbIsItemRequired;
    private boolean mbIsTaxRequired;
    private int[] manLastCurrencyKey;
    
    private SDataAccountCash moEntryAccountCash;
    
    private String msCurrentAccountId;
    
    /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
    private erp.mfin.form.SPanelAccount moPanelFkAccountId;
    private erp.mfin.form.SPanelAccount moPanelFkCostCenterId_n;
    */
    
    private HashMap<Integer, String> maFormNames;
    private HashMap<Integer, JComponent> maFormComponents;
    
    private STablePaneGrid moPaneGridEntries;
    private ArrayList<SDialogRecordApportionmentRow> maEntryRows;
    
    private ArrayList<SFinRecordEntry> maFinRecordEntries;
    
    /**
     * Creates new form SDialogRecordApportionment
     * @param client
     */
    public SDialogRecordApportionment(SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgTax = new javax.swing.ButtonGroup();
        jpRegistry = new javax.swing.JPanel();
        moAccountPanel = new erp.gui.account.SBeanPanelAccount();
        jpRegistryCenter = new javax.swing.JPanel();
        jpRegistryCenterNorth = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlConcept = new javax.swing.JLabel();
        jtfConcept = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlFkBizPartnerId_nr = new javax.swing.JLabel();
        jcbFkBizPartnerId_nr = new javax.swing.JComboBox<>();
        jbFkBizPartnerId_nr = new javax.swing.JButton();
        jlOccasionalFiscalId = new javax.swing.JLabel();
        jcbOccasionalFiscalId = new javax.swing.JComboBox();
        jlOccasionalFiscalIdDiotHint = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jlFkTaxId_n = new javax.swing.JLabel();
        jcbFkTaxId_n = new javax.swing.JComboBox<>();
        jbFkTaxId_n = new javax.swing.JButton();
        jrbTaxCash = new javax.swing.JRadioButton();
        jrbTaxPend = new javax.swing.JRadioButton();
        jlFkTaxId_nDiotHint = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlFkItemId_n = new javax.swing.JLabel();
        jcbFkItemId_n = new javax.swing.JComboBox<>();
        jbFkItemId_n = new javax.swing.JButton();
        jtfUnits = new javax.swing.JTextField();
        jtfUnitsSymbol = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlFkItemAuxId_n = new javax.swing.JLabel();
        jcbFkItemAuxId_n = new javax.swing.JComboBox<>();
        jbFkItemAuxId_n = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jpValue1 = new javax.swing.JPanel();
        jlFkCurrencyId = new javax.swing.JLabel();
        jcbFkCurrencyId = new javax.swing.JComboBox<>();
        jbFkCurrencyId = new javax.swing.JButton();
        jlFkCurrencyIdHint = new javax.swing.JLabel();
        jlExchangeRate = new javax.swing.JLabel();
        jtfExchangeRate = new javax.swing.JTextField();
        jbExchangeRate = new javax.swing.JButton();
        jbExchangeRateAccountCashSet = new javax.swing.JButton();
        jpValue2 = new javax.swing.JPanel();
        jlDebitCy = new javax.swing.JLabel();
        jtfDebitCy = new javax.swing.JTextField();
        jtfDebitCyCur = new javax.swing.JTextField();
        jbDebitCy = new javax.swing.JButton();
        jlDebitCyHint = new javax.swing.JLabel();
        jlDebit = new javax.swing.JLabel();
        jtfDebit = new javax.swing.JTextField();
        jtfDebitCur = new javax.swing.JTextField();
        jbDebit = new javax.swing.JButton();
        jlDebitHint1 = new javax.swing.JLabel();
        jpValue3 = new javax.swing.JPanel();
        jlCreditCy = new javax.swing.JLabel();
        jtfCreditCy = new javax.swing.JTextField();
        jtfCreditCyCur = new javax.swing.JTextField();
        jbCreditCy = new javax.swing.JButton();
        jlCreditCyHInt = new javax.swing.JLabel();
        jlCredit = new javax.swing.JLabel();
        jtfCredit = new javax.swing.JTextField();
        jtfCreditCur = new javax.swing.JTextField();
        jbCredit = new javax.swing.JButton();
        jlCreditHint = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        moCostCenterPanel = new erp.gui.account.SBeanPanelAccount();
        jpGrid = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlApportionment = new javax.swing.JLabel();
        jtfApportionment = new javax.swing.JTextField();
        jlPercentaje = new javax.swing.JLabel();
        jbAddRow = new javax.swing.JButton();
        jsEntry2 = new javax.swing.JSeparator();
        jbDeleteRow = new javax.swing.JButton();
        jsEntry3 = new javax.swing.JSeparator();
        jbMoveDownRow = new javax.swing.JButton();
        jbMoveUpRow = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlTotals = new javax.swing.JLabel();
        jtfTotalApportionment = new javax.swing.JTextField();
        jtfTotalDebit = new javax.swing.JTextField();
        jtfTotalCredit = new javax.swing.JTextField();
        jtfTotalDebitCy = new javax.swing.JTextField();
        jtfTotalCreditCy = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prorrateo de partidas de la póliza contable");
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());
        jpRegistry.add(moAccountPanel, java.awt.BorderLayout.NORTH);

        jpRegistryCenter.setLayout(new java.awt.BorderLayout());

        jpRegistryCenterNorth.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la partida:"));
        jPanel1.setLayout(new java.awt.GridLayout(5, 1, 0, 1));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlConcept.setText("Concepto partida: *");
        jlConcept.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(jlConcept);

        jtfConcept.setText("TEXT");
        jtfConcept.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel2.add(jtfConcept);

        jPanel1.add(jPanel2);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkBizPartnerId_nr.setText("Asociado negocios: *");
        jlFkBizPartnerId_nr.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlFkBizPartnerId_nr);

        jcbFkBizPartnerId_nr.setMaximumRowCount(16);
        jcbFkBizPartnerId_nr.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(jcbFkBizPartnerId_nr);

        jbFkBizPartnerId_nr.setText("...");
        jbFkBizPartnerId_nr.setToolTipText("Seleccionar asociado de negocios");
        jbFkBizPartnerId_nr.setFocusable(false);
        jbFkBizPartnerId_nr.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbFkBizPartnerId_nr);

        jlOccasionalFiscalId.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlOccasionalFiscalId.setText("RFC ocasional:");
        jlOccasionalFiscalId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlOccasionalFiscalId);

        jcbOccasionalFiscalId.setEditable(true);
        jcbOccasionalFiscalId.setPreferredSize(new java.awt.Dimension(121, 23));
        jPanel4.add(jcbOccasionalFiscalId);

        jlOccasionalFiscalIdDiotHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlOccasionalFiscalIdDiotHint.setText("(para DIOT)");
        jlOccasionalFiscalIdDiotHint.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel4.add(jlOccasionalFiscalIdDiotHint);

        jPanel1.add(jPanel4);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkTaxId_n.setText("Impuesto: *");
        jlFkTaxId_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlFkTaxId_n);

        jcbFkTaxId_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jcbFkTaxId_n);

        jbFkTaxId_n.setText("...");
        jbFkTaxId_n.setToolTipText("Seleccionar impuesto");
        jbFkTaxId_n.setFocusable(false);
        jbFkTaxId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkTaxId_n);

        bgTax.add(jrbTaxCash);
        jrbTaxCash.setSelected(true);
        jrbTaxCash.setText("Efectivamente pagado");
        jrbTaxCash.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel6.add(jrbTaxCash);

        bgTax.add(jrbTaxPend);
        jrbTaxPend.setText("Pendiente de pago");
        jrbTaxPend.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jrbTaxPend);

        jlFkTaxId_nDiotHint.setForeground(java.awt.Color.blue);
        jlFkTaxId_nDiotHint.setText("(HINT TEXT)");
        jlFkTaxId_nDiotHint.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlFkTaxId_nDiotHint);

        jPanel1.add(jPanel6);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkItemId_n.setText("Ítem: *");
        jlFkItemId_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlFkItemId_n);

        jcbFkItemId_n.setMaximumRowCount(16);
        jcbFkItemId_n.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(jcbFkItemId_n);

        jbFkItemId_n.setText("...");
        jbFkItemId_n.setToolTipText("Seleccionar ítem");
        jbFkItemId_n.setFocusable(false);
        jbFkItemId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbFkItemId_n);

        jtfUnits.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfUnits.setText("0.0000");
        jtfUnits.setToolTipText("Unidades");
        jtfUnits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfUnits);

        jtfUnitsSymbol.setEditable(false);
        jtfUnitsSymbol.setText("UN");
        jtfUnitsSymbol.setToolTipText("Unidades");
        jtfUnitsSymbol.setFocusable(false);
        jtfUnitsSymbol.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jtfUnitsSymbol);

        jPanel1.add(jPanel8);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkItemAuxId_n.setText("Ítem auxiliar:");
        jlFkItemAuxId_n.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlFkItemAuxId_n);

        jcbFkItemAuxId_n.setMaximumRowCount(16);
        jcbFkItemAuxId_n.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(jcbFkItemAuxId_n);

        jbFkItemAuxId_n.setText("...");
        jbFkItemAuxId_n.setToolTipText("Seleccionar ítem auxiliar");
        jbFkItemAuxId_n.setFocusable(false);
        jbFkItemAuxId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbFkItemAuxId_n);

        jPanel1.add(jPanel14);

        jpRegistryCenterNorth.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Valor total de las partidas:"));
        jPanel3.setLayout(new java.awt.GridLayout(3, 1, 0, 1));

        jpValue1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlFkCurrencyId.setText("Moneda: *");
        jlFkCurrencyId.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue1.add(jlFkCurrencyId);

        jcbFkCurrencyId.setPreferredSize(new java.awt.Dimension(150, 23));
        jpValue1.add(jcbFkCurrencyId);

        jbFkCurrencyId.setText("...");
        jbFkCurrencyId.setToolTipText("Seleccionar moneda");
        jbFkCurrencyId.setFocusable(false);
        jbFkCurrencyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue1.add(jbFkCurrencyId);

        jlFkCurrencyIdHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlFkCurrencyIdHint.setText("(moneda de la partida)");
        jlFkCurrencyIdHint.setPreferredSize(new java.awt.Dimension(130, 23));
        jpValue1.add(jlFkCurrencyIdHint);

        jlExchangeRate.setText("Tipo de cambio (TC): *");
        jlExchangeRate.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue1.add(jlExchangeRate);

        jtfExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeRate.setText("0.0000");
        jtfExchangeRate.setPreferredSize(new java.awt.Dimension(115, 23));
        jpValue1.add(jtfExchangeRate);

        jbExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbExchangeRate.setToolTipText("Calcular tipo de cambio");
        jbExchangeRate.setFocusable(false);
        jbExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue1.add(jbExchangeRate);

        jbExchangeRateAccountCashSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbExchangeRateAccountCashSet.setToolTipText("Asignar tipo de cambio acumulado");
        jbExchangeRateAccountCashSet.setFocusable(false);
        jbExchangeRateAccountCashSet.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue1.add(jbExchangeRateAccountCashSet);

        jPanel3.add(jpValue1);

        jpValue2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDebitCy.setText("Cargo moneda: *");
        jlDebitCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue2.add(jlDebitCy);

        jtfDebitCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDebitCy.setText("0.00");
        jtfDebitCy.setPreferredSize(new java.awt.Dimension(115, 23));
        jpValue2.add(jtfDebitCy);

        jtfDebitCyCur.setEditable(false);
        jtfDebitCyCur.setText("CUR");
        jtfDebitCyCur.setFocusable(false);
        jtfDebitCyCur.setPreferredSize(new java.awt.Dimension(33, 23));
        jpValue2.add(jtfDebitCyCur);

        jbDebitCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDebitCy.setToolTipText("Calcular");
        jbDebitCy.setFocusable(false);
        jbDebitCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue2.add(jbDebitCy);

        jlDebitCyHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlDebitCyHint.setPreferredSize(new java.awt.Dimension(130, 23));
        jpValue2.add(jlDebitCyHint);

        jlDebit.setText("Cargo: *");
        jlDebit.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue2.add(jlDebit);

        jtfDebit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDebit.setText("0.00");
        jtfDebit.setPreferredSize(new java.awt.Dimension(115, 23));
        jpValue2.add(jtfDebit);

        jtfDebitCur.setEditable(false);
        jtfDebitCur.setText("CUR");
        jtfDebitCur.setFocusable(false);
        jtfDebitCur.setPreferredSize(new java.awt.Dimension(33, 23));
        jpValue2.add(jtfDebitCur);

        jbDebit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDebit.setToolTipText("Calcular");
        jbDebit.setFocusable(false);
        jbDebit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue2.add(jbDebit);

        jlDebitHint1.setForeground(java.awt.SystemColor.textInactiveText);
        jlDebitHint1.setText("(en moneda local)");
        jlDebitHint1.setPreferredSize(new java.awt.Dimension(110, 23));
        jpValue2.add(jlDebitHint1);

        jPanel3.add(jpValue2);

        jpValue3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCreditCy.setText("Abono moneda: *");
        jlCreditCy.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue3.add(jlCreditCy);

        jtfCreditCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCreditCy.setText("0.00");
        jtfCreditCy.setPreferredSize(new java.awt.Dimension(115, 23));
        jpValue3.add(jtfCreditCy);

        jtfCreditCyCur.setEditable(false);
        jtfCreditCyCur.setText("CUR");
        jtfCreditCyCur.setFocusable(false);
        jtfCreditCyCur.setPreferredSize(new java.awt.Dimension(33, 23));
        jpValue3.add(jtfCreditCyCur);

        jbCreditCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbCreditCy.setToolTipText("Calcular");
        jbCreditCy.setFocusable(false);
        jbCreditCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue3.add(jbCreditCy);

        jlCreditCyHInt.setForeground(java.awt.SystemColor.textInactiveText);
        jlCreditCyHInt.setPreferredSize(new java.awt.Dimension(130, 23));
        jpValue3.add(jlCreditCyHInt);

        jlCredit.setText("Abono: *");
        jlCredit.setPreferredSize(new java.awt.Dimension(125, 23));
        jpValue3.add(jlCredit);

        jtfCredit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCredit.setText("0.00");
        jtfCredit.setPreferredSize(new java.awt.Dimension(115, 23));
        jpValue3.add(jtfCredit);

        jtfCreditCur.setEditable(false);
        jtfCreditCur.setText("CUR");
        jtfCreditCur.setFocusable(false);
        jtfCreditCur.setPreferredSize(new java.awt.Dimension(33, 23));
        jpValue3.add(jtfCreditCur);

        jbCredit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbCredit.setToolTipText("Calcular");
        jbCredit.setFocusable(false);
        jbCredit.setPreferredSize(new java.awt.Dimension(23, 23));
        jpValue3.add(jbCredit);

        jlCreditHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlCreditHint.setText("(en moneda local)");
        jlCreditHint.setPreferredSize(new java.awt.Dimension(110, 23));
        jpValue3.add(jlCreditHint);

        jPanel3.add(jpValue3);

        jpRegistryCenterNorth.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(moCostCenterPanel, java.awt.BorderLayout.NORTH);

        jpRegistryCenterNorth.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jpRegistryCenter.add(jpRegistryCenterNorth, java.awt.BorderLayout.NORTH);

        jpGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas:"));
        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlApportionment.setText("Prorrateo:*");
        jlApportionment.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlApportionment);

        jtfApportionment.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfApportionment.setText("0.0000");
        jtfApportionment.setToolTipText("Unidades");
        jtfApportionment.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jtfApportionment);

        jlPercentaje.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jlPercentaje);

        jbAddRow.setText("Agregar");
        jbAddRow.setPreferredSize(new java.awt.Dimension(81, 23));
        jPanel7.add(jbAddRow);

        jsEntry2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry2.setPreferredSize(new java.awt.Dimension(3, 23));
        jPanel7.add(jsEntry2);

        jbDeleteRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteRow.setToolTipText("Eliminar partida");
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDeleteRow);

        jsEntry3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jsEntry3.setPreferredSize(new java.awt.Dimension(3, 23));
        jPanel7.add(jsEntry3);

        jbMoveDownRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_down.gif"))); // NOI18N
        jbMoveDownRow.setToolTipText("Mover partida abajo [Ctrl + Mayúsc + D]");
        jbMoveDownRow.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbMoveDownRow);

        jbMoveUpRow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_move_up.gif"))); // NOI18N
        jbMoveUpRow.setToolTipText("Mover partida arriba [Ctrl + Mayúsc + U]");
        jbMoveUpRow.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbMoveUpRow);

        jpGrid.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlTotals.setText("Totales:");
        jlTotals.setPreferredSize(new java.awt.Dimension(320, 23));
        jPanel9.add(jlTotals);

        jtfTotalApportionment.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalApportionment.setText("0.0000");
        jtfTotalApportionment.setToolTipText("Unidades");
        jtfTotalApportionment.setEnabled(false);
        jtfTotalApportionment.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jtfTotalApportionment);

        jtfTotalDebit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalDebit.setText("0.00");
        jtfTotalDebit.setEnabled(false);
        jtfTotalDebit.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jtfTotalDebit);

        jtfTotalCredit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalCredit.setText("0.00");
        jtfTotalCredit.setEnabled(false);
        jtfTotalCredit.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jtfTotalCredit);

        jtfTotalDebitCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalDebitCy.setText("0.00");
        jtfTotalDebitCy.setEnabled(false);
        jtfTotalDebitCy.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jtfTotalDebitCy);

        jtfTotalCreditCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalCreditCy.setText("0.00");
        jtfTotalCreditCy.setEnabled(false);
        jtfTotalCreditCy.setPreferredSize(new java.awt.Dimension(115, 23));
        jPanel9.add(jtfTotalCreditCy);

        jpGrid.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jpRegistryCenter.add(jpGrid, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpRegistryCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setPreferredSize(new java.awt.Dimension(81, 23));
        jpControls.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setPreferredSize(new java.awt.Dimension(81, 23));
        jpControls.add(jbCancel);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(1040, 679));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        // Create and add form panels:
        
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        try {
            // account and const center panels:
            moPanelFkAccountId = new SPanelAccount(miClient, SDataConstants.FIN_ACC, false, true, false);
            moPanelFkAccountId.setBorder(new TitledBorder("Cuenta contable:"));
            moPanelFkCostCenterId_n = new SPanelAccount(miClient, SDataConstants.FIN_CC, false, false, false);
            moPanelFkCostCenterId_n.setBorder(new TitledBorder("Centro de costo:"));
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        jpRegistry.remove(jlDummyAccount);
        jpRegistry.add(moPanelFkAccountId, BorderLayout.NORTH);

        jPanel5.remove(jlDummyCostCenter);
        jPanel5.add(moPanelFkCostCenterId_n, BorderLayout.NORTH);
        */
        
        moAccountPanel.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, true, true, false);
        moCostCenterPanel.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, true, true, true);
        
        moAccountPanel.setComponentNext(jtfConcept);
        moCostCenterPanel.setComponentNext(jtfApportionment);
        
        jtfDebitCyCur.setText("");
        jtfCreditCyCur.setText("");
        jtfDebitCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jtfCreditCur.setText(jtfDebitCur.getText());

        // Create form fields:

        moFieldConcept = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfConcept, jlConcept);
        moFieldConcept.setLengthMax(100);
        moFieldFkBizPartnerId_nr = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkBizPartnerId_nr, jlFkBizPartnerId_nr);
        moFieldFkBizPartnerId_nr.setPickerButton(jbFkBizPartnerId_nr);
        moFieldOccasionalFiscalId = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jcbOccasionalFiscalId, jlOccasionalFiscalId);
        moFieldOccasionalFiscalId.setLengthMin(DCfdConsts.LEN_RFC_ORG);
        moFieldOccasionalFiscalId.setLengthMax(DCfdConsts.LEN_RFC_PER);
        moFieldFkTaxId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkTaxId_n, jlFkTaxId_n);
        moFieldFkTaxId_n.setPickerButton(jbFkTaxId_n);
        moFieldFkItemId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkItemId_n, jlFkItemId_n);
        moFieldFkItemId_n.setPickerButton(jbFkItemId_n);
        moFieldUnits = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfUnits, new JLabel("Unidades " + jlFkItemId_n.getText()));
        moFieldUnits.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsQuantityFormat());
        moFieldFkItemAuxId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkItemAuxId_n, jlFkItemAuxId_n);
        moFieldFkItemAuxId_n.setPickerButton(jbFkItemAuxId_n);
        moFieldFkCurrencyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCurrencyId, jlFkCurrencyId);
        moFieldFkCurrencyId.setPickerButton(jbFkCurrencyId);
        moFieldDebitCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDebitCy, jlDebitCy);
        moFieldDebitCy.setMinInclusive(true);
        moFieldCreditCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfCreditCy, jlCreditCy);
        moFieldCreditCy.setMinInclusive(true);
        moFieldExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfExchangeRate, jlExchangeRate);
        moFieldExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldDebit = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDebit, jlDebit);
        moFieldDebit.setMinInclusive(true);
        moFieldCredit = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfCredit, jlCredit);
        moFieldCredit.setMinInclusive(true);
        moFieldApportionment = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfApportionment, jlApportionment);
        moFieldApportionment.setIsPercent(true);
        moFieldApportionment.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldTotalApportionment = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalApportionment, jlTotals);
        moFieldTotalApportionment.setIsPercent(true);
        moFieldTotalApportionment.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat());
        moFieldTotalDebit = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalDebit, jlTotals);
        moFieldTotalCredit = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalCredit, jlTotals);
        moFieldTotalDebitCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalDebitCy, jlTotals);
        moFieldTotalCreditCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfTotalCreditCy, jlTotals);
        
        mvFields.add(moFieldConcept);
        mvFields.add(moFieldFkBizPartnerId_nr);
        mvFields.add(moFieldOccasionalFiscalId);
        mvFields.add(moFieldFkTaxId_n);
        mvFields.add(moFieldFkItemId_n);
        mvFields.add(moFieldUnits);
        mvFields.add(moFieldFkItemAuxId_n);
        mvFields.add(moFieldFkCurrencyId);
        mvFields.add(moFieldDebitCy);
        mvFields.add(moFieldCreditCy);
        mvFields.add(moFieldExchangeRate);
        mvFields.add(moFieldDebit);
        mvFields.add(moFieldCredit);
        mvFields.add(moFieldApportionment);
        mvFields.add(moFieldTotalApportionment);
        mvFields.add(moFieldTotalDebit);
        mvFields.add(moFieldTotalCredit);
        mvFields.add(moFieldTotalDebitCy);
        mvFields.add(moFieldTotalCreditCy);
        
        moPaneGridEntries = new STablePaneGrid(miClient);
        //moPaneGridEntries.setDoubleClickAction(this, "publicActionEntryEdit");
        jpGrid.add(moPaneGridEntries, BorderLayout.CENTER);
        
        int i = 0;
        STableColumnForm[] aoTableColumns = new STableColumnForm[9];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. centro costo", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Prorrateo %", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe $", 115);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber $", 115);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Debe mon $", 115);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Haber mon $", 115);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneGridEntries.addTableColumn(aoTableColumns[i]);
        }
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkBizPartnerId_nr.addActionListener(this);
        jbFkTaxId_n.addActionListener(this);
        jbFkItemId_n.addActionListener(this);
        jbFkItemAuxId_n.addActionListener(this);
        jbFkCurrencyId.addActionListener(this);
        jbExchangeRate.addActionListener(this);
        jbExchangeRateAccountCashSet.addActionListener(this);
        jbDebitCy.addActionListener(this);
        jbCreditCy.addActionListener(this);
        jbDebit.addActionListener(this);
        jbCredit.addActionListener(this);
        jbAddRow.addActionListener(this);
        jbDeleteRow.addActionListener(this);
        jbMoveDownRow.addActionListener(this);
        jbMoveUpRow.addActionListener(this);

        jcbFkItemId_n.addItemListener(this);
        jcbFkItemAuxId_n.addItemListener(this);
        jcbFkCurrencyId.addItemListener(this);
        //moPanelFkAccountId.getFieldAccount().getComponent().addFocusListener(this); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        jcbFkCurrencyId.addFocusListener(this);
        jtfDebitCy.addFocusListener(this);
        jtfCreditCy.addFocusListener(this);
        jtfDebit.addFocusListener(this);
        jtfCredit.addFocusListener(this);
        jtfExchangeRate.addFocusListener(this);
        
        moAccountPanel.setRetrieveDataAccounts(true);
        moAccountPanel.setPanelAccountOwner(this);
        
        moCostCenterPanel.setRetrieveDataCostCenters(true);
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
        
        maFormNames = new HashMap<>();
        maFormNames.put(SFinRecordUtils.COMP_ACC, SGuiUtils.getLabelName("Cuenta contable"));
        maFormNames.put(SFinRecordUtils.COMP_CONCEPT, SGuiUtils.getLabelName(jlConcept));
        maFormNames.put(SFinRecordUtils.COMP_BIZPARTNER, SGuiUtils.getLabelName(jlFkBizPartnerId_nr));
        maFormNames.put(SFinRecordUtils.COMP_OCCASIONAL, SGuiUtils.getLabelName(jlOccasionalFiscalId));
        maFormNames.put(SFinRecordUtils.COMP_TAX, SGuiUtils.getLabelName(jlFkTaxId_n));
        maFormNames.put(SFinRecordUtils.COMP_TAX_CASH, jrbTaxCash.getText());
        maFormNames.put(SFinRecordUtils.COMP_ITEM, SGuiUtils.getLabelName(jlFkItemId_n));
        maFormNames.put(SFinRecordUtils.COMP_QTY, "Cantidad");
        maFormNames.put(SFinRecordUtils.COMP_UNIT, "Unidad");
        maFormNames.put(SFinRecordUtils.COMP_ITEM_AUX, SGuiUtils.getLabelName(jlFkItemAuxId_n));
        maFormNames.put(SFinRecordUtils.COMP_CUR, SGuiUtils.getLabelName(jlFkCurrencyId));
        maFormNames.put(SFinRecordUtils.COMP_DEBIT_CY, SGuiUtils.getLabelName(jlDebitCy));
        maFormNames.put(SFinRecordUtils.COMP_CREDIT_CY, SGuiUtils.getLabelName(jlCreditCy));
        maFormNames.put(SFinRecordUtils.COMP_DEBIT, SGuiUtils.getLabelName(jlDebit));
        maFormNames.put(SFinRecordUtils.COMP_CREDIT, SGuiUtils.getLabelName(jlCredit));
        maFormNames.put(SFinRecordUtils.COMP_EXC_RATE, SGuiUtils.getLabelName(jlExchangeRate));
        maFormNames.put(SFinRecordUtils.COMP_CC, SGuiUtils.getLabelName("Centro costo"));
        
        maFormComponents = new HashMap<>();
        maFormComponents.put(SFinRecordUtils.COMP_ACC, moAccountPanel.getTextNumberFirst());
        maFormComponents.put(SFinRecordUtils.COMP_CONCEPT, jtfConcept);
        maFormComponents.put(SFinRecordUtils.COMP_BIZPARTNER, jcbFkBizPartnerId_nr);
        maFormComponents.put(SFinRecordUtils.COMP_OCCASIONAL, jcbOccasionalFiscalId);
        maFormComponents.put(SFinRecordUtils.COMP_TAX, jcbFkTaxId_n);
        maFormComponents.put(SFinRecordUtils.COMP_TAX_CASH, jrbTaxCash);
        maFormComponents.put(SFinRecordUtils.COMP_ITEM, jcbFkItemId_n);
        maFormComponents.put(SFinRecordUtils.COMP_QTY, jtfUnits);
        maFormComponents.put(SFinRecordUtils.COMP_UNIT, jtfUnitsSymbol);
        maFormComponents.put(SFinRecordUtils.COMP_ITEM_AUX, jcbFkItemAuxId_n);
        maFormComponents.put(SFinRecordUtils.COMP_CUR, jcbFkCurrencyId);
        maFormComponents.put(SFinRecordUtils.COMP_DEBIT_CY, jtfDebitCy);
        maFormComponents.put(SFinRecordUtils.COMP_CREDIT_CY, jtfCreditCy);
        maFormComponents.put(SFinRecordUtils.COMP_DEBIT, jtfDebit);
        maFormComponents.put(SFinRecordUtils.COMP_CREDIT, jtfCredit);
        maFormComponents.put(SFinRecordUtils.COMP_EXC_RATE, jtfExchangeRate);
        maFormComponents.put(SFinRecordUtils.COMP_CC, moCostCenterPanel.getTextNumberFirst());
    }
    
    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (mbFirstTime) {
                mbFirstTime = false;
                //moPanelFkAccountId.getFieldAccount().getComponent().requestFocus(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
                moAccountPanel.getTextNumberFirst().requestFocus();
            }
        }
    }
    
    private void triggerFocusLost() {
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        if (moPanelFkAccountId.getFieldAccount().getComponent().isFocusOwner()) {
            actionFkAccountIdFocusLost();
        }*/
        if (jcbFkCurrencyId.isFocusOwner()) {
            actionFkCurrencyIdFocusLost();
        }
        else if (jtfDebitCy.isFocusOwner()) {
            actionDebitCyFocusLost();
        }
        else if (jtfCreditCy.isFocusOwner()) {
            actionCreditCyFocusLost();
        }
        else if (jtfDebit.isFocusOwner()) {
            actionDebitFocusLost();
        }
        else if (jtfCredit.isFocusOwner()) {
            actionCreditFocusLost();
        }
        else if (jtfExchangeRate.isFocusOwner()) {
            actionExchangeRateFocusLost();
        }
    }
    
    private void populateGrid(int selectRow) {
        double apportionment = 0;
        double debit = 0;
        double credit = 0;
        double debitCy = 0;
        double creditCy = 0;
        moPaneGridEntries.clearTableRows();
        
        for (int i = 0; i < maEntryRows.size(); i++) {
            SDialogRecordApportionmentRow row = maEntryRows.get(i);
            row.setNum(i + 1);
            row.prepareTableRow();
            moPaneGridEntries.addTableRow(row);
            
            apportionment = SLibUtils.round(apportionment + row.getApportionment(), 6);
            debit = SLibUtils.round(debit + row.getDebit(), 2);
            credit = SLibUtils.round(credit + row.getCredit(), 2);
            debitCy = SLibUtils.round(debitCy + row.getDebitCy(), 2);
            creditCy = SLibUtils.round(creditCy + row.getCreditCy(), 2);
        }
        moPaneGridEntries.renderTableRows();
        moPaneGridEntries.setTableRowSelection(selectRow < 0 || selectRow >= moPaneGridEntries.getTable().getRowCount() ? moPaneGridEntries.getTableGuiRowCount() - 1 : selectRow);
        
        moFieldTotalApportionment.setDouble(SLibUtils.round(apportionment, 6));
        moFieldTotalDebit.setDouble(SLibUtils.round(debit, 2));
        moFieldTotalCredit.setDouble(SLibUtils.round(credit, 2));
        moFieldTotalDebitCy.setDouble(SLibUtils.round(debitCy, 2));
        moFieldTotalCreditCy.setDouble(SLibUtils.round(creditCy, 2));
    }
    
    private void renderAccountSettings() {
        mbResetingForm = true;
        
        mbIsCurrentAccountDiogAccount = false;
        //msCurrentAccountId = moPanelFkAccountId.getFieldAccount().getString(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        
        int[] anAuxBizParnerKey = (int[]) moFieldFkBizPartnerId_nr.getKey();
        int[] anAuxTaxKey = (int[]) moFieldFkTaxId_n.getKey();
        int[] anAuxItemKey = (int[]) moFieldFkItemId_n.getKey();
        int[] anAuxItemAuxKey = (int[]) moFieldFkItemAuxId_n.getKey();
        double dUnits = moFieldUnits.getDouble();
        Object oFilterKey = null;
        SDataAccount oAccountMajor = null;
        SDataAccountCash oAuxAccountCash = moEntryAccountCash;
        
        mnAccountSystemTypeId = SDataConstantsSys.UNDEFINED;
        
        moEntryAccountCash = null;
        
        mnOptionsBizPartnerType = SDataConstants.UNDEFINED;
        mnOptionsItemType = SDataConstants.UNDEFINED;
        mbIsBizPartnerRequired = false;
        mbIsItemRequired = false;
        mbIsTaxRequired = false;
        mbIsTaxCfg = false;
        jlFkBizPartnerId_nr.setText(LABEL_BIZ_PARTNER + ":");
        bgTax.clearSelection();

        /*
         * In this form, moPanelFkAccountId.getFieldAccount().getComponent() has 2 focus events listeners:
         * 1. Listener in panel itself.
         * 2. Listener in this form.
         *
         * When focus lost event is invocated, the first listener that is triggered is number 2., so account
         * object in panel is not still available, until listener number 1. is triggered.
         * So, by now, it is necesary to read account registry in this form.
         */

        //account = moPanelFkAccountId.getCurrentInputAccount();

        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        if (!moPanelFkAccountId.isEmptyAccountId()) {
            oAccountMajor = moPanelFkAccountId.getDataAccountMajor();
        }
        */
        oAccountMajor = moAccountPanel.getSelectedDataAccountLedger();

        if (oAccountMajor == null) {
            jlFkBizPartnerId_nr.setEnabled(false);
            jcbFkBizPartnerId_nr.setEnabled(false);
            jbFkBizPartnerId_nr.setEnabled(false);
            jlOccasionalFiscalId.setEnabled(false);
            jlOccasionalFiscalIdDiotHint.setEnabled(false);
            jcbOccasionalFiscalId.setEnabled(false);
            jlFkTaxId_n.setEnabled(false);
            jcbFkTaxId_n.setEnabled(false);
            jbFkTaxId_n.setEnabled(false);
            jrbTaxCash.setEnabled(false);
            jrbTaxPend.setEnabled(false);
            jlFkItemId_n.setEnabled(false);
            jcbFkItemId_n.setEnabled(false);
            jbFkItemId_n.setEnabled(false);
            jtfUnits.setEnabled(false);
            jtfUnitsSymbol.setEnabled(false);
            jlFkItemAuxId_n.setEnabled(false);
            jcbFkItemAuxId_n.setEnabled(false);
            jbFkItemAuxId_n.setEnabled(false);
            
            moFieldFkBizPartnerId_nr.resetField();
            moFieldFkTaxId_n.resetField();
            moFieldFkItemId_n.resetField();
            moFieldFkItemAuxId_n.resetField();
            jtfUnitsSymbol.setText("");
            
            moFieldUnits.resetField();
        }
        else {
            mnAccountSystemTypeId = oAccountMajor.getFkAccountSystemTypeId();
            int[] anAccountSubclass = new int[] { oAccountMajor.getFkAccountTypeId_r(), oAccountMajor.getFkAccountClassId_r(), oAccountMajor.getFkAccountSubclassId_r() };
            
            boolean isAccSysBizPartnerAll = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_SUP, SDataConstantsSys.FINS_TP_ACC_SYS_CUS, SDataConstantsSys.FINS_TP_ACC_SYS_CDR, SDataConstantsSys.FINS_TP_ACC_SYS_DBR });
            boolean isAccSysBizPartnerSupCus = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_SUP, SDataConstantsSys.FINS_TP_ACC_SYS_CUS });
            boolean isAccSysPurchases = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_PUR, SDataConstantsSys.FINS_TP_ACC_SYS_PUR_ADJ });
            boolean isAccClsPurchases = SLibUtilities.belongsTo(anAccountSubclass, new int[][] {SDataConstantsSys.FINS_CLS_ACC_PUR, SDataConstantsSys.FINS_CLS_ACC_PUR_ADJ });
            boolean isAccSysSales = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_SAL, SDataConstantsSys.FINS_TP_ACC_SYS_SAL_ADJ });
            boolean isAccClsSales = SLibUtilities.belongsTo(anAccountSubclass, new int[][] {SDataConstantsSys.FINS_CLS_ACC_SAL, SDataConstantsSys.FINS_CLS_ACC_SAL_ADJ });
            boolean isAccSysTax = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT, SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT });
            
            try {
                /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
                mbIsCurrentAccountDiogAccount = SDiotUtils.isDiotAccount(miClient.getSession().getStatement(), moPanelFkAccountId.getDataAccountMajor()) || 
                        SDiotUtils.isDiotAccount(miClient.getSession().getStatement(), moPanelFkAccountId.getCurrentInputAccount());
                */
                mbIsCurrentAccountDiogAccount = SDiotUtils.isDiotAccount(miClient.getSession().getStatement(), oAccountMajor) || 
                        SDiotUtils.isDiotAccount(miClient.getSession().getStatement(), moAccountPanel.getSelectedDataAccount());
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }

            // Check if it is necesary to enable business partner fields:

            if (oAccountMajor.getIsRequiredBizPartner() || isAccSysBizPartnerAll || isAccSysPurchases || isAccClsPurchases || isAccSysSales || isAccClsSales || isAccSysTax || mbIsCurrentAccountDiogAccount) {
                if (isAccSysBizPartnerAll || (isAccSysPurchases && isAccClsPurchases) || (isAccSysSales && isAccClsSales)) {
                    mbIsBizPartnerRequired = true;
                    jlFkBizPartnerId_nr.setText(LABEL_BIZ_PARTNER + ": *");
                }

                jlFkBizPartnerId_nr.setEnabled(true);
                jcbFkBizPartnerId_nr.setEnabled(true);
                jbFkBizPartnerId_nr.setEnabled(true);
                jlOccasionalFiscalId.setEnabled(true);
                jlOccasionalFiscalIdDiotHint.setEnabled(true);
                jcbOccasionalFiscalId.setEnabled(true);

                if (mnAccountSystemTypeId == SDataConstantsSys.FINS_TP_ACC_SYS_SUP || isAccSysPurchases || mbIsCurrentAccountDiogAccount) {
                    mnOptionsBizPartnerType = SDataConstants.BPSX_BP_SUP;
                }
                else if (mnAccountSystemTypeId == SDataConstantsSys.FINS_TP_ACC_SYS_CUS || isAccSysSales) {
                    mnOptionsBizPartnerType = SDataConstants.BPSX_BP_CUS;
                }
                else if (mnAccountSystemTypeId == SDataConstantsSys.FINS_TP_ACC_SYS_CDR) {
                    mnOptionsBizPartnerType = SDataConstants.BPSX_BP_CDR;
                }
                else if (mnAccountSystemTypeId == SDataConstantsSys.FINS_TP_ACC_SYS_DBR) {
                    mnOptionsBizPartnerType = SDataConstants.BPSX_BP_DBR;
                }
                else if (isAccSysTax) {
                    mnOptionsBizPartnerType = SDataConstants.BPSX_BP_X_SUP_CUS; // suppliers and customers!
                }
                else {
                    switch (oAccountMajor.getFkAccountLedgerTypeId()) {
                        case SDataConstantsSys.FINU_TP_ACC_LEDGER_CUS:
                            mnOptionsBizPartnerType = SDataConstants.BPSX_BP_CUS;
                            break;
                        case SDataConstantsSys.FINU_TP_ACC_LEDGER_DBR:
                            mnOptionsBizPartnerType = SDataConstants.BPSX_BP_X_CUS_DBR;
                            break;
                        case SDataConstantsSys.FINU_TP_ACC_LEDGER_SUP:
                            mnOptionsBizPartnerType = SDataConstants.BPSX_BP_SUP;
                            break;
                        case SDataConstantsSys.FINU_TP_ACC_LEDGER_CDR:
                            mnOptionsBizPartnerType = SDataConstants.BPSX_BP_X_SUP_CDR;
                            break;
                        default:
                            mnOptionsBizPartnerType = SDataConstants.BPSU_BP; // all business partners!
                    }
                }

                SFormUtilities.populateComboBox(miClient, jcbFkBizPartnerId_nr, mnOptionsBizPartnerType);
                SFormUtilities.locateComboBoxItem(jcbFkBizPartnerId_nr, anAuxBizParnerKey);
            }
            else {
                jlFkBizPartnerId_nr.setEnabled(false);
                jcbFkBizPartnerId_nr.setEnabled(false);
                jbFkBizPartnerId_nr.setEnabled(false);
                jlOccasionalFiscalId.setEnabled(false);
                jlOccasionalFiscalIdDiotHint.setEnabled(false);
                jcbOccasionalFiscalId.setEnabled(false);
            }

            // Check if it is necesary to enable tax fields:
            //int[] taxFk = SValidationUtils.getTaxFkByAcc(miClient.getSession(), moPanelFkAccountId.getFieldAccount().getString()); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
            int[] taxFk = SValidationUtils.getTaxFkByAcc(miClient.getSession(), moAccountPanel.getSelectedDataAccount().getPkAccountIdXXX());
            if (isAccSysTax || isAccSysPurchases || taxFk != null) {
                mbIsTaxRequired = isAccSysTax;
                
                if (taxFk != null) {
                    mbIsTaxCfg = true;
                    anAuxTaxKey = taxFk;
                    jcbFkTaxId_n.setEnabled(false);
                    jbFkTaxId_n.setEnabled(false);
                    jrbTaxCash.setEnabled(false);
                    jrbTaxPend.setEnabled(false);

                    jrbTaxCash.setSelected(true);
                }
                else {
                    mbIsTaxCfg = false;
                    jlFkTaxId_n.setEnabled(true);
                    jcbFkTaxId_n.setEnabled(true);
                    jbFkTaxId_n.setEnabled(true);
                    jrbTaxCash.setEnabled(true);
                    jrbTaxPend.setEnabled(true);

                    jrbTaxCash.setSelected(true);
                }

                SFormUtilities.populateComboBox(miClient, jcbFkTaxId_n, SDataConstants.FINX_TAX_BAS_TAX);
                SFormUtilities.locateComboBoxItem(jcbFkTaxId_n, anAuxTaxKey);
            }
            else {
                moFieldFkTaxId_n.resetField();
                jlFkTaxId_n.setEnabled(false);
                jcbFkTaxId_n.setEnabled(false);
                jbFkTaxId_n.setEnabled(false);
                jrbTaxCash.setEnabled(false);
                jrbTaxPend.setEnabled(false);
                
                bgTax.clearSelection();
            }

            // Check if it is necesary to enable company branch entity fields:
            
            boolean isAccSysCash = SLibUtilities.belongsTo(mnAccountSystemTypeId, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH, SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK });
            boolean isAccSysInventory = mnAccountSystemTypeId == SDataConstantsSys.FINS_TP_ACC_SYS_INV;

            // Check if it is necesary to enable item fields:

            if (oAccountMajor.getIsRequiredItem() || isAccSysBizPartnerSupCus || isAccSysPurchases || isAccSysSales || isAccSysInventory || isAccSysTax) {
                mnOptionsItemType = mnAccountSystemTypeId;
                mbIsItemRequired = oAccountMajor.getIsRequiredItem();

                jlFkItemId_n.setEnabled(true);
                jcbFkItemId_n.setEnabled(true);
                jbFkItemId_n.setEnabled(true);
                jlFkItemAuxId_n.setEnabled(true);
                jcbFkItemAuxId_n.setEnabled(true);
                jbFkItemAuxId_n.setEnabled(true);

                SFormUtilities.populateComboBox(miClient, jcbFkItemId_n, SDataConstants.ITMU_ITEM);
                SFormUtilities.populateComboBox(miClient, jcbFkItemAuxId_n, SDataConstants.ITMU_ITEM);
                SFormUtilities.locateComboBoxItem(jcbFkItemId_n, anAuxItemKey);
                SFormUtilities.locateComboBoxItem(jcbFkItemAuxId_n, anAuxItemAuxKey);
                moFieldUnits.setFieldValue(dUnits);

                itemStateFkItemId_n();
            }
            else {
                jlFkItemId_n.setEnabled(false);
                jcbFkItemId_n.setEnabled(false);
                jbFkItemId_n.setEnabled(false);
                jlFkItemAuxId_n.setEnabled(false);
                jcbFkItemAuxId_n.setEnabled(false);
                jbFkItemAuxId_n.setEnabled(false);

                itemStateFkItemId_n();
            }
            
        }
        
        if (mbIsCurrentAccountDiogAccount) {
            jlFkTaxId_nDiotHint.setText("(cuenta contable DIOT)");
        }
        else {
            jlFkTaxId_nDiotHint.setText("");
        }
        
        mbResetingForm = false;
    }
    
    private void renderCurrencySettings() {
        jtfDebitCyCur.setText("");
        jtfCreditCyCur.setText("");
        
        if (jcbFkCurrencyId.getSelectedIndex() > 0)  {
            if (moFieldFkCurrencyId.getKeyAsIntArray()[0] == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                // Local currency:

                jtfExchangeRate.setEnabled(false);
                jbExchangeRate.setEnabled(false);
                jbExchangeRateAccountCashSet.setEnabled(false);
                
                jtfDebit.setEnabled(false);
                jtfCredit.setEnabled(false);
                jtfDebitCy.setEnabled(true);
                jtfCreditCy.setEnabled(true);
                
                moFieldDebit.setFieldValue(moFieldDebit.getDouble());
                moFieldCredit.setFieldValue(moFieldCredit.getDouble());
                moFieldDebitCy.setFieldValue(jtfDebitCy.isEnabled() ? moFieldDebitCy.getDouble() : 0);
                moFieldCreditCy.setFieldValue(jtfCreditCy.isEnabled() ? moFieldCreditCy.getDouble() : 0);

                jbDebitCy.setEnabled(false);
                jbCreditCy.setEnabled(false);
                jbDebit.setEnabled(false);
                jbCredit.setEnabled(false);

                moFieldExchangeRate.setFieldValue(1d);
                
                jtfDebitCyCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
                jtfCreditCyCur.setText(jtfDebitCyCur.getText());
            }
            else {
                // Foreign currency:

                jtfExchangeRate.setEnabled(true);
                jbExchangeRate.setEnabled(true);
                jbExchangeRateAccountCashSet.setEnabled(enableExchangeRateAccountCash());
                
                jtfDebit.setEnabled(true);
                jtfCredit.setEnabled(true);
                jtfDebitCy.setEnabled(true);
                jtfCreditCy.setEnabled(true);
                
                moFieldDebitCy.setFieldValue(jtfDebitCy.isEnabled() ? moFieldDebitCy.getDouble() : 0);
                moFieldCreditCy.setFieldValue(jtfCreditCy.isEnabled() ? moFieldCreditCy.getDouble() : 0);
                moFieldExchangeRate.setFieldValue(jtfExchangeRate.isEnabled() ? moFieldExchangeRate.getDouble() : 0);

                jbDebitCy.setEnabled(true);
                jbCreditCy.setEnabled(true);
                jbDebit.setEnabled(true);
                jbCredit.setEnabled(true);
                
                if (SLibUtilities.compareKeys(manLastCurrencyKey, new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() }) && !mbResetingForm) {
                    moFieldExchangeRate.setFieldValue(0d);
                }
                
                jtfDebitCyCur.setText(miClient.getSession().getSessionCustom().getCurrencyCode(moFieldFkCurrencyId.getKeyAsIntArray()));
                jtfCreditCyCur.setText(jtfDebitCyCur.getText());
            }

            manLastCurrencyKey = moFieldFkCurrencyId.getKeyAsIntArray();
        }
    }
    
    private double[] obtainCurrentAccountCashBalance() {
        double[] balance = new double[2];

        try {
            balance = SDataUtilities.obtainAccountCashBalanceUpdated(miClient,
                moFieldFkCurrencyId.getKeyAsIntArray()[0], moRecord.getDate(),
                moRecord.getDbmsDataAccountCash().getPrimaryKey(),
                moRecord.getDbmsDataAccountCash().getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH ?
                    SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH : SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK,
                moRecord, moRecordEntry);

        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return balance;
    }
    
    private double obtainTodayExchangeRateAccountCash() {
        double rate = 0;
        double[] balance;

        try {
            balance = obtainCurrentAccountCashBalance();
            rate = balance[1] == 0d ? 0d : balance[0] / balance[1];
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }
    
    private double obtainTodayExchangeRate() {
        double rate = 0;

        try {
            rate = SDataUtilities.obtainExchangeRate(miClient,
                moFieldFkCurrencyId.getKeyAsIntArray()[0], moRecord.getDate());
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return rate;
    }
    
    private boolean enableExchangeRateAccountCash() {
        return moRecord != null && moRecord.getDbmsDataAccountCash() != null 
                 && moRecord.getDbmsDataAccountCash().getFkCurrencyId() == moFieldFkCurrencyId.getKeyAsIntArray()[0];
    }
    
    private void itemStateFkItemId_n() {
        if (!jcbFkItemId_n.isEnabled() || jcbFkItemId_n.getSelectedIndex() <= 0) {
            moItem = null;
            jtfUnits.setEnabled(false);
            jtfUnitsSymbol.setEnabled(false);
            jtfUnitsSymbol.setText("");
        }
        else {
            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemId_n.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);
            jtfUnits.setEnabled(true);
            jtfUnitsSymbol.setEnabled(true);
            jtfUnitsSymbol.setText((String) ((SFormComponentItem) jcbFkItemId_n.getSelectedItem()).getComplement());
        }
    }
    
    private void itemStateFkItemAuxId_n() {
        if (!jcbFkItemAuxId_n.isEnabled() || jcbFkItemAuxId_n.getSelectedIndex() <= 0) {
            moItemAux = null;
        }
        else {
            moItemAux = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemAuxId_n.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);
        }
    }
    
    private SFinRecordEntry composeFinRecordEntry(SDialogRecordApportionmentRow row) {
        SFinRecordEntry finEntry = new SFinRecordEntry();
        
        //finEntry.AccountId = moPanelFkAccountId.getFieldAccount().getString(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        finEntry.AccountId = moAccountPanel.getSelectedDataAccount().getPkAccountIdXXX();
        finEntry.Concept = moFieldConcept.getString();
        finEntry.ExchangeRate = moFieldExchangeRate.getDouble();
        finEntry.ExchangeRateSystem = 1d;
        finEntry.CurId = moFieldFkCurrencyId.getKeyAsIntArray()[0];
        //finEntry.CostCenter = moPanelFkCostCenterId_n.isEmptyAccountId() ? "" : moPanelFkCostCenterId_n.getFieldAccount().getString(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        finEntry.CostCenter = moCostCenterPanel.getSelectedDataCostCenter() == null ? "" : moCostCenterPanel.getSelectedDataCostCenter().getPkCostCenterIdXXX();
        
        if (row == null) {
            finEntry.Debit = SLibUtils.round(moFieldDebit.getDouble() * moFieldApportionment.getDouble(), 2);
            finEntry.Credit = SLibUtils.round(moFieldCredit.getDouble() * moFieldApportionment.getDouble(), 2);
            finEntry.DebitCy = SLibUtils.round(moFieldDebitCy.getDouble() * moFieldApportionment.getDouble(), 2);
            finEntry.CreditCy = SLibUtils.round(moFieldCreditCy.getDouble() * moFieldApportionment.getDouble(), 2);            
        }
        else {
            finEntry.Debit = row.getDebit();
            finEntry.Credit = row.getCredit();                        
            finEntry.DebitCy = row.getDebitCy();
            finEntry.CreditCy = row.getCreditCy();                        
        }
        
        if (jcbFkBizPartnerId_nr.isEnabled() && jcbFkBizPartnerId_nr.getSelectedIndex() > 0) {
            finEntry.BizPartnerId = moFieldFkBizPartnerId_nr.getKeyAsIntArray()[0];
            SDataBizPartner bp = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldFkBizPartnerId_nr.getKeyAsIntArray(), SLibConstants.EXEC_MODE_VERBOSE);
            finEntry.IsForegn = !bp.getFiscalFrgId().isEmpty();
        }
        if (jcbOccasionalFiscalId.isEnabled() && !moFieldOccasionalFiscalId.getString().isEmpty()) {
            finEntry.OccasionalFiscalId = moFieldOccasionalFiscalId.getString();
        }
        
        if ((jcbFkTaxId_n.isEnabled() || mbIsTaxCfg) && jcbFkTaxId_n.getSelectedIndex() > 0) {
            finEntry.TaxKey = moFieldFkTaxId_n.getKeyAsIntArray();
        }
        if (jcbFkItemId_n.isEnabled() && jcbFkItemId_n.getSelectedIndex() > 0) {
            finEntry.ItemKey = moItem.getPkItemId();
            if (jcbFkItemAuxId_n.isEnabled() && jcbFkItemAuxId_n.getSelectedIndex() > 0) {
                finEntry.Quantity = 0;
            }
            else {
                finEntry.Quantity = moFieldUnits.getDouble();
                finEntry.UnitId = moItem.getFkUnitId();
            }
        }
        
        finEntry.IsTaxCash = jrbTaxCash.isSelected();
        
        //finEntry.Account = moPanelFkAccountId.getCurrentInputAccount(); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        //finEntry.AccountMajor = moPanelFkAccountId.getDataAccountMajor();
        finEntry.Account = moAccountPanel.getSelectedDataAccount();
        finEntry.AccountMajor = moAccountPanel.getSelectedDataAccountLedger();
        
        finEntry.IsBizPartnerRequired = mbIsBizPartnerRequired;
        finEntry.IsCurrentAccountDiogAccount = mbIsCurrentAccountDiogAccount;
        finEntry.IsTaxRequired = mbIsTaxRequired;
        finEntry.MissingFieldsBizPartnerAndOccasionalFiscalId = jcbFkBizPartnerId_nr.isEnabled() && jcbFkBizPartnerId_nr.getSelectedIndex() <= 0 && jcbOccasionalFiscalId.isEnabled() && moFieldOccasionalFiscalId.getString().isEmpty();
        finEntry.MissingFieldItem = mbIsItemRequired || SLibUtilities.belongsTo(mnOptionsItemType, new int[] { SDataConstantsSys.FINS_TP_ACC_SYS_PUR, SDataConstantsSys.FINS_TP_ACC_SYS_PUR_ADJ, SDataConstantsSys.FINS_TP_ACC_SYS_SAL, SDataConstantsSys.FINS_TP_ACC_SYS_SAL_ADJ });
        finEntry.FilledFieldItemAux = jcbFkItemAuxId_n.isEnabled() && jcbFkItemAuxId_n.getSelectedIndex() > 0;
        finEntry.FilledFieldUnits = jtfUnits.isEnabled() && moFieldUnits.getDouble() != 0d; 
        
        return finEntry;
    }
    
    private void recalculateApportionment() {
        for (SDialogRecordApportionmentRow row : maEntryRows) {
            double apportionment = row.getApportionment();
            double debit = moFieldDebit.getDouble();
            double credit = moFieldCredit.getDouble();
            double debitCy = moFieldDebitCy.getDouble();
            double creditCy = moFieldCreditCy.getDouble();
            row.setDebit(SLibUtils.round(debit * apportionment, 2));
            row.setCredit(SLibUtils.round(credit * apportionment, 2));
            row.setDebitCy(SLibUtils.round(debitCy * apportionment, 2));
            row.setCreditCy(SLibUtils.round(creditCy * apportionment, 2));  
            row.setCurId(moFieldFkCurrencyId.getKeyAsIntArray()[0]);
        }
        populateGrid(moPaneGridEntries.getTable().getSelectedRow());
    }
    
    private void adjustAmounts() {
        double appotionment = 0;
        SDialogRecordApportionmentRow majorApp = null;
        if (!Objects.equals(moFieldDebit.getDouble(), moFieldTotalDebit.getDouble()) ||
                !Objects.equals(moFieldCredit.getDouble(), moFieldTotalCredit.getDouble())) {
            // Sumar un centavo
            if (moFieldDebit.getDouble() > moFieldTotalDebit.getDouble() ||
                    moFieldCredit.getDouble() > moFieldTotalCredit.getDouble()) {
                // obtener el renglón con el prorrateo mayor
                for (SDialogRecordApportionmentRow row : maEntryRows) {
                    if (row.getApportionment() >= appotionment) {
                        appotionment = row.getApportionment();
                        majorApp = row;
                    }
                }
                // sumar un centavo al mayor
                if (majorApp != null) {
                    if (majorApp.getDebit() != 0) {
                        majorApp.setDebit(majorApp.getDebit() + 0.01);
                        majorApp.setDebitCy(SLibUtils.round(majorApp.getDebit() / moFieldExchangeRate.getDouble(), 2));
                    }
                    else {
                        majorApp.setCredit(majorApp.getCredit() + 0.01);
                        majorApp.setCreditCy(SLibUtils.round(majorApp.getCredit() / moFieldExchangeRate.getDouble(), 2));
                    }
                }
            }
            // restar un centavo
            else {
                // obtener el renglón con el prorrateo mayor
                for (SDialogRecordApportionmentRow row : maEntryRows) {
                    if (row.getApportionment() >= appotionment) {
                        appotionment = row.getApportionment();
                        majorApp = row;
                    }
                }
                // comparar si hay montos iguales
                if (majorApp != null) {
                    SDialogRecordApportionmentRow adjustRow = majorApp;
                    if (majorApp.getDebit() != 0) {
                        double amount = majorApp.getDebit();
                        for (SDialogRecordApportionmentRow row : maEntryRows) {
                            if (majorApp != row) {
                                if (row.getDebit() == amount) {
                                    adjustRow = row;
                                }
                            }
                        }
                        adjustRow.setDebit(adjustRow.getDebit() - 0.01);
                        adjustRow.setDebitCy(SLibUtils.round(adjustRow.getDebit() / moFieldExchangeRate.getDouble(), 2));
                    }
                    else {
                        double amount = majorApp.getCredit();
                        for (SDialogRecordApportionmentRow row : maEntryRows) {
                            if (row.getCredit() == amount) {
                                adjustRow = row;
                            }
                        }
                        adjustRow.setCredit(adjustRow.getCredit() - 0.01);
                        adjustRow.setCreditCy(SLibUtils.round(adjustRow.getCredit() / moFieldExchangeRate.getDouble(), 2));
                    }
                }
            }
        }
    }
    
    private ArrayList<SDataRecordEntry> composeRecordEntries() {
        ArrayList<SDataRecordEntry> maRecordEntries = new ArrayList<>();
        
        try {
            for (SFinRecordEntry finEty : maFinRecordEntries) {
                SDataRecordEntry ety = SFinRecordUtils.composeRecordEntry(miClient, null, finEty);
                maRecordEntries.add(ety);
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxWarning(e.getMessage());
        }
        
        return maRecordEntries;
    }
    
    /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
    private void actionFkAccountIdFocusGained() {
        if (!msCurrentAccountId.equals(moPanelFkAccountId.getFieldAccount().getString())) {
            renderAccountSettings();
        }
    }

    private void actionFkAccountIdFocusLost() {
        if (!msCurrentAccountId.equals(moPanelFkAccountId.getFieldAccount().getString())) {
            renderAccountSettings();
        }
    }
    */
    
    private void actionFkCurrencyIdFocusGained() {
        manLastCurrencyKey = moFieldFkCurrencyId.getKeyAsIntArray();
    }

    private void actionFkCurrencyIdFocusLost() {
        if (!SLibUtilities.compareKeys(manLastCurrencyKey, moFieldFkCurrencyId.getKeyAsIntArray())) {
            renderCurrencySettings();
        }
        recalculateApportionment();
    }

    private void actionjbFkBizPartnerId_nr() {
        miClient.pickOption(mnOptionsBizPartnerType, moFieldFkBizPartnerId_nr, null);
    }

    private void actionFkTaxId_n() {
        miClient.pickOption(SDataConstants.FINU_TAX, moFieldFkTaxId_n, null);
    }

    private void actionFkItemId_n() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldFkItemId_n, null);
    }

    private void actionFkItemAuxId_n() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldFkItemAuxId_n, null);
    }

    private void actionFkCurrencyId() {
        manLastCurrencyKey = moFieldFkCurrencyId.getKeyAsIntArray();

        if (miClient.pickOption(SDataConstants.CFGU_CUR, moFieldFkCurrencyId, null) == SLibConstants.FORM_RESULT_OK) {
            if (!SLibUtilities.compareKeys(manLastCurrencyKey, moFieldFkCurrencyId.getKeyAsIntArray())) {
                renderCurrencySettings();
            }
        }
    }

    private void actionDebitCy() {
        if (moFieldExchangeRate.getDouble() == 0d) {
            moFieldExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldDebitCy.setFieldValue(SLibUtilities.round(moFieldDebit.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldDebitCy.getComponent().requestFocus();
        }
    }

    private void actionCreditCy() {
        if (moFieldExchangeRate.getDouble() == 0d) {
            moFieldExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldCreditCy.setFieldValue(SLibUtilities.round(moFieldCredit.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldCreditCy.getComponent().requestFocus();
        }
    }

    private void actionDebit() {
        if (moFieldExchangeRate.getDouble() == 0d) {
            moFieldExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldDebit.setFieldValue(SLibUtilities.round(moFieldDebitCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldDebit.getComponent().requestFocus();
        }
    }

    private void actionCredit() {
        if (moFieldExchangeRate.getDouble() == 0d) {
            moFieldExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldCredit.setFieldValue(SLibUtilities.round(moFieldCreditCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldCredit.getComponent().requestFocus();
        }
    }

    private void actionExchangeRate() {
        if (moFieldDebitCy.getDouble() != 0d) {
            if (moFieldDebit.getDouble() == 0d) {
                moFieldDebit.getComponent().requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldDebit.getDouble() / moFieldDebitCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
                moFieldExchangeRate.getComponent().requestFocus();
            }
        }
        else if (moFieldCreditCy.getDouble() != 0d) {
            if (moFieldCredit.getDouble() == 0d) {
                moFieldCredit.getComponent().requestFocus();
            }
            else {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldCredit.getDouble() / moFieldCreditCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
                moFieldExchangeRate.getComponent().requestFocus();
            }
        }
        else if (moFieldDebit.getDouble() != 0d) {
            moFieldDebit.getComponent().requestFocus();
        }
        else if (moFieldCredit.getDouble() != 0d) {
            moFieldCredit.getComponent().requestFocus();
        }
        else {
            moFieldExchangeRate.getComponent().requestFocus();
        }
    }

    private void actionExchangeRateAccountCashSet() {
        if (jcbFkCurrencyId.getSelectedIndex() > 0) {
            moFieldExchangeRate.setFieldValue(obtainTodayExchangeRateAccountCash());
            jtfExchangeRate.requestFocus();
        }
    }
    
    private void actionDebitCyFocusLost() {
        if (moFieldDebitCy.getDouble() != 0d) {
            // Clear counterpart:

            moFieldCreditCy.setFieldValue(0d);
            moFieldCredit.setFieldValue(0d);

            if (!jtfDebit.isEnabled() || moFieldDebit.getDouble() == 0d) {
                double rate;

                if (moFieldExchangeRate.getDouble() == 0d && moFieldFkCurrencyId.getKeyAsIntArray()[0] != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                    rate = obtainTodayExchangeRate();
                    moFieldExchangeRate.setFieldValue(rate);
                }

                moFieldDebit.setFieldValue(SLibUtilities.round(moFieldDebitCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0d) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldDebit.getDouble() / moFieldDebitCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
            recalculateApportionment();
        }
    }

    private void actionCreditCyFocusLost() {
        if (moFieldCreditCy.getDouble() != 0d) {
            // Clear counterpart:

            moFieldDebitCy.setFieldValue(0d);
            moFieldDebit.setFieldValue(0d);

            if (!jtfCredit.isEnabled() || moFieldCredit.getDouble() == 0d) {
                double rate;

                if (moFieldExchangeRate.getDouble() == 0d && moFieldFkCurrencyId.getKeyAsIntArray()[0] != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                    if (enableExchangeRateAccountCash()) {
                        moFieldExchangeRate.setFieldValue(obtainTodayExchangeRateAccountCash());
                    }
                    else {
                        rate = obtainTodayExchangeRate();
                        moFieldExchangeRate.setFieldValue(rate);
                    }
                }

                moFieldCredit.setFieldValue(SLibUtilities.round(moFieldCreditCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldExchangeRate.getDouble() == 0d) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldCredit.getDouble() / moFieldCreditCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
            recalculateApportionment();
        }
    }

    private void actionDebitFocusLost() {
        if (moFieldDebit.getDouble() != 0d) {
            // Clear counterpart:

            moFieldCreditCy.setFieldValue(0d);
            moFieldCredit.setFieldValue(0d);

            if (moFieldDebitCy.getDouble() == 0d && moFieldExchangeRate.getDouble() != 0d) {
                moFieldDebitCy.setFieldValue(SLibUtilities.round(moFieldDebit.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldDebitCy.getDouble() != 0d && moFieldExchangeRate.getDouble() == 0d) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldDebit.getDouble() / moFieldDebitCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
            recalculateApportionment();
        }
    }

    private void actionCreditFocusLost() {
        if (moFieldCredit.getDouble() != 0d) {
            // Clear counterpart:

            moFieldDebitCy.setFieldValue(0d);
            moFieldDebit.setFieldValue(0d);

            if (moFieldCreditCy.getDouble() == 0d && moFieldExchangeRate.getDouble() != 0d) {
                moFieldCreditCy.setFieldValue(SLibUtilities.round(moFieldCredit.getDouble() / moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            }
            else if (moFieldCreditCy.getDouble() != 0d && moFieldExchangeRate.getDouble() == 0d) {
                moFieldExchangeRate.setFieldValue(SLibUtilities.round(moFieldCredit.getDouble() / moFieldCreditCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
            }
            recalculateApportionment();
        }
    }

    private void actionExchangeRateFocusLost() {
        if (moFieldDebitCy.getDouble() != 0d && moFieldDebit.getDouble() == 0d) {
            moFieldDebit.setFieldValue(SLibUtilities.round(moFieldDebitCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
        else if (moFieldCreditCy.getDouble() != 0d && moFieldCredit.getDouble() == 0d) {
            moFieldCredit.setFieldValue(SLibUtilities.round(moFieldCreditCy.getDouble() * moFieldExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
        }
    }
    
    private void actionAddRow() {
        SFormValidation validation;

        triggerFocusLost();     // this forces all pending focus lost function to be called

        SFinRecordEntry entry = composeFinRecordEntry(null);
        
        validation = entryValidate(entry);

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            SDialogRecordApportionmentRow row = new SDialogRecordApportionmentRow(miClient, entry.CostCenter);
            row.setCurId(entry.CurId);
            row.setApportionment(moFieldApportionment.getDouble());
            row.setDebit(SLibUtils.round(moFieldDebit.getDouble() * moFieldApportionment.getDouble(), 2));
            row.setCredit(SLibUtils.round(moFieldCredit.getDouble() * moFieldApportionment.getDouble(), 2));
            row.setDebitCy(SLibUtils.round(moFieldDebitCy.getDouble() * moFieldApportionment.getDouble(), 2));
            row.setCreditCy(SLibUtils.round(moFieldCreditCy.getDouble() * moFieldApportionment.getDouble(), 2));
            maEntryRows.add(row);
            //moPanelFkAccountId.setReadOnly(true); //XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
            moAccountPanel.setPanelEditable(false);
            
            populateGrid(-1);
        }
    }
    
    private void actionDeleteRow() {
        int selectedRow = moPaneGridEntries.getTable().getSelectedRow();
        maEntryRows.remove(selectedRow);
        populateGrid(selectedRow);
    }
    
    private void actionMoveDownRow() {
        int selectedRow = moPaneGridEntries.getTable().getSelectedRow();
        if (selectedRow < moPaneGridEntries.getTable().getRowCount() - 1) {
            maEntryRows.add(selectedRow + 1, maEntryRows.remove(selectedRow));
            populateGrid(selectedRow + 1);
        }
    }
    
    private void actionMoveUpRow() {
        int selectedRow = moPaneGridEntries.getTable().getSelectedRow();
        if (selectedRow > 0) {
            maEntryRows.add(selectedRow - 1, maEntryRows.remove(selectedRow));
            populateGrid(selectedRow - 1);
        }
    }
    
    private SFormValidation entryValidate (SFinRecordEntry entry) {
        SFinRecordEntryValidation entryValidation = null;
        
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            entryValidation = SFinRecordUtils.validateRecordEntry(miClient, moRecord, entry, maFormNames, SFinRecordUtils.SOURCE_FORM);
        }
        
        if (entryValidation != null) {
            if (entryValidation.ErrorId != 0) {
                validation.setMessage(entryValidation.Message);
                validation.setComponent(maFormComponents.get(entryValidation.ErrorId));
            } 
        } 

        return validation;
    }
    
    private void actionOk() {
        SFormValidation validation = formValidate();
        
        maFinRecordEntries = new ArrayList<>();

        triggerFocusLost();     // this forces all pending focus lost function to be called

        if (!validation.getIsError()) {
            adjustAmounts();
            for (SDialogRecordApportionmentRow row : maEntryRows) {
                maFinRecordEntries.add(composeFinRecordEntry(row));
            }

            for (SFinRecordEntry entry : maFinRecordEntries) {
                validation = entryValidate(entry);
                if (validation.getIsError()) {
                    break;
                }
            }
        }

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgTax;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAddRow;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCredit;
    private javax.swing.JButton jbCreditCy;
    private javax.swing.JButton jbDebit;
    private javax.swing.JButton jbDebitCy;
    private javax.swing.JButton jbDeleteRow;
    private javax.swing.JButton jbExchangeRate;
    private javax.swing.JButton jbExchangeRateAccountCashSet;
    private javax.swing.JButton jbFkBizPartnerId_nr;
    private javax.swing.JButton jbFkCurrencyId;
    private javax.swing.JButton jbFkItemAuxId_n;
    private javax.swing.JButton jbFkItemId_n;
    private javax.swing.JButton jbFkTaxId_n;
    private javax.swing.JButton jbMoveDownRow;
    private javax.swing.JButton jbMoveUpRow;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkBizPartnerId_nr;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCurrencyId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemAuxId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkTaxId_n;
    private javax.swing.JComboBox jcbOccasionalFiscalId;
    private javax.swing.JLabel jlApportionment;
    private javax.swing.JLabel jlConcept;
    private javax.swing.JLabel jlCredit;
    private javax.swing.JLabel jlCreditCy;
    private javax.swing.JLabel jlCreditCyHInt;
    private javax.swing.JLabel jlCreditHint;
    private javax.swing.JLabel jlDebit;
    private javax.swing.JLabel jlDebitCy;
    private javax.swing.JLabel jlDebitCyHint;
    private javax.swing.JLabel jlDebitHint1;
    private javax.swing.JLabel jlExchangeRate;
    private javax.swing.JLabel jlFkBizPartnerId_nr;
    private javax.swing.JLabel jlFkCurrencyId;
    private javax.swing.JLabel jlFkCurrencyIdHint;
    private javax.swing.JLabel jlFkItemAuxId_n;
    private javax.swing.JLabel jlFkItemId_n;
    private javax.swing.JLabel jlFkTaxId_n;
    private javax.swing.JLabel jlFkTaxId_nDiotHint;
    private javax.swing.JLabel jlOccasionalFiscalId;
    private javax.swing.JLabel jlOccasionalFiscalIdDiotHint;
    private javax.swing.JLabel jlPercentaje;
    private javax.swing.JLabel jlTotals;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRegistryCenter;
    private javax.swing.JPanel jpRegistryCenterNorth;
    private javax.swing.JPanel jpValue1;
    private javax.swing.JPanel jpValue2;
    private javax.swing.JPanel jpValue3;
    private javax.swing.JRadioButton jrbTaxCash;
    private javax.swing.JRadioButton jrbTaxPend;
    private javax.swing.JSeparator jsEntry2;
    private javax.swing.JSeparator jsEntry3;
    private javax.swing.JTextField jtfApportionment;
    private javax.swing.JTextField jtfConcept;
    private javax.swing.JTextField jtfCredit;
    private javax.swing.JTextField jtfCreditCur;
    private javax.swing.JTextField jtfCreditCy;
    private javax.swing.JTextField jtfCreditCyCur;
    private javax.swing.JTextField jtfDebit;
    private javax.swing.JTextField jtfDebitCur;
    private javax.swing.JTextField jtfDebitCy;
    private javax.swing.JTextField jtfDebitCyCur;
    private javax.swing.JTextField jtfExchangeRate;
    private javax.swing.JTextField jtfTotalApportionment;
    private javax.swing.JTextField jtfTotalCredit;
    private javax.swing.JTextField jtfTotalCreditCy;
    private javax.swing.JTextField jtfTotalDebit;
    private javax.swing.JTextField jtfTotalDebitCy;
    private javax.swing.JTextField jtfUnits;
    private javax.swing.JTextField jtfUnitsSymbol;
    private erp.gui.account.SBeanPanelAccount moAccountPanel;
    private erp.gui.account.SBeanPanelAccount moCostCenterPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moRecordEntry = null;
        moRecord = null;

        msCurrentAccountId = "";
        manLastCurrencyKey = null;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        moFieldFkCurrencyId.setFieldValue(new int[] { miClient.getSessionXXX().getParamsErp().getFkCurrencyId() });
        
        /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
        moPanelFkAccountId.resetPanel();
        moPanelFkAccountId.setReadOnly(false);
        moPanelFkCostCenterId_n.resetPanel();
        */
        
        moAccountPanel.initPanel();
        moCostCenterPanel.initPanel();

        moAccountPanel.setPanelEditable(true);
        
        jcbFkBizPartnerId_nr.removeAllItems();
        jcbFkTaxId_n.removeAllItems();
        jcbFkItemId_n.removeAllItems();
        jcbFkItemAuxId_n.removeAllItems();
        
        renderCurrencySettings();
        renderAccountSettings();

        itemStateFkItemId_n();
        
        mbResetingForm = false;
        maEntryRows = new ArrayList<>();
        
        moPaneGridEntries.createTable();
        moPaneGridEntries.clearTableRows();
    }

    @Override
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkCurrencyId, SDataConstants.CFGU_CUR);
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();
        
        if (moFieldTotalApportionment.getDouble() != 1d) {
            validation.setMessage("El total del prorrateo no es del 100%");
            validation.setComponent(jtfApportionment);
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case SDataConstants.FIN_REC:
                moRecord = (SDataRecord) value;
                break;
        }
    }

    @Override
    public Object getValue(int type) {
        Object value = null;
        
        switch (type) {
            case SDataConstants.FIN_REC_ETY:
                value = composeRecordEntries();
                break;
        }
        
        return value;
    }

    @Override
    public JLabel getTimeoutLabel() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkBizPartnerId_nr) {
                actionjbFkBizPartnerId_nr();
            }
            else if (button == jbFkTaxId_n) {
                actionFkTaxId_n();
            }
            else if (button == jbFkItemId_n) {
                actionFkItemId_n();
            }
            else if (button == jbFkItemAuxId_n) {
                actionFkItemAuxId_n();
            }
            else if (button == jbFkCurrencyId) {
                actionFkCurrencyId();
            }
            else if (button == jbExchangeRate) {
                actionExchangeRate();
            }
            else if (button == jbExchangeRateAccountCashSet) {
                actionExchangeRateAccountCashSet();
            }
            else if (button == jbDebitCy) {
                actionDebitCy();
            }
            else if (button == jbCreditCy) {
                actionCreditCy();
            }
            else if (button == jbDebit) {
                actionDebit();
            }
            else if (button == jbCredit) {
                actionCredit();
            }
            else if (button == jbAddRow) {
                actionAddRow();
            }
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
            else if (button == jbMoveDownRow) {
                actionMoveDownRow();
            }
            else if (button == jbMoveUpRow) {
                actionMoveUpRow();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();
            /* XXX Isabel Servín, 2025-03-27: código correspondiente al panel anterior de captura de cuentas cotables y centro de costo.
            if (formattedTextField == moPanelFkAccountId.getFieldAccount().getComponent()) {
                actionFkAccountIdFocusGained();
            }
            */
        }
        else if (e.getSource() instanceof javax.swing.JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == jcbFkCurrencyId) {
                actionFkCurrencyIdFocusGained();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) e.getSource();
            
            /*
            if (formattedTextField == moPanelFkAccountId.getFieldAccount().getComponent()) {
                actionFkAccountIdFocusLost();
            }
            */
        }
        else if (e.getSource() instanceof javax.swing.JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == jcbFkCurrencyId) {
                actionFkCurrencyIdFocusLost();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfDebitCy) {
                actionDebitCyFocusLost();
            }
            else if (textField == jtfCreditCy) {
                actionCreditCyFocusLost();
            }
            else if (textField == jtfDebit) {
                actionDebitFocusLost();
            }
            else if (textField == jtfCredit) {
                actionCreditFocusLost();
            }
            else if (textField == jtfExchangeRate) {
                actionExchangeRateFocusLost();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbResetingForm) {
            if (e.getSource() instanceof JComboBox) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbFkItemId_n) {
                    itemStateFkItemId_n();
                }
                else if (comboBox == jcbFkItemAuxId_n) {
                    itemStateFkItemAuxId_n();
                }
                else if (comboBox == jcbFkCurrencyId) {
                    renderCurrencySettings();
                }
            }
        }
    }

    @Override
    public void notifyAccountChanged() {
        renderAccountSettings();
    }
}
