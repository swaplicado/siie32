/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableUtilities;
import erp.mcfg.data.SDataParamsCompany;
import erp.mfin.data.SDialogAccountingDetailRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JTextField;

/**
 *
 * @author Sergio Flores
 */
public class SDialogAccountingDetail extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private erp.client.SClientInterface miClient;
    private int mnDetailType;

    private java.lang.Object moParamPrimaryKey;
    private int mnParamYear;
    private java.util.Date mtParamDateStart;
    private java.util.Date mtParamDateEnd;
    private int[] manParamCurrencyKey;
    private erp.lib.table.STablePane moPaneDetails;
    private java.util.Vector<Integer> mvAccountLevels;

    private boolean mbShowRecordAdjYearEnd;
    private boolean mbShowRecordAdjAudit;

    /** Creates new form SDialogAccountingDetail
     * @param client
     * @param type */
    public SDialogAccountingDetail(erp.client.SClientInterface client, int type) {
        super(client.getFrame(), true);
        miClient = client;
        mnDetailType = type;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlSubsystem = new javax.swing.JLabel();
        jtfSubsystem = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlField01 = new javax.swing.JLabel();
        jtfField01 = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlField02 = new javax.swing.JLabel();
        jtfField02 = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlCurrency = new javax.swing.JLabel();
        jtfCurrency = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jtfYear = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jtfDateStart = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jtfDateEnd = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlBalanceOpening = new javax.swing.JLabel();
        jtfBalanceOpening = new javax.swing.JTextField();
        jtfBalanceOpeningCurrency = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlDebit = new javax.swing.JLabel();
        jtfDebit = new javax.swing.JTextField();
        jtfDebitCurrency = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlCredit = new javax.swing.JLabel();
        jtfCredit = new javax.swing.JTextField();
        jtfCreditCurrency = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jlBalanceEnding = new javax.swing.JLabel();
        jtfBalanceEnding = new javax.swing.JTextField();
        jtfBalanceEndingCurrency = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jbClose = new javax.swing.JButton();
        jpDetail = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jckShowRecordAdjYearEnd = new javax.swing.JCheckBox();
        jckShowRecordAdjAudit = new javax.swing.JCheckBox();
        jPanel18 = new javax.swing.JPanel();
        jtfSeek = new javax.swing.JTextField();
        jbSeek = new javax.swing.JButton();
        jbExportCsv = new javax.swing.JButton();
        jbRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Movimientos del período");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Subsistema:"));
        jPanel4.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlSubsystem.setFont(new java.awt.Font("Tahoma", 1, 11));
        jlSubsystem.setText("Subsistema:");
        jlSubsystem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlSubsystem);

        jtfSubsystem.setEditable(false);
        jtfSubsystem.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfSubsystem.setText("SUBSYSTEM");
        jtfSubsystem.setFocusable(false);
        jtfSubsystem.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel7.add(jtfSubsystem);

        jPanel4.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlField01.setText("Campo 1:");
        jlField01.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlField01);

        jtfField01.setEditable(false);
        jtfField01.setText("FIELD 1");
        jtfField01.setFocusable(false);
        jtfField01.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel8.add(jtfField01);

        jPanel4.add(jPanel8);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlField02.setText("Campo 2:");
        jlField02.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlField02);

        jtfField02.setEditable(false);
        jtfField02.setText("FIELD 2");
        jtfField02.setFocusable(false);
        jtfField02.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel15.add(jtfField02);

        jPanel4.add(jPanel15);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCurrency.setFont(new java.awt.Font("Tahoma", 1, 11));
        jlCurrency.setText("Moneda:");
        jlCurrency.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlCurrency);

        jtfCurrency.setEditable(false);
        jtfCurrency.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfCurrency.setText("CURRENCY");
        jtfCurrency.setFocusable(false);
        jtfCurrency.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(jtfCurrency);

        jPanel4.add(jPanel17);

        jPanel1.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Período:"));
        jPanel5.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlYear.setText("Ejercicio contable:");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlYear);

        jtfYear.setEditable(false);
        jtfYear.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfYear.setText("2000");
        jtfYear.setFocusable(false);
        jtfYear.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel9.add(jtfYear);

        jPanel5.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDateStart);

        jtfDateStart.setEditable(false);
        jtfDateStart.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDateStart.setText("01/01/2000");
        jtfDateStart.setFocusable(false);
        jtfDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDateStart);

        jPanel5.add(jPanel10);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDateEnd);

        jtfDateEnd.setEditable(false);
        jtfDateEnd.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDateEnd.setText("31/01/2000");
        jtfDateEnd.setFocusable(false);
        jtfDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jtfDateEnd);

        jPanel5.add(jPanel16);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Saldo:"));
        jPanel6.setLayout(new java.awt.GridLayout(4, 1, 0, 1));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBalanceOpening.setText("Saldo inicial:");
        jlBalanceOpening.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlBalanceOpening);

        jtfBalanceOpening.setEditable(false);
        jtfBalanceOpening.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBalanceOpening.setText("9,999,999,999.99");
        jtfBalanceOpening.setFocusable(false);
        jtfBalanceOpening.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jtfBalanceOpening);

        jtfBalanceOpeningCurrency.setEditable(false);
        jtfBalanceOpeningCurrency.setText("CUR");
        jtfBalanceOpeningCurrency.setFocusable(false);
        jtfBalanceOpeningCurrency.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel11.add(jtfBalanceOpeningCurrency);

        jPanel6.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDebit.setText("Cargos:");
        jlDebit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDebit);

        jtfDebit.setEditable(false);
        jtfDebit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDebit.setText("9,999,999,999.99");
        jtfDebit.setFocusable(false);
        jtfDebit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jtfDebit);

        jtfDebitCurrency.setEditable(false);
        jtfDebitCurrency.setText("CUR");
        jtfDebitCurrency.setFocusable(false);
        jtfDebitCurrency.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel12.add(jtfDebitCurrency);

        jPanel6.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlCredit.setText("Abonos:");
        jlCredit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlCredit);

        jtfCredit.setEditable(false);
        jtfCredit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCredit.setText("9,999,999,999.99");
        jtfCredit.setFocusable(false);
        jtfCredit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jtfCredit);

        jtfCreditCurrency.setEditable(false);
        jtfCreditCurrency.setText("CUR");
        jtfCreditCurrency.setFocusable(false);
        jtfCreditCurrency.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel13.add(jtfCreditCurrency);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlBalanceEnding.setFont(new java.awt.Font("Tahoma", 1, 11));
        jlBalanceEnding.setText("Saldo final:");
        jlBalanceEnding.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlBalanceEnding);

        jtfBalanceEnding.setEditable(false);
        jtfBalanceEnding.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfBalanceEnding.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfBalanceEnding.setText("9,999,999,999.99");
        jtfBalanceEnding.setFocusable(false);
        jtfBalanceEnding.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jtfBalanceEnding);

        jtfBalanceEndingCurrency.setEditable(false);
        jtfBalanceEndingCurrency.setFont(new java.awt.Font("Tahoma", 1, 11));
        jtfBalanceEndingCurrency.setText("CUR");
        jtfBalanceEndingCurrency.setFocusable(false);
        jtfBalanceEndingCurrency.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jtfBalanceEndingCurrency);

        jPanel6.add(jPanel14);

        jPanel1.add(jPanel6, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbClose.setText("Cerrar");
        jbClose.setPreferredSize(new java.awt.Dimension(75, 23));
        jbClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCloseActionPerformed(evt);
            }
        });
        jPanel2.add(jbClose);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jpDetail.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos del período:"));
        jpDetail.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel19.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jckShowRecordAdjYearEnd.setText("Incluye póliza de ajuste de cierre");
        jckShowRecordAdjYearEnd.setEnabled(false);
        jckShowRecordAdjYearEnd.setFocusable(false);
        jPanel19.add(jckShowRecordAdjYearEnd);

        jckShowRecordAdjAudit.setText("Incluye póliza de ajuste de auditoría");
        jckShowRecordAdjAudit.setEnabled(false);
        jckShowRecordAdjAudit.setFocusable(false);
        jckShowRecordAdjAudit.setOpaque(false);
        jPanel19.add(jckShowRecordAdjAudit);

        jPanel3.add(jPanel19, java.awt.BorderLayout.WEST);

        jPanel18.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        jtfSeek.setText("Seek");
        jtfSeek.setToolTipText("Texto a buscar [Ctrl+B]");
        jtfSeek.setEnabled(false);
        jtfSeek.setPreferredSize(new java.awt.Dimension(100, 20));
        jPanel18.add(jtfSeek);

        jbSeek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_seek.gif"))); // NOI18N
        jbSeek.setToolTipText("Buscar");
        jbSeek.setEnabled(false);
        jbSeek.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbSeek);

        jbExportCsv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_file_csv.gif"))); // NOI18N
        jbExportCsv.setToolTipText("Exportar CSV [Ctrl+E]");
        jbExportCsv.setEnabled(false);
        jbExportCsv.setPreferredSize(new java.awt.Dimension(23, 23));
        jbExportCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportCsvActionPerformed(evt);
            }
        });
        jPanel18.add(jbExportCsv);

        jbRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_reload.gif"))); // NOI18N
        jbRefresh.setToolTipText("Refrescar [Ctrl+R]");
        jbRefresh.setPreferredSize(new java.awt.Dimension(23, 23));
        jbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRefreshActionPerformed(evt);
            }
        });
        jPanel18.add(jbRefresh);

        jPanel3.add(jPanel18, java.awt.BorderLayout.EAST);

        jpDetail.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpDetail, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-1000)/2, (screenSize.height-675)/2, 1000, 675);
    }// </editor-fold>//GEN-END:initComponents

    private void jbCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCloseActionPerformed
        actionClose();
    }//GEN-LAST:event_jbCloseActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        jbClose.requestFocus();
    }//GEN-LAST:event_formWindowActivated

    private void jbExportCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportCsvActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbExportCsvActionPerformed

    private void jbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRefreshActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbRefreshActionPerformed

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        moPaneDetails = new STablePane(miClient);
        mvAccountLevels = null;

        jpDetail.add(moPaneDetails, BorderLayout.CENTER);

        aoTableColumns = new STableColumnForm[23];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Concepto", 200);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Cargos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Abonos $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Saldo $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "T. cambio", STableConstants.WIDTH_EXCHANGE_RATE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererExchangeRate());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Moneda", STableConstants.WIDTH_CURRENCY_KEY);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Subclase movimiento", 200);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período póliza", STableConstants.WIDTH_YEAR_PERIOD);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio póliza", STableConstants.WIDTH_RECORD_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "#", STableConstants.WIDTH_NUM_TINYINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Sistema", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);

        for (i = 0; i < aoTableColumns.length; i++) {
            moPaneDetails.addTableColumn(aoTableColumns[i]);
        }

        switch (mnDetailType) {
            case SDataConstants.FINX_ACCOUNTING:
            case SDataConstants.FINX_ACCOUNTING_ALL:
                jtfSubsystem.setText("MOVIMIENTOS DE BALANZA DE COMPROBACIÓN");
                jlField01.setText("No. cuenta contable:");
                jlField02.setText("Cuenta contable:");
                mvAccountLevels = SDataUtilities.getAccountLevels(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts()));
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
            case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
            case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
            case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
            case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
            case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                jtfSubsystem.setText("MOVIMIENTOS DE " + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { mnDetailType }));
                switch (mnDetailType) {
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                        jlField01.setText("Sucursal de la empresa:");
                        jlField02.setText("Cuenta efectivo:");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                        jlField01.setText("Sucursal de la empresa:");
                        jlField02.setText("Almacén:");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                        jlField01.setText("Cliente:");
                        jlField02.setText("");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                        jlField01.setText("Proveedor:");
                        jlField02.setText("");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                        jlField01.setText("Deudor diverso:");
                        jlField02.setText("");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                        jlField01.setText("Acreedor diverso:");
                        jlField02.setText("");
                        break;
                    case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                        jlField01.setText("Ejercicio contable:");
                        jlField02.setText("");
                        break;
                    default:
                }
                break;

            case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
            case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                jtfSubsystem.setText("MOVIMIENTOS DE " + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_SYS, new int[] { mnDetailType }));
                jlField01.setText("Impuesto básico:");
                jlField02.setText("Impuesto:");
                break;
            case SDataConstantsSys.FINS_TP_ACC_SPE_DOC_PAY:
            case SDataConstantsSys.FINS_TP_ACC_SPE_DOC_REC:
                jtfSubsystem.setText("MOVIMIENTOS");
                jlField01.setText("No. cuenta contable:");
                jlField02.setText("Cuenta contable:");
                mvAccountLevels = SDataUtilities.getAccountLevels(SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts()));
                break;

            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        jbClose.addActionListener(this);
        jbSeek.addActionListener(this);
        jbRefresh.addActionListener(this);
        jbExportCsv.addActionListener(this);
        jtfSeek.addActionListener(this);

        SFormUtilities.createActionMap(this.getRootPane(), this, "focusSeek", "seek", KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionExportCsv", "exportCsv", KeyEvent.VK_E, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(this.getRootPane(), this, "actionRefresh", "refresh", KeyEvent.VK_R, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "close", KeyEvent.VK_ESCAPE, 0);
    }

    private void actionClose() {
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbClose;
    private javax.swing.JButton jbExportCsv;
    private javax.swing.JButton jbRefresh;
    private javax.swing.JButton jbSeek;
    private javax.swing.JCheckBox jckShowRecordAdjAudit;
    private javax.swing.JCheckBox jckShowRecordAdjYearEnd;
    private javax.swing.JLabel jlBalanceEnding;
    private javax.swing.JLabel jlBalanceOpening;
    private javax.swing.JLabel jlCredit;
    private javax.swing.JLabel jlCurrency;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDebit;
    private javax.swing.JLabel jlField01;
    private javax.swing.JLabel jlField02;
    private javax.swing.JLabel jlSubsystem;
    private javax.swing.JLabel jlYear;
    private javax.swing.JPanel jpDetail;
    private javax.swing.JTextField jtfBalanceEnding;
    private javax.swing.JTextField jtfBalanceEndingCurrency;
    private javax.swing.JTextField jtfBalanceOpening;
    private javax.swing.JTextField jtfBalanceOpeningCurrency;
    private javax.swing.JTextField jtfCredit;
    private javax.swing.JTextField jtfCreditCurrency;
    private javax.swing.JTextField jtfCurrency;
    private javax.swing.JTextField jtfDateEnd;
    private javax.swing.JTextField jtfDateStart;
    private javax.swing.JTextField jtfDebit;
    private javax.swing.JTextField jtfDebitCurrency;
    private javax.swing.JTextField jtfField01;
    private javax.swing.JTextField jtfField02;
    private javax.swing.JTextField jtfSeek;
    private javax.swing.JTextField jtfSubsystem;
    private javax.swing.JTextField jtfYear;
    // End of variables declaration//GEN-END:variables

    public void focusSeek() {
        if (jtfSeek.isEnabled()) {
            jtfSeek.requestFocus();
        }
    }

    public void actionSeek() {
        if (jbSeek.isEnabled()) {
            STableUtilities.actionSeek(miClient, moPaneDetails, jtfSeek.getText().trim());
        }
    }

    public void actionExportCsv() {
        if (jbExportCsv.isEnabled()) {
            STableUtilities.actionExportCsv(miClient, moPaneDetails, getTitle());
        }
    }

    public void actionRefresh() {
        showAccountingDetail(moParamPrimaryKey, mnParamYear, mtParamDateStart, mtParamDateEnd, manParamCurrencyKey, mbShowRecordAdjYearEnd, mbShowRecordAdjAudit);
    }

    public void refreshAccountingDetail() {
        moParamPrimaryKey = null;
        mnParamYear = 0;
        mtParamDateStart = null;
        mtParamDateEnd = null;
        manParamCurrencyKey = null;

        jtfSeek.setText("");
        jtfSeek.setEnabled(false);
        jbSeek.setEnabled(false);
        jbExportCsv.setEnabled(false);
    }

    @SuppressWarnings("unchecked")
    public void showAccountingDetail(java.lang.Object poPrimaryKey, int pnYear, java.util.Date ptDateStart, java.util.Date ptDateEnd, int[] panCurrencyKey, boolean bShowRecordAdjYearEnd, boolean bShowRecordAdjAudit) {
        double dOpeningBalance = 0;
        double dDebit = 0;
        double dCredit = 0;
        double dBalance = 0;
        double dDebitTotal = 0;
        double dCreditTotal = 0;
        String sCur = "";
        String sql = "";
        ResultSet resulSet = null;
        String sqlWhere = "";
        String sqlFromPrevious = "";
        String sqlFromCurrent = "";
        String sConcept = "";
        String sTemp = "";
        java.util.Date tPrevious = SLibTimeUtilities.addDate(ptDateStart, 0, 0, -1);
        SDialogAccountingDetailRow oRow = null;

        moParamPrimaryKey = poPrimaryKey;
        mnParamYear = pnYear;
        mtParamDateStart = ptDateStart;
        mtParamDateEnd = ptDateEnd;
        manParamCurrencyKey = panCurrencyKey;
        mbShowRecordAdjYearEnd = bShowRecordAdjYearEnd;
        mbShowRecordAdjAudit = bShowRecordAdjAudit;

        jckShowRecordAdjYearEnd.setSelected(mbShowRecordAdjYearEnd);
        jckShowRecordAdjAudit.setSelected(mbShowRecordAdjAudit);

        jtfField01.setText("");
        jtfField01.setToolTipText(null);
        jtfField02.setText("");
        jtfField02.setToolTipText(null);
        jtfCurrency.setText(manParamCurrencyKey == null ? SLibConstants.TXT_SYS_CUR :
            SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, manParamCurrencyKey));
        jtfCurrency.setToolTipText(jtfCurrency.getText());

        jtfYear.setText("" + mnParamYear);
        jtfDateStart.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(mtParamDateStart));
        jtfDateEnd.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(mtParamDateEnd));

        jtfBalanceOpeningCurrency.setText(manParamCurrencyKey == null ? miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() :
            SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, manParamCurrencyKey, SLibConstants.DESCRIPTION_CODE));
        jtfDebitCurrency.setText(jtfBalanceOpeningCurrency.getText());
        jtfCreditCurrency.setText(jtfBalanceOpeningCurrency.getText());
        jtfBalanceEndingCurrency.setText(jtfBalanceOpeningCurrency.getText());

        moPaneDetails.createTable();
        moPaneDetails.clearTableRows();

        try {
            sCur = manParamCurrencyKey != null ? "_cur" : "";

            sTemp = "FROM fin_rec AS r INNER JOIN fin_rec_ety AS re ON " +
                    "r.id_year = " + mnParamYear + " AND r.b_del = FALSE AND ";
            sqlFromPrevious += sTemp;
            sqlFromCurrent += sTemp;

            sqlFromPrevious += "r.dt < " +
                    "'" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtParamDateStart) + "' AND ";

            sqlFromCurrent += "r.dt BETWEEN " +
                    "'" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtParamDateStart) + "' AND " +
                    "'" + miClient.getSessionXXX().getFormatters().getDbmsDateFormat().format(mtParamDateEnd) + "' AND ";

            sTemp = "r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND " +
                    "r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num AND re.b_del = FALSE " +
                    "INNER JOIN erp.cfgu_cur AS c ON re.fid_cur = c.id_cur " + (manParamCurrencyKey == null ? "" : "AND re.fid_cur = " + manParamCurrencyKey[0] + " ") +
                    "INNER JOIN fin_acc AS a ON re.fid_acc = a.id_acc ";

            switch (mnDetailType) {
                case SDataConstants.FINX_ACCOUNTING:
                case SDataConstants.FINX_ACCOUNTING_ALL:
                case SDataConstantsSys.FINS_TP_ACC_SPE_DOC_PAY:
                case SDataConstantsSys.FINS_TP_ACC_SPE_DOC_REC:
                    String accountId = (String) ((Object[]) moParamPrimaryKey)[0];
                    Object[] accountsAndDescription = SDataUtilities.getInputAccountsAndDescription(miClient, accountId, mvAccountLevels);

                    sTemp += "AND a.id_acc LIKE '" + SDataUtilities.getAccountUsedLevels(accountId) + "%' ";

                    jtfField01.setText(accountId);
                    jtfField02.setText((String) accountsAndDescription[2]);
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                    switch (mnDetailType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_CASH:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CASH_BANK:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK[1] + " ";
                            break;
                        default:
                    }

                    sTemp += "AND re.fid_cob_n = " + ((int[]) moParamPrimaryKey)[0] + " " +
                            "AND re.fid_ent_n = " + ((int[]) moParamPrimaryKey)[1] + " " +
                            "INNER JOIN erp.cfgu_cob_ent AS e ON " +
                            "re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                            "INNER JOIN erp.bpsu_bpb AS bb ON " +
                            "e.id_cob = bb.id_bpb ";

                    jtfField01.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, moParamPrimaryKey));
                    jtfField02.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_COB_ENT, moParamPrimaryKey));
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_INV:
                    sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[0] + " " +
                            "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK[1] + " " +
                            "AND re.fid_cob_n " + (((int[]) moParamPrimaryKey)[0] == 0 ? "IS NULL" : "= " + ((int[]) moParamPrimaryKey)[0]) + " " +
                            "AND re.fid_ent_n " + (((int[]) moParamPrimaryKey)[1] == 0 ? "IS NULL" : "= " + ((int[]) moParamPrimaryKey)[1]) + " " +
                            "LEFT OUTER JOIN erp.cfgu_cob_ent AS e ON " +
                            "re.fid_cob_n = e.id_cob AND re.fid_ent_n = e.id_ent " +
                            "LEFT OUTER JOIN erp.bpsu_bpb AS bb ON " +
                            "e.id_cob = bb.id_bpb ";

                    jtfField01.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, moParamPrimaryKey));
                    jtfField02.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_COB_ENT, moParamPrimaryKey));
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                    switch (mnDetailType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR[1] + " ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                            sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[0] + " " +
                                    "AND re.fid_tp_sys_mov_xxx = " + SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR[1] + " ";
                            break;
                        default:
                    }

                    sTemp += "AND re.fid_bp_nr = " + ((int[]) moParamPrimaryKey)[0] + " " +
                            "INNER JOIN erp.bpsu_bp AS b ON " +
                            "re.fid_bp_nr = b.id_bp ";

                    jtfField01.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, moParamPrimaryKey));
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_PROF_LOSS:
                    sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_CT_SYS_MOV_PROF + " " +
                            "AND re.fid_year_n " + (((int[]) moParamPrimaryKey)[0] == 0 ? "IS NULL" : "= " + ((int[]) moParamPrimaryKey)[0]) + " " +
                            "LEFT OUTER JOIN fin_year AS y ON " +
                            "re.fid_year_n = y.id_year ";

                    jtfField01.setText("" + mnParamYear);
                    break;

                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                    sTemp += "AND re.fid_ct_sys_mov_xxx = " + SDataConstantsSys.FINS_CT_SYS_MOV_TAX + " ";

                    switch (mnDetailType) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_DBT:
                            sTemp += "AND re.fid_tp_sys_mov_xxx in (" +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT_PEND[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND_ADV[1] + ") ";
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_TAX_CDT:
                            sTemp += "AND re.fid_tp_sys_mov_xxx in (" +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND[1] + ", " +
                                    SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND_ADV[1] + ") ";
                            break;
                        default:
                    }

                    sTemp += "AND re.fid_tax_bas_n " + (((int[]) moParamPrimaryKey)[0] == 0 ? "IS NULL" : "= " + ((int[]) moParamPrimaryKey)[0]) + " " +
                            "AND re.fid_tax_n " + (((int[]) moParamPrimaryKey)[1] == 0 ? "IS NULL" : "= " + ((int[]) moParamPrimaryKey)[1]) + " " +
                            "LEFT OUTER JOIN erp.finu_tax AS t ON " +
                            "re.fid_tax_bas_n = t.id_tax_bas AND re.fid_tax_n = t.id_tax " +
                            "LEFT OUTER JOIN erp.finu_tax_bas AS tb ON " +
                            "t.id_tax_bas = tb.id_tax_bas ";

                    jtfField01.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX_BAS, moParamPrimaryKey));
                    jtfField02.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, moParamPrimaryKey));
                    break;

                default:
            }

            jtfField01.setCaretPosition(0);
            jtfField01.setToolTipText(jtfField01.getText().length() == 0 ? null : jtfField01.getText());
            jtfField02.setCaretPosition(0);
            jtfField02.setToolTipText(jtfField02.getText().length() == 0 ? null : jtfField02.getText());

            sqlFromPrevious += sTemp;
            sqlFromCurrent += sTemp;

            sql = "SELECT COALESCE(SUM(re.debit" + sCur + " - re.credit" + sCur + "), 0) AS f_balance " +
                    sqlFromPrevious;

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                dOpeningBalance = resulSet.getDouble("f_balance");

                if (dOpeningBalance >= 0) {
                    dDebit += dOpeningBalance;
                }
                else {
                    dCredit += -dOpeningBalance;
                }

                dDebitTotal += dDebit;
                dCreditTotal += dCredit;
                dBalance += (dDebit - dCredit);

                oRow = new SDialogAccountingDetailRow(miClient);
                oRow.setDate(tPrevious);
                oRow.setConcept("[SALDO INICIAL]");
                oRow.setDebit(dDebit);
                oRow.setCredit(dCredit);
                oRow.setBalance(dBalance);
                oRow.setPkYearId(mnParamYear);
                oRow.prepareTableRow();
                moPaneDetails.addTableRow(oRow);
            }

            if (!mbShowRecordAdjYearEnd) {
                sqlWhere += (sqlWhere.length() == 0 ? "WHERE " : "AND ") + " b_adj_year = 0 ";
            }
            if (!mbShowRecordAdjAudit) {
                sqlWhere += (sqlWhere.length() == 0 ? "WHERE " : "AND ") + " b_adj_audit = 0 ";
            }

            sql = "SELECT r.id_year, r.id_per, r.id_bkc, r.id_tp_rec, r.id_num, r.dt, re.concept, r.b_sys, r.b_del, " +
                    "f_acc_usr(" + ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount() + ", a.code) AS f_acc, a.acc, bkc.code, cob.code, mtp.tp_acc_mov, mcl.cl_acc_mov, mcls.cls_acc_mov, un.usr, ue.usr, ud.usr, " +
                    (manParamCurrencyKey != null ? "c.id_cur AS f_id_cur, c.cur_key AS f_cur_key, " :
                        "" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getPkCurrencyId() + " AS f_id_cur, " +
                        "'" + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + "' AS f_cur_key, ") +
                    "re.sort_pos, re.debit" + sCur + ", re.credit" + sCur + ", re.exc_rate, re.ts_new, re.ts_edit, re.ts_del, i.item " +
                    (mnDetailType != SDataConstants.FINX_ACCOUNTING ? "" : ", xe.ent, xb.bp ") +
                    sqlFromCurrent +
                    "INNER JOIN fin_bkc AS bkc ON r.id_bkc = bkc.id_bkc " +
                    "INNER JOIN erp.bpsu_bpb AS cob ON r.fid_cob = cob.id_bpb " +
                    "INNER JOIN erp.fins_tp_acc_mov AS mtp ON re.fid_tp_acc_mov = mtp.id_tp_acc_mov " +
                    "INNER JOIN erp.fins_cl_acc_mov AS mcl ON re.fid_tp_acc_mov = mcl.id_tp_acc_mov AND re.fid_cl_acc_mov = mcl.id_cl_acc_mov " +
                    "INNER JOIN erp.fins_cls_acc_mov AS mcls ON re.fid_tp_acc_mov = mcls.id_tp_acc_mov AND re.fid_cl_acc_mov = mcls.id_cl_acc_mov AND re.fid_cls_acc_mov = mcls.id_cls_acc_mov " +
                    "INNER JOIN erp.usru_usr AS un ON re.fid_usr_new = un.id_usr " +
                    "INNER JOIN erp.usru_usr AS ue ON re.fid_usr_edit = ue.id_usr " +
                    "INNER JOIN erp.usru_usr AS ud ON re.fid_usr_del = ud.id_usr " +
                    "LEFT OUTER JOIN erp.itmu_item AS i ON re.fid_item_n = i.id_item " +
                    (mnDetailType != SDataConstants.FINX_ACCOUNTING ? "" :
                        "LEFT OUTER JOIN erp.cfgu_cob_ent AS xe ON re.fid_cob_n = xe.id_cob AND re.fid_ent_n = xe.id_ent " +
                        "LEFT OUTER JOIN erp.bpsu_bp AS xb ON re.fid_bp_nr = xb.id_bp ") +
                     sqlWhere +
                    "ORDER BY r.dt, r.id_year, r.id_per, bkc.code, r.id_bkc, r.id_tp_rec, r.id_num ";

            resulSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resulSet.next()) {
                dDebit = resulSet.getDouble(23);
                dCredit = resulSet.getDouble(24);
                dDebitTotal += dDebit;
                dCreditTotal += dCredit;
                dBalance += (dDebit - dCredit);

                sConcept = resulSet.getString(11);

                if (mnDetailType == SDataConstants.FINX_ACCOUNTING) {
                    if (resulSet.getObject(30) != null) {
                        sConcept += "; " + resulSet.getString(30);
                    }
                    if (resulSet.getObject(31) != null) {
                        sConcept += "; " + resulSet.getString(31);
                    }
                }

                if (resulSet.getObject(29) != null) {
                    sConcept += "; " + resulSet.getString(29);
                }

                oRow = new SDialogAccountingDetailRow(miClient);
                oRow.setDate(resulSet.getDate(6));
                oRow.setConcept(resulSet.getString(7));
                oRow.setFkAccountId(resulSet.getString(10));
                oRow.setDbmsAccount(sConcept);
                oRow.setDebit(dDebit);
                oRow.setCredit(dCredit);
                oRow.setBalance(dBalance);
                oRow.setExchangeRate(resulSet.getInt(25));
                oRow.setDbmsCurrencyKey(resulSet.getString(21));
                oRow.setDbmsAccountingMoveSubclass(resulSet.getString(16));
                oRow.setPkYearId(resulSet.getInt(1));
                oRow.setPkPeriodId(resulSet.getInt(2));
                oRow.setDbmsBookkeepingCenterCode(resulSet.getString(12));
                oRow.setDbmsCompanyBranchCode(resulSet.getString(13));
                oRow.setPkRecordTypeId(resulSet.getString(4));
                oRow.setPkNumberId(resulSet.getInt(5));
                oRow.setSortingPosition(resulSet.getInt(22));
                oRow.setIsSystem(resulSet.getBoolean(8));
                oRow.setIsDeleted((resulSet.getBoolean(9)));
                oRow.setDbmsUserNew(resulSet.getString(17));
                oRow.setUserNewTs(resulSet.getTimestamp(26));
                oRow.setDbmsUserEdit(resulSet.getString(18));
                oRow.setUserEditTs(resulSet.getTimestamp(27));
                oRow.setDbmsUserDelete(resulSet.getString(19));
                oRow.setUserDeleteTs(resulSet.getTimestamp(28));
                oRow.prepareTableRow();
                moPaneDetails.addTableRow(oRow);
            }

            jtfBalanceOpening.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(dOpeningBalance));
            jtfDebit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(dDebitTotal - (dOpeningBalance >= 0 ? dOpeningBalance : 0)));
            jtfCredit.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(dCreditTotal + (dOpeningBalance >= 0 ? 0 : dOpeningBalance)));
            jtfBalanceEnding.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(dDebitTotal - dCreditTotal));

            if (moPaneDetails.getTableGuiRowCount() > 0) {
                moPaneDetails.renderTableRows();
                moPaneDetails.setTableRowSelection(0);

                jtfSeek.setEnabled(true);
                jbSeek.setEnabled(true);
                jbExportCsv.setEnabled(true);
            }

            if (!isVisible()) {
                setVisible(true);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbClose) {
                actionClose();
            }
            else if (button == jbSeek) {
                actionSeek();
            }
            else if (button == jbExportCsv) {
                actionExportCsv();
            }
            else if (button == jbRefresh) {
                actionRefresh();
            }
        }
        else if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfSeek) {
                actionSeek();
            }
        }
    }
}
