/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRecordPaymentComplete.java
 *
 * Created on 22/09/2009, 04:24:20 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mfin.data.SDataAccountCash;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SFinAccountConfigEntry;
import erp.mfin.data.SFinAccountUtilities;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.bps.db.SDbBizPartner;
import erp.mod.fin.db.SFinConsts;
import erp.mtrn.data.SDataDsm;
import erp.mtrn.data.SDataDsmEntry;
import erp.mtrn.form.SPanelDpsFinder;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.lang.reflect.Method;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibUtils;

/**
 *
 * @author Sergio Flores
 */
public class SDialogRecordPaymentComplete extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener {

    private erp.client.SClientInterface miClient;
    private int mnBizPartnerCategory;

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<SFormField> mvFields;

    private erp.lib.form.SFormField moFieldAccValueCy;
    private erp.lib.form.SFormField moFieldAccValue;
    private erp.lib.form.SFormField moFieldAccExchangeRateSys;
    private erp.lib.form.SFormField moFieldAccExchangeRate;
    private erp.lib.form.SFormField moFieldDpsValueCy;
    private erp.lib.form.SFormField moFieldDpsValue;
    private erp.lib.form.SFormField moFieldDpsExchangeRateSys;
    private erp.lib.form.SFormField moFieldDpsExchangeRate;
    private erp.mtrn.form.SPanelDpsFinder moPanelDpsFinder;
    private int[] manDpsClassKey;
    private double[] madDpsBalance;
    private erp.mtrn.data.SDataDps moDps;
    private erp.mtrn.data.SDataDps moDpsLast;
    private erp.mfin.data.SDataRecord moParamRecord;
    private erp.mfin.data.SDataAccountCash moParamAccountCash;
    private double mdParamExchangeRateToday;
    private double[] madParamAccountCashBal;

    private double mdAccValueCyTemp;
    private double mdDpsValueCyTemp;

    /** Creates new form SDialogRecordPaymentComplete
     * @param client ERP Client interface.
     * @param idBizPartnerCategory Business partner category:
     * a) SDataConstantsSys.BPSS_CT_BP_SUP
     * b) SDataConstantsSys.BPSS_CT_BP_CUS
     */
    public SDialogRecordPaymentComplete(erp.client.SClientInterface client, int idBizPartnerCategory) {
        super(client.getFrame(), true);
        miClient = client;
        mnBizPartnerCategory = idBizPartnerCategory;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtButtonGroup = new javax.swing.ButtonGroup();
        jpInput = new javax.swing.JPanel();
        jpPaymentNorth = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jtfCompanyBranchRo = new javax.swing.JTextField();
        jtfAccountCashRo = new javax.swing.JTextField();
        jtfAccountCashCodeRo = new javax.swing.JTextField();
        jtfAccountCashCurRo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        jtfDateRo = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlAccValueCy = new javax.swing.JLabel();
        jtfAccValueCy = new javax.swing.JTextField();
        jtfAccValueCyKeyRo = new javax.swing.JTextField();
        jbAccValueCy = new javax.swing.JButton();
        jbApplyPayment = new javax.swing.JButton();
        jlDummy01 = new javax.swing.JLabel();
        jlAccExchangeRateSys = new javax.swing.JLabel();
        jtfAccExchangeRateSysRo = new javax.swing.JTextField();
        jbAccExchangeRateSys = new javax.swing.JButton();
        jbAccExchangeRateAcumView = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jlAccValue = new javax.swing.JLabel();
        jtfAccValue = new javax.swing.JTextField();
        jtfAccValueKeyRo = new javax.swing.JTextField();
        jbAccValue = new javax.swing.JButton();
        jlDummy02 = new javax.swing.JLabel();
        jlAccExchangeRate = new javax.swing.JLabel();
        jtfAccExchangeRate = new javax.swing.JTextField();
        jbAccExchangeRate = new javax.swing.JButton();
        jbAccExchangeRateAcumSet = new javax.swing.JButton();
        jlDummy05 = new javax.swing.JLabel();
        jckIsExchangeRatePreserved = new javax.swing.JCheckBox();
        jpPaymentCenter = new javax.swing.JPanel();
        jlPanelDpsFinder = new javax.swing.JLabel();
        jpPaymentSouth = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDpsValueCy = new javax.swing.JLabel();
        jtfDpsValueCy = new javax.swing.JTextField();
        jtfDpsValueCyCurKeyRo = new javax.swing.JTextField();
        jbDpsValueCy = new javax.swing.JButton();
        jlDummy03 = new javax.swing.JLabel();
        jlDpsExchangeRateSys = new javax.swing.JLabel();
        jtfDpsExchangeRateSysRo = new javax.swing.JTextField();
        jbDpsExchangeRateSys = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlDpsValue = new javax.swing.JLabel();
        jtfDpsValue = new javax.swing.JTextField();
        jtfDpsValueCurKeyRo = new javax.swing.JTextField();
        jbDpsValue = new javax.swing.JButton();
        jlDummy04 = new javax.swing.JLabel();
        jlDpsExchangeRate = new javax.swing.JLabel();
        jtfDpsExchangeRate = new javax.swing.JTextField();
        jbDpsExchangeRate = new javax.swing.JButton();
        jbDpsExchangeRateCopy = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlExchangeDiff = new javax.swing.JLabel();
        jtfExchangeDiffRo = new javax.swing.JTextField();
        jtfExchangeDiffCurKeyRo = new javax.swing.JTextField();
        jpControls = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pago integral de asociado de negocios");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpInput.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpInput.setLayout(new java.awt.BorderLayout());

        jpPaymentNorth.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la cuenta de dinero:"));
        jpPaymentNorth.setLayout(new java.awt.GridLayout(4, 1, 0, 2));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccountCash.setText("Cuenta de dinero:");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel11.add(jlAccountCash);

        jtfCompanyBranchRo.setEditable(false);
        jtfCompanyBranchRo.setText("COMPANY BRANCH");
        jtfCompanyBranchRo.setFocusable(false);
        jtfCompanyBranchRo.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jtfCompanyBranchRo);

        jtfAccountCashRo.setEditable(false);
        jtfAccountCashRo.setText("CASH ACCOUNT");
        jtfAccountCashRo.setFocusable(false);
        jtfAccountCashRo.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel11.add(jtfAccountCashRo);

        jtfAccountCashCodeRo.setEditable(false);
        jtfAccountCashCodeRo.setText("CODE");
        jtfAccountCashCodeRo.setFocusable(false);
        jtfAccountCashCodeRo.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfAccountCashCodeRo);

        jtfAccountCashCurRo.setEditable(false);
        jtfAccountCashCurRo.setText("CURRENCY");
        jtfAccountCashCurRo.setFocusable(false);
        jtfAccountCashCurRo.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jtfAccountCashCurRo);

        jpPaymentNorth.add(jPanel11);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel1.add(jlDate);

        jtfDateRo.setEditable(false);
        jtfDateRo.setText("dd/mm/yyyy");
        jtfDateRo.setFocusable(false);
        jtfDateRo.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jtfDateRo);

        jpPaymentNorth.add(jPanel1);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccValueCy.setText("Monto por aplicar: *");
        jlAccValueCy.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel10.add(jlAccValueCy);

        jtfAccValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccValueCy.setText("0.00");
        jtfAccValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfAccValueCy);

        jtfAccValueCyKeyRo.setEditable(false);
        jtfAccValueCyKeyRo.setText("CUR");
        jtfAccValueCyKeyRo.setFocusable(false);
        jtfAccValueCyKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel10.add(jtfAccValueCyKeyRo);

        jbAccValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbAccValueCy.setToolTipText("Calcular");
        jbAccValueCy.setFocusable(false);
        jbAccValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbAccValueCy);

        jbApplyPayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_wizard.gif"))); // NOI18N
        jbApplyPayment.setToolTipText("Aplicar pago");
        jbApplyPayment.setFocusable(false);
        jbApplyPayment.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbApplyPayment);

        jlDummy01.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel10.add(jlDummy01);

        jlAccExchangeRateSys.setText("Tipo de cambio sistema:");
        jlAccExchangeRateSys.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlAccExchangeRateSys);

        jtfAccExchangeRateSysRo.setEditable(false);
        jtfAccExchangeRateSysRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccExchangeRateSysRo.setText("0.0000");
        jtfAccExchangeRateSysRo.setFocusable(false);
        jtfAccExchangeRateSysRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jtfAccExchangeRateSysRo);

        jbAccExchangeRateSys.setText("...");
        jbAccExchangeRateSys.setToolTipText("Seleccionar tipo de cambio");
        jbAccExchangeRateSys.setFocusable(false);
        jbAccExchangeRateSys.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbAccExchangeRateSys);

        jbAccExchangeRateAcumView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbAccExchangeRateAcumView.setToolTipText("Ver tipo de cambio acumulado");
        jbAccExchangeRateAcumView.setFocusable(false);
        jbAccExchangeRateAcumView.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbAccExchangeRateAcumView);

        jpPaymentNorth.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlAccValue.setText("Monto por aplicar (ML): *");
        jlAccValue.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel12.add(jlAccValue);

        jtfAccValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccValue.setText("0.00");
        jtfAccValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfAccValue);

        jtfAccValueKeyRo.setEditable(false);
        jtfAccValueKeyRo.setText("CUR");
        jtfAccValueKeyRo.setFocusable(false);
        jtfAccValueKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel12.add(jtfAccValueKeyRo);

        jbAccValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbAccValue.setToolTipText("Calcular");
        jbAccValue.setFocusable(false);
        jbAccValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbAccValue);

        jlDummy02.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(jlDummy02);

        jlAccExchangeRate.setText("Tipo de cambio: *");
        jlAccExchangeRate.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlAccExchangeRate);

        jtfAccExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAccExchangeRate.setText("0.0000");
        jtfAccExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jtfAccExchangeRate);

        jbAccExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbAccExchangeRate.setToolTipText("Calcular");
        jbAccExchangeRate.setFocusable(false);
        jbAccExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbAccExchangeRate);

        jbAccExchangeRateAcumSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_money.gif"))); // NOI18N
        jbAccExchangeRateAcumSet.setToolTipText("Asignar tipo de cambio acumulado");
        jbAccExchangeRateAcumSet.setFocusable(false);
        jbAccExchangeRateAcumSet.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbAccExchangeRateAcumSet);

        jlDummy05.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel12.add(jlDummy05);

        jckIsExchangeRatePreserved.setText("Conservar TC doc.");
        jckIsExchangeRatePreserved.setEnabled(false);
        jckIsExchangeRatePreserved.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jckIsExchangeRatePreserved);

        jpPaymentNorth.add(jPanel12);

        jpInput.add(jpPaymentNorth, java.awt.BorderLayout.NORTH);

        jpPaymentCenter.setLayout(new java.awt.BorderLayout());

        jlPanelDpsFinder.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jlPanelDpsFinder.setText("[Panel de búsqueda de documento de compras-ventas]");
        jlPanelDpsFinder.setPreferredSize(new java.awt.Dimension(100, 300));
        jpPaymentCenter.add(jlPanelDpsFinder, java.awt.BorderLayout.NORTH);

        jpInput.add(jpPaymentCenter, java.awt.BorderLayout.CENTER);

        jpPaymentSouth.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jpPaymentSouth.setLayout(new java.awt.GridLayout(3, 1, 0, 2));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDpsValueCy.setText("Monto aplicado: *");
        jlDpsValueCy.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel7.add(jlDpsValueCy);

        jtfDpsValueCy.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDpsValueCy.setText("0.00");
        jtfDpsValueCy.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfDpsValueCy);

        jtfDpsValueCyCurKeyRo.setEditable(false);
        jtfDpsValueCyCurKeyRo.setText("CUR");
        jtfDpsValueCyCurKeyRo.setFocusable(false);
        jtfDpsValueCyCurKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel7.add(jtfDpsValueCyCurKeyRo);

        jbDpsValueCy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDpsValueCy.setToolTipText("Calcular");
        jbDpsValueCy.setFocusable(false);
        jbDpsValueCy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDpsValueCy);

        jlDummy03.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jlDummy03);

        jlDpsExchangeRateSys.setText("Tipo de cambio de sistema:");
        jlDpsExchangeRateSys.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel7.add(jlDpsExchangeRateSys);

        jtfDpsExchangeRateSysRo.setEditable(false);
        jtfDpsExchangeRateSysRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDpsExchangeRateSysRo.setText("0.0000");
        jtfDpsExchangeRateSysRo.setFocusable(false);
        jtfDpsExchangeRateSysRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfDpsExchangeRateSysRo);

        jbDpsExchangeRateSys.setText("...");
        jbDpsExchangeRateSys.setToolTipText("Seleccionar tipo de cambio");
        jbDpsExchangeRateSys.setFocusable(false);
        jbDpsExchangeRateSys.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbDpsExchangeRateSys);

        jpPaymentSouth.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlDpsValue.setText("Monto aplicado (ML): *");
        jlDpsValue.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel8.add(jlDpsValue);

        jtfDpsValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDpsValue.setText("0.00");
        jtfDpsValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfDpsValue);

        jtfDpsValueCurKeyRo.setEditable(false);
        jtfDpsValueCurKeyRo.setText("CUR");
        jtfDpsValueCurKeyRo.setFocusable(false);
        jtfDpsValueCurKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel8.add(jtfDpsValueCurKeyRo);

        jbDpsValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDpsValue.setToolTipText("Calcular");
        jbDpsValue.setFocusable(false);
        jbDpsValue.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbDpsValue);

        jlDummy04.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jlDummy04);

        jlDpsExchangeRate.setText("Tipo de cambio: *");
        jlDpsExchangeRate.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel8.add(jlDpsExchangeRate);

        jtfDpsExchangeRate.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDpsExchangeRate.setText("0.0000");
        jtfDpsExchangeRate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jtfDpsExchangeRate);

        jbDpsExchangeRate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbDpsExchangeRate.setToolTipText("Calcular");
        jbDpsExchangeRate.setFocusable(false);
        jbDpsExchangeRate.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbDpsExchangeRate);

        jbDpsExchangeRateCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_copy.gif"))); // NOI18N
        jbDpsExchangeRateCopy.setToolTipText("Copiar tipo de cambio");
        jbDpsExchangeRateCopy.setFocusable(false);
        jbDpsExchangeRateCopy.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbDpsExchangeRateCopy);

        jpPaymentSouth.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 2, 0));

        jlExchangeDiff.setText("Diferencia cambiaria (ML):");
        jlExchangeDiff.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel9.add(jlExchangeDiff);

        jtfExchangeDiffRo.setEditable(false);
        jtfExchangeDiffRo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfExchangeDiffRo.setText("0.00");
        jtfExchangeDiffRo.setFocusable(false);
        jtfExchangeDiffRo.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfExchangeDiffRo);

        jtfExchangeDiffCurKeyRo.setEditable(false);
        jtfExchangeDiffCurKeyRo.setText("CUR");
        jtfExchangeDiffCurKeyRo.setFocusable(false);
        jtfExchangeDiffCurKeyRo.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel9.add(jtfExchangeDiffCurKeyRo);

        jpPaymentSouth.add(jPanel9);

        jpInput.add(jpPaymentSouth, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpInput, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.GridLayout(1, 2));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel1.setText("frpc");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jLabel1);

        jpControls.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel3.add(jbCancel);

        jpControls.add(jPanel3);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 589));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        Method method = null;

        switch (mnBizPartnerCategory) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                setTitle("Pago integral a proveedores");
                manDpsClassKey = SDataConstantsSys.TRNS_CL_DPS_PUR_DOC;
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                setTitle("Cobro integral a clientes");
                manDpsClassKey = SDataConstantsSys.TRNS_CL_DPS_SAL_DOC;
                break;

            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        moFieldAccValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccValueCy, jlAccValueCy);
        moFieldAccValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccValue, jlAccValue);
        moFieldAccExchangeRateSys = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfAccExchangeRateSysRo, jlAccExchangeRateSys);
        moFieldAccExchangeRateSys.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldAccExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfAccExchangeRate, jlAccExchangeRate);
        moFieldAccExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldDpsValueCy = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDpsValueCy, jlDpsValueCy);
        moFieldDpsValue = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDpsValue, jlDpsValue);
        moFieldDpsExchangeRateSys = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, false, jtfDpsExchangeRateSysRo, jlDpsExchangeRateSys);
        moFieldDpsExchangeRateSys.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());
        moFieldDpsExchangeRate = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfDpsExchangeRate, jlDpsExchangeRate);
        moFieldDpsExchangeRate.setDecimalFormat(miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat());

        mvFields = new Vector<>();
        mvFields.add(moFieldAccValueCy);
        mvFields.add(moFieldAccValue);
        mvFields.add(moFieldAccExchangeRateSys);
        mvFields.add(moFieldAccExchangeRate);
        mvFields.add(moFieldDpsValueCy);
        mvFields.add(moFieldDpsValue);
        mvFields.add(moFieldDpsExchangeRateSys);
        mvFields.add(moFieldDpsExchangeRate);

        try {
            method = SDialogRecordPaymentComplete.class.getMethod("actionDps");
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        moPanelDpsFinder = new SPanelDpsFinder(miClient, SDataConstants.TRNX_DPS_PAY_PEND, this, method);
        jpPaymentCenter.remove(jlPanelDpsFinder);
        jpPaymentCenter.add(moPanelDpsFinder, BorderLayout.NORTH);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbAccValueCy.addActionListener(this);
        jbAccValue.addActionListener(this);
        jbAccExchangeRateSys.addActionListener(this);
        jbAccExchangeRate.addActionListener(this);
        jbAccExchangeRateAcumView.addActionListener(this);
        jbAccExchangeRateAcumSet.addActionListener(this);
        jbApplyPayment.addActionListener(this);
        jbDpsValueCy.addActionListener(this);
        jbDpsValue.addActionListener(this);
        jbDpsExchangeRateSys.addActionListener(this);
        jbDpsExchangeRate.addActionListener(this);
        jbDpsExchangeRateCopy.addActionListener(this);

        jtfAccValueCy.addFocusListener(this);
        jtfAccValue.addFocusListener(this);
        jtfAccExchangeRate.addFocusListener(this);
        jtfDpsValueCy.addFocusListener(this);
        jtfDpsValue.addFocusListener(this);
        jtfDpsExchangeRate.addFocusListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jtfAccValueCy.isEnabled()) {
                jtfAccValueCy.requestFocus();
            }
            else {
                jbCancel.requestFocus();
            }
        }
    }

    private void renderSystemSettings() {
        jtfAccValueKeyRo.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfDpsValueCurKeyRo.setText(jtfAccValueKeyRo.getText());
        jtfExchangeDiffCurKeyRo.setText(jtfAccValueKeyRo.getText());
    }

    private void renderParamSettings() {
        SDataBizPartnerBranch branch = null;
        
        if (moParamAccountCash == null) {
            jtfAccValueCy.setEnabled(false);
            jtfAccValue.setEnabled(false);
            jtfAccExchangeRateSysRo.setEnabled(false);
            jtfAccExchangeRate.setEnabled(false);

            jbAccValueCy.setEnabled(false);
            jbAccValue.setEnabled(false);
            jbAccExchangeRateSys.setEnabled(false);
            jbAccExchangeRate.setEnabled(false);
            jbAccExchangeRateAcumView.setEnabled(false);
            jbAccExchangeRateAcumSet.setEnabled(false);

            jtfAccValueCy.setText("");
            jtfAccValue.setText("");
            jtfAccExchangeRateSysRo.setText("");
            jtfAccExchangeRate.setText("");

            jtfCompanyBranchRo.setText("");
            jtfAccountCashRo.setText("");
            jtfAccountCashCodeRo.setText("");
            jtfAccountCashCurRo.setText("");
            jtfDateRo.setText("");
            jtfAccValueCyKeyRo.setText("");

            jckIsExchangeRatePreserved.setEnabled(false);
            jckIsExchangeRatePreserved.setSelected(false);
        }
        else {
            branch = (SDataBizPartnerBranch) SDataUtilities.readRegistry(
                    miClient, SDataConstants.BPSU_BPB, new int[] { moParamRecord.getDbmsDataAccountCash().getPkCompanyBranchId() }, SLibConstants.EXEC_MODE_SILENT);
            
            jtfAccValueCy.setEnabled(true);

            moFieldAccValueCy.setFieldValue(0d);
            moFieldAccValue.setFieldValue(0d);

            if (miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { moParamAccountCash.getFkCurrencyId() })) {
                jtfAccValue.setEnabled(false);
                jtfAccExchangeRateSysRo.setEnabled(false);
                jtfAccExchangeRate.setEnabled(false);

                jbAccValueCy.setEnabled(false);
                jbAccValue.setEnabled(false);
                jbAccExchangeRateSys.setEnabled(false);
                jbAccExchangeRate.setEnabled(false);
                jbAccExchangeRateAcumView.setEnabled(false);
                jbAccExchangeRateAcumSet.setEnabled(false);

                moFieldAccExchangeRateSys.setFieldValue(1d);
                moFieldAccExchangeRate.setFieldValue(1d);
            }
            else {
                jtfAccValue.setEnabled(true);
                jtfAccExchangeRateSysRo.setEnabled(true);
                jtfAccExchangeRate.setEnabled(true);

                jbAccValueCy.setEnabled(true);
                jbAccValue.setEnabled(true);
                jbAccExchangeRateSys.setEnabled(true);
                jbAccExchangeRate.setEnabled(true);
                jbAccExchangeRateAcumView.setEnabled(true);
                jbAccExchangeRateAcumSet.setEnabled(true);

                moFieldAccExchangeRateSys.setFieldValue(mdParamExchangeRateToday);
                moFieldAccExchangeRate.setFieldValue(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ?
                    madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1] : mdParamExchangeRateToday);

                if (moFieldAccExchangeRate.getDouble() == 0d) {
                    moFieldAccExchangeRate.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                }
            }

            jtfCompanyBranchRo.setText(branch.getBizPartnerBranch());
            jtfAccountCashRo.setText(moParamAccountCash.getDbmsCompanyBranchEntity().getEntity());
            jtfAccountCashCodeRo.setText(moParamAccountCash.getDbmsCompanyBranchEntity().getCode());
            jtfAccountCashCurRo.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moParamAccountCash.getFkCurrencyId() }));
            jtfDateRo.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()));
            jtfAccValueCyKeyRo.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moParamAccountCash.getFkCurrencyId() }, SLibConstants.DESCRIPTION_CODE));

            jckIsExchangeRatePreserved.setEnabled(false);
            jckIsExchangeRatePreserved.setSelected(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ?
                miClient.getSessionXXX().getParamsCompany().getIsExchangeRatePurPreserved() :
                miClient.getSessionXXX().getParamsCompany().getIsExchangeRateSalPreserved());
        }
    }

    private void renderDpsSettings() {
        if (moParamAccountCash == null || moDps == null) {
            jtfDpsValueCy.setEnabled(false);
            jtfDpsValue.setEnabled(false);
            jtfDpsExchangeRateSysRo.setEnabled(false);
            jtfDpsExchangeRate.setEnabled(false);

            jbDpsValueCy.setEnabled(false);
            jbDpsValue.setEnabled(false);
            jbDpsExchangeRateSys.setEnabled(false);
            jbDpsExchangeRate.setEnabled(false);
            jbDpsExchangeRateCopy.setEnabled(false);
            jbApplyPayment.setEnabled(false);

            jtfDpsValueCy.setText("");
            jtfDpsValue.setText("");
            jtfDpsExchangeRateSysRo.setText("");
            jtfDpsExchangeRate.setText("");
            jtfExchangeDiffRo.setText("");

            jtfDpsValueCyCurKeyRo.setText("");
        }
        else {
            jtfDpsValueCy.setEnabled(true);
            jbApplyPayment.setEnabled(true);

            if (moDps.getFkCurrencyId() == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                jtfDpsValue.setEnabled(false);
                jtfDpsExchangeRateSysRo.setEnabled(false);
                jtfDpsExchangeRate.setEnabled(false);

                jbDpsValueCy.setEnabled(false);
                jbDpsValue.setEnabled(false);
                jbDpsExchangeRateSys.setEnabled(false);
                jbDpsExchangeRate.setEnabled(false);
                jbDpsExchangeRateCopy.setEnabled(false);
            }
            else {
                jtfDpsValue.setEnabled(true);
                jtfDpsExchangeRateSysRo.setEnabled(true);
                jtfDpsExchangeRate.setEnabled(true);

                jbDpsValueCy.setEnabled(true);
                jbDpsValue.setEnabled(true);
                jbDpsExchangeRateSys.setEnabled(true);
                jbDpsExchangeRate.setEnabled(true);
                jbDpsExchangeRateCopy.setEnabled(moParamAccountCash.getFkCurrencyId() == moDps.getFkCurrencyId());
            }

            jtfDpsValueCyCurKeyRo.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.CFGU_CUR, new int[] { moDps.getFkCurrencyId() }, SLibConstants.DESCRIPTION_CODE));
        }
    }

    private void updateDpsPayment() {
        double excRate = 0;

        if (moDps != null && madDpsBalance != null) {
            if (moFieldAccValueCy.getDouble() == 0) {
                // Cash account amount has not been provided:

                if (moDps.getFkCurrencyId() == moParamAccountCash.getFkCurrencyId()) {
                    // Document and cash account have the same currency:

                    if (jckIsExchangeRatePreserved.isSelected()) {
                        moFieldAccValueCy.setFieldValue(madDpsBalance[1]);
                        moFieldAccValue.setFieldValue(madDpsBalance[1] * moFieldAccExchangeRate.getDouble());
                    }
                    else {
                        moFieldAccValueCy.setFieldValue(madDpsBalance[1]);
                        moFieldAccValue.setFieldValue(madDpsBalance[0]);

                        if (moParamAccountCash.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                            moFieldAccExchangeRateSys.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);
                            moFieldAccExchangeRate.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);
                        }
                    }

                    moFieldDpsValueCy.setFieldValue(moFieldAccValueCy.getDouble());
                    moFieldDpsValue.setFieldValue(moFieldAccValue.getDouble());
                    moFieldDpsExchangeRateSys.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                    moFieldDpsExchangeRate.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                }
                else {
                    // Document and cash account have different currency:

                    if (jckIsExchangeRatePreserved.isSelected()) {
                        if (moDps.getFkCurrencyId() == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                            moFieldDpsExchangeRateSys.setFieldValue(1d);
                            moFieldDpsExchangeRate.setFieldValue(1d);
                        }
                        else {
                            try {
                                excRate = SDataUtilities.obtainExchangeRate(miClient, moDps.getFkCurrencyId(), moParamRecord.getDate());
                            }
                            catch (Exception e) {
                                SLibUtilities.renderException(this, e);
                            }

                            moFieldDpsExchangeRateSys.setFieldValue(excRate);
                            moFieldDpsExchangeRate.setFieldValue(excRate);
                        }

                        moFieldDpsValueCy.setFieldValue(madDpsBalance[1]);
                        moFieldDpsValue.setFieldValue(madDpsBalance[1] * moFieldDpsExchangeRate.getDouble());
                    }
                    else {
                        moFieldDpsExchangeRateSys.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);
                        moFieldDpsExchangeRate.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);

                        moFieldDpsValueCy.setFieldValue(madDpsBalance[1]);
                        moFieldDpsValue.setFieldValue(madDpsBalance[0]);
                    }

                    if (moFieldAccExchangeRate.getDouble() != 0) {
                        moFieldAccValue.setFieldValue(moFieldDpsValue.getDouble());
                        moFieldAccValueCy.setFieldValue(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble());
                    }
                }
            }
            else {
                // Cash account amount has been provided:

                if (moDps.getFkCurrencyId() == moParamAccountCash.getFkCurrencyId()) {
                    // Document and cash account have the same currency:

                    if (madDpsBalance[1] >= moFieldAccValueCy.getDouble()) {
                        moFieldDpsValueCy.setFieldValue(moFieldAccValueCy.getDouble());
                        moFieldDpsValue.setFieldValue(moFieldAccValue.getDouble());
                        moFieldDpsExchangeRateSys.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                        moFieldDpsExchangeRate.setFieldValue(moFieldAccExchangeRate.getDouble());
                    }
                    else {
                        moFieldDpsValueCy.setFieldValue(madDpsBalance[1]);
                        moFieldDpsValue.setFieldValue(madDpsBalance[0]);

                        if (moDps.getFkCurrencyId() == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                            moFieldDpsExchangeRateSys.setFieldValue(1d);
                            moFieldDpsExchangeRate.setFieldValue(1d);
                        }
                        else {
                            moFieldDpsExchangeRateSys.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);
                            moFieldDpsExchangeRate.setFieldValue(madDpsBalance[1] == 0d ? 0d : madDpsBalance[0] / madDpsBalance[1]);
                        }

                        moFieldAccValueCy.setFieldValue(moFieldDpsValueCy.getDouble());
                        moFieldAccValue.setFieldValue(moFieldDpsValue.getDouble());
                        moFieldAccExchangeRateSys.setFieldValue(moFieldDpsExchangeRateSys.getDouble());
                        moFieldAccExchangeRate.setFieldValue(moFieldDpsExchangeRate.getDouble());
                    }
                }
                else {
                    if (moDps.getFkCurrencyId() == miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
                        moFieldDpsExchangeRateSys.setFieldValue(1d);
                        moFieldDpsExchangeRate.setFieldValue(1d);
                    }
                    else {
                        try {
                            excRate = SDataUtilities.obtainExchangeRate(miClient, moDps.getFkCurrencyId(), moParamRecord.getDate());
                        }
                        catch (Exception e) {
                            SLibUtilities.renderException(this, e);
                        }

                        moFieldDpsExchangeRateSys.setFieldValue(excRate);
                        moFieldDpsExchangeRate.setFieldValue(excRate);
                    }

                    if (moFieldDpsExchangeRate.getDouble() != 0) {
                        moFieldDpsValue.setFieldValue(moFieldAccValue.getDouble());
                        moFieldDpsValueCy.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsExchangeRate.getDouble());
                    }
                }
            }
        }
    }

    private void updatePayment() {
        if (moParamAccountCash != null && moDps != null) {
            if (moParamAccountCash.getFkCurrencyId() == moDps.getFkCurrencyId()) {
                if (moFieldDpsValueCy.getDouble() == 0d) {
                    moFieldDpsValueCy.setFieldValue(moFieldAccValueCy.getDouble());
                    moFieldDpsValue.setFieldValue(moFieldAccValue.getDouble());
                    moFieldDpsExchangeRateSys.setFieldValue(moFieldAccExchangeRateSys.getDouble());
                    moFieldDpsExchangeRate.setFieldValue(moFieldAccExchangeRate.getDouble());
                }
            }
        }
    }

    private void updateExchangeDiff() {
        jtfExchangeDiffRo.setText(moDps == null ? "" : miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moFieldAccValue.getDouble() - moFieldDpsValue.getDouble()));
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntryAccountCash(final String concept) {
        int[] keySystemMoveType = null;
        int[] keySystemMoveTypeXXX = null;
        SDataRecordEntry entry = new SDataRecordEntry();

        if (moParamAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            keySystemMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
        }
        else {
            keySystemMoveTypeXXX = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
        }

        entry.setConcept(concept);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        entry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));

        if (mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP) {
            entry.setDebit(0);
            entry.setCredit(moFieldAccValue.getDouble());
            entry.setExchangeRate(moFieldAccExchangeRate.getDouble());
            entry.setExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
            entry.setDebitCy(0);
            entry.setCreditCy(moFieldAccValueCy.getDouble());
            keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_MO_SUP_PAY;
        }
        else {
            entry.setDebit(moFieldAccValue.getDouble());
            entry.setCredit(0);
            entry.setExchangeRate(moFieldAccExchangeRate.getDouble());
            entry.setExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
            entry.setDebitCy(moFieldAccValueCy.getDouble());
            entry.setCreditCy(0);
            keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_MI_CUS_PAY;
        }

        entry.setFkCurrencyId(moParamAccountCash.getFkCurrencyId());
        entry.setFkAccountIdXXX(moParamAccountCash.getFkAccountId());
        entry.setFkCostCenterIdXXX_n("");
        entry.setIsExchangeDifference(false);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);

        entry.setFkSystemMoveClassId(keySystemMoveType[0]);
        entry.setFkSystemMoveTypeId(keySystemMoveType[1]);

        if (moParamAccountCash.getFkAccountCashCategoryId() == SDataConstantsSys.FINS_CT_ACC_CASH_CASH) {
            entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[0]);
            entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_CSH[1]);
        }
        else {
            entry.setFkSystemAccountClassId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[0]);
            entry.setFkSystemAccountTypeId(SModSysConsts.FINS_TP_SYS_ACC_ENT_CSH_BNK[1]);
        }

        entry.setFkSystemMoveCategoryIdXXX(keySystemMoveTypeXXX[0]);
        entry.setFkSystemMoveTypeIdXXX(keySystemMoveTypeXXX[1]);

        entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { moParamAccountCash.getFkAccountId() }));
        entry.setDbmsAccountComplement(moParamAccountCash.getDbmsCompanyBranchEntity().getEntity());
        entry.setDbmsCostCenter_n("");
        entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moParamAccountCash.getFkCurrencyId() }));

        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);

        entry.setFkBizPartnerId_nr(moDps.getFkBizPartnerId_r());
        entry.setFkBizPartnerBranchId_n(moDps.getFkBizPartnerBranchId());

        entry.setFkCompanyBranchId_n(moParamAccountCash.getPkCompanyBranchId());
        entry.setFkEntityId_n(moParamAccountCash.getPkAccountCashId());
        entry.setUnits(0d);
        entry.setFkItemId_n(0);
        entry.setFkItemAuxId_n(0);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(moDps.getPkYearId());
        entry.setFkDpsDocId_n(moDps.getPkDocId());
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);

        return entry;
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntryXrtDiff(final String concept, final double xrtDiff) {
        int[] keySystemMoveType = null;
        int[] keySystemAccountType = null;
        SDataRecordEntry entry = new SDataRecordEntry();
        
        entry.setConcept(concept);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

        entry.setDbmsAccountingMoveSubclass(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL));

        if (mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP) {
            // Payment:

            keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;

            if (xrtDiff > 0) {
                entry.setDebit(xrtDiff);
                entry.setCredit(0);
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(xrtDiff);
                entry.setCreditCy(0);
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceExpenseId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_DEC_EXR;
            }
            else {
                entry.setDebit(0);
                entry.setCredit(Math.abs(xrtDiff));
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(0);
                entry.setCreditCy(Math.abs(xrtDiff));
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceIncomeId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_INC_EXR;
            }
        }
        else {
            // Collect:

            keySystemAccountType = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;

            if (xrtDiff > 0) {
                entry.setDebit(xrtDiff);
                entry.setCredit(0);
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(xrtDiff);
                entry.setCreditCy(0);
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceExpenseId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceExpenseId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_INC_EXR;
            }
            else {
                entry.setDebit(0);
                entry.setCredit(Math.abs(xrtDiff));
                entry.setExchangeRate(1);
                entry.setExchangeRateSystem(1);
                entry.setDebitCy(0);
                entry.setCreditCy(Math.abs(xrtDiff));
                entry.setFkAccountIdXXX(miClient.getSessionXXX().getParamsCompany().getFkAccountDifferenceIncomeId_n());
                entry.setFkItemId_n(miClient.getSessionXXX().getParamsCompany().getFkItemDifferenceIncomeId_n());
                keySystemMoveType = SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_DEC_EXR;
            }
        }

        entry.setFkCurrencyId(moDps.getFkCurrencyId());
        entry.setFkCostCenterIdXXX_n("");
        entry.setIsExchangeDifference(true);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);

        entry.setFkSystemMoveClassId(keySystemMoveType[0]);
        entry.setFkSystemMoveTypeId(keySystemMoveType[1]);
        entry.setFkSystemAccountClassId(keySystemAccountType[0]);
        entry.setFkSystemAccountTypeId(keySystemAccountType[1]);
        entry.setFkSystemMoveCategoryIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[0]);
        entry.setFkSystemMoveTypeIdXXX(SDataConstantsSys.FINS_TP_SYS_MOV_NA[1]);

        entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { entry.getFkAccountIdXXX() }));
        entry.setDbmsAccountComplement("");
        entry.setDbmsCostCenter_n("");
        entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { moDps.getFkCurrencyId() }));

        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);

        entry.setFkBizPartnerId_nr(moDps.getFkBizPartnerId_r());
        entry.setFkBizPartnerBranchId_n(moDps.getFkBizPartnerBranchId());

        entry.setFkCompanyBranchId_n(moParamAccountCash.getPkCompanyBranchId());
        entry.setFkEntityId_n(moParamAccountCash.getPkAccountCashId());
        entry.setFkTaxBasicId_n(0);
        entry.setFkTaxId_n(0);
        entry.setUnits(0d);
        entry.setFkItemId_n(0);
        entry.setFkItemAuxId_n(0);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(moDps.getPkYearId());
        entry.setFkDpsDocId_n(moDps.getPkDocId());
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);

        return entry;
    }

    private void focusLostAccValueCy() {
        if (moFieldAccValue.getDouble() == 0d || !jtfAccValue.isEnabled() || mdAccValueCyTemp != moFieldAccValueCy.getDouble()) {
            moFieldAccValue.setFieldValue(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccExchangeRate.getDouble() == 0d && moFieldAccValueCy.getDouble() != 0d) {
            moFieldAccExchangeRate.setFieldValue(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble());
        }

        updatePayment();
        updateExchangeDiff();
    }

    private void focusLostAccValue() {
        if (moFieldAccValueCy.getDouble() == 0 && moFieldAccExchangeRate.getDouble() != 0d) {
            moFieldAccValueCy.setFieldValue(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccExchangeRate.getDouble() == 0d && moFieldAccValueCy.getDouble() != 0d) {
            moFieldAccExchangeRate.setFieldValue(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble());
        }

        updatePayment();
        updateExchangeDiff();
    }

    private void focusLostAccExchangeRate() {
        if (moFieldAccValueCy.getDouble() == 0 && moFieldAccExchangeRate.getDouble() != 0d) {
            moFieldAccValueCy.setFieldValue(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble());
        }
        else if (moFieldAccValue.getDouble() == 0d) {
            moFieldAccValue.setFieldValue(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble());
        }

        updatePayment();
        updateExchangeDiff();
    }

    private void focusLostDpsValueCy() {
        if (moFieldDpsValue.getDouble() == 0d || !jtfDpsValue.isEnabled() || mdDpsValueCyTemp != moFieldDpsValueCy.getDouble()) {
            moFieldDpsValue.setFieldValue(moFieldDpsValueCy.getDouble() * moFieldDpsExchangeRate.getDouble());
        }
        else if (moFieldDpsExchangeRate.getDouble() == 0d && moFieldDpsValueCy.getDouble() != 0d) {
            moFieldDpsExchangeRate.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsValueCy.getDouble());
        }

        updateExchangeDiff();
    }

    private void focusLostDpsValue() {
        if (moFieldDpsValueCy.getDouble() == 0 && moFieldDpsExchangeRate.getDouble() != 0d) {
            moFieldDpsValueCy.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsExchangeRate.getDouble());
        }
        else if (moFieldDpsExchangeRate.getDouble() == 0d && moFieldDpsValueCy.getDouble() != 0d) {
            moFieldDpsExchangeRate.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsValueCy.getDouble());
        }

        updateExchangeDiff();
    }

    private void focusLostDpsExchangeRate() {
        if (moFieldDpsValueCy.getDouble() == 0 && moFieldDpsExchangeRate.getDouble() != 0d) {
            moFieldDpsValueCy.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsExchangeRate.getDouble());
        }
        else if (moFieldDpsValue.getDouble() == 0d) {
            moFieldDpsValue.setFieldValue(moFieldDpsValueCy.getDouble() * moFieldDpsExchangeRate.getDouble());
        }

        updateExchangeDiff();
    }

    private void actionAccValueCy() {
        if (moFieldAccExchangeRate.getDouble() == 0d) {
            moFieldAccExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldAccValueCy.setFieldValue(SLibUtilities.round(moFieldAccValue.getDouble() / moFieldAccExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldAccValueCy.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionAccValue() {
        if (moFieldAccExchangeRate.getDouble() == 0d) {
            moFieldAccExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldAccValue.setFieldValue(SLibUtilities.round(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldAccValue.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionAccExchangeRateSys() {
        double rate = miClient.pickExchangeRate(moParamAccountCash.getFkCurrencyId(), moParamRecord.getDate());

        if (rate != 0d) {
            moFieldAccExchangeRateSys.setFieldValue(rate);
            moFieldAccExchangeRate.setFieldValue(rate);
            moFieldAccExchangeRate.getComponent().requestFocus();
        }
    }

    private void actionAccExchangeRate() {
        if (moFieldAccValueCy.getDouble() != 0d) {
            if (moFieldAccValue.getDouble() == 0d) {
                moFieldAccValue.getComponent().requestFocus();
            }
            else {
                moFieldAccExchangeRate.setFieldValue(SLibUtilities.round(moFieldAccValue.getDouble() / moFieldAccValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
                moFieldAccExchangeRate.getComponent().requestFocus();
            }
        }
        else if (moFieldAccValue.getDouble() != 0d) {
            moFieldAccValue.getComponent().requestFocus();
        }
        else {
            moFieldAccExchangeRate.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionAccExchangeRateAcumView() {
        miClient.showMsgBoxInformation(
                "Tipo de cambio acumulado al día: " + miClient.getSessionXXX().getFormatters().getDateFormat().format(moParamRecord.getDate()) + "\n" +
                "Saldo " + miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey() + ": $ " +
                miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(madParamAccountCashBal[0]) + ".\n" +
                "Saldo " + jtfAccValueCyKeyRo.getText() + ": $ " +
                miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(madParamAccountCashBal[1]) + ".\n" +
                "Tipo de cambio acumulado: " + miClient.getSessionXXX().getFormatters().getDecimalsExchangeRateFormat().format(madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1]) + ".");
    }

    private void actionAccExchangeRateAcumSet() {
        moFieldAccExchangeRate.setFieldValue(madParamAccountCashBal[1] == 0d ? 0d : madParamAccountCashBal[0] / madParamAccountCashBal[1]);
        moFieldAccExchangeRate.getComponent().requestFocus();
    }

    private void actionApplyPayment() {
        if (moFieldAccExchangeRate.getDouble() == 0) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlAccExchangeRate.getText() + "'");
            if (jtfAccExchangeRate.isEnabled()) {
                jtfAccExchangeRate.requestFocus();
            }
        }
        else if (moFieldDpsExchangeRate.getDouble() == 0) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDpsExchangeRate.getText() + "'");
            if (jtfDpsExchangeRate.isEnabled()) {
                jtfDpsExchangeRate.requestFocus();
            }
        }
        else {
            moFieldAccValue.setFieldValue(moFieldAccValueCy.getDouble() * moFieldAccExchangeRate.getDouble());

            moFieldDpsValue.setFieldValue(moFieldAccValue.getDouble());
            moFieldDpsValueCy.setFieldValue(moFieldDpsValue.getDouble() / moFieldDpsExchangeRate.getDouble());

            jtfAccValueCy.requestFocus();

            updateExchangeDiff();
        }
    }

    private void actionDpsValueCy() {
        if (moFieldDpsExchangeRate.getDouble() == 0d) {
            moFieldDpsExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldDpsValueCy.setFieldValue(SLibUtilities.round(moFieldDpsValue.getDouble() / moFieldDpsExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldDpsValueCy.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionDpsValue() {
        if (moFieldDpsExchangeRate.getDouble() == 0d) {
            moFieldDpsExchangeRate.getComponent().requestFocus();
        }
        else {
            moFieldDpsValue.setFieldValue(SLibUtilities.round(moFieldDpsValueCy.getDouble() * moFieldDpsExchangeRate.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsValue()));
            moFieldDpsValue.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionDpsExchangeRateSys() {
        double rate = miClient.pickExchangeRate(moDps.getFkCurrencyId(), moParamRecord.getDate());

        if (rate != 0d) {
            moFieldDpsExchangeRateSys.setFieldValue(rate);
            moFieldDpsExchangeRate.setFieldValue(rate);
            moFieldDpsExchangeRate.getComponent().requestFocus();
        }
    }

    private void actionDpsExchangeRate() {
        if (moFieldDpsValueCy.getDouble() != 0d) {
            if (moFieldDpsValue.getDouble() == 0d) {
                moFieldDpsValue.getComponent().requestFocus();
            }
            else {
                moFieldDpsExchangeRate.setFieldValue(SLibUtilities.round(moFieldDpsValue.getDouble() / moFieldDpsValueCy.getDouble(),
                    miClient.getSessionXXX().getParamsErp().getDecimalsExchangeRate()));
                moFieldDpsExchangeRate.getComponent().requestFocus();
            }
        }
        else if (moFieldDpsValue.getDouble() != 0d) {
            moFieldDpsValue.getComponent().requestFocus();
        }
        else {
            moFieldDpsExchangeRate.getComponent().requestFocus();
        }

        updateExchangeDiff();
    }

    private void actionDpsExchangeRateCopy() {
        moFieldDpsExchangeRate.setFieldValue(moFieldAccExchangeRate.getDouble());
        moFieldDpsExchangeRate.getComponent().requestFocus();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (!validation.getMessage().isEmpty()) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void actionDps() {
        moDps = moPanelDpsFinder.getDps();
        madDpsBalance = moPanelDpsFinder.getDpsBalance();

        if (moDps == null || moDpsLast == null || !SLibUtilities.compareKeys(moDps.getPrimaryKey(), moDpsLast.getPrimaryKey())) {
            moDpsLast = moDps;  // prevent from rendering same document twice
            renderDpsSettings();
            updateDpsPayment();
            updateExchangeDiff();
            jtfDpsValueCy.requestFocus();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAccExchangeRate;
    private javax.swing.JButton jbAccExchangeRateAcumSet;
    private javax.swing.JButton jbAccExchangeRateAcumView;
    private javax.swing.JButton jbAccExchangeRateSys;
    private javax.swing.JButton jbAccValue;
    private javax.swing.JButton jbAccValueCy;
    private javax.swing.JButton jbApplyPayment;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDpsExchangeRate;
    private javax.swing.JButton jbDpsExchangeRateCopy;
    private javax.swing.JButton jbDpsExchangeRateSys;
    private javax.swing.JButton jbDpsValue;
    private javax.swing.JButton jbDpsValueCy;
    private javax.swing.JButton jbOk;
    private javax.swing.ButtonGroup jbtButtonGroup;
    private javax.swing.JCheckBox jckIsExchangeRatePreserved;
    private javax.swing.JLabel jlAccExchangeRate;
    private javax.swing.JLabel jlAccExchangeRateSys;
    private javax.swing.JLabel jlAccValue;
    private javax.swing.JLabel jlAccValueCy;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDpsExchangeRate;
    private javax.swing.JLabel jlDpsExchangeRateSys;
    private javax.swing.JLabel jlDpsValue;
    private javax.swing.JLabel jlDpsValueCy;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy02;
    private javax.swing.JLabel jlDummy03;
    private javax.swing.JLabel jlDummy04;
    private javax.swing.JLabel jlDummy05;
    private javax.swing.JLabel jlExchangeDiff;
    private javax.swing.JLabel jlPanelDpsFinder;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpInput;
    private javax.swing.JPanel jpPaymentCenter;
    private javax.swing.JPanel jpPaymentNorth;
    private javax.swing.JPanel jpPaymentSouth;
    private javax.swing.JTextField jtfAccExchangeRate;
    private javax.swing.JTextField jtfAccExchangeRateSysRo;
    private javax.swing.JTextField jtfAccValue;
    private javax.swing.JTextField jtfAccValueCy;
    private javax.swing.JTextField jtfAccValueCyKeyRo;
    private javax.swing.JTextField jtfAccValueKeyRo;
    private javax.swing.JTextField jtfAccountCashCodeRo;
    private javax.swing.JTextField jtfAccountCashCurRo;
    private javax.swing.JTextField jtfAccountCashRo;
    private javax.swing.JTextField jtfCompanyBranchRo;
    private javax.swing.JTextField jtfDateRo;
    private javax.swing.JTextField jtfDpsExchangeRate;
    private javax.swing.JTextField jtfDpsExchangeRateSysRo;
    private javax.swing.JTextField jtfDpsValue;
    private javax.swing.JTextField jtfDpsValueCurKeyRo;
    private javax.swing.JTextField jtfDpsValueCy;
    private javax.swing.JTextField jtfDpsValueCyCurKeyRo;
    private javax.swing.JTextField jtfExchangeDiffCurKeyRo;
    private javax.swing.JTextField jtfExchangeDiffRo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moPanelDpsFinder.resetPanel();
        moPanelDpsFinder.setDpsClassKey(manDpsClassKey);
        madDpsBalance = null;
        moDps = null;
        moDpsLast = null;
        moParamRecord = null;
        moParamAccountCash = null;
        mdParamExchangeRateToday = 0;
        madParamAccountCashBal = null;

        for (SFormField field : mvFields) {
            field.resetField();
        }

        renderSystemSettings();
        renderParamSettings();
        renderDpsSettings();
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        String msg = "";
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }
        
        if (!validation.getIsError()) {
            validation = moPanelDpsFinder.validatePanel();

            if (!validation.getIsError()) {
                try {
                    Vector<SFinAccountConfigEntry> config = SFinAccountUtilities.obtainBizPartnerAccountConfigs(miClient, moDps.getFkBizPartnerId_r(), mnBizPartnerCategory,
                            moParamRecord.getPkBookkeepingCenterId(), moParamRecord.getDate(), SDataConstantsSys.FINS_TP_ACC_BP_OP, moDps.getFkDpsCategoryId() == SDataConstantsSys.TRNS_CT_DPS_SAL, null);
                    if (config == null || config.isEmpty()) {
                        validation.setMessage("No se encontró o no está configurada la cuenta contable del asociado de negocios.");
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
                
                if (!validation.getIsError()) {
                    msg = SDataUtilities.validateExchangeRate(miClient, moFieldAccValueCy.getDouble(), moFieldAccExchangeRate.getDouble(), moFieldAccValue.getDouble(), jlAccValueCy.getText());

                    if (msg.length() > 0) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                            validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlAccValueCy.getText() + "'.");
                            validation.setComponent(jtfAccValueCy);
                        }
                    }

                    if (!validation.getIsError()) {
                        msg = SDataUtilities.validateExchangeRate(miClient, moFieldDpsValueCy.getDouble(), moFieldDpsExchangeRate.getDouble(), moFieldDpsValue.getDouble(), jlDpsValueCy.getText());

                        if (msg.length() > 0) {
                            if (miClient.showMsgBoxConfirm(msg + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlDpsValueCy.getText() + "'.");
                                validation.setComponent(jtfDpsValueCy);
                            }
                        }

                        if (!validation.getIsError()) {
                            if (SLibUtils.roundAmount(moFieldAccValue.getDouble()) != SLibUtils.roundAmount(moFieldDpsValue.getDouble())) {
                                if (miClient.showMsgBoxConfirm("El valor de los campos '" + jlAccValue.getText() + "' y '" + jlDpsValue.getText() + "' es diferente." + "\n" + SLibConstants.MSG_CNF_MSG_CONT) != JOptionPane.YES_OPTION) {
                                    validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlDpsValueCy.getText() + "'.");
                                    validation.setComponent(jtfDpsValueCy);
                                }
                            }

                            if (!validation.getIsError()) {
                                if (madDpsBalance == null) {
                                    validation.setMessage("No fue posible obtener el saldo del documento.");
                                }

                                if (!validation.getIsError()) {
                                    if (moFieldDpsValueCy.getDouble() > madDpsBalance[1]) {
                                        msg = "El valor del campo '" + jlDpsValueCy.getText() + "' no debería ser mayor al saldo del documento en " + jtfDpsValueCyCurKeyRo.getText() + ".\n" +
                                                "Existe una diferencia de " + SLibUtils.getDecimalFormatAmount().format(Math.abs(moFieldDpsValueCy.getDouble() - madDpsBalance[1])) + ".\n" + SLibConstants.MSG_CNF_MSG_CONT;
                                        if (miClient.showMsgBoxConfirm(msg) != JOptionPane.YES_OPTION) {
                                            msg = "El valor del campo '" + jlDpsValueCy.getText() + "' debe ser menor o igual a " +
                                                    SLibUtils.getDecimalFormatAmount().format(madDpsBalance[1]) + " " + jtfDpsValueCyCurKeyRo.getText() + ".\n";
                                            validation.setMessage(msg);
                                            if (jtfDpsValueCy.isEnabled()) {
                                                validation.setComponent(jtfDpsValueCy);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataRecord record = new SDataRecord();
        String concept = "";
        String accountOpId = "";

        // Get accounting configuration:

        try {
            Vector<SFinAccountConfigEntry> config = SFinAccountUtilities.obtainBizPartnerAccountConfigs(miClient, moDps.getFkBizPartnerId_r(), mnBizPartnerCategory,
                    moParamRecord.getPkBookkeepingCenterId(), moParamRecord.getDate(), SDataConstantsSys.FINS_TP_ACC_BP_OP, moDps.getFkDpsCategoryId() == SDataConstantsSys.TRNS_CT_DPS_SAL, null);
            if (config.size() > 0) {
                accountOpId = config.get(0).getAccountId();
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
            return null;
        }

        /*
         * ADVERTENCIA DE CÓDIGO FUENTE ESPEJEADO:
         * Este mismo algoritmo está en los métodos getRegistry() de las clases SDialogRecordPayment y SDialogRecordPaymentMultiple.
         * ¡Sin embargo, el algoritmo de esta clase SDialogRecordPaymentComplete aún carece de la diferenciación de pagos por agrupación de impuestos!
         * ¡Cualquier modificación realizado en este código fuente, hay que espejearlo con las clases mencionadas!
         *
         * 2024-08-15, Sergio Flores: Revisión y espejeo de este código fuente contra el de las clases mencionadas, ¡porque no eran iguales entre sí!
         */

        ////////////////////////////////////////////////////////////////////////
        // ¡El código fuente espejeado empieza aquí!
        ////////////////////////////////////////////////////////////////////////

        // DSM entry:

        SDataDsmEntry dsmEntry = new SDataDsmEntry();

        dsmEntry.setPkYearId(miClient.getSessionXXX().getWorkingYear());
        dsmEntry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        dsmEntry.setUserNewTs(miClient.getSessionXXX().getSystemDate());

        // settings of account cash:

        dsmEntry.setSourceReference("");
        dsmEntry.setFkSourceCurrencyId(moParamAccountCash.getFkCurrencyId());
        dsmEntry.setSourceValueCy(moFieldAccValueCy.getDouble());
        dsmEntry.setSourceValue(moFieldAccValue.getDouble());
        dsmEntry.setSourceExchangeRateSystem(moFieldAccExchangeRateSys.getDouble());
        dsmEntry.setSourceExchangeRate(moFieldAccExchangeRate.getDouble());

        // settings of document:

        dsmEntry.setFkDestinyDpsYearId_n(moDps.getPkYearId());
        dsmEntry.setFkDestinyDpsDocId_n(moDps.getPkDocId());
        dsmEntry.setFkDestinyCurrencyId(moDps.getFkCurrencyId());
        dsmEntry.setDestinyValueCy(moFieldDpsValueCy.getDouble());
        dsmEntry.setDestinyValue(moFieldDpsValue.getDouble());
        dsmEntry.setDestinyExchangeRateSystem(moFieldDpsExchangeRateSys.getDouble() != 0 ? moFieldDpsExchangeRateSys.getDouble() : moFieldDpsExchangeRate.getDouble());
        dsmEntry.setDestinyExchangeRate(moFieldDpsExchangeRate.getDouble());
        dsmEntry.setDbmsFkDpsCategoryId(moDps.getFkDpsCategoryId());
        dsmEntry.setDbmsDestinyDps(moDps.getDpsNumber());
        dsmEntry.setDbmsSubclassMove(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_CLS_ACC_MOV, SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP));
        dsmEntry.setDbmsBizPartner(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { moDps.getFkBizPartnerId_r() }));
        dsmEntry.setDbmsDestinyTpDps(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.TRNU_TP_DPS, new int[] { moDps.getFkDpsCategoryId(), moDps.getFkDpsClassId(), moDps.getFkDpsTypeId() }, SLibConstants.DESCRIPTION_CODE));

        dsmEntry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[0]);
        dsmEntry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[1]);
        dsmEntry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_SUBSYS_PAY_APP[2]);
        dsmEntry.setDbmsCtSysMovId(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[0] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[0]);
        dsmEntry.setDbmsTpSysMovId(mnBizPartnerCategory == SDataConstantsSys.BPSS_CT_BP_SUP ? SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP[1] : SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS[1]);
        dsmEntry.setFkBizPartnerId(moDps.getFkBizPartnerId_r());
        dsmEntry.setDbmsFkBizPartnerBranchId_n(moDps.getFkBizPartnerBranchId());
        dsmEntry.setDbmsAccountOp(accountOpId);

        // DSM:

        SDataDsm dsm = new SDataDsm();
        dsm.setDbmsSubsystemTypeBiz(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSS_CT_BP, new int[] { mnBizPartnerCategory }, SLibConstants.DESCRIPTION_CODE));

        switch (mnBizPartnerCategory) {
            case SDataConstantsSys.BPSS_CT_BP_SUP:
                dsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_SUP);
                break;
            case SDataConstantsSys.BPSS_CT_BP_CUS:
                dsm.setDbmsPkRecordTypeId(SDataConstantsSys.FINU_TP_REC_SUBSYS_CUS);
                break;
            default:
                // do nothing
        }

        int branchId = moParamRecord.getFkCompanyBranchId_n() != 0 ? moParamRecord.getFkCompanyBranchId_n() : moParamRecord.getFkCompanyBranchId();
        SDataBizPartnerBranch branch = miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsBizPartnerBranch(new int[] { branchId });

        dsm.setDbmsErpTaxModel(miClient.getSessionXXX().getParamsErp().getTaxModel());
        dsm.setDate(miClient.getSessionXXX().getWorkingDate());
        dsm.setFkSubsystemCategoryId(mnBizPartnerCategory);
        dsm.setFkCompanyBranchId(branchId);
        dsm.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        dsm.setDbmsFkCompanyBranch(miClient.getSessionXXX().getCompany().getDbmsDataCompany().getDbmsBizPartnerBranchHq().getPkBizPartnerBranchId());
        dsm.setDbmsCompanyBranchCode(branch.getCode());
        dsm.setDbmsErpDecimalsValue(miClient.getSessionXXX().getParamsErp().getDecimalsValue());
        dsm.setDbmsIsRecordSaved(false);
        dsm.getDbmsEntries().add(dsmEntry); // WARNING: difference in mirrowed source code: only one entry!

        try {
            dsm = (SDataDsm) miClient.getGuiModule(SDataConstants.MOD_FIN).processRegistry(dsm);
            Vector<SDataRecordEntry> entries = new Vector<>(dsm.getDbmsRecord().getDbmsRecordEntries());

            concept = SFinConsts.TXT_INVOICE + " " + moDps.getDpsNumber() + " ";
            concept += miClient.getSession().readField(SModConsts.BPSU_BP, new int[] { moDps.getFkBizPartnerId_r() }, SDbBizPartner.FIELD_NAME_COMM).toString();

            for (SDataRecordEntry entry : entries) {
                entry.setConcept(concept);
                entry.setDbmsAccount(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_ACC, new Object[] { entry.getFkAccountIdXXX() }));
                entry.setDbmsCurrencyKey(miClient.getSession().getSessionCustom().getCurrencyCode(new int[] { entry.getFkCurrencyId() }));

                if (entry.getFkSystemMoveCategoryIdXXX() == SDataConstantsSys.FINS_CT_SYS_MOV_BPS) {
                    entry.setDbmsAccountComplement(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BP, new int[] { moDps.getFkBizPartnerId_r() }));
                    //entry.setAuxCheckNumber(...); // not required, but preserved for consistence with mirrowed source code!
                }
            }

            record.getDbmsRecordEntries().addAll(entries);
        }
        catch(Exception e) {
            SLibUtilities.renderException(this, e);
            return null;
        }

        ////////////////////////////////////////////////////////////////////////
        // ¡El código fuente espejeado termina aquí!
        ////////////////////////////////////////////////////////////////////////

        // Check if an exchange-rate-difference entry is needed:

        if (moDps.getFkCurrencyId() != miClient.getSessionXXX().getParamsErp().getFkCurrencyId()) {
            double xrtDiff = SLibUtils.roundAmount(moFieldAccValue.getDouble() - moFieldDpsValue.getDouble());

            if (xrtDiff != 0) {
                record.getDbmsRecordEntries().add(createRecordEntryXrtDiff(concept, xrtDiff));
            }
        }

        // Cash account entry:

        record.getDbmsRecordEntries().insertElementAt(createRecordEntryAccountCash(concept), 0);

        return record;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SDataConstants.FIN_ACC_CASH:
                moParamRecord = (SDataRecord) ((Object[]) value)[0];
                moParamAccountCash = (SDataAccountCash) ((Object[]) value)[1];
                mdParamExchangeRateToday = (Double) ((Object[]) value)[2];
                madParamAccountCashBal = (double[]) ((Object[]) value)[3];
                renderParamSettings();
                break;

            default:
                // do nothing
        }
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbAccValueCy) {
                actionAccValueCy();
            }
            else if (button == jbAccValue) {
                actionAccValue();
            }
            else if (button == jbAccExchangeRateSys) {
                actionAccExchangeRateSys();
            }
            else if (button == jbAccExchangeRate) {
                actionAccExchangeRate();
            }
            else if (button == jbAccExchangeRateAcumView) {
                actionAccExchangeRateAcumView();
            }
            else if (button == jbAccExchangeRateAcumSet) {
                actionAccExchangeRateAcumSet();
            }
            else if (button == jbApplyPayment) {
                actionApplyPayment();
            }
            else if (button == jbDpsValueCy) {
                actionDpsValueCy();
            }
            else if (button == jbDpsValue) {
                actionDpsValue();
            }
            else if (button == jbDpsExchangeRateSys) {
                actionDpsExchangeRateSys();
            }
            else if (button == jbDpsExchangeRate) {
                actionDpsExchangeRate();
            }
            else if (button == jbDpsExchangeRateCopy) {
                actionDpsExchangeRateCopy();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfAccValueCy) {
                mdAccValueCyTemp = moFieldAccValueCy.getDouble();
            }
            else if (textField == jtfDpsValueCy) {
                mdDpsValueCyTemp = moFieldDpsValueCy.getDouble();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfAccValueCy) {
                focusLostAccValueCy();
            }
            else if (textField == jtfAccValue) {
                focusLostAccValue();
            }
            else if (textField == jtfAccExchangeRate) {
                focusLostAccExchangeRate();
            }
            else if (textField == jtfDpsValueCy) {
                focusLostDpsValueCy();
            }
            else if (textField == jtfDpsValue) {
                focusLostDpsValue();
            }
            else if (textField == jtfDpsExchangeRate) {
                focusLostDpsExchangeRate();
            }
        }
    }
}
