/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.form.SFormComponentItemPicker;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mfin.data.SDataAccountBizPartner;
import erp.mfin.data.SDataAccountBizPartnerBp;
import erp.mfin.data.SDataAccountBizPartnerBpRow;
import erp.mfin.data.SDataAccountBizPartnerBpType;
import erp.mfin.data.SDataAccountBizPartnerBpTypeRow;
import erp.mfin.data.SDataAccountBizPartnerEntry;
import erp.mfin.data.SDataAccountBizPartnerEntryRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author  Sergio Flores
 */
public class SFormAccountBizPartner extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private static final int ALL = 0;
    private static final int DBT = 1;
    private static final int CDT = 2;

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mfin.data.SDataAccountBizPartner moAccountBizPartner;
    private erp.lib.form.SFormField moFieldAccountBizPartner;
    private erp.lib.form.SFormField moFieldIsDeleted;
    private erp.lib.table.STablePane moPaneEntries;
    private erp.lib.table.STablePane moPaneBizPartnerTypes;
    private erp.lib.table.STablePane moPaneBizPartners;
    private erp.mfin.form.SFormAccountBizPartnerEntry moFormEntry;
    private erp.mfin.form.SFormAccountBizPartnerBpType moFormBizPartnerType;
    private erp.mfin.form.SFormAccountBizPartnerBp moFormBizPartner;
    private erp.form.SFormComponentItemPicker moComponentItemPicker;

    private int[] manAccountTypes;
    private java.lang.String msEmptyAccountId;
    private java.lang.String msEmptyCostCenterId;
    private java.lang.String msTextAll;
    private java.lang.String msTextDbt;
    private java.lang.String msTextCdt;

    /** Creates new form DFormAccountBizPartner */
    public SFormAccountBizPartner(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FIN_ACC_BP;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtpTabbedPane = new javax.swing.JTabbedPane();
        jpAccountBizPartner = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlAccountBizPartner = new javax.swing.JLabel();
        jtfAccountBizPartner = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpEntries = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jbEntryNew = new javax.swing.JButton();
        jbEntryEdit = new javax.swing.JButton();
        jbEntryDelete = new javax.swing.JButton();
        jpBizPartnerTypes = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jbBizPartnerTypeNew = new javax.swing.JButton();
        jbBizPartnerTypeEdit = new javax.swing.JButton();
        jbBizPartnerTypeDelete = new javax.swing.JButton();
        jpBizPartners = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jbBizPartnerNew = new javax.swing.JButton();
        jbBizPartnerEdit = new javax.swing.JButton();
        jbBizPartnerDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Paquete de configuración de cuentas contables para asociados de negocios"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpAccountBizPartner.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel13.setLayout(new java.awt.GridLayout(1, 2, 5, 5));

        jPanel1.setLayout(new java.awt.GridLayout(2, 2, 5, 5));

        jPanel4.setLayout(new java.awt.BorderLayout());

        jlAccountBizPartner.setText("Paquete de configuración: *");
        jlAccountBizPartner.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel4.add(jlAccountBizPartner, java.awt.BorderLayout.LINE_START);

        jtfAccountBizPartner.setText("ACCOUNT");
        jPanel4.add(jtfAccountBizPartner, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jlDummy01.setPreferredSize(new java.awt.Dimension(150, 20));
        jPanel5.add(jlDummy01, java.awt.BorderLayout.LINE_START);

        jckIsDeleted.setText("Registro eliminado");
        jPanel5.add(jckIsDeleted, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel5);

        jPanel13.add(jPanel1);

        jpAccountBizPartner.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración de cuentas contables:"));
        jpEntries.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbEntryNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbEntryNew.setToolTipText("Crear");
        jbEntryNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbEntryNew);

        jbEntryEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEntryEdit.setToolTipText("Modificar");
        jbEntryEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbEntryEdit);

        jbEntryDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbEntryDelete.setToolTipText("Eliminar");
        jbEntryDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbEntryDelete);

        jpEntries.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jpAccountBizPartner.add(jpEntries, java.awt.BorderLayout.CENTER);

        jtpTabbedPane.addTab("Cuentas contables", jpAccountBizPartner);

        jpBizPartnerTypes.setBorder(javax.swing.BorderFactory.createTitledBorder("Asignación de cuentas contables:"));
        jpBizPartnerTypes.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbBizPartnerTypeNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbBizPartnerTypeNew.setToolTipText("Crear");
        jbBizPartnerTypeNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbBizPartnerTypeNew);

        jbBizPartnerTypeEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbBizPartnerTypeEdit.setToolTipText("Modificar");
        jbBizPartnerTypeEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbBizPartnerTypeEdit);

        jbBizPartnerTypeDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbBizPartnerTypeDelete.setToolTipText("Eliminar");
        jbBizPartnerTypeDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbBizPartnerTypeDelete);

        jpBizPartnerTypes.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jtpTabbedPane.addTab("Tipos asociado de negocios", jpBizPartnerTypes);

        jpBizPartners.setBorder(javax.swing.BorderFactory.createTitledBorder("Asignación de cuentas contables:"));
        jpBizPartners.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbBizPartnerNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbBizPartnerNew.setToolTipText("Crear");
        jbBizPartnerNew.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbBizPartnerNew);

        jbBizPartnerEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbBizPartnerEdit.setToolTipText("Modificar");
        jbBizPartnerEdit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbBizPartnerEdit);

        jbBizPartnerDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbBizPartnerDelete.setToolTipText("Eliminar");
        jbBizPartnerDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbBizPartnerDelete);

        jpBizPartners.add(jPanel10, java.awt.BorderLayout.PAGE_START);

        jtpTabbedPane.addTab("Asociados de negocios", jpBizPartners);

        getContentPane().add(jtpTabbedPane, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-900)/2, (screenSize.height-600)/2, 900, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] columns = null;
        mvFields = new Vector<SFormField>();

        moFieldAccountBizPartner = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfAccountBizPartner, jlAccountBizPartner);
        moFieldAccountBizPartner.setLengthMax(50);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldAccountBizPartner);
        mvFields.add(moFieldIsDeleted);

        moFormEntry = new SFormAccountBizPartnerEntry(miClient);
        moFormBizPartnerType = new SFormAccountBizPartnerBpType(miClient);
        moFormBizPartner = new SFormAccountBizPartnerBp(miClient);
        moComponentItemPicker = new SFormComponentItemPicker(miClient, SDataConstants.FINS_TP_ACC_BP);

        moPaneEntries = new STablePane(miClient);
        moPaneEntries.setDoubleClickAction(this, "publicActionEntryEdit");
        jpEntries.add(moPaneEntries, BorderLayout.CENTER);
        i = 0;
        columns = new STableColumnForm[9];
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo cuentas contables", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. cuenta contable", STableConstants.WIDTH_ACCOUNT_ID);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Cuenta contable", STableConstants.WIDTH_ACCOUNT);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "No. centro costo", 100);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro costo", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Base impuesto", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "impuesto", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo asiento contable", 75);
        columns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Porcentaje", STableConstants.WIDTH_PERCENTAGE);
        columns[i].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererPercentage());

        for (i = 0; i < columns.length; i++) {
            moPaneEntries.addTableColumn(columns[i]);
        }

        moPaneBizPartnerTypes = new STablePane(miClient);
        moPaneBizPartnerTypes.setDoubleClickAction(this, "publicActionBizPartnerTypeEdit");
        jpBizPartnerTypes.add(moPaneBizPartnerTypes, BorderLayout.CENTER);
        i = 0;
        columns = new STableColumnForm[5];
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría asociado de negocios", 125);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo asociado de negocios", 250);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);

        for (i = 0; i < columns.length; i++) {
            moPaneBizPartnerTypes.addTableColumn(columns[i]);
        }

        moPaneBizPartners = new STablePane(miClient);
        moPaneBizPartners.setDoubleClickAction(this, "publicActionBizPartnerEdit");
        jpBizPartners.add(moPaneBizPartners, BorderLayout.CENTER);
        i = 0;
        columns = new STableColumnForm[5];
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", 150);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría asociado de negocios", 125);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Asociado de negocios", 250);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Ini. vigencia", STableConstants.WIDTH_DATE);
        columns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);

        for (i = 0; i < columns.length; i++) {
            moPaneBizPartners.addTableColumn(columns[i]);
        }

        msEmptyAccountId = SDataUtilities.createNewFormattedAccountId(miClient, miClient.getSessionXXX().getParamsErp().getDeepAccounts());
        msEmptyCostCenterId = SDataUtilities.createNewFormattedCostCenterId(miClient, miClient.getSessionXXX().getParamsErp().getDeepCostCenters());
        manAccountTypes = new int[] {
            SDataConstantsSys.FINS_TP_ACC_BP_OP,
            SDataConstantsSys.FINS_TP_ACC_BP_PAY,
            SDataConstantsSys.FINS_TP_ACC_BP_ADV_BILL,
            SDataConstantsSys.FINS_TP_ACC_BP_ADV_BILL_PEND_APPLY
        };

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbEntryNew.addActionListener(this);
        jbEntryEdit.addActionListener(this);
        jbEntryDelete.addActionListener(this);
        jbBizPartnerTypeNew.addActionListener(this);
        jbBizPartnerTypeEdit.addActionListener(this);
        jbBizPartnerTypeDelete.addActionListener(this);
        jbBizPartnerNew.addActionListener(this);
        jbBizPartnerEdit.addActionListener(this);
        jbBizPartnerDelete.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jtfAccountBizPartner.requestFocus();
        }
    }

    private erp.mfin.data.SDataAccountBizPartnerEntry createEntry(int type, double percentage) {
       SDataAccountBizPartnerEntry entry = new SDataAccountBizPartnerEntry();

        entry.setPkAccountBizPartnerTypeId(type);
        entry.setDbmsAccountBizPartnerType(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[]{type}));
        entry.setPercentage(percentage);
        entry.setFkAccountId(msEmptyAccountId);
        entry.setFkCostCenterId_n(msEmptyCostCenterId);
        entry.setFkBookkeepingRegistryTypeId(SDataConstantsSys.FINS_TP_BKR_ALL);
        entry.setDbmsBookkeepingRegistryType(msTextAll);

        return entry;
    }

    private void actionEntryNew() {
        int index = -1;
        SDataAccountBizPartnerEntry entry = null;
        SDataAccountBizPartnerEntry entryAux = null;

        moComponentItemPicker.formReset();
        moComponentItemPicker.setFormVisible(true);

        if (moComponentItemPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            entry = createEntry(((int[]) moComponentItemPicker.getValue(SLibConstants.VALUE_PRIMARY_KEY))[0], 0d);

            moFormEntry.formReset();
            moFormEntry.setRegistry(entry);
            moFormEntry.setVisible(true);

            if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                entry = (SDataAccountBizPartnerEntry) moFormEntry.getRegistry();

                for (int i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
                    entryAux = (SDataAccountBizPartnerEntry) moPaneEntries.getTableRow(i).getData();

                    if (entry.getPkAccountBizPartnerTypeId() <= entryAux.getPkAccountBizPartnerTypeId()) {
                        index = i;
                        if (entry.getFkAccountId().compareTo(entryAux.getFkAccountId()) <= 0) {
                            break;
                        }
                    }
                }

                if (index == -1) {
                    index = moPaneEntries.getTableGuiRowCount();
                    moPaneEntries.addTableRow(new SDataAccountBizPartnerEntryRow(entry));
                }
                else {
                    moPaneEntries.insertTableRow(new SDataAccountBizPartnerEntryRow(entry), index);
                }

                moPaneEntries.renderTableRows();
                moPaneEntries.setTableRowSelection(index);
            }
        }
    }

    private void actionEntryEdit() {
        int index = moPaneEntries.getTable().getSelectedRow();

        if (index != -1) {
            ((SDataAccountBizPartnerEntry) moPaneEntries.getSelectedTableRow().getData()).setDbmsAccountBizPartner(moFieldAccountBizPartner.getString());

            moFormEntry.formReset();
            moFormEntry.setRegistry((SDataAccountBizPartnerEntry) moPaneEntries.getSelectedTableRow().getData());
            moFormEntry.setVisible(true);

            if (moFormEntry.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                moPaneEntries.setTableRow(new SDataAccountBizPartnerEntryRow((SDataAccountBizPartnerEntry) moFormEntry.getRegistry()), index);

                moPaneEntries.renderTableRows();
                moPaneEntries.setTableRowSelection(index);
            }
        }
    }

    private void actionEntryDelete() {
        int index = moPaneEntries.getTable().getSelectedRow();

        if (index != -1 && miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
            moPaneEntries.removeTableRow(index);
            moPaneEntries.renderTableRows();

            if (moPaneEntries.getTableGuiRowCount() > 0) {
                moPaneEntries.setTableRowSelection(index < moPaneEntries.getTableGuiRowCount() ? index : moPaneEntries.getTableGuiRowCount() - 1);
            }
        }
    }

    private void actionBizPartnerTypeNew(boolean isNew) {
        int index = -1;
        SDataAccountBizPartnerBpType bizPartnerType = null;

        if (isNew) {
            bizPartnerType = new SDataAccountBizPartnerBpType();
            bizPartnerType.setPkAccountBizPartnerId(moAccountBizPartner == null ? 0 : moAccountBizPartner.getPkAccountBizPartnerId());
            bizPartnerType.setPkDateStartId(SLibTimeUtilities.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));
        }
        else if (moPaneBizPartnerTypes.getSelectedTableRow() != null) {
            bizPartnerType = (SDataAccountBizPartnerBpType) moPaneBizPartnerTypes.getSelectedTableRow().getData();
        }

        if (bizPartnerType != null) {
            moFormBizPartnerType.formRefreshCatalogues();
            moFormBizPartnerType.formReset();
            moFormBizPartnerType.setRegistry(bizPartnerType);
            moFormBizPartnerType.setVisible(true);

            if (moFormBizPartnerType.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                if (isNew) {
                    moPaneBizPartnerTypes.addTableRow(new SDataAccountBizPartnerBpTypeRow(moFormBizPartnerType.getRegistry()));
                }
                else {
                    moPaneBizPartnerTypes.setTableRow(new SDataAccountBizPartnerBpTypeRow(moFormBizPartnerType.getRegistry()), moPaneBizPartnerTypes.getTable().getSelectedRow());
                }

                index = moPaneBizPartnerTypes.getTable().getSelectedRow();
                moPaneBizPartnerTypes.renderTableRows();
                moPaneBizPartnerTypes.setTableRowSelection(index);
            }
        }
    }

    private void actionBizPartnerTypeDelete() {
        int index = -1;

        if (moPaneBizPartnerTypes.getSelectedTableRow() != null) {
            SDataAccountBizPartnerBpType bizPartnerType = (SDataAccountBizPartnerBpType) ((SDataAccountBizPartnerBpTypeRow) moPaneBizPartnerTypes.getSelectedTableRow()).getData();

            bizPartnerType.setIsDeleted(true);
            moPaneBizPartnerTypes.setTableRow(new SDataAccountBizPartnerBpTypeRow(bizPartnerType), moPaneBizPartnerTypes.getTable().getSelectedRow());

            index = moPaneBizPartnerTypes.getTable().getSelectedRow();
            moPaneBizPartnerTypes.renderTableRows();
            moPaneBizPartnerTypes.setTableRowSelection(index);
        }
    }

    private void actionBizPartnerNew(boolean isNew) {
        int index = -1;
        SDataAccountBizPartnerBp bizPartner = null;

        if (isNew) {
            bizPartner = new SDataAccountBizPartnerBp();
            bizPartner.setPkAccountBizPartnerId(moAccountBizPartner == null ? 0 : moAccountBizPartner.getPkAccountBizPartnerId());
            bizPartner.setPkDateStartId(SLibTimeUtilities.getBeginOfYear(miClient.getSessionXXX().getWorkingDate()));
        }
        else if (moPaneBizPartners.getSelectedTableRow() != null) {
            bizPartner = (SDataAccountBizPartnerBp) moPaneBizPartners.getSelectedTableRow().getData();
        }

        if (bizPartner != null) {
            moFormBizPartner.formRefreshCatalogues();
            moFormBizPartner.formReset();
            moFormBizPartner.setRegistry(bizPartner);
            moFormBizPartner.setVisible(true);

            if (moFormBizPartner.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                if (isNew) {
                    moPaneBizPartners.addTableRow(new SDataAccountBizPartnerBpRow(moFormBizPartner.getRegistry()));
                }
                else {
                    moPaneBizPartners.setTableRow(new SDataAccountBizPartnerBpRow(moFormBizPartner.getRegistry()), moPaneBizPartners.getTable().getSelectedRow());
                }

                index = moPaneBizPartners.getTable().getSelectedRow();
                moPaneBizPartners.renderTableRows();
                moPaneBizPartners.setTableRowSelection(index);
            }
        }
    }

    private void actionBizPartnerDelete() {
        int index = -1;

        if (moPaneBizPartners.getSelectedTableRow() != null) {
            SDataAccountBizPartnerBp bizPartner = (SDataAccountBizPartnerBp) ((SDataAccountBizPartnerBpRow) moPaneBizPartners.getSelectedTableRow()).getData();

            bizPartner.setIsDeleted(true);
            moPaneBizPartners.setTableRow(new SDataAccountBizPartnerBpRow(bizPartner), moPaneBizPartners.getTable().getSelectedRow());

            index = moPaneBizPartners.getTable().getSelectedRow();
            moPaneBizPartners.renderTableRows();
            moPaneBizPartners.setTableRowSelection(index);
        }
    }

    private void actionEdit(boolean edit) {

    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                jtpTabbedPane.setSelectedIndex(validation.getTabbedPaneIndex());
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    public void publicActionEntryEdit() {
        actionEntryEdit();
    }

    public void publicActionBizPartnerTypeEdit() {
        actionBizPartnerTypeNew(false);
    }

    public void publicActionBizPartnerEdit() {
        actionBizPartnerNew(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbBizPartnerDelete;
    private javax.swing.JButton jbBizPartnerEdit;
    private javax.swing.JButton jbBizPartnerNew;
    private javax.swing.JButton jbBizPartnerTypeDelete;
    private javax.swing.JButton jbBizPartnerTypeEdit;
    private javax.swing.JButton jbBizPartnerTypeNew;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbEntryDelete;
    private javax.swing.JButton jbEntryEdit;
    private javax.swing.JButton jbEntryNew;
    private javax.swing.JButton jbOk;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlAccountBizPartner;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JPanel jpAccountBizPartner;
    private javax.swing.JPanel jpBizPartnerTypes;
    private javax.swing.JPanel jpBizPartners;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JTextField jtfAccountBizPartner;
    private javax.swing.JTabbedPane jtpTabbedPane;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        moAccountBizPartner = null;
    }

    @Override
    public void formReset() {
        mbResetingForm = true;

        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moAccountBizPartner = null;
        moPaneEntries.createTable();
        moPaneEntries.clearTableRows();
        moPaneBizPartnerTypes.createTable();
        moPaneBizPartnerTypes.clearTableRows();
        moPaneBizPartners.createTable();
        moPaneBizPartners.clearTableRows();
        msTextAll = SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_BKR, new int[] { SDataConstantsSys.FINS_TP_BKR_ALL });
        msTextDbt = SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_BKR, new int[] { SDataConstantsSys.FINS_TP_BKR_DBT });
        msTextCdt = SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_BKR, new int[] { SDataConstantsSys.FINS_TP_BKR_CDT });

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        jckIsDeleted.setEnabled(false);

        jtpTabbedPane.setSelectedIndex(0);
        //jtpTabbedPane.setEnabledAt(1, false);
        //jtpTabbedPane.setEnabledAt(2, false);

        // Initialize business partner account entries:

        for (int type : manAccountTypes) {
            moPaneEntries.addTableRow(new SDataAccountBizPartnerEntryRow(createEntry(type, 1d)));
        }

        moPaneEntries.renderTableRows();
        moPaneEntries.setTableRowSelection(0);

        mbResetingForm = false;
    }

    @Override
    public void formRefreshCatalogues() {
        moFormEntry.formRefreshCatalogues();
        moComponentItemPicker.formRefreshCatalogues();
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        int i;
        double[][][][] percentages = new double[manAccountTypes.length][3][100][100]; // secundary index for bookkeeping registry type: 0 = ALL; 1 = DBT; 2 = CDT
        SFormValidation validation = new SFormValidation();
        SDataAccountBizPartnerEntry entry = null;

        for (i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                validation.setTabbedPaneIndex(0);
                break;
            }
        }

        if (!validation.getIsError()) {
            // Validate that all account types have an account:

            for (i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
                entry = (SDataAccountBizPartnerEntry) ((SDataAccountBizPartnerEntryRow) moPaneEntries.getTableRow(i)).getData();
                if (msEmptyAccountId.compareTo(entry.getFkAccountId()) == 0) {
                    validation.setMessage("Se debe especificar la cuenta contable del tipo de cuenta " +
                            "'" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { entry.getPkAccountBizPartnerTypeId() }) + "'\n" +
                            "en la posición " + (i + 1) + ".");
                    validation.setComponent(moPaneEntries.getTable());
                    validation.setTabbedPaneIndex(0);
                    break;
                }
            }

            if (! validation.getIsError()) {
                // Validate account type percentages:
                boolean[] c3 = new boolean[] {false, false, false};
                ArrayList<int[]> taxes = new ArrayList<>();
                for (i = 0; i < moPaneEntries.getTableGuiRowCount() && !validation.getIsError(); i++) {
                    entry = (SDataAccountBizPartnerEntry) ((SDataAccountBizPartnerEntryRow) moPaneEntries.getTableRow(i)).getData();
                    switch (entry.getFkBookkeepingRegistryTypeId()) {
                        case SDataConstantsSys.FINS_TP_BKR_ALL:
                            percentages[entry.getPkAccountBizPartnerTypeId() - 1][ALL][entry.getFkTaxBasicId_n()][entry.getFkTaxId_n()] += entry.getPercentage();
                            c3[0] = true; 
                            break;
                        case SDataConstantsSys.FINS_TP_BKR_DBT:
                            percentages[entry.getPkAccountBizPartnerTypeId() - 1][DBT][entry.getFkTaxBasicId_n()][entry.getFkTaxId_n()] += entry.getPercentage();
                            c3[1] = true;
                            break;
                        case SDataConstantsSys.FINS_TP_BKR_CDT:
                            percentages[entry.getPkAccountBizPartnerTypeId() - 1][CDT][entry.getFkTaxBasicId_n()][entry.getFkTaxId_n()] += entry.getPercentage();
                            c3[2] = true;
                            break;
                        default:
                            validation.setMessage("El tipo de asiento contable del tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "'\n" +
                                    "es inválido en la posición " + (i + 1) + ".");
                            validation.setComponent(moPaneEntries.getTable());
                            validation.setTabbedPaneIndex(0);
                    }
                    
                    if (! taxes.contains(new int[] { entry.getFkTaxBasicId_n(), entry.getFkTaxId_n() })) {
                        taxes.add(new int[] { entry.getFkTaxBasicId_n(), entry.getFkTaxId_n() });
                    }
                }
                
                if (!validation.getIsError()) {
                    boolean breakable = false;
                    
                    for (i = 0; i < percentages.length; i++) {
                        for (int[] tax : taxes) {
                            if (percentages[i][ALL][tax[0]][tax[1]] != 0d) {
                                // Only bookkeeping registry type "ALL" must be provided:

                                if (percentages[i][ALL][tax[0]][tax[1]] != 1d) {
                                    validation.setMessage("La suma total de los porcentajes del tipo de asiento contable '" + msTextAll + "'\n" +
                                            "para el tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "' " +
                                            (tax[0] == 0 ? " sin impuesto " : (" e impuesto: '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, new int[] { tax[0], tax[1] } ) + "' ")) +
                                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(percentages[i][ALL][tax[0]][tax[1]]) + ")\n" +
                                            "debe ser igual a " + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(1d) + ".");
                                    validation.setComponent(moPaneEntries.getTable());
                                    validation.setTabbedPaneIndex(0);
                                    breakable = true;
                                    break;
                                }
                                else if (percentages[i][DBT][tax[0]][tax[1]] != 0d || percentages[i][CDT][tax[0]][tax[1]] != 0d) {
                                    validation.setMessage("Si se configuran asientos contables del tipo '" + msTextAll + "'\n" +
                                            "para el tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "'" +
                                            (tax[0] == 0 ? " sin impuesto " : (" e impuesto: '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, new int[] { tax[0], tax[1] } ) + "' ")) +
                                             "\n no se pueden configurar asientos contables del tipo '" + msTextDbt + "' o '" + msTextCdt + "'"
                                                    
                                                    + ".");
                                    validation.setComponent(moPaneEntries.getTable());
                                    validation.setTabbedPaneIndex(0);
                                    breakable = true;
                                    break;
                                }
                            }
                            else {
                                // Both bookkeeping registry types "DEBIT" and "CREDIT" must be provided:

                                if (percentages[i][DBT][tax[0]][tax[1]] != 1d) {
                                    validation.setMessage("La suma total de los porcentajes del tipo de asiento contable '" + msTextDbt + "'\n" +
                                            "para el tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "' " +
                                            (tax[0] == 0 ? " sin impuesto " : (" e impuesto: '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, new int[] { tax[0], tax[1] } ) + "' ")) +
                                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(percentages[i][DBT][tax[0]][tax[1]]) + ")\n" +
                                            "debe ser igual a " + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(1d) + ".");
                                    validation.setComponent(moPaneEntries.getTable());
                                    validation.setTabbedPaneIndex(0);
                                    breakable = true;
                                    break;
                                }
                                else if (percentages[i][CDT][tax[0]][tax[1]] != 1d) {
                                    validation.setMessage("La suma total de los porcentajes del tipo de asiento contable '" + msTextCdt + "'\n" +
                                            "para el tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "' " +
                                            (tax[0] == 0 ? " sin impuesto " : (" e impuesto: '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, new int[] { tax[0], tax[1] } ) + "' ")) +
                                            "(" + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(percentages[i][CDT][tax[0]][tax[1]]) + ")\n" +
                                            "debe ser igual a " + miClient.getSessionXXX().getFormatters().getDecimalsPercentageFormat().format(1d) + ".");
                                    validation.setComponent(moPaneEntries.getTable());
                                    validation.setTabbedPaneIndex(0);
                                    breakable = true;
                                    break;
                                }
                                else if (percentages[i][ALL][tax[0]][tax[1]] != 0d) {
                                    validation.setMessage("Si se configuran asientos contables de los tipos '" + msTextDbt + "' y '" + msTextCdt + "'\n" +
                                            "para el tipo de cuenta '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINS_TP_ACC_BP, new int[] { i + 1 }) + "'" +
                                            (tax[0] == 0 ? " sin impuesto " : (" e impuesto: '" + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FINU_TAX, new int[] { tax[0], tax[1] } ) + "' ")) +
                                            "\n no se pueden configurar asientos contables del tipo '" + msTextAll + "'.");
                                    validation.setComponent(moPaneEntries.getTable());
                                    validation.setTabbedPaneIndex(0);
                                    breakable = true;
                                    break;
                                }
                            }
                        }
                        
                        if (breakable) {
                            break;
                        }
                    }
                }

                if (!validation.getIsError()) {
                    if (moPaneBizPartnerTypes.getTableGuiRowCount() == 0 && moPaneBizPartners.getTableGuiRowCount() == 0) {
                        if (miClient.showMsgBoxConfirm("No se han definido registros a los que les aplique este paquete de configuración.\nDe cualquier forma, ¿está seguro que desea salir?") != JOptionPane.YES_OPTION) {
                            validation.setMessage("Se deben definir registros a los que les aplique este paquete de configuración.");
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataAccountBizPartnerEntry entry = null;

        moAccountBizPartner = (SDataAccountBizPartner) registry;

        moFieldAccountBizPartner.setFieldValue(moAccountBizPartner.getAccountBizPartner());
        moFieldIsDeleted.setFieldValue(moAccountBizPartner.getIsDeleted());

        moPaneEntries.clearTableRows();
        for (i = 0; i < moAccountBizPartner.getDbmsEntries().size(); i++) {
            entry = moAccountBizPartner.getDbmsEntries().get(i);

            if (entry.getFkCostCenterId_n().length() == 0) {
                entry.setFkCostCenterId_n(msEmptyCostCenterId);
            }

            moPaneEntries.addTableRow(new SDataAccountBizPartnerEntryRow(entry));
        }
        moPaneEntries.renderTableRows();
        moPaneEntries.setTableRowSelection(0);

        moPaneBizPartnerTypes.clearTableRows();
        for (i = 0; i < moAccountBizPartner.getDbmsBizPartnerTypes().size(); i++) {
            moPaneBizPartnerTypes.addTableRow(new SDataAccountBizPartnerBpTypeRow(moAccountBizPartner.getDbmsBizPartnerTypes().get(i)));
        }
        moPaneBizPartnerTypes.renderTableRows();
        moPaneBizPartnerTypes.setTableRowSelection(0);

        moPaneBizPartners.clearTableRows();
        for (i = 0; i < moAccountBizPartner.getDbmsBizPartners().size(); i++) {
            moPaneBizPartners.addTableRow(new SDataAccountBizPartnerBpRow(moAccountBizPartner.getDbmsBizPartners().get(i)));
        }
        moPaneBizPartners.renderTableRows();
        moPaneBizPartners.setTableRowSelection(0);

        jckIsDeleted.setEnabled(true);
        //jtpTabbedPane.setEnabledAt(1, true);
        //jtpTabbedPane.setEnabledAt(2, true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        int i = 0;
        SDataAccountBizPartnerEntry entry = null;

        if (moAccountBizPartner == null) {
            moAccountBizPartner = new SDataAccountBizPartner();
            moAccountBizPartner.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moAccountBizPartner.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moAccountBizPartner.setAccountBizPartner(moFieldAccountBizPartner.getString());
        moAccountBizPartner.setIsDeleted(moFieldIsDeleted.getBoolean());

        moAccountBizPartner.getDbmsEntries().clear();
        for (i = 0; i < moPaneEntries.getTableGuiRowCount(); i++) {
            entry = ((SDataAccountBizPartnerEntry) ((SDataAccountBizPartnerEntryRow) moPaneEntries.getTableRow(i)).getData());

            if (entry.getFkCostCenterId_n().compareTo(msEmptyCostCenterId) == 0) {
                entry.setFkCostCenterId_n("");
            }

            moAccountBizPartner.getDbmsEntries().add(entry);
        }

        moAccountBizPartner.getDbmsBizPartnerTypes().clear();
        for (i = 0; i < moPaneBizPartnerTypes.getTableGuiRowCount(); i++) {
            moAccountBizPartner.getDbmsBizPartnerTypes().add(((SDataAccountBizPartnerBpType) ((SDataAccountBizPartnerBpTypeRow) moPaneBizPartnerTypes.getTableRow(i)).getData()));
        }

        moAccountBizPartner.getDbmsBizPartners().clear();
        for (i = 0; i < moPaneBizPartners.getTableGuiRowCount(); i++) {
            moAccountBizPartner.getDbmsBizPartners().add(((SDataAccountBizPartnerBp) ((SDataAccountBizPartnerBpRow) moPaneBizPartners.getTableRow(i)).getData()));
        }

        return moAccountBizPartner;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbEntryNew) {
                actionEntryNew();
            }
            else if (button == jbEntryEdit) {
                actionEntryEdit();
            }
            else if (button == jbEntryDelete) {
                actionEntryDelete();
            }
            else if (button == jbBizPartnerTypeNew) {
                actionBizPartnerTypeNew(true);
            }
            else if (button == jbBizPartnerTypeEdit) {
                actionBizPartnerTypeNew(false);
            }
            else if (button == jbBizPartnerTypeDelete) {
                actionBizPartnerTypeDelete();
            }
            else if (button == jbBizPartnerNew) {
                actionBizPartnerNew(true);
            }
            else if (button == jbBizPartnerEdit) {
                actionBizPartnerNew(false);
            }
            else if (button == jbBizPartnerDelete) {
                actionBizPartnerDelete();
            }
        }
    }
}
