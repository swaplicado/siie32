/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogRepRecords.java
 *
 * Created on 9/04/2010, 01:26:58 PM
 */

package erp.mfin.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataRecord;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Map;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;

/**
 *
 * @author Alfonso Flores, Sergio Flores, Isabel Servín
 */
public final class SDialogRepRecords extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.lib.form.SFormField moFieldBookKeepingCenter;
    private erp.lib.form.SFormField moFieldRecordType;
    private erp.lib.form.SFormField moFieldAccountCash;
    private erp.lib.form.SFormField moFieldDateStart;
    private erp.lib.form.SFormField moFieldDateEnd;
    private erp.lib.form.SFormField moFieldFiscalYear;
    private erp.lib.form.SFormField moFieldPeriod;
    private erp.lib.form.SFormField moFieldNumberStart;
    private erp.lib.form.SFormField moFieldNumberEnd;
    private erp.lib.form.SFormField moFieldCreator;

    /** Creates new form SDialogRepRecords
     * @param client */
    public SDialogRepRecords(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
        
        formRefreshCatalogues();
        formReset();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRange = new javax.swing.ButtonGroup();
        bgCurrency = new javax.swing.ButtonGroup();
        bgPrinting = new javax.swing.ButtonGroup();
        jpSettings = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jlBookKeepingCenter = new javax.swing.JLabel();
        jcbBookKeepingCenter = new javax.swing.JComboBox();
        jbBookKeepingCenter = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlRecordType = new javax.swing.JLabel();
        jcbRecordType = new javax.swing.JComboBox();
        jbRecordType = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jlAccountCash = new javax.swing.JLabel();
        jcbAccountCash = new javax.swing.JComboBox();
        jbAccountCash = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jrbRangeByDate = new javax.swing.JRadioButton();
        jPanel17 = new javax.swing.JPanel();
        jrbRangeByNumber = new javax.swing.JRadioButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jrbCurrencyLocal = new javax.swing.JRadioButton();
        jPanel20 = new javax.swing.JPanel();
        jrbCurrencyOriginal = new javax.swing.JRadioButton();
        jPanel22 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        jftDateStart = new javax.swing.JFormattedTextField();
        jbDateStart = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        jftDateEnd = new javax.swing.JFormattedTextField();
        jbDateEnd = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlFiscalYear = new javax.swing.JLabel();
        jtfFiscalYear = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jlPeriod = new javax.swing.JLabel();
        jtfPeriod = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jlNumberStart = new javax.swing.JLabel();
        jtfNumberStart = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jlNumberEnd = new javax.swing.JLabel();
        jtfNumberEnd = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jrbOneDocumentWithoutLineBreak = new javax.swing.JRadioButton();
        jPanel24 = new javax.swing.JPanel();
        jrbOneDocumentWithLineBreak = new javax.swing.JRadioButton();
        jPanel26 = new javax.swing.JPanel();
        jrbPrintingIndividual = new javax.swing.JRadioButton();
        jPanel25 = new javax.swing.JPanel();
        jlCreator = new javax.swing.JLabel();
        jcbCreator = new javax.swing.JComboBox();
        jbCreatorPickMe = new javax.swing.JButton();
        jpControls = new javax.swing.JPanel();
        jbPrint = new javax.swing.JButton();
        jbExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Impresión de pólizas contables");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpSettings.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jpSettings.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtros del reporte:"));
        jPanel2.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBookKeepingCenter.setText("Centro contable: *");
        jlBookKeepingCenter.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlBookKeepingCenter);

        jcbBookKeepingCenter.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(jcbBookKeepingCenter);

        jbBookKeepingCenter.setText("jButton1");
        jbBookKeepingCenter.setToolTipText("Seleccionar centro contable");
        jbBookKeepingCenter.setFocusable(false);
        jbBookKeepingCenter.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel12.add(jbBookKeepingCenter);

        jPanel2.add(jPanel12);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecordType.setText("Tipo póliza:");
        jlRecordType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlRecordType);

        jcbRecordType.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jcbRecordType);

        jbRecordType.setText("jButton2");
        jbRecordType.setToolTipText("Seleccionar tipo de póliza");
        jbRecordType.setFocusable(false);
        jbRecordType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbRecordType);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountCash.setText("Cuenta dinero:");
        jlAccountCash.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlAccountCash);

        jcbAccountCash.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(jcbAccountCash);

        jbAccountCash.setText("jButton1");
        jbAccountCash.setToolTipText("Seleccionar cuenta de efectivo");
        jbAccountCash.setFocusable(false);
        jbAccountCash.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbAccountCash);

        jPanel2.add(jPanel8);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel11.setLayout(new java.awt.GridLayout(1, 2));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Modalidad de filtros del reporte:"));
        jPanel15.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgRange.add(jrbRangeByDate);
        jrbRangeByDate.setText("Por rango de fechas");
        jrbRangeByDate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jrbRangeByDate);

        jPanel15.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgRange.add(jrbRangeByNumber);
        jrbRangeByNumber.setText("Por rango de folios");
        jrbRangeByNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jrbRangeByNumber);

        jPanel15.add(jPanel17);

        jPanel11.add(jPanel15);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Moneda del reporte:"));
        jPanel18.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgCurrency.add(jrbCurrencyLocal);
        jrbCurrencyLocal.setText("Moneda local");
        jPanel19.add(jrbCurrencyLocal);

        jPanel18.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgCurrency.add(jrbCurrencyOriginal);
        jrbCurrencyOriginal.setText("Moneda original");
        jPanel20.add(jrbCurrencyOriginal);

        jPanel18.add(jPanel20);

        jPanel11.add(jPanel18);

        jPanel1.add(jPanel11, java.awt.BorderLayout.CENTER);

        jpSettings.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jPanel21.setLayout(new java.awt.GridLayout(1, 2));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Rango de fechas:"));
        jPanel5.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial: *");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlDateStart);

        jftDateStart.setText("dd/mm/yyyy");
        jftDateStart.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jftDateStart);

        jbDateStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateStart.setToolTipText("Seleccionar fecha inicial");
        jbDateStart.setFocusable(false);
        jbDateStart.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbDateStart);

        jPanel5.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final: *");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlDateEnd);

        jftDateEnd.setText("dd/mm/yyyy");
        jftDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel14.add(jftDateEnd);

        jbDateEnd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_date_day.gif"))); // NOI18N
        jbDateEnd.setToolTipText("Seleccionar fecha final");
        jbDateEnd.setFocusable(false);
        jbDateEnd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbDateEnd);

        jPanel5.add(jPanel14);

        jPanel21.add(jPanel5);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Rango de folios:"));
        jPanel7.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalYear.setText("Ejercicio: *");
        jlFiscalYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlFiscalYear);

        jtfFiscalYear.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfFiscalYear.setText("0000");
        jtfFiscalYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfFiscalYear);

        jLabel1.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel9.add(jLabel1);

        jlPeriod.setText("Período: *");
        jlPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlPeriod);

        jtfPeriod.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPeriod.setText("00");
        jtfPeriod.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfPeriod);

        jPanel7.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumberStart.setText("Folio inicial: *");
        jlNumberStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNumberStart);

        jtfNumberStart.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumberStart.setText("0");
        jtfNumberStart.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(jtfNumberStart);

        jLabel2.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel10.add(jLabel2);

        jlNumberEnd.setText("Folio final: *");
        jlNumberEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlNumberEnd);

        jtfNumberEnd.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfNumberEnd.setText("0");
        jtfNumberEnd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(jtfNumberEnd);

        jPanel7.add(jPanel10);

        jPanel21.add(jPanel7);

        jPanel22.add(jPanel21, java.awt.BorderLayout.NORTH);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Modalidad de impresión:"));
        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgPrinting.add(jrbOneDocumentWithoutLineBreak);
        jrbOneDocumentWithoutLineBreak.setText("Un solo archivo sin salto de línea");
        jrbOneDocumentWithoutLineBreak.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jrbOneDocumentWithoutLineBreak);

        jPanel3.add(jPanel6);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgPrinting.add(jrbOneDocumentWithLineBreak);
        jrbOneDocumentWithLineBreak.setText("Un solo archivo con salto de línea");
        jrbOneDocumentWithLineBreak.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel24.add(jrbOneDocumentWithLineBreak);

        jPanel3.add(jPanel24);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgPrinting.add(jrbPrintingIndividual);
        jrbPrintingIndividual.setText("Archivos individuales PDF");
        jrbPrintingIndividual.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel26.add(jrbPrintingIndividual);

        jPanel3.add(jPanel26);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCreator.setText("Creador:");
        jlCreator.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlCreator);

        jcbCreator.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel25.add(jcbCreator);

        jbCreatorPickMe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_mod_hrs.png"))); // NOI18N
        jbCreatorPickMe.setToolTipText("Seleccionarme");
        jbCreatorPickMe.setFocusable(false);
        jbCreatorPickMe.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel25.add(jbCreatorPickMe);

        jPanel3.add(jPanel25);

        jPanel23.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel22.add(jPanel23, java.awt.BorderLayout.CENTER);

        jpSettings.add(jPanel22, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpSettings, java.awt.BorderLayout.CENTER);

        jpControls.setPreferredSize(new java.awt.Dimension(392, 33));
        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbPrint.setText("Imprimir");
        jbPrint.setToolTipText("[Ctrl + Enter]");
        jbPrint.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbPrint);

        jbExit.setText("Cerrar");
        jbExit.setToolTipText("[Escape]");
        jbExit.setPreferredSize(new java.awt.Dimension(75, 23));
        jpControls.add(jbExit);

        getContentPane().add(jpControls, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    public void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldBookKeepingCenter = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbBookKeepingCenter, jlBookKeepingCenter);
        moFieldBookKeepingCenter.setPickerButton(jbBookKeepingCenter);
        moFieldRecordType = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbRecordType, jlRecordType);
        moFieldRecordType.setPickerButton(jbRecordType);
        moFieldAccountCash = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbAccountCash, jlAccountCash);
        moFieldAccountCash.setPickerButton(jbAccountCash);
        moFieldDateStart = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateStart, jlDateStart);
        moFieldDateStart.setPickerButton(jbDateStart);
        moFieldDateEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateEnd, jlDateEnd);
        moFieldDateEnd.setPickerButton(jbDateEnd);
        moFieldFiscalYear = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfFiscalYear, jlFiscalYear);
        moFieldFiscalYear.setIntegerMin(2000);
        moFieldFiscalYear.setIntegerMax(2100);
        moFieldFiscalYear.setMinInclusive(true);
        moFieldFiscalYear.setMaxInclusive(true);
        moFieldFiscalYear.setDecimalFormat(miClient.getSessionXXX().getFormatters().getYearFormat());
        moFieldPeriod = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfPeriod, jlPeriod);
        moFieldNumberStart = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfNumberStart, jlNumberStart);
        moFieldNumberEnd = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfNumberEnd, jlNumberEnd);
        moFieldCreator = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCreator, jlCreator);

        mvFields.add(moFieldBookKeepingCenter);
        mvFields.add(moFieldRecordType);
        mvFields.add(moFieldAccountCash);
        mvFields.add(moFieldDateStart);
        mvFields.add(moFieldDateEnd);
        mvFields.add(moFieldFiscalYear);
        mvFields.add(moFieldPeriod);
        mvFields.add(moFieldNumberStart);
        mvFields.add(moFieldNumberEnd);
        mvFields.add(moFieldCreator);

        jbPrint.addActionListener(this);
        jbExit.addActionListener(this);
        jbBookKeepingCenter.addActionListener(this);
        jbRecordType.addActionListener(this);
        jbAccountCash.addActionListener(this);
        jbDateStart.addActionListener(this);
        jbDateEnd.addActionListener(this);
        jbCreatorPickMe.addActionListener(this);
        jrbRangeByDate.addItemListener(this);
        jrbRangeByNumber.addItemListener(this);
        jrbOneDocumentWithoutLineBreak.addItemListener(this);
        jrbOneDocumentWithLineBreak.addItemListener(this);
        jcbRecordType.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionPrint(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "print", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionClose(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "exit", KeyEvent.VK_ESCAPE, 0);

        setModalityType(ModalityType.MODELESS);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            
            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionClose();
            }
            else {
                jcbBookKeepingCenter.requestFocus();
            }
        }
    }

    private void actionPrint() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            try {
                setCursor(new Cursor(Cursor.WAIT_CURSOR));
                
                int report;
                String title;
                Map<String, Object> map = miClient.createReportParams();
                
                if (jrbOneDocumentWithoutLineBreak.isSelected()) {
                    title = "Listado de pólizas contables";
                    report = jrbCurrencyLocal.isSelected() ? SDataConstantsSys.REP_FIN_RECS : SDataConstantsSys.REP_FIN_RECS_CY;
                    
                    map.put("nIdBkc", moFieldBookKeepingCenter.getKeyAsIntArray()[0]);
                    map.put("sIdTpRec", jcbRecordType.getSelectedIndex() == 0 ? "" : (String) moFieldRecordType.getKeyAsObjectArray()[0]);
                    map.put("tDtInitial", moFieldDateStart.getDate());
                    map.put("tDtEnd", moFieldDateEnd.getDate());
                    map.put("nNumInitial", moFieldNumberStart.getInteger());
                    map.put("nNumEnd", moFieldNumberEnd.getInteger());
                    map.put("bIsByDate", jrbRangeByDate.isSelected());
                    map.put("sBkcDescrip", jcbBookKeepingCenter.getSelectedItem().toString());
                    map.put("sDtInitialText", jftDateStart.getText());
                    map.put("sDtEndText", jftDateEnd.getText());
                    map.put("nIdPer", moFieldPeriod.getInteger());
                    map.put("sTpRecDescrip", jcbRecordType.getSelectedIndex() == 0 ? "(TODAS)" : jcbRecordType.getSelectedItem().toString());
                    map.put("sDateTime", miClient.getSessionXXX().getFormatters().getDatetimeFormat().format(new Date()));
                    map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                    map.put("nIdYear", moFieldFiscalYear.getInteger());
                    map.put("sCurrency", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getCurrency());
                    map.put("sCurrencyKeyErp", miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
                    map.put("sSqlAccountCash", jcbAccountCash.isEnabled() && moFieldAccountCash.getKeyAsIntArray()[0] > 0 ?
                        " AND r.fid_cob_n = " + moFieldAccountCash.getKeyAsIntArray()[0] + " AND r.fid_acc_cash_n = " + moFieldAccountCash.getKeyAsIntArray()[1] + " " : "");
                    
                    if (jcbCreator.getSelectedIndex() > 0) {
                        map.put("nRecCreator", moFieldCreator.getKeyAsIntArray()[0]);
                        map.put("sRecCreatorOperator", "="); // to apply comparison in SQL query
                    }
                    
                    JasperPrint jasperPrint = SDataUtilities.fillReport(miClient, report, map);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
                    jasperViewer.setTitle(title);
                    jasperViewer.setVisible(true);
                }
                else if (jrbOneDocumentWithLineBreak.isSelected()){
                    title = "Pólizas contables";
                    report = jrbCurrencyLocal.isSelected() ? SDataConstantsSys.REP_FIN_JOURNAL_VOUCHERS : SDataConstantsSys.REP_FIN_JOURNAL_VOUCHERS_CY;
                    
                    map.put("nLenLedger", SLibUtils.parseInt(SLibUtils.textLeft("" + miClient.getSessionXXX().getParamsCompany().getMaskAccount(), 1)));
                    map.put("nLenRecPeriod", SLibUtils.DecimalFormatCalendarMonth.getMaximumIntegerDigits());
                    map.put("nLenRecNumber", SDataConstantsSys.NUM_LEN_FIN_REC);
                    
                    if (jrbRangeByDate.isSelected()) {
                        map.put("tRecDateStart", moFieldDateStart.getDate());
                        map.put("tRecDateEnd", moFieldDateEnd.getDate());
                    }
                    else {
                        Date period = SLibTimeUtils.createDate(moFieldFiscalYear.getInteger(), moFieldPeriod.getInteger());
                        
                        map.put("tRecDateStart", SLibTimeUtils.getBeginOfMonth(period));
                        map.put("tRecDateEnd", SLibTimeUtils.getEndOfMonth(period));
                        
                        map.put("nRecNumStart", moFieldNumberStart.getInteger());
                        map.put("nRecNumEnd", moFieldNumberEnd.getInteger());
                    }
                    
                    if (jcbCreator.getSelectedIndex() > 0) {
                        map.put("nRecCreator", moFieldCreator.getKeyAsIntArray()[0]);
                        map.put("sRecCreatorOperator", "="); // to apply comparison in SQL query
                    }
                    
                    if (jcbBookKeepingCenter.getSelectedIndex() > 0) {
                        map.put("nRecBkc", moFieldBookKeepingCenter.getKeyAsIntArray()[0]);
                        map.put("sRecBkcOperator", "="); // to apply comparison in SQL query
                    }
                    
                    if (jcbRecordType.getSelectedIndex() > 0) {
                        map.put("sRecType", (String) moFieldRecordType.getKeyAsObjectArray()[0]);
                        map.put("sRecTypeOperator", "="); // to apply comparison in SQL query
                    }
                    
                    map.put("nSysCurrency", miClient.getSession().getSessionCustom().getLocalCurrencyKey()[0]);
                    
                    if (jcbAccountCash.getSelectedIndex() > 0) {
                        int[] key = moFieldAccountCash.getKeyAsIntArray();
                        
                        map.put("sSqlAccCash", "AND r.fid_cob_n = " + key[0] + " AND r.fid_acc_cash_n = " + key[1] + " ");
                    }
                    
                    JasperPrint jasperPrint = SDataUtilities.fillReport(miClient, report, map);
                    JasperViewer jasperViewer = new JasperViewer(jasperPrint, false);
                    jasperViewer.setTitle(title);
                    jasperViewer.setVisible(true);
                }
                else if (jrbPrintingIndividual.isSelected()) {
                    miClient.getFileChooser().setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    if (miClient.getFileChooser().showSaveDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {    
                        String sql;
                        if (jrbRangeByDate.isSelected()) {
                            sql = "SELECT id_year, erp.lib_fix_int(id_per, 2) AS per, id_bkc, id_tp_rec, erp.lib_fix_int(id_num, 6) AS num FROM fin_rec "
                                    + "WHERE dt BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(moFieldDateStart.getDate()) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(moFieldDateEnd.getDate()) + "' ";
                        } 
                        else{
                            Date period = SLibTimeUtils.createDate(moFieldFiscalYear.getInteger(), moFieldPeriod.getInteger());                        
                            sql = "SELECT id_year, id_per, id_bkc, id_tp_rec, id_num FROM fin_rec "
                                    + "WHERE dt BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(SLibTimeUtils.getBeginOfMonth(period)) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(SLibTimeUtils.getEndOfMonth(period)) + "' ";
                            if (moFieldNumberEnd.getInteger() > 0) {
                                sql += "AND id_num BETWEEN " + moFieldNumberStart.getInteger() + " AND " + moFieldNumberEnd.getInteger() + " "; 
                            }
                        }

                        if (jcbCreator.getSelectedIndex() > 0) {
                            sql += "AND fid_usr_new = " + moFieldCreator.getKeyAsIntArray()[0];
                        }

                        ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
                        while (resultSet.next()) {
                            report = jrbCurrencyLocal.isSelected() ? SDataConstantsSys.REP_FIN_REC : SDataConstantsSys.REP_FIN_REC_CY;
                            int year = resultSet.getInt("id_year");
                            int nPer = resultSet.getInt("per");
                            String sPer = resultSet.getString("per");
                            int bkc = resultSet.getInt("id_bkc");
                            String typeRec = resultSet.getString("id_tp_rec");
                            int nNum = resultSet.getInt("num");
                            String sNum = resultSet.getString("num");
                            Object[] key = {year, nPer, bkc, typeRec, nNum};
                            map = miClient.createReportParams();
                            map.put("bShowDetailBackground", true);

                            SDataRecord record = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, key, SLibConstants.EXEC_MODE_SILENT);

                            map.put("nIdYear", record.getPkYearId());
                            map.put("nIdPer", record.getPkPeriodId());
                            map.put("nIdBkc", record.getPkBookkeepingCenterId());
                            map.put("sIdTpRec", record.getPkRecordTypeId());
                            map.put("nIdNum", record.getPkNumberId());
                            map.put("tRecordDate", record.getDate());
                            map.put("sRecordConcept", record.getConcept());
                            map.put("nNumRecordLength", SDataConstantsSys.NUM_LEN_FIN_REC);
                            map.put("sCompanyBranch", SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { record.getFkCompanyBranchId() }));
                            map.put("sBkcDescrip", SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_BKC, new int[] { record.getPkBookkeepingCenterId() }));

                            JasperPrint jasperPrint = SDataUtilities.fillReport(miClient, report, map);
                            File fileAux = miClient.getFileChooser().getSelectedFile();
                            JasperExportManager.exportReportToPdfFile(jasperPrint, fileAux.getAbsolutePath() + "/" + 
                                    year + "-" + sPer + "-" + bkc + "-" + typeRec + "-" + sNum + ".pdf");
                        }
                        miClient.showMsgBoxInformation("Proceso finalizado.");
                    }
                }
            }
            catch(Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }

    private void actionClose() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionPerformedBookKeepingCenter() {
        miClient.pickOption(SDataConstants.FIN_BKC, moFieldBookKeepingCenter, null);
    }

    private void actionPerformedRecordType() {
        miClient.pickOption(SDataConstants.FINX_TP_REC_ALL, moFieldRecordType, null);
    }

    private void actionPerformedAccountCash() {
        miClient.pickOption(SDataConstants.FIN_ACC_CASH, moFieldAccountCash, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
    }

    private void actionPerformedDateStart() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateStart.getDate(), moFieldDateStart);
    }

    private void actionPerformedDateEnd() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateEnd.getDate(), moFieldDateEnd);
    }
    
    private void actionPerformedCreatorPickMe() {
        moFieldCreator.setFieldValue(new int[] { miClient.getSession().getUser().getPkUserId() });
        jcbCreator.requestFocusInWindow();
    }

    private void renderRangeOptions() {
        if (jrbRangeByDate.isSelected()) {
            jftDateStart.setEnabled(true);
            jbDateStart.setEnabled(true);
            jftDateEnd.setEnabled(true);
            jbDateEnd.setEnabled(true);
            jtfFiscalYear.setEnabled(false);
            jtfPeriod.setEnabled(false);
            jtfNumberStart.setEnabled(false);
            jtfNumberEnd.setEnabled(false);
            
            moFieldDateStart.setFieldValue(SLibTimeUtilities.getBeginOfMonth(miClient.getSession().getCurrentDate()));
            moFieldDateEnd.setFieldValue(SLibTimeUtilities.getEndOfMonth(miClient.getSession().getCurrentDate()));
            moFieldFiscalYear.resetField();
            moFieldPeriod.resetField();
            moFieldNumberStart.resetField();
            moFieldNumberEnd.resetField();
        }
        else {
            jftDateStart.setEnabled(false);
            jbDateStart.setEnabled(false);
            jftDateEnd.setEnabled(false);
            jbDateEnd.setEnabled(false);
            jtfFiscalYear.setEnabled(true);
            jtfPeriod.setEnabled(true);
            jtfNumberStart.setEnabled(true);
            jtfNumberEnd.setEnabled(true);
            
            moFieldDateStart.resetField();
            moFieldDateEnd.resetField();
            moFieldFiscalYear.setFieldValue(miClient.getSessionXXX().getWorkingYear());
            moFieldPeriod.setFieldValue(SLibTimeUtilities.digestYearMonth(miClient.getSession().getCurrentDate())[1]);
            moFieldNumberStart.setFieldValue(1);
            moFieldNumberEnd.resetField();
        }
    }

    private void itemStateChangedRecordType() {
        boolean enable = false;

        if (jcbRecordType.getSelectedIndex() > 0) {
            if (((SFormComponentItem) jcbRecordType.getSelectedItem()).getComplement() != null) {
                enable = (Boolean) ((SFormComponentItem) jcbRecordType.getSelectedItem()).getComplement();
            }
        }

        jlAccountCash.setEnabled(enable);
        jcbAccountCash.setEnabled(enable);
        jbAccountCash.setEnabled(enable);
        
        if (!enable) {
            moFieldAccountCash.resetField();
        }
    }

    private void itemStateChangedRangeByDate() {
        renderRangeOptions();
    }

    private void itemStateChangedRangeByNumber() {
        renderRangeOptions();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgCurrency;
    private javax.swing.ButtonGroup bgPrinting;
    private javax.swing.ButtonGroup bgRange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAccountCash;
    private javax.swing.JButton jbBookKeepingCenter;
    private javax.swing.JButton jbCreatorPickMe;
    private javax.swing.JButton jbDateEnd;
    private javax.swing.JButton jbDateStart;
    private javax.swing.JButton jbExit;
    private javax.swing.JButton jbPrint;
    private javax.swing.JButton jbRecordType;
    private javax.swing.JComboBox jcbAccountCash;
    private javax.swing.JComboBox jcbBookKeepingCenter;
    private javax.swing.JComboBox jcbCreator;
    private javax.swing.JComboBox jcbRecordType;
    private javax.swing.JFormattedTextField jftDateEnd;
    private javax.swing.JFormattedTextField jftDateStart;
    private javax.swing.JLabel jlAccountCash;
    private javax.swing.JLabel jlBookKeepingCenter;
    private javax.swing.JLabel jlCreator;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlFiscalYear;
    private javax.swing.JLabel jlNumberEnd;
    private javax.swing.JLabel jlNumberStart;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlRecordType;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpSettings;
    private javax.swing.JRadioButton jrbCurrencyLocal;
    private javax.swing.JRadioButton jrbCurrencyOriginal;
    private javax.swing.JRadioButton jrbOneDocumentWithLineBreak;
    private javax.swing.JRadioButton jrbOneDocumentWithoutLineBreak;
    private javax.swing.JRadioButton jrbPrintingIndividual;
    private javax.swing.JRadioButton jrbRangeByDate;
    private javax.swing.JRadioButton jrbRangeByNumber;
    private javax.swing.JTextField jtfFiscalYear;
    private javax.swing.JTextField jtfNumberEnd;
    private javax.swing.JTextField jtfNumberStart;
    private javax.swing.JTextField jtfPeriod;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jrbRangeByDate.setSelected(true);
        jrbCurrencyLocal.setSelected(true);
        jrbOneDocumentWithoutLineBreak.setSelected(true);
        
        renderRangeOptions();
        jcbCreator.setEnabled(true);
        jbCreatorPickMe.setEnabled(true);
        itemStateChangedRecordType();

        if (jcbBookKeepingCenter.getItemCount() == 2) {
            jcbBookKeepingCenter.setSelectedIndex(1);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbBookKeepingCenter, SDataConstants.FIN_BKC);
        SFormUtilities.populateComboBox(miClient, jcbRecordType, SDataConstants.FINX_TP_REC_ALL);
        SFormUtilities.populateComboBox(miClient, jcbAccountCash, SDataConstants.FIN_ACC_CASH, new int[] { miClient.getSessionXXX().getCurrentCompanyBranchId() });
        SFormUtilities.populateComboBox(miClient, jcbCreator, SDataConstants.USRX_QRY_FIN_REC);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (jrbRangeByDate.isSelected()) {
                if (jrbRangeByDate.isSelected() && moFieldDateEnd.getDate().compareTo(moFieldDateStart.getDate()) < 0) {
                    validation.setMessage("La fecha final debe ser mayor o igual a la fecha inicial.");
                    validation.setComponent(jftDateEnd);
                }
                else if (SLibTimeUtilities.digestYear(moFieldDateEnd.getDate())[0] != SLibTimeUtilities.digestYear(moFieldDateStart.getDate())[0]) {
                    validation.setMessage("La fecha inicial y final deben pertenecer al mismo ejercicio.");
                    validation.setComponent(jftDateStart);
                }
            }
            else {
                if (moFieldNumberEnd.getInteger() < moFieldNumberStart.getInteger()) {
                    validation.setMessage("El valor del folio final debe ser mayor o igual que el valor del folio inicial.");
                    validation.setComponent(jtfNumberEnd);
                }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPrint) {
                actionPrint();
            }
            else if (button == jbExit) {
                actionClose();
            }
            else if (button == jbBookKeepingCenter) {
                actionPerformedBookKeepingCenter();
            }
            else if (button == jbRecordType) {
                actionPerformedRecordType();
            }
            else if (button == jbAccountCash) {
                actionPerformedAccountCash();
            }
            else if (button == jbDateStart) {
                actionPerformedDateStart();
            }
            else if (button == jbDateEnd) {
                actionPerformedDateEnd();
            }
            else if (button == jbCreatorPickMe) {
                actionPerformedCreatorPickMe();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == jcbRecordType) {
                itemStateChangedRecordType();
            }
        }
        else if (e.getSource() instanceof JRadioButton && e.getStateChange() == ItemEvent.SELECTED) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            
            if (radioButton == jrbRangeByDate) {
                itemStateChangedRangeByDate();
            }
            else if (radioButton == jrbRangeByNumber) {
                itemStateChangedRangeByNumber();
            }
        }
    }
}
