/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormItemGroup.java
 *
 * Created on 25/08/2009, 01:41:09 PM
 */

package erp.mitm.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItemFamily;
import erp.mitm.data.SDataItemGroup;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SFormItemGroup extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItemGroup moItemGroup;
    private erp.lib.form.SFormField moFieldFkItemFamilyId;
    private erp.lib.form.SFormField moFieldItemGroup;
    private erp.lib.form.SFormField moFieldIsFreeDiscountUnitary;
    private erp.lib.form.SFormField moFieldIsFreeDiscountEntry;
    private erp.lib.form.SFormField moFieldIsFreeDiscountDoc;
    private erp.lib.form.SFormField moFieldIsFreePrice;
    private erp.lib.form.SFormField moFieldIsFreeDiscount;
    private erp.lib.form.SFormField moFieldIsFreeCommissions;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /**
     * Creates new form SFormItemGroup
     * @param client
     */
    public SFormItemGroup(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.ITMU_IGRP;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel111 = new javax.swing.JPanel();
        jlFkItemFamilyId = new javax.swing.JLabel();
        jcbFkItemFamilyId = new javax.swing.JComboBox();
        jbFkItemFamilyId = new javax.swing.JButton();
        jPanel112 = new javax.swing.JPanel();
        jlItemGroup = new javax.swing.JLabel();
        jtfItemGroup = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jckIsFreeDiscountUnitary = new javax.swing.JCheckBox();
        jckIsFreePrice = new javax.swing.JCheckBox();
        jckIsFreeDiscountEntry = new javax.swing.JCheckBox();
        jckIsFreeDiscount = new javax.swing.JCheckBox();
        jckIsFreeDiscountDoc = new javax.swing.JCheckBox();
        jckIsFreeCommissions = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpCommand = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Grupo de ítems");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel11.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel111.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkItemFamilyId.setText("Familia de ítems: *");
        jlFkItemFamilyId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel111.add(jlFkItemFamilyId);

        jcbFkItemFamilyId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkItemFamilyId.setPreferredSize(new java.awt.Dimension(300, 23));
        jcbFkItemFamilyId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbFkItemFamilyIdItemStateChanged(evt);
            }
        });
        jPanel111.add(jcbFkItemFamilyId);

        jbFkItemFamilyId.setText("jButton1");
        jbFkItemFamilyId.setToolTipText("Seleccionar familia de ítems");
        jbFkItemFamilyId.setFocusable(false);
        jbFkItemFamilyId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel111.add(jbFkItemFamilyId);

        jPanel11.add(jPanel111);

        jPanel112.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemGroup.setText("Nombre: *");
        jlItemGroup.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel112.add(jlItemGroup);

        jtfItemGroup.setText("TEXT");
        jtfItemGroup.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel112.add(jtfItemGroup);

        jPanel11.add(jPanel112);

        jPanel1.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel12.setLayout(new java.awt.GridLayout(5, 2, 5, 5));

        jckIsFreeDiscountUnitary.setText("Sin descuento unitario");
        jPanel12.add(jckIsFreeDiscountUnitary);

        jckIsFreePrice.setText("Sin precio en listas de precios");
        jPanel12.add(jckIsFreePrice);

        jckIsFreeDiscountEntry.setText("Sin descuento en partida");
        jPanel12.add(jckIsFreeDiscountEntry);

        jckIsFreeDiscount.setText("Sin descuento en listas de precios");
        jPanel12.add(jckIsFreeDiscount);

        jckIsFreeDiscountDoc.setText("Sin descuento en documento");
        jPanel12.add(jckIsFreeDiscountDoc);

        jckIsFreeCommissions.setText("Sin comisiones de venta");
        jPanel12.add(jckIsFreeCommissions);
        jPanel12.add(jLabel1);
        jPanel12.add(jLabel2);
        jPanel12.add(jLabel3);

        jckIsDeleted.setForeground(new java.awt.Color(204, 0, 0));
        jckIsDeleted.setText("Registro eliminado");
        jPanel12.add(jckIsDeleted);

        jPanel1.add(jPanel12, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpCommand.setPreferredSize(new java.awt.Dimension(392, 33));
        jpCommand.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommand.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpCommand.add(jbCancel);

        getContentPane().add(jpCommand, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(480, 300));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivate();
    }//GEN-LAST:event_formWindowActivated

    private void jcbFkItemFamilyIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbFkItemFamilyIdItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            itemStateChangedItemFamily();
        }
    }//GEN-LAST:event_jcbFkItemFamilyIdItemStateChanged

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldFkItemFamilyId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemFamilyId, jlFkItemFamilyId);
        moFieldFkItemFamilyId.setPickerButton(jbFkItemFamilyId);
        moFieldItemGroup = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfItemGroup, jlItemGroup);
        moFieldItemGroup.setLengthMax(50);
        moFieldIsFreeDiscountUnitary = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeDiscountUnitary);
        moFieldIsFreeDiscountEntry = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeDiscountEntry);
        moFieldIsFreeDiscountDoc = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeDiscountDoc);
        moFieldIsFreePrice = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreePrice);
        moFieldIsFreeDiscount = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeDiscount);
        moFieldIsFreeCommissions = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeCommissions);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkItemFamilyId);
        mvFields.add(moFieldItemGroup);
        mvFields.add(moFieldIsFreeDiscountUnitary);
        mvFields.add(moFieldIsFreeDiscountEntry);
        mvFields.add(moFieldIsFreeDiscountDoc);
        mvFields.add(moFieldIsFreePrice);
        mvFields.add(moFieldIsFreeDiscount);
        mvFields.add(moFieldIsFreeCommissions);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbFkItemFamilyId.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivate() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkItemFamilyId.requestFocus();
        }
    }

    private void readItemFamilySettings() {
        if (jcbFkItemFamilyId.getSelectedIndex() <= 0) {
            jckIsFreeDiscountUnitary.setEnabled(false);
            jckIsFreeDiscountEntry.setEnabled(false);
            jckIsFreeDiscountDoc.setEnabled(false);
            jckIsFreePrice.setEnabled(false);
            jckIsFreeDiscount.setEnabled(false);
            jckIsFreeCommissions.setEnabled(false);
            
            jckIsFreeDiscountUnitary.setSelected(false);
            jckIsFreeDiscountEntry.setSelected(false);
            jckIsFreeDiscountDoc.setSelected(false);
            jckIsFreePrice.setSelected(false);
            jckIsFreeDiscount.setSelected(false);
            jckIsFreeCommissions.setSelected(false);
        }
        else {
            SDataItemFamily family = (SDataItemFamily) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_IFAM, moFieldFkItemFamilyId.getKey(),SLibConstants.EXEC_MODE_VERBOSE);

            jckIsFreeDiscountUnitary.setEnabled(family.getIsFreeDiscountUnitary());
            jckIsFreeDiscountEntry.setEnabled(family.getIsFreeDiscountEntry());
            jckIsFreeDiscountDoc.setEnabled(family.getIsFreeDiscountDoc());
            jckIsFreePrice.setEnabled(family.getIsFreePrice());
            jckIsFreeDiscount.setEnabled(family.getIsFreeDiscount());
            jckIsFreeCommissions.setEnabled(family.getIsFreeCommissions());

            jckIsFreeDiscountUnitary.setSelected(family.getIsFreeDiscountUnitary());
            jckIsFreeDiscountEntry.setSelected(family.getIsFreeDiscountEntry());
            jckIsFreeDiscountDoc.setSelected(family.getIsFreeDiscountDoc());
            jckIsFreePrice.setSelected(family.getIsFreePrice());
            jckIsFreeDiscount.setSelected(family.getIsFreeDiscount());
            jckIsFreeCommissions.setSelected(family.getIsFreeCommissions());
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionFkItemFamilyId() {
        miClient.pickOption(SDataConstants.ITMU_IFAM, moFieldFkItemFamilyId, null);
    }

    private void itemStateChangedItemFamily() {
        readItemFamilySettings();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JPanel jPanel112;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkItemFamilyId;
    private javax.swing.JButton jbOk;
    private javax.swing.JComboBox jcbFkItemFamilyId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsFreeCommissions;
    private javax.swing.JCheckBox jckIsFreeDiscount;
    private javax.swing.JCheckBox jckIsFreeDiscountDoc;
    private javax.swing.JCheckBox jckIsFreeDiscountEntry;
    private javax.swing.JCheckBox jckIsFreeDiscountUnitary;
    private javax.swing.JCheckBox jckIsFreePrice;
    private javax.swing.JLabel jlFkItemFamilyId;
    private javax.swing.JLabel jlItemGroup;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextField jtfItemGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moItemGroup = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        readItemFamilySettings();
        
        jckIsDeleted.setEnabled(false);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkItemFamilyId, SDataConstants.ITMU_IFAM);
    }

    @Override
    public SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            Object[] oParamsIn = new Object[] { moItemGroup == null ? 0 : moItemGroup.getPkItemGroupId(), moFieldFkItemFamilyId.getKeyAsIntArray()[0], moFieldItemGroup.getString() };

            if (SDataUtilities.callProcedureVal(miClient, SProcConstants.ITMU_IGRP_VAL, oParamsIn, SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                if (miClient.showMsgBoxConfirm("El valor del campo '" + jlItemGroup.getText() + "' ya existe, ¿desea conservalo? ") == JOptionPane.NO_OPTION) {
                    validation.setComponent(jtfItemGroup);
                    validation.setIsError(true);
                }
            }
        }

        if (!validation.getIsError()) {
            if (jckIsFreeDiscount.isSelected() && !jckIsFreePrice.isSelected()) {
                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_OPTION_SELECT + "'" + jckIsFreePrice.getText() + "'");
                validation.setComponent(jckIsFreePrice);
            }
        }
        
        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moItemGroup = (SDataItemGroup) registry;

        moFieldFkItemFamilyId.setFieldValue(new int[] { moItemGroup.getFkItemFamilyId() });
        readItemFamilySettings();
        moFieldItemGroup.setFieldValue(moItemGroup.getItemGroup());
        moFieldIsFreeDiscountUnitary.setFieldValue(moItemGroup.getIsFreeDiscountUnitary());
        moFieldIsFreeDiscountEntry.setFieldValue(moItemGroup.getIsFreeDiscountEntry());
        moFieldIsFreeDiscountDoc.setFieldValue(moItemGroup.getIsFreeDiscountDoc());
        moFieldIsFreePrice.setFieldValue(moItemGroup.getIsFreePrice());
        moFieldIsFreeDiscount.setFieldValue(moItemGroup.getIsFreeDiscount());
        moFieldIsFreeCommissions.setFieldValue(moItemGroup.getIsFreeCommissions());
        moFieldIsDeleted.setFieldValue(moItemGroup.getIsDeleted());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moItemGroup == null) {
            moItemGroup = new SDataItemGroup();
            moItemGroup.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moItemGroup.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moItemGroup.setFkItemFamilyId(moFieldFkItemFamilyId.getKeyAsIntArray()[0]);
        moItemGroup.setItemGroup(moFieldItemGroup.getString());
        moItemGroup.setIsFreePrice(jckIsFreePrice.isEnabled() && moFieldIsFreePrice.getBoolean());
        moItemGroup.setIsFreeDiscount(jckIsFreeDiscount.isEnabled() && moFieldIsFreeDiscount.getBoolean());
        moItemGroup.setIsFreeDiscountUnitary(jckIsFreeDiscountUnitary.isEnabled() && moFieldIsFreeDiscountUnitary.getBoolean());
        moItemGroup.setIsFreeDiscountEntry(jckIsFreeDiscountEntry.isEnabled() && moFieldIsFreeDiscountEntry.getBoolean());
        moItemGroup.setIsFreeDiscountDoc(jckIsFreeDiscountDoc.isEnabled() && moFieldIsFreeDiscountDoc.getBoolean());
        moItemGroup.setIsFreeCommissions(jckIsFreeCommissions.isEnabled() && moFieldIsFreeCommissions.getBoolean());
        moItemGroup.setIsDeleted(moFieldIsDeleted.getBoolean());

        return moItemGroup;
    }

    @Override
    public void setValue(int type, Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkItemFamilyId) {
                actionFkItemFamilyId();
            }
        }
    }
}
