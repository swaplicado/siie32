/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormItemSimplified.java
 *
 * Created on 11/10/2010
 */

package erp.mitm.form;

import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataBrand;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataItemGeneric;
import erp.mitm.data.SDataManufacturer;
import erp.mitm.data.SDataVariety;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mtrn.data.STrnUtilities;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormItemSimplified extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.FocusListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItem moItem;
    private erp.mitm.data.SDataItemGeneric moItemGeneric;
    private erp.lib.form.SFormField moFieldFkItemGenericId;
    private erp.lib.form.SFormField moFieldName;
    private erp.lib.form.SFormField moFieldNameShort;
    private erp.lib.form.SFormField moFieldCode;
    private erp.lib.form.SFormField moFieldItemKey;
    private erp.lib.form.SFormField moFieldFkUnitId;
    private erp.lib.form.SFormField moFieldFkAccountEbitdaTypeId;
    private erp.lib.form.SFormField moFieldFkFiscalAccountIncId;
    private erp.lib.form.SFormField moFieldFkFiscalAccountExpId;
    private erp.lib.form.SFormField moFieldIsReference;
    private erp.lib.form.SFormField moFieldIsPrepayment;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private int[] manItemClassKey;

    /** Creates new form SFormItemSimplified */
    public SFormItemSimplified(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.ITMU_ITEM;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel52 = new javax.swing.JPanel();
        jlFkItemGenericId = new javax.swing.JLabel();
        jcbFkItemGenericId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPickItemGeneric = new javax.swing.JButton();
        jbEditItemGeneric = new javax.swing.JButton();
        jPanel54 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();
        jPanel60 = new javax.swing.JPanel();
        jlNameShort = new javax.swing.JLabel();
        jtfNameShort = new javax.swing.JTextField();
        jbCopyName = new javax.swing.JButton();
        jPanel56 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        jtfCode = new javax.swing.JTextField();
        jbComputeNewCode = new javax.swing.JButton();
        jPanel57 = new javax.swing.JPanel();
        jlItemKey = new javax.swing.JLabel();
        jtfItemKey = new javax.swing.JTextField();
        jPanel58 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItemNameRo = new javax.swing.JTextField();
        jPanel59 = new javax.swing.JPanel();
        jlItemShort = new javax.swing.JLabel();
        jtfItemNameShortRo = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlFkUnitId = new javax.swing.JLabel();
        jcbFkUnitId = new javax.swing.JComboBox<SFormComponentItem>();
        jbEditUnit = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jckIsReference = new javax.swing.JCheckBox();
        jckIsPrepayment = new javax.swing.JCheckBox();
        jPanel47 = new javax.swing.JPanel();
        jlFkAccountEbitdaTypeId = new javax.swing.JLabel();
        jcbFkAccountEbitdaTypeId = new javax.swing.JComboBox();
        jbFkAccountEbitdaTypeId = new javax.swing.JButton();
        jPanel45 = new javax.swing.JPanel();
        jlFkFiscalAccountIncId = new javax.swing.JLabel();
        jcbFkFiscalAccountIncId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkFiscalAccountIncId = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel46 = new javax.swing.JPanel();
        jlFkFiscalAccountExpId = new javax.swing.JLabel();
        jcbFkFiscalAccountExpId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkFiscalAccountExpId = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel48 = new javax.swing.JPanel();
        jlFkCfdProdServId_n = new javax.swing.JLabel();
        moKeyCfdProdServId_n = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlTariff = new javax.swing.JLabel();
        moTextTariff = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jtfPkItemId_Ro = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ítem");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(15, 1, 0, 5));

        jPanel52.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkItemGenericId.setText("Ítem genérico: *");
        jlFkItemGenericId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel52.add(jlFkItemGenericId);

        jcbFkItemGenericId.setMaximumRowCount(12);
        jcbFkItemGenericId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkItemGenericId.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel52.add(jcbFkItemGenericId);

        jbPickItemGeneric.setText("jButton1");
        jbPickItemGeneric.setToolTipText("Seleccionar ítem genérico");
        jbPickItemGeneric.setFocusable(false);
        jbPickItemGeneric.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel52.add(jbPickItemGeneric);

        jbEditItemGeneric.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditItemGeneric.setToolTipText("Modificar ítem genérico");
        jbEditItemGeneric.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbEditItemGeneric.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel52.add(jbEditItemGeneric);

        jPanel4.add(jPanel52);

        jPanel54.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre: *");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel54.add(jlName);

        jtfName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel54.add(jtfName);

        jPanel4.add(jPanel54);

        jPanel60.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameShort.setText("Nombre cto.: *");
        jlNameShort.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel60.add(jlNameShort);

        jtfNameShort.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel60.add(jtfNameShort);

        jbCopyName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_action.gif"))); // NOI18N
        jbCopyName.setToolTipText("Copiar nombre");
        jbCopyName.setFocusable(false);
        jbCopyName.setPreferredSize(new java.awt.Dimension(23, 22));
        jPanel60.add(jbCopyName);

        jPanel4.add(jPanel60);

        jPanel56.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código del ítem: *");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel56.add(jlCode);

        jtfCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel56.add(jtfCode);

        jbComputeNewCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_wizard.gif"))); // NOI18N
        jbComputeNewCode.setToolTipText("Generar nuevo código");
        jbComputeNewCode.setFocusable(false);
        jbComputeNewCode.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel56.add(jbComputeNewCode);

        jPanel4.add(jPanel56);

        jPanel57.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemKey.setText("Clave del ítem: *");
        jlItemKey.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel57.add(jlItemKey);

        jtfItemKey.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel57.add(jtfItemKey);

        jPanel4.add(jPanel57);

        jPanel58.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel58.add(jlItem);

        jtfItemNameRo.setEditable(false);
        jtfItemNameRo.setFocusable(false);
        jtfItemNameRo.setMinimumSize(new java.awt.Dimension(6, 23));
        jtfItemNameRo.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel58.add(jtfItemNameRo);

        jPanel4.add(jPanel58);

        jPanel59.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemShort.setText("Ítem corto:");
        jlItemShort.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel59.add(jlItemShort);

        jtfItemNameShortRo.setEditable(false);
        jtfItemNameShortRo.setFocusable(false);
        jtfItemNameShortRo.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel59.add(jtfItemNameShortRo);

        jPanel4.add(jPanel59);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkUnitId.setText("Unidad física: *");
        jlFkUnitId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFkUnitId);

        jcbFkUnitId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkUnitId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jcbFkUnitId);

        jbEditUnit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbEditUnit.setToolTipText("Modificar unidad física");
        jbEditUnit.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbEditUnit.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbEditUnit);

        jPanel4.add(jPanel5);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jckIsReference.setText("Referencia obligatoria");
        jckIsReference.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jckIsReference);

        jckIsPrepayment.setText("Es anticipo");
        jckIsPrepayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jckIsPrepayment);

        jPanel4.add(jPanel9);

        jPanel47.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel47.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkAccountEbitdaTypeId.setText("Tipo EBITDA: *");
        jlFkAccountEbitdaTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel47.add(jlFkAccountEbitdaTypeId);

        jcbFkAccountEbitdaTypeId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkAccountEbitdaTypeId.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel47.add(jcbFkAccountEbitdaTypeId);

        jbFkAccountEbitdaTypeId.setText("...");
        jbFkAccountEbitdaTypeId.setToolTipText("Seleccionar tipo de cuenta EBITDA");
        jbFkAccountEbitdaTypeId.setFocusable(false);
        jbFkAccountEbitdaTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel47.add(jbFkAccountEbitdaTypeId);

        jPanel4.add(jPanel47);

        jPanel45.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkFiscalAccountIncId.setText("Cód. agrupador: *");
        jlFkFiscalAccountIncId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.add(jlFkFiscalAccountIncId);

        jcbFkFiscalAccountIncId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkFiscalAccountIncId.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel45.add(jcbFkFiscalAccountIncId);

        jbFkFiscalAccountIncId.setText("jButton1");
        jbFkFiscalAccountIncId.setToolTipText("Seleccionar código agrupador SAT (ingresos)");
        jbFkFiscalAccountIncId.setFocusable(false);
        jbFkFiscalAccountIncId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel45.add(jbFkFiscalAccountIncId);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("(Ingresos SAT)");
        jLabel1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel45.add(jLabel1);

        jPanel4.add(jPanel45);

        jPanel46.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkFiscalAccountExpId.setText("Cód. agrupador: *");
        jlFkFiscalAccountExpId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel46.add(jlFkFiscalAccountExpId);

        jcbFkFiscalAccountExpId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkFiscalAccountExpId.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel46.add(jcbFkFiscalAccountExpId);

        jbFkFiscalAccountExpId.setText("jButton1");
        jbFkFiscalAccountExpId.setToolTipText("Seleccionar código agrupador SAT (egresos)");
        jbFkFiscalAccountExpId.setFocusable(false);
        jbFkFiscalAccountExpId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel46.add(jbFkFiscalAccountExpId);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("(Egresos SAT)");
        jLabel2.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel46.add(jLabel2);

        jPanel4.add(jPanel46);

        jPanel48.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel48.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkCfdProdServId_n.setText("ProdServ SAT:");
        jlFkCfdProdServId_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel48.add(jlFkCfdProdServId_n);

        moKeyCfdProdServId_n.setMaximumRowCount(20);
        moKeyCfdProdServId_n.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel48.add(moKeyCfdProdServId_n);

        jPanel4.add(jPanel48);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTariff.setText("Fracc. arancelaria:");
        jlTariff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlTariff);
        jPanel7.add(moTextTariff);

        jPanel4.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 0));

        jckIsDeleted.setForeground(new java.awt.Color(204, 0, 0));
        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jckIsDeleted.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jckIsDeleted.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(jckIsDeleted);

        jPanel4.add(jPanel8);

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jtfPkItemId_Ro.setEditable(false);
        jtfPkItemId_Ro.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPkItemId_Ro.setToolTipText("ID del registro");
        jtfPkItemId_Ro.setFocusable(false);
        jtfPkItemId_Ro.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel3.add(jtfPkItemId_Ro);

        jPanel1.add(jPanel3);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel6.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel6.add(jbCancel);

        jPanel1.add(jPanel6);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(816, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();
        manItemClassKey = null;

        moFieldFkItemGenericId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemGenericId, jlFkItemGenericId);
        moFieldName = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfName, jlName);
        moFieldName.setLengthMax(50);
        moFieldNameShort = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfNameShort, jlNameShort);
        moFieldNameShort.setLengthMax(25);
        moFieldCode = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfCode, jlCode);
        moFieldCode.setLengthMax(10);
        moFieldItemKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfItemKey, jlItemKey);
        moFieldItemKey.setLengthMax(35);
        moFieldFkUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitId, jlFkUnitId);
        moFieldFkAccountEbitdaTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkAccountEbitdaTypeId, jlFkAccountEbitdaTypeId);
        moFieldFkAccountEbitdaTypeId.setPickerButton(jbFkAccountEbitdaTypeId);
        moFieldFkFiscalAccountIncId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkFiscalAccountIncId, jlFkFiscalAccountIncId);
        moFieldFkFiscalAccountIncId.setPickerButton(jbFkFiscalAccountIncId);
        moFieldFkFiscalAccountExpId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkFiscalAccountExpId, jlFkFiscalAccountExpId);
        moFieldFkFiscalAccountExpId.setPickerButton(jbFkFiscalAccountExpId);
        moFieldIsReference = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsReference);
        moFieldIsPrepayment = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsPrepayment);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldFkItemGenericId);
        mvFields.add(moFieldName);
        mvFields.add(moFieldNameShort);
        mvFields.add(moFieldCode);
        mvFields.add(moFieldItemKey);
        mvFields.add(moFieldFkUnitId);
        mvFields.add(moFieldFkAccountEbitdaTypeId);
        mvFields.add(moFieldFkFiscalAccountIncId);
        mvFields.add(moFieldFkFiscalAccountExpId);
        mvFields.add(moFieldIsReference);
        mvFields.add(moFieldIsPrepayment);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbCopyName.addActionListener(this);
        jbPickItemGeneric.addActionListener(this);
        jbEditItemGeneric.addActionListener(this);
        jbComputeNewCode.addActionListener(this);
        jbEditUnit.addActionListener(this);
        jbFkAccountEbitdaTypeId.addActionListener(this);
        jbFkFiscalAccountIncId.addActionListener(this);
        jbFkFiscalAccountExpId.addActionListener(this);

        jcbFkItemGenericId.addItemListener(this);

        jtfName.addFocusListener(this);
        jtfNameShort.addFocusListener(this);
        jtfCode.addFocusListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbFkItemGenericId.isEnabled()) {
                jcbFkItemGenericId.requestFocus();
            }
            else {
                jtfName.requestFocus();
            }
        }
    }

    private void setFormTitle() {
        setTitle("Ítem " + SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.ITMS_CL_ITEM, manItemClassKey).toLowerCase());
    }

    private void actionPickItemGeneric() {
        miClient.pickOption(SDataConstants.ITMU_IGEN, moFieldFkItemGenericId, manItemClassKey);
    }

    private void actionEditItemGeneric() {
        if (getStock() != 0) {
            miClient.showMsgBoxWarning("No puede cambiar el valor del campo '" + jlFkItemGenericId.getText() + "' debido a que hay existencias en los inventarios.");
        }
        else {
            if (miClient.showMsgBoxConfirm("Cambiar el valor del campo '" + jlFkItemGenericId.getText() + "' afectará considerablemente la configuración del ítem.\n¿Está seguro que desea hacerlo?") == JOptionPane.YES_OPTION) {
                jbEditItemGeneric.setEnabled(false);
                jbPickItemGeneric.setEnabled(true);
                jcbFkItemGenericId.setEnabled(true);
                jcbFkItemGenericId.requestFocus();
            }
        }
    }

    private void actionEditUnit() {
        if (getStock() != 0) {
            miClient.showMsgBoxWarning("No puede cambiar el valor del campo '" + jlFkUnitId.getText() + "' debido a que hay existencias en los inventarios.");
        }
        else {
            jbEditUnit.setEnabled(false);
            jcbFkUnitId.setEnabled(true);
            jcbFkUnitId.requestFocus();
        }
    }

    private void actionFkAccountEbitdaTypeId() {
        miClient.pickOption(SDataConstants.FINU_TP_ACC_EBITDA, moFieldFkAccountEbitdaTypeId, null);
    }

    private void actionFkFiscalAccountIncId() {
        miClient.pickOption(SDataConstants.FINS_FISCAL_ACC, moFieldFkFiscalAccountIncId, null);
    }

    private void actionFkFiscalAccountExpId() {
        miClient.pickOption(SDataConstants.FINS_FISCAL_ACC, moFieldFkFiscalAccountExpId, null);
    }

    private double getStock() {
        double stock = 0;
        int nYear = 0;

        nYear = miClient.getSessionXXX().getSystemYear();

        try {
            stock = STrnUtilities.obtainStock(miClient, nYear, moItem.getPkItemId(), moItem.getFkUnitId(), SLibConstants.UNDEFINED, SLibConstants.UNDEFINED, SLibConstants.UNDEFINED, SLibConstants.UNDEFINED, SLibTimeUtilities.getEndOfYear(miClient.getSessionXXX().getSystemDate()), null);
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
        }

        return stock;
    }

    private java.lang.String getItemKeyAndNameByPosition(SDataBrand brd, SDataManufacturer mfr, int position, int fieldType) {
        String text = "";

        switch (fieldType) {
            case SDataConstantsSys.ITMS_DEF_ITEM_KEY:
                if (!moItemGeneric.getIsItemLineApplying()) {
                    if (moItemGeneric.getKeyOrdinaryPosItemGeneric() == position) {
                        text = moItemGeneric.getCode();
                    }
                    else if (moItemGeneric.getKeyOrdinaryPosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getCode();
                    }
                    else if (moItemGeneric.getKeyOrdinaryPosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getCode();
                    }
                    else if (moItemGeneric.getKeyOrdinaryPosCode() == position) {
                        text = SLibUtilities.textTrim(moFieldCode.getString()).toUpperCase();
                    }
                }
                else {
                    if (moItemGeneric.getKeyLinePosItemGeneric() == position) {
                        text = moItemGeneric.getCode();
                    }
                    else if (moItemGeneric.getKeyLinePosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getCode();
                    }
                    else if (moItemGeneric.getKeyLinePosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getCode();
                    }
                }
                break;

            case SDataConstantsSys.ITMS_DEF_ITEM:
                if (!moItemGeneric.getIsItemLineApplying()) {
                    if (moItemGeneric.getNamingOrdinaryPosItemGeneric() == position) {
                        text = moItemGeneric.getItemGeneric();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getBrand();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getManufacturer();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosName() == position) {
                        text = SLibUtilities.textTrim(moFieldName.getString()).toUpperCase();
                    }
                }
                else {
                    if (moItemGeneric.getNamingLinePosItemGeneric() == position) {
                        text = moItemGeneric.getItemGeneric();
                    }
                    else if (moItemGeneric.getNamingLinePosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getBrand();
                    }
                    else if (moItemGeneric.getNamingLinePosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getManufacturer();
                    }
                }
                break;

            case SDataConstantsSys.ITMS_DEF_ITEM_SHORT:
                if (!moItemGeneric.getIsItemLineApplying()) {
                    if (moItemGeneric.getNamingOrdinaryPosItemGeneric() == position) {
                        text = moItemGeneric.getItemGenericShort();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getBrand();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getManufacturer();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosName() == position) {
                        text = moFieldNameShort.getString().toUpperCase();
                    }
                }
                else {
                    if (moItemGeneric.getNamingLinePosItemGeneric() == position) {
                        text = moItemGeneric.getItemGenericShort();
                    }
                    else if (moItemGeneric.getNamingLinePosBrand() == position && brd.getPkBrandId() != SDataConstantsSys.ITMU_BRD_NA) {
                        text = brd.getBrand();
                    }
                    else if (moItemGeneric.getNamingOrdinaryPosManufacturer() == position && mfr.getPkManufacturerId() != SDataConstantsSys.ITMU_MFR_NA) {
                        text = mfr.getManufacturer();
                    }
                }
                break;

            default:
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_UTIL_UNKNOWN_OPTION);
        }

        return text;
    }

    private void readItemGenericParams() {
        jtfItemNameRo.setText("");
        jtfItemNameShortRo.setText("");

        if (jcbFkItemGenericId.getSelectedIndex() <= 0) {
            moItemGeneric = null;

            jtfNameShort.setEnabled(false);
            jbCopyName.setEnabled(false);

            jtfNameShort.setText("");
            jtfItemNameShortRo.setText("");

            jtfCode.setEnabled(false);
            jbComputeNewCode.setEnabled(false);
            jtfItemKey.setEditable(false);
            jtfItemKey.setFocusable(false);

            jtfCode.setText("");
            jtfItemKey.setText("");

            jcbFkUnitId.removeAllItems();
            jcbFkUnitId.setEnabled(false);
            jbEditUnit.setEnabled(false);
        }
        else {
            moItemGeneric = (SDataItemGeneric) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_IGEN, moFieldFkItemGenericId.getKey(), SLibConstants.EXEC_MODE_SILENT);

            if (moItemGeneric.getIsItemShortApplying()) {
                jtfNameShort.setEnabled(true);
                jbCopyName.setEnabled(true);
            }
            else {
                jtfNameShort.setEnabled(false);
                jbCopyName.setEnabled(false);

                jtfNameShort.setText("");
                jtfItemNameShortRo.setText("");
            }

            if (moItemGeneric.getIsItemKeyApplying()) {
                if (moItemGeneric.getIsItemKeyAutomatic()) {
                    jtfCode.setEnabled(true);
                    jbComputeNewCode.setEnabled(true);
                    jtfItemKey.setEditable(false);
                    jtfItemKey.setFocusable(false);
                }
                else {
                    jtfCode.setEnabled(false);
                    jbComputeNewCode.setEnabled(false);
                    jtfItemKey.setEditable(true);
                    jtfItemKey.setFocusable(true);
                }
            }
            else {
                jtfCode.setEnabled(false);
                jbComputeNewCode.setEnabled(false);
                jtfItemKey.setEditable(false);
                jtfItemKey.setFocusable(false);
            }

            if (!jtfCode.isEnabled()) {
                jtfCode.setText("");
            }

            if (!jtfItemKey.isEnabled()) {
                jtfItemKey.setText("");
            }

            SFormUtilities.populateComboBox(miClient, jcbFkUnitId, SDataConstants.ITMU_UNIT, new int[] { moItemGeneric.getFkUnitTypeId() });

            jcbFkUnitId.setEnabled(true);
            jbEditUnit.setEnabled(false);
        }
    }

    private void computeItemKeyAndName() {
        computeItemKey();
        computeItemName();
        computeItemNameShort();
    }

    private void computeItemKey() {
        String text = "";
        SDataBrand brd = null;
        SDataManufacturer mfr = null;
        SDataVariety var = null;

        if (jcbFkItemGenericId.getSelectedIndex() > 0) {
            if (moItemGeneric.getIsItemKeyApplying() && moItemGeneric.getIsItemKeyAutomatic()) {
                brd = (SDataBrand) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_BRD, new int[] { SDataConstantsSys.ITMU_BRD_NA }, SLibConstants.EXEC_MODE_SILENT);
                mfr = (SDataManufacturer) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_MFR, new int[] { SDataConstantsSys.ITMU_MFR_NA }, SLibConstants.EXEC_MODE_SILENT);

                if (!moItemGeneric.getIsItemLineApplying()) {
                    for (int pos = 1; pos <= SDataConstantsSys.ITMS_KEY_ORD_POS_QTY; pos++) {
                        text += SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM_KEY));
                    }
                }
                else {
                    for (int pos = 1; pos <= SDataConstantsSys.ITMS_KEY_LINE_POS_QTY; pos++) {
                        text += SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM_KEY));
                    }

                    text += moFieldCode.getString();
                }

                moFieldItemKey.setFieldValue(text);
            }
        }
    }

    private void computeItemName() {
        String text = "";
        SDataBrand brd = null;
        SDataManufacturer mfr = null;
        SDataVariety var = null;

        if (jcbFkItemGenericId.getSelectedIndex() > 0) {
            brd = (SDataBrand) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_BRD, new int[] { SDataConstantsSys.ITMU_BRD_NA }, SLibConstants.EXEC_MODE_SILENT);
            mfr = (SDataManufacturer) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_MFR, new int[] { SDataConstantsSys.ITMU_MFR_NA }, SLibConstants.EXEC_MODE_SILENT);

            if (!moItemGeneric.getIsItemLineApplying()) {
                for (int pos = 1; pos <= SDataConstantsSys.ITMS_NAM_ORD_POS_QTY; pos++) {
                    text += (text.length() == 0 ? "" : " ") + SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM));
                }
            }
            else {
                for (int pos = 1; pos <= SDataConstantsSys.ITMS_NAM_LINE_POS_QTY; pos++) {
                    text += (text.length() == 0 ? "" : " ") + SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM));
                }

                text += (text.length() == 0 ? "" : " ") + moFieldName.getString();
            }

            jtfItemNameRo.setText(SLibUtilities.textTrim(text));
            jtfItemNameRo.setCaretPosition(0);
        }
    }

    private void computeItemNameShort() {
        String text = "";
        SDataBrand brd = null;
        SDataManufacturer mfr = null;
        SDataVariety var = null;

        if (jcbFkItemGenericId.getSelectedIndex() > 0) {
            if (moItemGeneric.getIsItemShortApplying()) {
                brd = (SDataBrand) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_BRD, new int[] { SDataConstantsSys.ITMU_BRD_NA }, SLibConstants.EXEC_MODE_SILENT);
                mfr = (SDataManufacturer) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_MFR, new int[] { SDataConstantsSys.ITMU_MFR_NA }, SLibConstants.EXEC_MODE_SILENT);

                if (!moItemGeneric.getIsItemLineApplying()) {
                    for (int pos = 1; pos <= SDataConstantsSys.ITMS_NAM_ORD_POS_QTY; pos++) {
                        text += (text.length() == 0 ? "" : " ") + SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM_SHORT));
                    }
                }
                else {
                    for (int pos = 1; pos <= SDataConstantsSys.ITMS_NAM_LINE_POS_QTY; pos++) {
                        text += (text.length() == 0 ? "" : " ") + SLibUtilities.textTrim(getItemKeyAndNameByPosition(brd, mfr, pos, SDataConstantsSys.ITMS_DEF_ITEM_SHORT));
                    }

                    text += (text.length() == 0 ? "" : " ") + moFieldNameShort.getString();
                }

                jtfItemNameShortRo.setText(SLibUtilities.textTrim(text));
                jtfItemNameShortRo.setCaretPosition(0);
            }
        }
    }

    private void itemStateFkItemGenericId() {
        readItemGenericParams();
        computeItemKeyAndName();
    }

    private void actionCopyName() {
        if (jtfName.getText().length() > moFieldName.getLengthMax()) {
            jtfNameShort.setText(jtfName.getText().substring(0, moFieldName.getLengthMax() - 1));
        }
        else {
            jtfNameShort.setText(jtfName.getText());
        }
    }

    /*
     * Focus listener methods:
     */

    private void focusLostName() {
        computeItemKeyAndName();

        if (jtfNameShort.isEnabled() && SLibUtilities.textTrim(jtfNameShort.getText()).length() == 0) {
            actionCopyName();
        }
    }

    private void focusLostNameShort() {
        computeItemKeyAndName();
    }

    private void focusLostCode() {
        computeItemKeyAndName();
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JPanel jPanel48;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel52;
    private javax.swing.JPanel jPanel54;
    private javax.swing.JPanel jPanel56;
    private javax.swing.JPanel jPanel57;
    private javax.swing.JPanel jPanel58;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbComputeNewCode;
    private javax.swing.JButton jbCopyName;
    private javax.swing.JButton jbEditItemGeneric;
    private javax.swing.JButton jbEditUnit;
    private javax.swing.JButton jbFkAccountEbitdaTypeId;
    private javax.swing.JButton jbFkFiscalAccountExpId;
    private javax.swing.JButton jbFkFiscalAccountIncId;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPickItemGeneric;
    private javax.swing.JComboBox jcbFkAccountEbitdaTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkFiscalAccountExpId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkFiscalAccountIncId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemGenericId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkUnitId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsPrepayment;
    private javax.swing.JCheckBox jckIsReference;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlFkAccountEbitdaTypeId;
    private javax.swing.JLabel jlFkCfdProdServId_n;
    private javax.swing.JLabel jlFkFiscalAccountExpId;
    private javax.swing.JLabel jlFkFiscalAccountIncId;
    private javax.swing.JLabel jlFkItemGenericId;
    private javax.swing.JLabel jlFkUnitId;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemKey;
    private javax.swing.JLabel jlItemShort;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameShort;
    private javax.swing.JLabel jlTariff;
    private javax.swing.JTextField jtfCode;
    private javax.swing.JTextField jtfItemKey;
    private javax.swing.JTextField jtfItemNameRo;
    private javax.swing.JTextField jtfItemNameShortRo;
    private javax.swing.JTextField jtfName;
    private javax.swing.JTextField jtfNameShort;
    private javax.swing.JTextField jtfPkItemId_Ro;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCfdProdServId_n;
    private sa.lib.gui.bean.SBeanFieldText moTextTariff;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        moItem = null;
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        jcbFkItemGenericId.setEnabled(true);
        jbPickItemGeneric.setEnabled(true);
        jbEditItemGeneric.setEnabled(false);

        readItemGenericParams();

        jtfItemNameRo.setText("");
        jtfItemNameShortRo.setText("");
        jtfPkItemId_Ro.setText("");

        moFieldFkAccountEbitdaTypeId.setFieldValue(new int[] { SDataConstantsSys.NA });
        moFieldFkFiscalAccountIncId.setFieldValue(new int[] { SModSysConsts.FINS_FISCAL_ACC_NA });
        moFieldFkFiscalAccountExpId.setFieldValue(new int[] { SModSysConsts.FINS_FISCAL_ACC_NA });

        jckIsDeleted.setEnabled(false);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        
        SFormUtilities.populateComboBox(miClient, jcbFkItemGenericId, SDataConstants.ITMU_IGEN, manItemClassKey);
        SFormUtilities.populateComboBox(miClient, jcbFkUnitId, SDataConstants.ITMU_UNIT);
        SFormUtilities.populateComboBox(miClient, jcbFkAccountEbitdaTypeId, SDataConstants.FINU_TP_ACC_EBITDA);
        SFormUtilities.populateComboBox(miClient, jcbFkFiscalAccountIncId, SDataConstants.FINS_FISCAL_ACC);
        SFormUtilities.populateComboBox(miClient, jcbFkFiscalAccountExpId, SDataConstants.FINS_FISCAL_ACC);
        miClient.getSession().populateCatalogue(moKeyCfdProdServId_n, SModConsts.ITMS_CFD_PROD_SERV, SLibConsts.UNDEFINED, null);
        
        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()){
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (jcbFkItemGenericId.getSelectedIndex() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlFkItemGenericId.getText())+ "'.");
            }
            else if (jcbFkUnitId.getSelectedIndex() <= 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlFkUnitId.getText())+ "'.");
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moItem = (SDataItem) registry;

        if (!moItem.getIsRegistryNew()) {
            manItemClassKey = new int[] { moItem.getDbmsDataItemGeneric().getFkItemCategoryId(), moItem.getDbmsDataItemGeneric().getFkItemClassId() };
            SFormUtilities.populateComboBox(miClient, jcbFkItemGenericId, SDataConstants.ITMU_IGEN, manItemClassKey);
            setFormTitle();
        }

        moFieldFkItemGenericId.setFieldValue(new int[] { moItem.getFkItemGenericId() });
        moFieldName.setFieldValue(moItem.getName());
        moFieldNameShort.setFieldValue(moItem.getNameShort());
        moFieldItemKey.setFieldValue(moItem.getKey());
        moFieldCode.setFieldValue(moItem.getCode());
        moFieldFkUnitId.setFieldValue(new int[] { moItem.getFkUnitId() });
        moFieldIsReference.setFieldValue(moItem.getIsReference());
        moFieldIsPrepayment.setFieldValue(moItem.getIsPrepayment());
        moFieldFkAccountEbitdaTypeId.setFieldValue(new int[] { moItem.getFkAccountEbitdaTypeId() });
        moFieldFkFiscalAccountIncId.setFieldValue(new int[] { moItem.getFkFiscalAccountIncId() });
        moFieldFkFiscalAccountExpId.setFieldValue(new int[] { moItem.getFkFiscalAccountExpId() });
        moKeyCfdProdServId_n.setValue(new int[] { moItem.getFkCfdProdServId_n() });
        moTextTariff.setValue(moItem.getTariff());
        moFieldIsDeleted.setFieldValue(moItem.getIsDeleted());

        if (moItem.getIsRegistryNew()) {
            jcbFkItemGenericId.setEnabled(true);
            jbPickItemGeneric.setEnabled(true);
            jbEditItemGeneric.setEnabled(false);
            jcbFkUnitId.setEnabled(true);
            jbEditUnit.setEnabled(false);
        }
        else {
            jcbFkItemGenericId.setEnabled(false);
            jbPickItemGeneric.setEnabled(false);
            jbEditItemGeneric.setEnabled(true);
            jcbFkUnitId.setEnabled(false);
            jbEditUnit.setEnabled(true);
        }

        computeItemKeyAndName();
        jtfPkItemId_Ro.setText("" + moItem.getPkItemId());

        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moItem == null) {
            moItem = new SDataItem();
            moItem.setFkUserNewId(miClient.getSession().getUser().getPkUserId());

            moItem.setFkItemLineId_n(SLibConstants.UNDEFINED);
            moItem.setIsInventoriable(false);

            moItem.setFkItemStatusId(SModSysConsts.ITMS_ST_ITEM_ACT);
            moItem.setFkUnitUnitsContainedId(SDataConstantsSys.ITMU_UNIT_NA);
            moItem.setFkUnitUnitsVirtualId(SDataConstantsSys.ITMU_UNIT_NA);
            moItem.setFkUnitNetContentId(SDataConstantsSys.ITMU_UNIT_NA);
            moItem.setFkUnitNetContentUnitaryId(SDataConstantsSys.ITMU_UNIT_NA);
            moItem.setFkUnitAlternativeTypeId(SDataConstantsSys.ITMU_TP_UNIT_NA);
            moItem.setFkLevelTypeId(SDataConstantsSys.ITMU_TP_LEV_NA);
            moItem.setFkBrandId(SDataConstantsSys.ITMU_BRD_NA);
            moItem.setFkManufacturerId(SDataConstantsSys.ITMU_MFR_NA);
            moItem.setFkElementId(SDataConstantsSys.ITMU_EMT_NA);
            moItem.setFkVariety01Id(SDataConstantsSys.ITMU_VAR_NA);
            moItem.setFkVariety02Id(SDataConstantsSys.ITMU_VAR_NA);
            moItem.setFkVariety03Id(SDataConstantsSys.ITMU_VAR_NA);
            moItem.setFkAdministrativeConceptTypeId(SDataConstantsSys.NA);
            moItem.setFkTaxableConceptTypeId(SDataConstantsSys.NA);
            moItem.setFkItemPackageId_n(SLibConstants.UNDEFINED);
            moItem.setFkDefaultItemRefId_n(SLibConstants.UNDEFINED);
            
        }
        else {
            moItem.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moItem.setFkItemGenericId(moFieldFkItemGenericId.getKeyAsIntArray()[0]);
        moItem.setKey(moFieldItemKey.getString());
        moItem.setItem(jtfItemNameRo.getText());
        moItem.setItemShort(jtfItemNameShortRo.getText());
        moItem.setName(moFieldName.getString());
        moItem.setCode(moFieldCode.getString());
        moItem.setIsReference(moFieldIsReference.getBoolean());
        moItem.setIsPrepayment(moFieldIsPrepayment.getBoolean());
        moItem.setIsDeleted(moFieldIsDeleted.getBoolean());
        moItem.setFkUnitId(moFieldFkUnitId.getKeyAsIntArray()[0]);
        moItem.setFkAccountEbitdaTypeId(moFieldFkAccountEbitdaTypeId.getKeyAsIntArray()[0]);
        moItem.setFkFiscalAccountIncId(moFieldFkFiscalAccountIncId.getKeyAsIntArray()[0]);
        moItem.setFkFiscalAccountExpId(moFieldFkFiscalAccountExpId.getKeyAsIntArray()[0]);
        moItem.setFkCfdProdServId_n(moKeyCfdProdServId_n.getSelectedIndex() <= 0 ? 0 : moKeyCfdProdServId_n.getValue()[0]);
        moItem.setTariff(moTextTariff.getValue());

        return moItem;
    }

    @Override
    public void setValue(int type, Object value) {
        switch (type) {
            case SDataConstants.ITMX_ITEM_SIMPLE:
                switch ((Integer) value) {
                    case SDataConstants.ITMX_ITEM_IDX_SAL_PRO:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_SAL_SRV:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_SAL_SRV;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_ASS_ASS:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_ASS_ASS;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_PUR_CON:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_PUR_CON;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_PUR_EXP:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_PUR_EXP;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_EXP_MFG:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_EXP_MFG;
                        break;
                    case SDataConstants.ITMX_ITEM_IDX_EXP_OPE:
                        manItemClassKey = SDataConstantsSys.ITMS_CL_ITEM_EXP_OPE;
                        break;
                    default:
                }
                setFormTitle();
            default:
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPickItemGeneric) {
                actionPickItemGeneric();
            }
            else if (button == jbEditItemGeneric) {
                actionEditItemGeneric();
            }
            else if (button == jbEditUnit) {
                actionEditUnit();
            }
            else if (button == jbFkAccountEbitdaTypeId) {
                actionFkAccountEbitdaTypeId();
            }
            else if (button == jbFkFiscalAccountIncId) {
                actionFkFiscalAccountIncId();
            }
            else if (button == jbFkFiscalAccountExpId) {
                actionFkFiscalAccountExpId();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbFkItemGenericId) {
                    itemStateFkItemGenericId();
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();

            if (textField == jtfName) {
                focusLostName();
            }
            else if (textField == jtfNameShort) {
                focusLostNameShort();
            }
            else if (textField == jtfCode) {
                focusLostCode();
            }
        }
    }
}
