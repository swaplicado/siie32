/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormItemDescription.java
 *
 * Created on 24/06/2010, 09:18:53 AM
 */

package erp.mitm.form;

import erp.cfd.SCfdXmlCatalogs;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataItemConfigBizPartner;
import erp.mitm.data.SDataUnit;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;

/**
 *
 * @author Alfonso Flores, Claudio Peña, Sergio Flores, Claudio Peña
 */
public class SFormItemConfigBizPartner extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, java.awt.event.ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mitm.data.SDataItemConfigBizPartner moItemConfigBizPartner;
    private erp.lib.form.SFormField moFieldPkItemId;
    private erp.lib.form.SFormField moFieldIsItemDescriptionApplying;
    private erp.lib.form.SFormField moFieldKey;
    private erp.lib.form.SFormField moFieldItem;
    private erp.lib.form.SFormField moFieldItemShort;
    private erp.lib.form.SFormField moFieldFkUnitId;
    private erp.lib.form.SFormField moFieldCfdiUsage;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.mitm.data.SDataItem moItem;

    /** Creates new form SFormItemDescription */
    public SFormItemConfigBizPartner(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.ITMU_CFG_ITEM_BP;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlPkItemId = new javax.swing.JLabel();
        jcbPkItemId = new javax.swing.JComboBox();
        jbPkItemId = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jlOriginalKey = new javax.swing.JLabel();
        jtfOriginalKey = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jlOriginalItem = new javax.swing.JLabel();
        jtfOriginalItem = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jlOriginalItemShort = new javax.swing.JLabel();
        jtfOriginalItemShort = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlOriginalUnit = new javax.swing.JLabel();
        jtfOriginalUnit = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jckIsItemDescriptionApplying = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jlKey = new javax.swing.JLabel();
        jtfKey = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        jtfItem = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlItemShort = new javax.swing.JLabel();
        jtfItemShort = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jlFkUnitId = new javax.swing.JLabel();
        jcbFkUnitId = new javax.swing.JComboBox();
        jbFkUnitId = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlCfdiUsage = new javax.swing.JLabel();
        jcbCfdiUsage = new javax.swing.JComboBox();
        jckIsDeleted = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Descripción de ítem");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(14, 1, 0, 2));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkItemId.setForeground(java.awt.Color.blue);
        jlPkItemId.setText("Ítem: *");
        jlPkItemId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel6.add(jlPkItemId);

        jcbPkItemId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbPkItemId.setPreferredSize(new java.awt.Dimension(400, 23));
        jcbPkItemId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkItemIdItemStateChanged(evt);
            }
        });
        jPanel6.add(jcbPkItemId);

        jbPkItemId.setText("jButton1");
        jbPkItemId.setToolTipText("Seleccionar ítem");
        jbPkItemId.setFocusable(false);
        jbPkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPkItemId);

        jPanel3.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalKey.setText("Clave original:");
        jlOriginalKey.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel4.add(jlOriginalKey);

        jtfOriginalKey.setEditable(false);
        jtfOriginalKey.setText("ORIGINAL KEY");
        jtfOriginalKey.setFocusable(false);
        jtfOriginalKey.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jtfOriginalKey);

        jPanel3.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalItem.setText("Ítem original:");
        jlOriginalItem.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jlOriginalItem);

        jtfOriginalItem.setEditable(false);
        jtfOriginalItem.setText("ORIGINAL ITEM NAME");
        jtfOriginalItem.setFocusable(false);
        jtfOriginalItem.setPreferredSize(new java.awt.Dimension(550, 23));
        jPanel7.add(jtfOriginalItem);

        jPanel3.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalItemShort.setText("Ítem corto original:");
        jlOriginalItemShort.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel8.add(jlOriginalItemShort);

        jtfOriginalItemShort.setEditable(false);
        jtfOriginalItemShort.setText("ORIGINAL ITEM SHORT");
        jtfOriginalItemShort.setFocusable(false);
        jtfOriginalItemShort.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel8.add(jtfOriginalItemShort);

        jPanel3.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOriginalUnit.setText("Unidad original:");
        jlOriginalUnit.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel9.add(jlOriginalUnit);

        jtfOriginalUnit.setEditable(false);
        jtfOriginalUnit.setText("ORIGINAL UNIT");
        jtfOriginalUnit.setFocusable(false);
        jtfOriginalUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfOriginalUnit);

        jPanel3.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel3.add(jPanel5);

        jckIsItemDescriptionApplying.setText("Aplica descripción personalizada");
        jPanel3.add(jckIsItemDescriptionApplying);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlKey.setText("Clave asoc. neg.: *");
        jlKey.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel10.add(jlKey);

        jtfKey.setText("BP KEY");
        jtfKey.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jtfKey);

        jPanel3.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem asoc. neg.: *");
        jlItem.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlItem);

        jtfItem.setText("BP ITEM NAME");
        jtfItem.setPreferredSize(new java.awt.Dimension(550, 23));
        jtfItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfItemFocusLost(evt);
            }
        });
        jPanel11.add(jtfItem);

        jPanel3.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItemShort.setText("Ítem corto asoc. neg.: *");
        jlItemShort.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel12.add(jlItemShort);

        jtfItemShort.setText("BP ITEM SHORT");
        jtfItemShort.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(jtfItemShort);

        jPanel3.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkUnitId.setText("Unidad asoc. neg.: *");
        jlFkUnitId.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel13.add(jlFkUnitId);

        jcbFkUnitId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbFkUnitId.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel13.add(jcbFkUnitId);

        jbFkUnitId.setText("jButton2");
        jbFkUnitId.setToolTipText("Seleccionar unidad");
        jbFkUnitId.setFocusable(false);
        jbFkUnitId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel13.add(jbFkUnitId);

        jPanel3.add(jPanel13);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel3.add(jPanel15);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiUsage.setText("Uso del CFDI:");
        jlCfdiUsage.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel14.add(jlCfdiUsage);

        jcbCfdiUsage.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbCfdiUsage.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(jcbCfdiUsage);

        jPanel3.add(jPanel14);

        jckIsDeleted.setForeground(new java.awt.Color(204, 0, 0));
        jckIsDeleted.setText("Registro eliminado");
        jPanel3.add(jckIsDeleted);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(736, 489));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jcbPkItemIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkItemIdItemStateChanged
        stateChangedItem();
    }//GEN-LAST:event_jcbPkItemIdItemStateChanged

    private void jtfItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfItemFocusLost
        focusLostItem();
    }//GEN-LAST:event_jtfItemFocusLost

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldPkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkItemId, jlPkItemId);
        moFieldPkItemId.setPickerButton(jbPkItemId);
        moFieldIsItemDescriptionApplying = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsItemDescriptionApplying);
        moFieldKey = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfKey, jlKey);
        moFieldKey.setLengthMax(35);
        moFieldItem = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfItem, jlItem);
        moFieldItem.setLengthMax(355);
        moFieldItemShort = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfItemShort, jlItemShort);
        moFieldItemShort.setLengthMax(130);
        moFieldFkUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitId, jlFkUnitId);
        moFieldFkUnitId.setPickerButton(jbFkUnitId);
        moFieldCfdiUsage = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbCfdiUsage, jlCfdiUsage);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkItemId);
        mvFields.add(moFieldIsItemDescriptionApplying);
        mvFields.add(moFieldKey);
        mvFields.add(moFieldItem);
        mvFields.add(moFieldItemShort);
        mvFields.add(moFieldFkUnitId);
        mvFields.add(moFieldCfdiUsage);
        mvFields.add(moFieldIsDeleted);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkItemId.addActionListener(this);
        jbFkUnitId.addActionListener(this);
        jckIsItemDescriptionApplying.addItemListener(this);

        SCfdXmlCatalogs catalogs = ((SSessionCustom) miClient.getSession().getSessionCustom()).getCfdXmlCatalogs();
        catalogs.populateComboBox(jcbCfdiUsage, SDataConstantsSys.TRNS_CFD_CAT_CFD_USE, miClient.getSession().getSystemDate());

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (moItemConfigBizPartner != null ) {
                jtfKey.requestFocus();
            }
            else {
                jcbPkItemId.requestFocus();
            }
        }
    }

    private java.lang.String readUnitSymbol(final int idUnit) {
        SDataUnit oUnit = (SDataUnit) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_UNIT, new int[] { idUnit }, SLibConstants.EXEC_MODE_SILENT);
        
        if (oUnit == null) {
             return "?";
        } 
        else {
            return oUnit.getSymbol();
        }
    }
    
    private void enableUnit(boolean enable) {
        jcbFkUnitId.setEnabled(enable);
        jbFkUnitId.setEnabled(enable);
    }
    
    private void copyItem() {
        if (moFieldItemShort.getString().isEmpty() && jtfItemShort.isEnabled()) {
            if (moFieldItem.getString().length() <= moFieldItemShort.getLengthMax()) {
                moFieldItemShort.setString(moFieldItem.getString());
            }
            else {
                moFieldItemShort.setString(moFieldItem.getString().substring(0, moFieldItemShort.getLengthMax() - 1));
            }
        }
    }
    
    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionPkItemId() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldPkItemId, null);
    }

    private void actionFkUnitId() {
        miClient.pickOption(SDataConstants.ITMU_UNIT, moFieldFkUnitId, new int[] { moItem.getDbmsDataItemGeneric().getFkUnitTypeId() });
    }

    @SuppressWarnings("unchecked")
    private void renderItemSettings() {
        String key = "";
        String item = "";
        String itemShort = "";
        String unit = "";
        
        if (jcbPkItemId.getSelectedIndex() <= 0) {
            moItem = null;
            
            jckIsItemDescriptionApplying.setEnabled(false);
            jtfKey.setEnabled(false);
            jtfItem.setEnabled(false);
            jtfItemShort.setEnabled(false);

            jcbFkUnitId.removeAllItems();
            enableUnit(false); 
        }
        else {
            moItem = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldPkItemId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);

            key = moItem.getKey();
            item = moItem.getName();
            itemShort = moItem.getNameShort();
            unit = moItem.getDbmsDataUnit().getSymbol();
            
            jckIsItemDescriptionApplying.setEnabled(true);
            jtfKey.setEnabled(jckIsItemDescriptionApplying.isSelected());
            jtfItem.setEnabled(jckIsItemDescriptionApplying.isSelected());
            jtfItemShort.setEnabled(jckIsItemDescriptionApplying.isSelected() && moItem.getDbmsDataItemGeneric().getIsItemShortApplying());

            SFormUtilities.populateComboBox(miClient, jcbFkUnitId, SDataConstants.ITMU_UNIT, new int[] { moItem.getDbmsDataUnit().getFkUnitTypeId() });
            enableUnit(jckIsItemDescriptionApplying.isSelected());
        }

        jtfOriginalKey.setText(key);
        jtfOriginalItem.setText(item);
        jtfOriginalItemShort.setText(itemShort);
        jtfOriginalUnit.setText(unit);
    }

    private void renderIsItemDescriptionApplying() {
        if (jckIsItemDescriptionApplying.isSelected()) {
            jtfKey.setEnabled(true);
            jtfItem.setEnabled(true);
            if (moItem != null) {
                jtfItemShort.setEnabled(moItem.getDbmsDataItemGeneric().getIsItemShortApplying());
            } else {
               jtfItemShort.setEnabled(moItemConfigBizPartner.getFkUnitId() != 0); 
            }
            jcbFkUnitId.setEnabled(true);
            jbFkUnitId.setEnabled(true);
        }
        else {
             jtfKey.setEnabled(false);
             jtfItem.setEnabled(false);
             jtfItemShort.setEnabled(false);
             jcbFkUnitId.setEnabled(false);
             jbFkUnitId.setEnabled(false);
        }             
    }
    
    private void stateChangedItem() {
        renderItemSettings();                
    }
    
    private void stateChangedIsItemDescriptionApplying() {
        renderIsItemDescriptionApplying();
    }

    private void focusLostItem() {
        copyItem();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkUnitId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkItemId;
    private javax.swing.JComboBox jcbCfdiUsage;
    private javax.swing.JComboBox jcbFkUnitId;
    private javax.swing.JComboBox jcbPkItemId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsItemDescriptionApplying;
    private javax.swing.JLabel jlCfdiUsage;
    private javax.swing.JLabel jlFkUnitId;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlItemShort;
    private javax.swing.JLabel jlKey;
    private javax.swing.JLabel jlOriginalItem;
    private javax.swing.JLabel jlOriginalItemShort;
    private javax.swing.JLabel jlOriginalKey;
    private javax.swing.JLabel jlOriginalUnit;
    private javax.swing.JLabel jlPkItemId;
    private javax.swing.JTextField jtfItem;
    private javax.swing.JTextField jtfItemShort;
    private javax.swing.JTextField jtfKey;
    private javax.swing.JTextField jtfOriginalItem;
    private javax.swing.JTextField jtfOriginalItemShort;
    private javax.swing.JTextField jtfOriginalKey;
    private javax.swing.JTextField jtfOriginalUnit;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbResetingForm = true;
        
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moItemConfigBizPartner = null;
        moItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        renderItemSettings();
        
        jckIsItemDescriptionApplying.setSelected(true);
        
        jcbPkItemId.setEnabled(true);
        jckIsDeleted.setEnabled(false);
        
        mbResetingForm = false;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        mbResetingForm = true;
        
        SFormUtilities.populateComboBox(miClient, jcbPkItemId, SDataConstants.ITMU_ITEM);
        
        mbResetingForm = false;
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }
        /*        
        Se quita la validación debido a la Solicitud #1273; 09/08/2024; AETH/ Heriberto Briseño; SIIE/ CXCP:
        Solo el uso de CFDI no era obligatorio cuando se aplica descripción personalizada de ítems
        */
//        if (!validation.getIsError()) {
//            if (!jckIsItemDescriptionApplying.isSelected() && jcbCfdiUsage.getSelectedIndex() <= 0) {
//                validation.setMessage(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlCfdiUsage.getText() + "'.");
//                validation.setComponent(jcbCfdiUsage);
//            }
//        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        mbResetingForm = true;

        SDataItemConfigBizPartner moItemConfigBizPartner = (erp.mitm.data.SDataItemConfigBizPartner) registry;
      
        moFieldPkItemId.setFieldValue(new int[] { moItemConfigBizPartner.getPkItemId() });
        renderItemSettings();   // units combobox populated aswell
        moFieldIsItemDescriptionApplying.setFieldValue(moItemConfigBizPartner.getIsItemDescription());
        renderIsItemDescriptionApplying();
        
        moFieldKey.setFieldValue(moItemConfigBizPartner.getKey());
        moFieldItem.setFieldValue(moItemConfigBizPartner.getItem());
        moFieldItemShort.setFieldValue(moItemConfigBizPartner.getItemShort());
        moFieldFkUnitId.setFieldValue(new int[] { moItemConfigBizPartner.getFkUnitId() });
        moFieldCfdiUsage.setFieldValue(moItemConfigBizPartner.getCfdiUsage());
        moFieldIsDeleted.setFieldValue(moItemConfigBizPartner.getIsDeleted());

        jcbPkItemId.setEnabled(false);
        jbPkItemId.setEnabled(false);
        
        jckIsDeleted.setEnabled(true);
        
        mbResetingForm = false;
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moItemConfigBizPartner == null) {
            moItemConfigBizPartner = new SDataItemConfigBizPartner();
            moItemConfigBizPartner.setPkItemId(moFieldPkItemId.getKeyAsIntArray()[0]);
            moItemConfigBizPartner.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else  {
            moItemConfigBizPartner.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }
        
        moItemConfigBizPartner.setKey(!jckIsItemDescriptionApplying.isSelected() ? "" : moFieldKey.getString());
        moItemConfigBizPartner.setItem(!jckIsItemDescriptionApplying.isSelected() ? "" : moFieldItem.getString());
        moItemConfigBizPartner.setItemShort(!jckIsItemDescriptionApplying.isSelected() ? "" : moFieldItemShort.getString());
        moItemConfigBizPartner.setCfdiUsage(jcbCfdiUsage.getSelectedIndex() <= 0 ? "" : moFieldCfdiUsage.getKey().toString());
        moItemConfigBizPartner.setIsItemDescription(moFieldIsItemDescriptionApplying.getBoolean());
        moItemConfigBizPartner.setIsDeleted(moFieldIsDeleted.getBoolean());
        moItemConfigBizPartner.setFkUnitId(!jckIsItemDescriptionApplying.isSelected() ? SDataConstantsSys.ITMU_UNIT_NA : moFieldFkUnitId.getKeyAsIntArray()[0]);
        moItemConfigBizPartner.setDbmsUnit(readUnitSymbol(moItemConfigBizPartner.getFkUnitId()));

        return moItemConfigBizPartner;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkItemId) {
                actionPkItemId();
            }
            else if (button == jbFkUnitId) {
                actionFkUnitId();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbResetingForm) {
            if (e.getSource() instanceof JComboBox) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    JComboBox comboBox = (JComboBox) e.getSource();

                    if (comboBox == jcbPkItemId) {
                        stateChangedItem();
                    }
                }
            }
            else if (e.getSource() instanceof JCheckBox) {
                JCheckBox checkBox = (JCheckBox) e.getSource();
                
                if (checkBox == jckIsItemDescriptionApplying) {
                    stateChangedIsItemDescriptionApplying();
                }
            }
        }
    }
}
