/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mitm.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.mcfg.data.SDataScale;
import erp.mcfg.data.SDataScaleUtils;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataScaleItem;
import erp.mitm.data.SDataScaleItemMap;
import erp.mitm.data.SDataScaleItemMapRow;
import erp.mitm.data.SDataScaleItemRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Isabel Servín
 */
public class SFormScaleItem extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener, ListSelectionListener, ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.lib.form.SFormField moFieldFkItemId;
    private erp.client.SClientInterface miClient;
    
    private SDataScale moScale;

    private ArrayList<SDataScaleItemRow> maScaleItemRows;
    //El HashMap principal representa el producto de báscula y el arrayList dentro representa los ítems mapeados a ese producto
    private HashMap<int[], ArrayList<SDataScaleItemMapRow>> maHashOfScaleItemMapRows; 
    
    private erp.lib.table.STablePane moScaleItemPane;
    private erp.lib.table.STablePane moScaleItemMapPane;

    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemId;

    /** Creates new form SFormScaleItem
     * @param client */
    public SFormScaleItem(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.ITMU_SCA_ITEM;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jpData = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        jtfScale = new javax.swing.JTextField();
        jbFkItemId = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jrbPur = new javax.swing.JRadioButton();
        jrbSal = new javax.swing.JRadioButton();
        jrbAll = new javax.swing.JRadioButton();
        jbImport = new javax.swing.JButton();
        jpScaleItems = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpScaleItemsMap = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbDefault = new javax.swing.JButton();
        jbDelete = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Mapeo de productos");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpData.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpData.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlScale.setText("Báscula:");
        jlScale.setPreferredSize(new java.awt.Dimension(50, 23));
        jpControls.add(jlScale);

        jtfScale.setEditable(false);
        jtfScale.setPreferredSize(new java.awt.Dimension(195, 23));
        jpControls.add(jtfScale);

        jbFkItemId.setText("Agregar ítem");
        jbFkItemId.setToolTipText("Agregar ítem al producto de la báscula");
        jbFkItemId.setFocusable(false);
        jbFkItemId.setPreferredSize(new java.awt.Dimension(110, 23));
        jpControls.add(jbFkItemId);

        jLabel1.setText("Mostrar productos de:");
        jpControls.add(jLabel1);

        buttonGroup1.add(jrbPur);
        jrbPur.setText("Entrada");
        jrbPur.setPreferredSize(new java.awt.Dimension(75, 25));
        jpControls.add(jrbPur);

        buttonGroup1.add(jrbSal);
        jrbSal.setSelected(true);
        jrbSal.setText("Salida");
        jrbSal.setPreferredSize(new java.awt.Dimension(70, 25));
        jpControls.add(jrbSal);

        buttonGroup1.add(jrbAll);
        jrbAll.setText("Todos");
        jrbAll.setPreferredSize(new java.awt.Dimension(70, 25));
        jpControls.add(jrbAll);

        jbImport.setText("Importar productos báscula");
        jbImport.setPreferredSize(new java.awt.Dimension(200, 23));
        jpControls.add(jbImport);

        jPanel1.add(jpControls, java.awt.BorderLayout.NORTH);

        jpScaleItems.setPreferredSize(new java.awt.Dimension(300, 250));
        jpScaleItems.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpScaleItems, java.awt.BorderLayout.CENTER);

        jpData.add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jpScaleItemsMap.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbDefault.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_ok.gif"))); // NOI18N
        jbDefault.setToolTipText("Fijar predeterminado");
        jbDefault.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbDefault);

        jbDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDelete.setToolTipText("Eliminar");
        jbDelete.setFocusable(false);
        jbDelete.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbDelete);

        jpScaleItemsMap.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel2.add(jpScaleItemsMap, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Ítems mapeados al producto de básula:");
        jLabel2.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jLabel2);

        jPanel2.add(jPanel4, java.awt.BorderLayout.NORTH);

        jpData.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpData, java.awt.BorderLayout.CENTER);

        jPanel.setPreferredSize(new java.awt.Dimension(792, 33));
        jPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel.add(jbCancel);

        getContentPane().add(jPanel, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(976, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    private void initComponentsExtra() {
        int i;

        jcbFkItemId = new javax.swing.JComboBox<>();
        
        moFieldFkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemId, new JLabel("Items"));
        moFieldFkItemId.setPickerButton(jbFkItemId);
        
        moScaleItemPane = new STablePane(miClient);
        jpScaleItems.add(moScaleItemPane, BorderLayout.CENTER);
        
        moScaleItemMapPane = new STablePane(miClient);
        jpScaleItemsMap.add(moScaleItemMapPane, BorderLayout.CENTER);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        // Tabla con los elementos de la báscula
        
        erp.lib.table.STableColumnForm tableColumnsScaleItems[];
        
        i = 0;
        tableColumnsScaleItems = new STableColumnForm[3];
        tableColumnsScaleItems[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Producto de báscula", 400);
        tableColumnsScaleItems[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Cantidad mapeada", 100);
        tableColumnsScaleItems[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem predeterminado", 400);
        
        for (i = 0; i < tableColumnsScaleItems.length; i++) {
            moScaleItemPane.addTableColumn(tableColumnsScaleItems[i]);
        }

        moScaleItemPane.createTable(this);
        moScaleItemPane.getTable().getTableHeader().setReorderingAllowed(false);
        
        // Tabla con los elementos vinculados al ítem de la báscula
        
        erp.lib.table.STableColumnForm tableColumnsScaleItemsMap[];

        i = 0;
        tableColumnsScaleItemsMap = new STableColumnForm[2];
        tableColumnsScaleItemsMap[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ítem", 400);
        tableColumnsScaleItemsMap[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Predeterminado", 100);
        
        for (i = 0; i < tableColumnsScaleItemsMap.length; i++) {
            moScaleItemMapPane.addTableColumn(tableColumnsScaleItemsMap[i]);
        }

        moScaleItemMapPane.createTable(null);
        moScaleItemMapPane.getTable().getTableHeader().setReorderingAllowed(false);
        
        jbDefault.addActionListener(this);
        jbFkItemId.addActionListener(this);
        jbImport.addActionListener(this);
        jbDelete.addActionListener(this);
        jrbPur.addItemListener(this);
        jrbSal.addItemListener(this);
        jrbAll.addItemListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            //moPanelBizPartnerBranch.requestFocusFirstTime();
        }
    }
    
    private void populateScaleItemTable() {
        maHashOfScaleItemMapRows.clear();
        maScaleItemRows = new ArrayList<>();
        
        try {
            String sql = "SELECT si.id_sca, si.id_sca_item, si.name item, si.b_pur, si.b_sal, " +
                    "(SELECT COUNT(*) FROM erp.itmu_sca_item_map WHERE id_sca = si.id_sca AND id_sca_item = si.id_sca_item) cant, i.item def " +
                    "FROM erp.itmu_sca_item AS si " +
                    "LEFT JOIN erp.itmu_sca_item_map AS sim ON si.id_sca = sim.id_sca AND si.id_sca_item = sim.id_sca_item AND sim.b_def " +
                    "LEFT JOIN erp.itmu_item AS i ON sim.id_item = i.id_item " +
                    "WHERE si.id_sca = " + moScale.getPkScaleId() + " AND NOT si.b_del ORDER BY si.name";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            
            while (resultSet.next()) {
                SDataScaleItemRow row = new SDataScaleItemRow(
                        new int[] { resultSet.getInt("id_sca"), resultSet.getInt("id_sca_item") }, 
                        resultSet.getString("item"), resultSet.getInt("cant"), resultSet.getString("def"), 
                        resultSet.getBoolean("b_pur"), resultSet.getBoolean("b_sal"));
                maScaleItemRows.add(row);
                
                if (resultSet.getInt("cant") > 0) {
                    createScaleItemMapRow(resultSet.getInt("id_sca"), resultSet.getInt("id_sca_item"));
                }
            }
            renderItemTable();
        }
        catch (Exception e) { }
    }
    
    private void renderItemTable() {
        moScaleItemPane.clearTableRows();
        if (!maScaleItemRows.isEmpty()) {
            for (SDataScaleItemRow row : maScaleItemRows) {
                if (jrbPur.isSelected() && row.mbPur) {
                    moScaleItemPane.addTableRow(row);
                }
                else if (jrbSal.isSelected() && row.mbSal) {
                    moScaleItemPane.addTableRow(row);
                }
                else if (jrbAll.isSelected()) {
                    moScaleItemPane.addTableRow(row);
                }
            }
        }
        
        moScaleItemPane.renderTableRows();
        moScaleItemPane.setTableRowSelection(0);
    }
    
    private void populateScaleItemMapTable(SDataScaleItemRow scaRow) {
        try {
            boolean found = false;
            for (ArrayList<SDataScaleItemMapRow> arrMap : maHashOfScaleItemMapRows.values()) {
                for (SDataScaleItemMapRow row : arrMap) {
                    if (row.moScaId[0] == scaRow.moId[0] && row.moScaId[1] == scaRow.moId[1]) {
                        found = true;
                        renderItemMapTable(arrMap);
                        break;
                    }
                }
            }
            
            if (!found) {
                ArrayList<SDataScaleItemMapRow> arr = createScaleItemMapRow(scaRow.moId[0], scaRow.moId[1]);
                renderItemMapTable(arr);
            }
        }
        catch (Exception e) { }
    }
    
    private ArrayList<SDataScaleItemMapRow> createScaleItemMapRow(int idSca, int idScaItem) throws Exception {
        ArrayList<SDataScaleItemMapRow> arr = new ArrayList<>();
        String sql = "SELECT sim.id_sca, sim.id_sca_item, sim.id_item, sim.b_def, i.item FROM erp.itmu_sca_item_map AS sim " +
                "INNER JOIN erp.itmu_item AS i ON sim.id_item = i.id_item " +
                "WHERE sim.id_sca = " + idSca + " AND sim.id_sca_item = '" + idScaItem + "' ORDER BY i.item, b_def;";
        ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);

        while (resultSet.next()) {
            SDataScaleItemMapRow row = new SDataScaleItemMapRow(
                    new int[] { resultSet.getInt("id_sca"), resultSet.getInt("id_sca_item") }, 
                    resultSet.getInt("id_item"), resultSet.getString("item"), resultSet.getBoolean("b_def"), false);
            row.prepareTableRow();
            arr.add(row);
        }
        if (!arr.isEmpty()) {
            maHashOfScaleItemMapRows.put(arr.get(0).moScaId, arr);
        }
        return arr;
    }
    
    private void renderItemMapTable(ArrayList<SDataScaleItemMapRow> arr) {
        moScaleItemMapPane.clearTableRows();
        if (!arr.isEmpty()) {
            arr.stream().forEach((row) -> {
                moScaleItemMapPane.addTableRow(row);
            });
            }
        moScaleItemMapPane.renderTableRows();
        moScaleItemMapPane.setTableRowSelection(0);
    }

    private void actionOk() {
        mnFormResult = SLibConstants.FORM_RESULT_OK;
        setVisible(false);
    }

    private void actionCancel() {
        if (miClient.showMsgBoxConfirm("¿Está seguro de cerrar sin guardar?") == JOptionPane.OK_OPTION) {
            mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
            setVisible(false);
        }
    }
    
    private void actionFkItemId() {
        if (miClient.pickOption(SDataConstants.ITMX_ITEM_IOG, moFieldFkItemId, null) == SLibConstants.FORM_RESULT_OK) {
            SDataItem item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM, moFieldFkItemId.getKeyAsIntArray(), SLibConstants.EXEC_MODE_SILENT);
            if (item != null) {
                boolean found = false;
                boolean foundItem = false;
                int selectedRow = moScaleItemPane.getTable().getSelectedRow();
                int[] pkScaleItem = ((SDataScaleItemRow) moScaleItemPane.getSelectedTableRow()).moId;
                for (ArrayList<SDataScaleItemMapRow> arrRow : maHashOfScaleItemMapRows.values()) {
                    int i = 0;
                    for (SDataScaleItemMapRow row : arrRow) {
                        if (pkScaleItem[0] == row.moScaId[0] && pkScaleItem[1] == row.moScaId[1]) {
                            if (item.getPkItemId() == row.mnItemId) {
                                foundItem = true;
                            }
                            found = true;
                            i++;
                        }
                    }
                    if (i > 0 && !foundItem) {
                        SDataScaleItemMapRow newRow = new SDataScaleItemMapRow(pkScaleItem, item.getPkItemId(), item.getItem(), false, true);
                        newRow.prepareTableRow();
                        arrRow.add(newRow);
                        renderItemMapTable(arrRow);
                        ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).mnCant = i + 1;
                        ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).prepareTableRow();
                        break;
                    }
                }
                if (!found) {
                    ArrayList<SDataScaleItemMapRow> newArrRow = new ArrayList<>();
                    SDataScaleItemMapRow newRow = new SDataScaleItemMapRow(pkScaleItem, item.getPkItemId(), item.getItem(), true, true);
                    newRow.prepareTableRow();
                    newArrRow.add(newRow);
                    renderItemMapTable(newArrRow);
                    maHashOfScaleItemMapRows.put(newArrRow.get(0).moScaId, newArrRow);
                    ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).mnCant = 1;
                    ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).msDefault = item.getItem();
                    ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).prepareTableRow();
                }
                moScaleItemPane.renderTableRows();
                moScaleItemPane.setTableRowSelection(selectedRow);
            }
        }
    }
    
    private void actionDefault() {
        int selectedRow = moScaleItemPane.getTable().getSelectedRow();
        int[] pk = ((SDataScaleItemMapRow) moScaleItemMapPane.getSelectedTableRow()).moScaId;
        int item = ((SDataScaleItemMapRow) moScaleItemMapPane.getSelectedTableRow()).mnItemId;
        for (ArrayList<SDataScaleItemMapRow> arr : maHashOfScaleItemMapRows.values()) {
            boolean found = false;
            for (SDataScaleItemMapRow row : arr)  {
                if (row.moScaId[0] == pk[0] && row.moScaId[1] == pk[1]) {
                    row.mbDefault = row.mnItemId == item;
                    row.mbIsEdit = true;
                    if (row.mnItemId == item) {
                        ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).msDefault = row.msName;
                        ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).prepareTableRow();
                    }
                    row.prepareTableRow();
                    found = true;
                }
            }
            if (found) {
                renderItemMapTable(arr);
                break;
            }
        }
        moScaleItemPane.renderTableRows();
        moScaleItemPane.setTableRowSelection(selectedRow);
    }
    
    private void actionDelete() {
        int index = moScaleItemMapPane.getTable().getSelectedRow();
        int selectedRow = moScaleItemPane.getTable().getSelectedRow();
        
        if (index != -1) {
            int[] pk = ((SDataScaleItemMapRow) moScaleItemMapPane.getSelectedTableRow()).moScaId;
            int item = ((SDataScaleItemMapRow) moScaleItemMapPane.getSelectedTableRow()).mnItemId;
            for (ArrayList<SDataScaleItemMapRow> arr : maHashOfScaleItemMapRows.values()) {
                for (SDataScaleItemMapRow row : arr)  {
                    if (row.moScaId[0] == pk[0] && row.moScaId[1] == pk[1]) {
                        if (row.mnItemId == item) {
                            if (row.mbDefault) {
                                miClient.showMsgBoxWarning("No se puede eliminar el renglón debido a que es el predeterminado, seleccione otro antes de eliminar.");
                                break;
                            }
                            else {
                                arr.remove(row);
                                ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).mnCant --;
                                ((SDataScaleItemRow)moScaleItemPane.getSelectedTableRow()).prepareTableRow();
                                renderItemMapTable(arr);
                                break;
                            }
                        }
                    }
                }
            }
        }
        moScaleItemPane.renderTableRows();
        moScaleItemPane.setTableRowSelection(selectedRow);
    }
    
    private void actionImport() {
        if (miClient.showMsgBoxConfirm("Se guardarán los cambios realizados hasta el momento.\n¿Desea continuar?") == JOptionPane.OK_OPTION) {
            saveConf();
            Connection connection = SDataScaleUtils.getScaleConnection(miClient.getSession(), moScale.getPkScaleId());

            try {
                ArrayList<SDataScaleItem> aux = new ArrayList<>();
                String sql = "SELECT DISTINCT pro.Pro_ID, pro.Pro_Nombre, "
                        + "(IF pes.Pes_PesoPri > pes.Pes_PesoSeg THEN 1 ELSE 2 END IF) AS type "
                        + "FROM dba.Productos AS pro "
                        + "INNER JOIN dba.Pesadas AS pes ON pro.Pro_ID = pes.Pro_ID "
                        + "WHERE pes.Usb_ID = 'ACTH' AND pes.Pes_Completo = 1 "
                        + "ORDER BY pro.Pro_Nombre ";

                ResultSet resultSet = connection.createStatement().executeQuery(sql);

                while (resultSet.next()) {
                    SDataScaleItem scaleItem = new SDataScaleItem();
                    scaleItem.setPkScaleId(moScale.getPkScaleId());
                    scaleItem.setCode(resultSet.getString("Pro_ID"));
                    scaleItem.setName(resultSet.getString("Pro_Nombre"));
                    scaleItem.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                    scaleItem.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                    switch (resultSet.getString("type")) {
                        case "1" : scaleItem.setIsPurchase(true); break;
                        case "2" : scaleItem.setIsSales(true); break;
                    }
                    scaleItem.save(miClient.getSession().getDatabase().getConnection());
                    aux.add(scaleItem);
                }

                sql = "SELECT Pro_ID, Pro_Nombre FROM dba.Productos ";
                resultSet = connection.createStatement().executeQuery(sql);
                while (resultSet.next()) {
                    for (SDataScaleItem scaleItem : aux) {
                        if (scaleItem.getCode().equals(resultSet.getString(1))) {
                            scaleItem.setAuxInScale(true);
                        }
                    }
                }
                
                for (SDataScaleItem scaleItem : aux) {
                    scaleItem.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                    scaleItem.saveInScale(miClient.getSession().getDatabase().getConnection());
                }
                
                populateScaleItemTable();
            }
            catch (Exception e) {
                miClient.showMsgBoxInformation(e.getMessage());
            }
        }
    }
    
    private void saveConf() {
        try {
            //Primer barrido: eliminación.
            String sql = "SELECT * FROM erp.itmu_sca_item_map WHERE id_sca = " + moScale.getPkScaleId() + " ORDER BY id_sca_item";
            
            try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                while (resultSet.next()) {
                    boolean found = false;
                    for (ArrayList<SDataScaleItemMapRow> arr : maHashOfScaleItemMapRows.values()) {
                        for (SDataScaleItemMapRow row : arr)  {
                            if (row.moScaId[0] == resultSet.getInt("id_sca") && row.moScaId[1] == resultSet.getInt("id_sca_item") &&
                                    row.mnItemId == resultSet.getInt("id_item")) {
                                found = true;
                            }
                        }
                    }
                    if (!found) {
                        sql = "DELETE FROM erp.itmu_sca_item_map "
                                + "WHERE id_sca = " + resultSet.getInt("id_sca") + " "
                                + "AND id_sca_item = " + resultSet.getInt("id_sca_item") + " "
                                + "AND id_item = " + resultSet.getInt("id_item");
                        miClient.getSession().getDatabase().getConnection().createStatement().execute(sql);
                    }                    
                }
            }
            
            // Segundo barrido: actualización e inserción
            for (ArrayList<SDataScaleItemMapRow> arr : maHashOfScaleItemMapRows.values()) {
                for (SDataScaleItemMapRow row : arr)  {
                    SDataScaleItemMap itemMap = new SDataScaleItemMap();
                    if (row.mbIsNew) {
                        itemMap.setPkScaleId(moScale.getPkScaleId());
                        itemMap.setPkScaleItemId(row.moScaId[1]);
                        itemMap.setPkItemId(row.mnItemId);
                        itemMap.setIsDefault(row.mbDefault);
                        itemMap.setFkUserId(miClient.getSession().getUser().getPkUserId());
                        itemMap.save(miClient.getSession().getDatabase().getConnection());
                    }
                    else if (row.mbIsEdit) {
                        itemMap.read(new int[] {row.moScaId[0], row.moScaId[1], row.mnItemId}, miClient.getSession().getStatement());
                        itemMap.setIsDefault(row.mbDefault);
                        itemMap.setFkUserId(miClient.getSession().getUser().getPkUserId());
                        itemMap.save(miClient.getSession().getDatabase().getConnection());
                    }
                }
            }
        }
        catch (Exception e) {}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDefault;
    private javax.swing.JButton jbDelete;
    private javax.swing.JButton jbFkItemId;
    private javax.swing.JButton jbImport;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlScale;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpScaleItems;
    private javax.swing.JPanel jpScaleItemsMap;
    private javax.swing.JRadioButton jrbAll;
    private javax.swing.JRadioButton jrbPur;
    private javax.swing.JRadioButton jrbSal;
    private javax.swing.JTextField jtfScale;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mbFirstTime = true;
        maHashOfScaleItemMapRows = new HashMap<>();
        moScaleItemPane.clearTableRows();
        moScaleItemMapPane.clearTableRows();
        SFormUtilities.populateComboBox(miClient, jcbFkItemId, SDataConstants.ITMU_ITEM);
//        moPanelBizPartnerBranch.formReset();
//        moPanelBizPartnerBranch.setParamBizPartnerDescription(msParamBizPartnerDescription);
    }

    @Override
    public void formRefreshCatalogues() {
//        moPanelBizPartnerBranch.formRefreshCatalogues();
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        return null;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moScale = (SDataScale) registry;
        
        jtfScale.setText(moScale.getScale());
        // leer los items de la báscula
        populateScaleItemTable();
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (mnFormResult == SLibConstants.FORM_RESULT_OK) {
            saveConf();
        }
        return moScale;
    }
    
    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbFkItemId) {
                actionFkItemId();
            }
            else if (button == jbDefault) {
                actionDefault();
            }
            else if (button == jbDelete) {
                actionDelete();
            }
            else if (button == jbImport) {
                actionImport();
            }
        }
    }
    
    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moScaleItemPane.getSelectedTableRow() != null) {
                populateScaleItemMapTable((SDataScaleItemRow) moScaleItemPane.getSelectedTableRow());
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        renderItemTable();
    }
}
