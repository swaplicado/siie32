package erp.mitm.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mitm.data.SDataUnit;
import erp.mitm.data.SDataUnitEquivalence;
import erp.mitm.data.SItemUtilities;
import erp.mod.SModConsts;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;
import sa.lib.db.SDbConsts;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;

/**
 *
 * @author Edwin Carmona
 */
public class SFormUnitEquivalences extends javax.swing.JDialog implements java.awt.event.ActionListener, FocusListener, ItemListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnUnitId;
    private double mdEquivalence;
    private SDataUnitEquivalence moUnitEquivalenceRow;
    private SDataUnit moUnit;
    private SDataUnit moUnitEquivalent;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;
    protected SGridPaneForm moGridProviderRows;

    private erp.lib.form.SFormField moFieldPkUnitId;
    private erp.lib.form.SFormField moFieldPkUnitEquivalentId;
    private erp.lib.form.SFormField moFieldEquivalence;
    private erp.lib.form.SFormField moFieldEquivalenceMirr;
    private erp.lib.form.SFormField moFieldEquivalenceUnitary;
    private erp.lib.form.SFormField moFieldIsDeleted;

    /** Creates new form SFormVariety */
    public SFormUnitEquivalences(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.ITMU_VAR;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ljUnit = new javax.swing.JLabel();
        jlUnitEquivalent = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jcbFkUnitId = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jcbFkUnitEquivalentId = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jtfEquivalence = new javax.swing.JTextField();
        jtfUnitCode = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jtfEquivalenceMirror = new javax.swing.JTextField();
        jtfUnitEquivalentCode = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtfEquivUnitary = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jbSave = new javax.swing.JButton();
        jbNew = new javax.swing.JButton();
        jpEquivalences = new javax.swing.JPanel();
        jpCommand = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Variedad");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.GridLayout(5, 2, 5, 5));

        ljUnit.setText("Unidad:");
        jPanel3.add(ljUnit);

        jlUnitEquivalent.setText("Unidad equivalente");
        jPanel3.add(jlUnitEquivalent);

        jPanel4.setLayout(new java.awt.BorderLayout(5, 0));

        jcbFkUnitId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel4.add(jcbFkUnitId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 0));

        jcbFkUnitEquivalentId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel5.add(jcbFkUnitEquivalentId, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel5);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jtfEquivalence.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel1.add(jtfEquivalence, java.awt.BorderLayout.LINE_START);

        jtfUnitCode.setEditable(false);
        jtfUnitCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jtfUnitCode, java.awt.BorderLayout.LINE_END);

        jPanel3.add(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jtfEquivalenceMirror.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(jtfEquivalenceMirror, java.awt.BorderLayout.LINE_START);

        jtfUnitEquivalentCode.setEditable(false);
        jtfUnitEquivalentCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jtfUnitEquivalentCode, java.awt.BorderLayout.LINE_END);

        jPanel3.add(jPanel2);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Equivalencia:");
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jLabel3, java.awt.BorderLayout.CENTER);

        jtfEquivUnitary.setEditable(false);
        jtfEquivUnitary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfEquivUnitary, java.awt.BorderLayout.LINE_END);

        jPanel3.add(jPanel7);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jckIsDeleted.setForeground(new java.awt.Color(204, 0, 0));
        jckIsDeleted.setText("Registro eliminado");
        jckIsDeleted.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jPanel6.add(jckIsDeleted, java.awt.BorderLayout.LINE_START);

        jbSave.setText("Guardar");
        jbSave.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jbSave, java.awt.BorderLayout.LINE_END);

        jbNew.setText("Nuevo");
        jPanel6.add(jbNew, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel6);

        jpRegistry.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jpEquivalences.setLayout(new java.awt.BorderLayout());
        jpRegistry.add(jpEquivalences, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        jpCommand.setPreferredSize(new java.awt.Dimension(392, 33));
        jpCommand.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Escape]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommand.add(jbOk);

        getContentPane().add(jpCommand, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(656, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        moGridProviderRows = new SGridPaneForm((SGuiClient) miClient, SModConsts.ITMU_UNIT_EQUIV, 0, "Proveedores para cotizaci√≥n") {
            @Override
            public void initGrid() {
                jbRowNew.setEnabled(false);
                jbRowEdit.setEnabled(true);
                jbRowDelete.setEnabled(true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Equivalencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Unidad quiv"));

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowEdit() {
                if (jbRowEdit.isEnabled()) {
                    if (jtTable.getSelectedRowCount() != 1) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                    }
                    else {
                        SDataUnitEquivalence registry = null;
                        SGridRow gridRow = getSelectedGridRow();
                        int row = jtTable.getSelectedRow();

                        if (gridRow.isRowSystem()) {
                            miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                        }
                        else {
                            registry = (SDataUnitEquivalence) gridRow;
                            moUnitEquivalenceRow = registry;
                            moFieldPkUnitId.setKey(new int[] { moUnitEquivalenceRow.getPkUnitId() });
                            moFieldPkUnitEquivalentId.setKey(new int[] { moUnitEquivalenceRow.getPkUnitEquivalentId() });
                            moFieldEquivalence.setDouble(1d);
                            moFieldEquivalenceMirr.setDouble(moUnitEquivalenceRow.getEquivalence());
                            
                            moFieldEquivalenceUnitary.setDouble(moUnitEquivalenceRow.getEquivalence());
                            calculeEquivalence();
                        }
                    }
                }
            }
            
            @Override
            public void actionRowDelete() {
                if (jbRowDelete.isEnabled()) {
                    if (jtTable.getSelectedRowCount() == 0) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROWS);
                    }
                    else if (miClient.showMsgBoxConfirm(SGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
                        SGridRow gridRow = null;
                        SGridRow[] gridRows = getSelectedGridRows();
                        int[] rows = jtTable.getSelectedRows();

                        for (int i = 0; i < gridRows.length; i++) {
                            gridRow = gridRows[i];

                            if (gridRow.isRowSystem()) {
                                miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_IS_SYSTEM);
                            }
                            else if (!gridRow.isRowDeletable()) {
                                miClient.showMsgBoxWarning(SDbConsts.MSG_REG_ + gridRow.getRowName() + SDbConsts.MSG_REG_NON_DELETABLE);
                            }
                            else {
                                moUnitEquivalenceRow = (SDataUnitEquivalence) gridRow;
                                moUnitEquivalenceRow.setIsDeleted(true);
                                moUnitEquivalenceRow.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                                try {
                                    moUnitEquivalenceRow.save(miClient.getSession().getStatement().getConnection());
                                    moModel.getGridRows().remove(moModel.getGridRows().indexOf(gridRow));
                                    moModel.renderGridRows();

                                    setSelectedGridRow(rows[i] < moModel.getRowCount() ? rows[i] : moModel.getRowCount() - 1);

                                    mvDeletedRows.add(gridRow);
                                    if (miPaneFormOwner != null) {
                                        miPaneFormOwner.notifyRowDelete(mnGridType, mnGridSubtype, rows[i], gridRow);
                                    }
                                }
                                catch (SQLException ex) {
                                    Logger.getLogger(SFormUnitEquivalences.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    }
                }
            }
        };
        jpEquivalences.add(moGridProviderRows, BorderLayout.CENTER);
        
        mvFields = new Vector<SFormField>();

        moFieldPkUnitId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitId, ljUnit);
        moFieldPkUnitEquivalentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkUnitEquivalentId, jlUnitEquivalent);
        moFieldEquivalence = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, true, jtfEquivalence, jlUnitEquivalent);
        moFieldEquivalence.setLengthMax(25);
        moFieldEquivalenceMirr = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfEquivalenceMirror, ljUnit);
        moFieldEquivalenceMirr.setLengthMax(25);
        moFieldEquivalenceUnitary = new SFormField(miClient, SLibConstants.DATA_TYPE_DOUBLE, true, jtfEquivUnitary, jLabel3);
        moFieldEquivalenceUnitary.setLengthMax(25);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkUnitId);
        mvFields.add(moFieldPkUnitEquivalentId);
        mvFields.add(moFieldEquivalence);
        mvFields.add(moFieldEquivalenceMirr);
        mvFields.add(moFieldEquivalenceUnitary);
        mvFields.add(moFieldIsDeleted);
        
        moGridProviderRows.populateGrid(new Vector<>());
        moGridProviderRows.clearSortKeys();
        moGridProviderRows.clearGridRows();

        jbOk.addActionListener(this);
        jbNew.addActionListener(this);
        jbSave.addActionListener(this);
        
        jtfEquivalence.addFocusListener(this);
        jtfEquivalenceMirror.addFocusListener(this);
        
        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "cancel", KeyEvent.VK_ESCAPE, 0);
        
        formRefreshCatalogues();
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jcbFkUnitId.requestFocus();
        }
    }
    
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkUnitId, SDataConstants.ITMU_UNIT, null);
        SFormUtilities.populateComboBox(miClient, jcbFkUnitEquivalentId, SDataConstants.ITMU_UNIT, null);
    }
    
    private void showRows() {
        ArrayList<SDataUnitEquivalence> rows = SItemUtilities.getUnitEquivalencesRows(miClient, mnUnitId);
        moGridProviderRows.clearGridRows();
        for (SDataUnitEquivalence oRow : rows) {
            moGridProviderRows.addGridRow(oRow);
           
        }
        moGridProviderRows.renderGridRows();
        moGridProviderRows.setSelectedGridRow(0);
    }
    
    public void setIdUnit(int idUnit) {
        mnUnitId = idUnit;
        showRows();
        
        moFieldPkUnitId.setKey(new int[] { mnUnitId });
        jcbFkUnitId.setEnabled(false);
        
        actionNew();
        
        jcbFkUnitId.addItemListener(this);
        jcbFkUnitEquivalentId.addItemListener(this);
    }
    
    private void changeUnitCombos() {
        if (jcbFkUnitId.getSelectedIndex() > 0 && moFieldPkUnitId.getKeyAsIntArray()[0] > 0) {
            moUnit = new SDataUnit();
            moUnit.read(moFieldPkUnitId.getKeyAsIntArray(), miClient.getSession().getStatement());
            
            jtfUnitCode.setText(moUnit.getSymbol());
        }
        if (jcbFkUnitEquivalentId.getSelectedIndex() > 0 && moFieldPkUnitEquivalentId.getKeyAsIntArray()[0] > 0) {
            moUnitEquivalent = new SDataUnit();
            moUnitEquivalent.read(moFieldPkUnitEquivalentId.getKeyAsIntArray(), miClient.getSession().getStatement());
            
            jtfUnitEquivalentCode.setText(moUnitEquivalent.getSymbol());
        }
        
        if (jcbFkUnitId.getSelectedIndex() > 0 && jcbFkUnitEquivalentId.getSelectedIndex() > 0 && 
            moFieldPkUnitId.getKeyAsIntArray()[0] > 0 && moFieldPkUnitEquivalentId.getKeyAsIntArray()[0] > 0) {
            if (moFieldPkUnitId.getKeyAsIntArray()[0] == 0 && moFieldPkUnitEquivalentId.getKeyAsIntArray()[0] == 0) {
                miClient.showMsgBoxWarning("La unidad no puede ser igual a la unidad equivalente");
                return;
            }
            
            if (moUnit.getFkUnitTypeId() == moUnitEquivalent.getFkUnitTypeId()) {
                miClient.showMsgBoxWarning("El tipo de unidad de ambas unidades debe ser diferente");
                return;
            }
            
            if (moFieldEquivalence.getDouble() > 0d) {
                calculeEquivalence();
            }
        }
    }
    
    private void calculeEquivalence() {
        if (jcbFkUnitId.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("Seleccione unidad.");
            return;
        }
        
        if (jcbFkUnitEquivalentId.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("Seleccione unidad equivalente.");
            return;
        }
        
        if (moFieldEquivalence.getDouble() <= 0d) {
            miClient.showMsgBoxWarning("Debe introducir un valor mayor a cero.");
            mdEquivalence = 0;
            return;
        }
        
        mdEquivalence = moFieldEquivalenceMirr.getDouble() / moFieldEquivalence.getDouble();
        moFieldEquivalenceUnitary.setDouble(mdEquivalence);
    }

    private void actionOk() {
        mnFormResult = SLibConstants.FORM_RESULT_OK;
        setVisible(false);
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }
    
    private void actionNew() {
        jcbFkUnitEquivalentId.setSelectedIndex(0);
        
        moFieldEquivalence.setDouble(0d);
        moFieldEquivalenceMirr.setDouble(0d);
        moFieldEquivalenceUnitary.setDouble(0d);
        
        jtfUnitEquivalentCode.setText("");
        moUnitEquivalenceRow = null;
    }
    
    private void actionSave() {
        calculeEquivalence();
        SDataUnitEquivalence oRegistry;
        boolean bNew = false;
        if (moUnitEquivalenceRow == null) {
            if (SItemUtilities.getUnitEquivalenceExists(miClient, mnUnitId, moFieldPkUnitEquivalentId.getKeyAsIntArray()[0])) {
                miClient.showMsgBoxWarning("Esta configuraci√≥n ya existe.");
                return;
            }
            
            oRegistry = new SDataUnitEquivalence();
            oRegistry.setPkUnitId(mnUnitId);
            oRegistry.setPkUnitEquivalentId(moFieldPkUnitEquivalentId.getKeyAsIntArray()[0]);
            
            bNew = true;
        }
        else {
            oRegistry = moUnitEquivalenceRow;
        }
        
        oRegistry.setEquivalence(mdEquivalence);
        oRegistry.setDeleted(false);
        oRegistry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        oRegistry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        oRegistry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
        
        try {
            oRegistry.save(miClient.getSession().getStatement().getConnection());
            
            oRegistry.read(new int[] { oRegistry.getPkUnitId(), oRegistry.getPkUnitEquivalentId() }, miClient.getSession().getStatement());
            if (bNew) {
                moGridProviderRows.addGridRow(oRegistry);
            }
            moGridProviderRows.renderGridRows();
            moGridProviderRows.setSelectedGridRow(0);
        }
        catch (SQLException ex) {
            Logger.getLogger(SFormUnitEquivalences.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        actionNew();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbNew;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbSave;
    private javax.swing.JComboBox jcbFkUnitEquivalentId;
    private javax.swing.JComboBox jcbFkUnitId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JLabel jlUnitEquivalent;
    private javax.swing.JPanel jpCommand;
    private javax.swing.JPanel jpEquivalences;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JTextField jtfEquivUnitary;
    private javax.swing.JTextField jtfEquivalence;
    private javax.swing.JTextField jtfEquivalenceMirror;
    private javax.swing.JTextField jtfUnitCode;
    private javax.swing.JTextField jtfUnitEquivalentCode;
    private javax.swing.JLabel ljUnit;
    // End of variables declaration//GEN-END:variables


    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbNew) {
                actionNew();
            }
            else if (button == jbSave) {
                actionSave();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            javax.swing.JTextField jtf = (javax.swing.JTextField) e.getSource();
            
            if (jtf == jtfEquivalence || jtf == jtfEquivalenceMirror) {
                calculeEquivalence();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox) {
            javax.swing.JComboBox combo = (javax.swing.JComboBox) e.getSource();
            
            if (combo == jcbFkUnitId || combo == jcbFkUnitEquivalentId) {
                changeUnitCombos();
            }
        }
    }
}
