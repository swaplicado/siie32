/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.itm.db.SDbPriceCommercialLog;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Isabel Servín
 */
public class SDialogItemPriceCardex extends SBeanFormDialog implements ListSelectionListener{
    
    protected SGridPaneForm moGridItemPrice;
    protected ArrayList<SDbPriceCommercialLog> maPriceComLog;

    /**
     * Creates new form SDialogItemPriceCardex
     * @param client
     * @param title
     */
    public SDialogItemPriceCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.ITMU_PRICE_COMM_LOG, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpPriceList = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cardex precios comerciales de ítems");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpPriceList.setBorder(javax.swing.BorderFactory.createTitledBorder("Listado de precios comerciales:"));
        jpPriceList.setPreferredSize(new java.awt.Dimension(100, 200));
        jpPriceList.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpPriceList, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jpPriceList;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moGridItemPrice = new SGridPaneForm(miClient, SModConsts.ITMU_PRICE_COMM_LOG, SLibConsts.UNDEFINED, "Lista de precios") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, SGridConsts.COL_TITLE_DATE));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Precio comercial"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc."));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Folio doc.", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Asoc. negocios"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_SYS));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_DEL));

                return gridColumnsForm;
            }
        };
        
        jpPriceList.add(moGridItemPrice, BorderLayout.CENTER);
    }
    
    private void showPriceLog() {
        Vector<SGridRow> rows = new Vector<>();

        for (SDbPriceCommercialLog oLog : maPriceComLog) {
            rows.add(oLog);
        }
        
        moGridItemPrice.populateGrid(rows, this);
        moGridItemPrice.clearSortKeys();
        moGridItemPrice.setSelectedGridRow(0);
    }
    
    public void setFormParams(final int[] pk) {
        try {
            maPriceComLog = new ArrayList<>();
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_log FROM itmu_price_comm_log WHERE id_item = " + pk[0] + " AND id_unit = " + pk[1];
            try (ResultSet resultSet = statement.executeQuery(sql)) {
                while (resultSet.next()) {
                    SDbPriceCommercialLog log = new SDbPriceCommercialLog();
                    log.read(miClient.getSession(), new int[] { pk[0], pk[1], resultSet.getInt(1) });
                    maPriceComLog.add(log);
                }
            }
            showPriceLog();
        }
        catch (Exception e) {
        }
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        return new Object();
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
    }
}
