/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridRowOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.bean.SBeanOptionPicker;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SDialogUnitPicker extends SBeanOptionPicker implements KeyListener {

    /**
     * Creates new form SBeanItemPicker
     */
    
    private javax.swing.JPanel jpControl;
    private sa.lib.gui.bean.SBeanFieldText moTextUnit;
    protected Vector<SGridRow> moAllRows;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        jpControl = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        
        moAllRows = new Vector<>(moGridPicker.getModel().getGridRows());
        
        moTextUnit = new sa.lib.gui.bean.SBeanFieldText();
        moTextUnit.setPreferredSize(new java.awt.Dimension(400, 23));
        moTextUnit.addKeyListener(this);
        
        jpGrid.add(jpControl, BorderLayout.NORTH);
        jpControl.add(moTextUnit);
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Vector<SGridRow> units = new Vector<>();
        String textToSearch = moTextUnit.getValue();
        if (textToSearch.isEmpty()) {
            units.addAll(moAllRows);
        }
        else {
            for (SGridRow unit : moAllRows) {
                if (SLibUtils.textToAscii(((SGridRowOptionPicker) unit).getValues().get(0).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    units.add(unit);
                }
                else if (SLibUtils.textToAscii(((SGridRowOptionPicker) unit).getValues().get(1).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    units.add(unit);
                }
            }
        }
        moGridPicker.populateGrid(units);
    }
}
