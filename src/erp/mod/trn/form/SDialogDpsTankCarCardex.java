/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.data.SDataConstantsSys;
import erp.mod.SModConsts;
import erp.mod.trn.db.SRowDpsTankCarCardex;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SDialogDpsTankCarCardex extends SBeanFormDialog implements ListSelectionListener{
    
    public static final int TANK_CAR_PLATE = 1;
    public static final int DPS_TYPE = 2;
    
    protected String msTankCarPlate;
    protected int mnDpsType;
    protected SGridPaneForm moGridDps;
    protected ArrayList<SRowDpsTankCarCardex> maDpsTankCarRows;

    /**
     * Creates new form SDialogDpsTankCar
     * @param client
     * @param title
     */
    public SDialogDpsTankCarCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_DPS_TANK_CAR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpDps = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Facturas de carrotanques");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpDps.setBorder(javax.swing.BorderFactory.createTitledBorder("Facturas:"));
        jpDps.setPreferredSize(new java.awt.Dimension(100, 200));
        jpDps.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpDps, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jpDps;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        jbSave.setText("Cerrar");
        jbCancel.setVisible(false);

        moGridDps = new SGridPaneForm(miClient, SModConsts.TRNX_DPS_TANK_CAR_CARDEX, SLibConsts.UNDEFINED, "Cardex de movimientos") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo documento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio documento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Referencia documento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha documento"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_L, "Asociado negocios"));
                
                return gridColumnsForm;
            }
        };
        
        jpDps.add(moGridDps, BorderLayout.CENTER);
    }
    
    private void populateGrid() {
        Vector<SGridRow> rows = new Vector<>();

        for (SRowDpsTankCarCardex row : maDpsTankCarRows) {
            rows.add(row);
        }
        
        moGridDps.populateGrid(rows, this);
        moGridDps.clearSortKeys();
        moGridDps.setSelectedGridRow(0);
    }
    
    private void readGridRows() {
        try {
            maDpsTankCarRows = new ArrayList<>();
            
            String sql = "SELECT "
                    + "d.id_year, "
                    + "d.id_doc, "
                    + "dt.code, "
                    + "IF(d.num_ser <> '', CONCAT(d.num_ser, '-', d.num), d.num) AS num, "
                    + "d.num_ref, "
                    + "d.dt, "
                    + "bp.bp "
                    + "FROM " + SModConsts.TablesMap.get(SModConsts.TRN_DPS) + " AS d "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRN_DPS_ETY) + " AS de ON "
                    + "d.id_year = de.id_year AND d.id_doc = de.id_doc "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.TRNU_TP_DPS) + " AS dt ON "
                    + "d.fid_ct_dps = dt.id_ct_dps AND d.fid_cl_dps = dt.id_cl_dps AND d.fid_tp_dps = dt.id_tp_dps "
                    + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS bp ON d.fid_bp_r = bp.id_bp "
                    + "WHERE FIND_IN_SET('" + msTankCarPlate + "', de.tank_car) "
                    + (mnDpsType == SModConsts.MOD_TRN_SAL_N ?
                    "AND d.fid_ct_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_INV[0] + " AND fid_cl_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_INV[1] + " AND fid_tp_dps = " + SDataConstantsSys.TRNU_TP_DPS_SAL_INV[2] + " " :
                    "AND d.fid_ct_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_INV[0] + " AND fid_cl_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_INV[1] + " AND fid_tp_dps = " + SDataConstantsSys.TRNU_TP_DPS_PUR_INV[2] + " ")
                    + "ORDER BY de.ts_new DESC;";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                SRowDpsTankCarCardex row = new SRowDpsTankCarCardex(resultSet.getString("code"), resultSet.getString("num"), 
                        resultSet.getString("num_ref"), resultSet.getDate("dt"), resultSet.getString("bp"));
                maDpsTankCarRows.add(row);
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
        populateGrid();
    } 
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case TANK_CAR_PLATE: 
                msTankCarPlate = (String) value;
                readGridRows();
                break;
            case DPS_TYPE:
                mnDpsType = (int) value;
                break;
        }
    }

    @Override
    public Object getValue(final int type) {
        return new Object();
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
    }
}
