/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.trn.db.SDbConfUserVsEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntityUser;
import erp.mod.trn.db.SDbMaterialConsumptionSubentity;
import erp.mod.trn.db.SDbMaterialConsumptionSubentityUser;
import erp.mod.trn.db.SDbMaterialProvisionEntity;
import erp.mod.trn.db.SDbMaterialProvisionEntityUser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormConfUserVsEntity extends SBeanForm implements ActionListener {
    
    private SDbConfUserVsEntity moRegistry;
    
    private SGridPaneForm moGridMatConsEnt;
    private SGridPaneForm moGridMatConsEntSelected;
    private SGridPaneForm moGridMatConsSubent;
    private SGridPaneForm moGridMatConsSubentSelected;
    private SGridPaneForm moGridMatProvEnt;
    private SGridPaneForm moGridMatProvEntSelected;
    
    private ArrayList<SDbMaterialConsumptionEntity> maMatConsEnt;
    private ArrayList<SDbMaterialConsumptionEntityUser> maMatConsEntSelected;
    private ArrayList<SDbMaterialConsumptionSubentity> maMatConsSubent;
    private ArrayList<SDbMaterialConsumptionSubentityUser> maMatConsSubentSelected;
    private ArrayList<SDbMaterialProvisionEntity> maMatProvEnt;
    private ArrayList<SDbMaterialProvisionEntityUser> maMatProvEntSelected;

    /**
     * Creates new form SFormConfUserVsEntity.
     * @param client
     * @param title
     */
    public SFormConfUserVsEntity(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_CONF_USR_VS_ENT, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpConsumption = new javax.swing.JPanel();
        jpUser = new javax.swing.JPanel();
        jlUser = new javax.swing.JLabel();
        moTextUser = new sa.lib.gui.bean.SBeanFieldText();
        jlNote = new javax.swing.JLabel();
        jpConsAvailable = new javax.swing.JPanel();
        jpConsAvailableLabel = new javax.swing.JPanel();
        jlConsAvailableLabel = new javax.swing.JLabel();
        jpGridConsAva = new javax.swing.JPanel();
        jpConsButtons = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jbConsAdd = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jbConsAddAll = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jbConsRemove = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jbConsRemoveAll = new javax.swing.JButton();
        jpConsSelected = new javax.swing.JPanel();
        jpConsSelectedLabel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jpGridConsSel = new javax.swing.JPanel();
        jpConsumptionS = new javax.swing.JPanel();
        jpConsAvailable1 = new javax.swing.JPanel();
        jpConsAvailableLabel1 = new javax.swing.JPanel();
        jlConsAvailableLabel1 = new javax.swing.JLabel();
        jpGridConsAva1 = new javax.swing.JPanel();
        jpConsButtons1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jbConsSAdd = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jbConsSAddAll = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jbConsSRemove = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jbConsSRemoveAll = new javax.swing.JButton();
        jpConsSelected1 = new javax.swing.JPanel();
        jpConsSelectedLabel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jpGridConsSel1 = new javax.swing.JPanel();
        jpProvision = new javax.swing.JPanel();
        jpProvAvailable = new javax.swing.JPanel();
        jpProvAvialableLabel = new javax.swing.JPanel();
        jlProvAva = new javax.swing.JLabel();
        jpGridProvAva = new javax.swing.JPanel();
        jpProvButtons = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jbProvAdd = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbProvAddAll = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbProvRemove = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbProvRemoveAll = new javax.swing.JButton();
        jpProvSelected = new javax.swing.JPanel();
        jpProvSelectedLabel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jpGridProvSel = new javax.swing.JPanel();

        setResizable(false);

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpConsumption.setLayout(new java.awt.BorderLayout());

        jpUser.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlUser.setText("Usuario:");
        jpUser.add(jlUser);

        moTextUser.setEditable(false);
        moTextUser.setEnabled(false);
        moTextUser.setPreferredSize(new java.awt.Dimension(400, 23));
        jpUser.add(moTextUser);

        jlNote.setText("Con permisos de requisiciones");
        jpUser.add(jlNote);

        jpConsumption.add(jpUser, java.awt.BorderLayout.PAGE_START);

        jpConsAvailable.setLayout(new java.awt.BorderLayout());

        jpConsAvailableLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsAvailableLabel.setText("Centros de consumo disponibles:");
        jpConsAvailableLabel.add(jlConsAvailableLabel);

        jpConsAvailable.add(jpConsAvailableLabel, java.awt.BorderLayout.NORTH);

        jpGridConsAva.setPreferredSize(new java.awt.Dimension(400, 150));
        jpGridConsAva.setLayout(new java.awt.BorderLayout());
        jpConsAvailable.add(jpGridConsAva, java.awt.BorderLayout.CENTER);

        jpConsButtons.setLayout(new java.awt.GridLayout(5, 0));
        jpConsButtons.add(jPanel5);

        jbConsAdd.setText(">");
        jbConsAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel7.add(jbConsAdd);

        jpConsButtons.add(jPanel7);

        jbConsAddAll.setText(">>");
        jbConsAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel8.add(jbConsAddAll);

        jpConsButtons.add(jPanel8);

        jbConsRemove.setText("<");
        jbConsRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jbConsRemove);

        jpConsButtons.add(jPanel9);

        jbConsRemoveAll.setText("<<");
        jbConsRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(jbConsRemoveAll);

        jpConsButtons.add(jPanel10);

        jpConsAvailable.add(jpConsButtons, java.awt.BorderLayout.EAST);

        jpConsumption.add(jpConsAvailable, java.awt.BorderLayout.CENTER);

        jpConsSelected.setLayout(new java.awt.BorderLayout());

        jpConsSelectedLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel4.setText("Centros de consumo seleccionadas:");
        jLabel4.setPreferredSize(new java.awt.Dimension(400, 16));
        jpConsSelectedLabel.add(jLabel4);

        jpConsSelected.add(jpConsSelectedLabel, java.awt.BorderLayout.NORTH);

        jpGridConsSel.setPreferredSize(new java.awt.Dimension(500, 150));
        jpGridConsSel.setLayout(new java.awt.BorderLayout());
        jpConsSelected.add(jpGridConsSel, java.awt.BorderLayout.CENTER);

        jpConsumption.add(jpConsSelected, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpConsumption, java.awt.BorderLayout.NORTH);

        jpConsumptionS.setLayout(new java.awt.BorderLayout());

        jpConsAvailable1.setLayout(new java.awt.BorderLayout());

        jpConsAvailableLabel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsAvailableLabel1.setText("Sucentros de consumo disponibles:");
        jpConsAvailableLabel1.add(jlConsAvailableLabel1);

        jpConsAvailable1.add(jpConsAvailableLabel1, java.awt.BorderLayout.NORTH);

        jpGridConsAva1.setPreferredSize(new java.awt.Dimension(400, 150));
        jpGridConsAva1.setLayout(new java.awt.BorderLayout());
        jpConsAvailable1.add(jpGridConsAva1, java.awt.BorderLayout.CENTER);

        jpConsButtons1.setLayout(new java.awt.GridLayout(5, 0));
        jpConsButtons1.add(jPanel6);

        jbConsSAdd.setText(">");
        jbConsSAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel13.add(jbConsSAdd);

        jpConsButtons1.add(jPanel13);

        jbConsSAddAll.setText(">>");
        jbConsSAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel14.add(jbConsSAddAll);

        jpConsButtons1.add(jPanel14);

        jbConsSRemove.setText("<");
        jbConsSRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel15.add(jbConsSRemove);

        jpConsButtons1.add(jPanel15);

        jbConsSRemoveAll.setText("<<");
        jbConsSRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jbConsSRemoveAll);

        jpConsButtons1.add(jPanel16);

        jpConsAvailable1.add(jpConsButtons1, java.awt.BorderLayout.EAST);

        jpConsumptionS.add(jpConsAvailable1, java.awt.BorderLayout.CENTER);

        jpConsSelected1.setLayout(new java.awt.BorderLayout());

        jpConsSelectedLabel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel5.setText("Subcentro de consumo seleccionadas:");
        jLabel5.setPreferredSize(new java.awt.Dimension(400, 16));
        jpConsSelectedLabel1.add(jLabel5);

        jpConsSelected1.add(jpConsSelectedLabel1, java.awt.BorderLayout.NORTH);

        jpGridConsSel1.setPreferredSize(new java.awt.Dimension(500, 150));
        jpGridConsSel1.setLayout(new java.awt.BorderLayout());
        jpConsSelected1.add(jpGridConsSel1, java.awt.BorderLayout.CENTER);

        jpConsumptionS.add(jpConsSelected1, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpConsumptionS, java.awt.BorderLayout.CENTER);

        jpProvision.setLayout(new java.awt.BorderLayout());

        jpProvAvailable.setLayout(new java.awt.BorderLayout());

        jpProvAvialableLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlProvAva.setText("Centros de suministro disponibles:");
        jpProvAvialableLabel.add(jlProvAva);

        jpProvAvailable.add(jpProvAvialableLabel, java.awt.BorderLayout.NORTH);

        jpGridProvAva.setPreferredSize(new java.awt.Dimension(400, 150));
        jpGridProvAva.setLayout(new java.awt.BorderLayout());
        jpProvAvailable.add(jpGridProvAva, java.awt.BorderLayout.CENTER);

        jpProvButtons.setLayout(new java.awt.GridLayout(5, 0));
        jpProvButtons.add(jPanel12);

        jbProvAdd.setText(">");
        jbProvAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel1.add(jbProvAdd);

        jpProvButtons.add(jPanel1);

        jbProvAddAll.setText(">>");
        jbProvAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel2.add(jbProvAddAll);

        jpProvButtons.add(jPanel2);

        jbProvRemove.setText("<");
        jbProvRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jbProvRemove);

        jpProvButtons.add(jPanel3);

        jbProvRemoveAll.setText("<<");
        jbProvRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jbProvRemoveAll);

        jpProvButtons.add(jPanel4);

        jpProvAvailable.add(jpProvButtons, java.awt.BorderLayout.EAST);

        jpProvision.add(jpProvAvailable, java.awt.BorderLayout.CENTER);

        jpProvSelected.setLayout(new java.awt.BorderLayout());

        jpProvSelectedLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Centros de suministro seleccionadas:");
        jLabel2.setPreferredSize(new java.awt.Dimension(400, 16));
        jpProvSelectedLabel.add(jLabel2);

        jpProvSelected.add(jpProvSelectedLabel, java.awt.BorderLayout.NORTH);

        jpGridProvSel.setPreferredSize(new java.awt.Dimension(500, 150));
        jpGridProvSel.setLayout(new java.awt.BorderLayout());
        jpProvSelected.add(jpGridProvSel, java.awt.BorderLayout.CENTER);

        jpProvision.add(jpProvSelected, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpProvision, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbConsAdd;
    private javax.swing.JButton jbConsAddAll;
    private javax.swing.JButton jbConsRemove;
    private javax.swing.JButton jbConsRemoveAll;
    private javax.swing.JButton jbConsSAdd;
    private javax.swing.JButton jbConsSAddAll;
    private javax.swing.JButton jbConsSRemove;
    private javax.swing.JButton jbConsSRemoveAll;
    private javax.swing.JButton jbProvAdd;
    private javax.swing.JButton jbProvAddAll;
    private javax.swing.JButton jbProvRemove;
    private javax.swing.JButton jbProvRemoveAll;
    private javax.swing.JLabel jlConsAvailableLabel;
    private javax.swing.JLabel jlConsAvailableLabel1;
    private javax.swing.JLabel jlNote;
    private javax.swing.JLabel jlProvAva;
    private javax.swing.JLabel jlUser;
    private javax.swing.JPanel jpConsAvailable;
    private javax.swing.JPanel jpConsAvailable1;
    private javax.swing.JPanel jpConsAvailableLabel;
    private javax.swing.JPanel jpConsAvailableLabel1;
    private javax.swing.JPanel jpConsButtons;
    private javax.swing.JPanel jpConsButtons1;
    private javax.swing.JPanel jpConsSelected;
    private javax.swing.JPanel jpConsSelected1;
    private javax.swing.JPanel jpConsSelectedLabel;
    private javax.swing.JPanel jpConsSelectedLabel1;
    private javax.swing.JPanel jpConsumption;
    private javax.swing.JPanel jpConsumptionS;
    private javax.swing.JPanel jpGridConsAva;
    private javax.swing.JPanel jpGridConsAva1;
    private javax.swing.JPanel jpGridConsSel;
    private javax.swing.JPanel jpGridConsSel1;
    private javax.swing.JPanel jpGridProvAva;
    private javax.swing.JPanel jpGridProvSel;
    private javax.swing.JPanel jpProvAvailable;
    private javax.swing.JPanel jpProvAvialableLabel;
    private javax.swing.JPanel jpProvButtons;
    private javax.swing.JPanel jpProvSelected;
    private javax.swing.JPanel jpProvSelectedLabel;
    private javax.swing.JPanel jpProvision;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpUser;
    private sa.lib.gui.bean.SBeanFieldText moTextUser;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1040, 700);
        
        moTextUser.setTextSettings("Usuario", 255);
        
        moFields.setFormButton(jbSave);
        
        // Centros de consumo disponibles
        
        moGridMatConsEnt = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT, 0, "Centros de consumo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de consumo"));

                return columns;
            }
        };

        jpGridConsAva.add(moGridMatConsEnt);
        mvFormGrids.add(moGridMatConsEnt);
        
        // Centroes de consumo seleccionadas
        
        moGridMatConsEntSelected = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT_USR, 0, "Centros de consumo seleccionadas") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de consumo"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Predeterminado");
                col.setEditable(true);
                columns.add(col);

                return columns;
            }
        };

        jpGridConsSel.add(moGridMatConsEntSelected);
        mvFormGrids.add(moGridMatConsEntSelected);
        
        // Subcentros de consumo disponibles
        
        moGridMatConsSubent = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_SUBENT, 0, "Subcentros de consumo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Centro de consumo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Subcentro de consumo"));

                return columns;
            }
        };

        jpGridConsAva1.add(moGridMatConsSubent);
        mvFormGrids.add(moGridMatConsSubent);
        
        // Subcentroes de consumo seleccionadas
        
        moGridMatConsSubentSelected = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_SUBENT_USR, 0, "Subcentros de consumo seleccionadas") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Centro de consumo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Subcentro de consumo"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Predeterminado");
                col.setEditable(true);
                columns.add(col);

                return columns;
            }
        };

        jpGridConsSel1.add(moGridMatConsSubentSelected);
        mvFormGrids.add(moGridMatConsSubentSelected);
        
        // Centroes de suministro disponibles
        
        moGridMatProvEnt = new SGridPaneForm(miClient, SModConsts.TRN_MAT_PROV_ENT, 0, "Centros de suministro") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de suministro"));

                return columns;
            }
        };

        jpGridProvAva.add(moGridMatProvEnt);
        mvFormGrids.add(moGridMatProvEnt);
        
        // Centros de suministro seleccionadas
        
        moGridMatProvEntSelected = new SGridPaneForm(miClient, SModConsts.TRN_MAT_PROV_ENT_USR, 0, "Centros de suministro seleccionadas") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de suministro"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Predeterminado");
                col.setEditable(true);
                columns.add(col);
                
                return columns;
            }
        };

        jpGridProvSel.add(moGridMatProvEntSelected);
        mvFormGrids.add(moGridMatProvEntSelected);
        
        jpCommandRight.remove(jbEdit);
        jpCommandRight.remove(jbReadInfo);
    }
    
    private void readMaterialProvisionEntities() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_mat_prov_ent FROM trn_mat_prov_ent";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbMaterialProvisionEntityUser eu : maMatProvEntSelected) {
                    if (resultSet.getInt(1) == eu.getPkMatProvisionEntityId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SDbMaterialProvisionEntity pe = new SDbMaterialProvisionEntity();
                    pe.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                    maMatProvEnt.add(pe);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void readMaterialConsumptionEntities() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_mat_cons_ent FROM trn_mat_cons_ent";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbMaterialConsumptionEntityUser eu : maMatConsEntSelected) {
                    if (resultSet.getInt(1) == eu.getPkMatConsumptionEntityId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SDbMaterialConsumptionEntity ce = new SDbMaterialConsumptionEntity();
                    ce.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                    maMatConsEnt.add(ce);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void readMaterialConsumptionSubentities() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_mat_cons_ent, id_mat_cons_subent FROM trn_mat_cons_subent ORDER BY id_mat_cons_ent, id_mat_cons_subent";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbMaterialConsumptionSubentityUser eu : maMatConsSubentSelected) {
                    if (resultSet.getInt(1) == eu.getPkMatConsumptionEntityId() && resultSet.getInt(2) == eu.getPkMatConsumptionSubentityId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SDbMaterialConsumptionSubentity ce = new SDbMaterialConsumptionSubentity();
                    ce.read(miClient.getSession(), new int[] { resultSet.getInt(1), resultSet.getInt(2) });
                    maMatConsSubent.add(ce);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateGridMatProvEnt()  {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatProvEnt.size() > 0) {
            vRows.addAll(maMatProvEnt);
        }
        moGridMatProvEnt.populateGrid(vRows);
    }
    
    private void populateGridMatProvEntSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatProvEntSelected.size() > 0) {
            vRows.addAll(maMatProvEntSelected);
        }
        moGridMatProvEntSelected.populateGrid(vRows);
    }
    
    private void populateGridMatConsEnt() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEnt.size() > 0) {
            vRows.addAll(maMatConsEnt);
        }
        moGridMatConsEnt.populateGrid(vRows);
    }
    
    private void populateGridMatConsEntSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEntSelected.size() > 0) {
            vRows.addAll(maMatConsEntSelected);
        }
        moGridMatConsEntSelected.populateGrid(vRows);
    }
    
    private void populateGridMatConsSubent() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsSubent.size() > 0) {
            vRows.addAll(maMatConsSubent);
        }
        moGridMatConsSubent.populateGrid(vRows);
    }
    
    private void populateGridMatConsSubentSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsSubentSelected.size() > 0) {
            vRows.addAll(maMatConsSubentSelected);
        }
        moGridMatConsSubentSelected.populateGrid(vRows);
    }
    
    private void actionConsAdd() {
        try {
            int consId = ((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()).getPkMatConsumptionEntityId();
            if (maMatConsEnt.remove((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()) ) {
                SDbMaterialConsumptionEntityUser eu = new SDbMaterialConsumptionEntityUser();
                eu.setPkMatConsumptionEntityId(consId);
                eu.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(eu);

                populateGridMatConsEnt();
                populateGridMatConsEntSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionConsAddAll() {
        try {
            for (SDbMaterialConsumptionEntity ce : maMatConsEnt) {
                SDbMaterialConsumptionEntityUser eu = new SDbMaterialConsumptionEntityUser();
                eu.setPkMatConsumptionEntityId(ce.getPkMatConsumptionEntityId());
                eu.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(eu);
            }
            maMatConsEnt.clear();
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionConsRemove() {
        maMatConsEnt.add(((SDbMaterialConsumptionEntityUser) moGridMatConsEntSelected.getSelectedGridRow()).getAuxMatConsEnt());
        if (maMatConsEntSelected.remove(((SDbMaterialConsumptionEntityUser) moGridMatConsEntSelected.getSelectedGridRow()))) {
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
    }

    private void actionConsRemoveAll() {
        for (SDbMaterialConsumptionEntityUser eu : maMatConsEntSelected) {
            maMatConsEnt.add(eu.getAuxMatConsEnt());
        }
        maMatConsEntSelected.clear();
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
    }
    
     private void actionConsSAdd() {
        try {
            int consId = ((SDbMaterialConsumptionSubentity) moGridMatConsSubent.getSelectedGridRow()).getPkMatConsumptionEntityId();
            int consSId = ((SDbMaterialConsumptionSubentity) moGridMatConsSubent.getSelectedGridRow()).getPkMatConsumptionSubentityId();
            if (maMatConsSubent.remove((SDbMaterialConsumptionSubentity) moGridMatConsSubent.getSelectedGridRow()) ) {
                SDbMaterialConsumptionSubentityUser eu = new SDbMaterialConsumptionSubentityUser();
                eu.setPkMatConsumptionEntityId(consId);
                eu.setPkMatConsumptionSubentityId(consSId);
                eu.readAuxMatConsSubent(miClient.getSession());
                maMatConsSubentSelected.add(eu);

                populateGridMatConsSubent();
                populateGridMatConsSubentSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionConsSAddAll() {
        try {
            for (SDbMaterialConsumptionSubentity ce : maMatConsSubent) {
                SDbMaterialConsumptionSubentityUser eu = new SDbMaterialConsumptionSubentityUser();
                eu.setPkMatConsumptionEntityId(ce.getPkMatConsumptionEntityId());
                eu.setPkMatConsumptionSubentityId(ce.getPkMatConsumptionSubentityId());
                eu.readAuxMatConsSubent(miClient.getSession());
                maMatConsSubentSelected.add(eu);
            }
            maMatConsSubent.clear();
            populateGridMatConsSubent();
            populateGridMatConsSubentSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionConsSRemove() {
        maMatConsSubent.add(((SDbMaterialConsumptionSubentityUser) moGridMatConsSubentSelected.getSelectedGridRow()).getAuxMatConsSubent());
        if (maMatConsSubentSelected.remove(((SDbMaterialConsumptionSubentityUser) moGridMatConsSubentSelected.getSelectedGridRow()))) {
            populateGridMatConsSubent();
            populateGridMatConsSubentSelected();
        }
    }

    private void actionConsSRemoveAll() {
        for (SDbMaterialConsumptionSubentityUser eu : maMatConsSubentSelected) {
            maMatConsSubent.add(eu.getAuxMatConsSubent());
        }
        maMatConsSubentSelected.clear();
        populateGridMatConsSubent();
        populateGridMatConsSubentSelected();
    }
    
    private void actionProvAdd() {
        try {
            int provId = ((SDbMaterialProvisionEntity) moGridMatProvEnt.getSelectedGridRow()).getPkMatProvisionEntityId();
            if (maMatProvEnt.remove((SDbMaterialProvisionEntity) moGridMatProvEnt.getSelectedGridRow()) ) {
                SDbMaterialProvisionEntityUser eu = new SDbMaterialProvisionEntityUser();
                eu.setPkMatProvisionEntityId(provId);
                eu.readAuxMatProvEnt(miClient.getSession());
                maMatProvEntSelected.add(eu);

                populateGridMatProvEnt();
                populateGridMatProvEntSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionProvAddAll() {
        try {
            for (SDbMaterialProvisionEntity pe : maMatProvEnt) {
                SDbMaterialProvisionEntityUser eu = new SDbMaterialProvisionEntityUser();
                eu.setPkMatProvisionEntityId(pe.getPkMatProvisionEntityId());
                eu.readAuxMatProvEnt(miClient.getSession());
                maMatProvEntSelected.add(eu);
            }
            maMatProvEnt.clear();
            populateGridMatProvEnt();
            populateGridMatProvEntSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionProvRemove() {
        maMatProvEnt.add(((SDbMaterialProvisionEntityUser) moGridMatProvEntSelected.getSelectedGridRow()).getAuxMatProvEnt());
        if (maMatProvEntSelected.remove(((SDbMaterialProvisionEntityUser) moGridMatProvEntSelected.getSelectedGridRow()))) {
            populateGridMatProvEnt();
            populateGridMatProvEntSelected();
        }
    }

    private void actionProvRemoveAll() {
        for (SDbMaterialProvisionEntityUser eu : maMatProvEntSelected) {
            maMatProvEnt.add(eu.getAuxMatProvEnt());
        }
        maMatProvEntSelected.clear();
        populateGridMatProvEnt();
        populateGridMatProvEntSelected();
    }

    @Override
    public void addAllListeners() {
        jbConsAdd.addActionListener(this);
        jbConsAddAll.addActionListener(this);
        jbConsRemove.addActionListener(this);
        jbConsRemoveAll.addActionListener(this);
        jbConsSAdd.addActionListener(this);
        jbConsSAddAll.addActionListener(this);
        jbConsSRemove.addActionListener(this);
        jbConsSRemoveAll.addActionListener(this);
        jbProvAdd.addActionListener(this);
        jbProvAddAll.addActionListener(this);
        jbProvRemove.addActionListener(this);
        jbProvRemoveAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbConsAdd.removeActionListener(this);
        jbConsAddAll.removeActionListener(this);
        jbConsRemove.removeActionListener(this);
        jbConsRemoveAll.removeActionListener(this);
        jbConsSAdd.removeActionListener(this);
        jbConsSAddAll.removeActionListener(this);
        jbConsSRemove.removeActionListener(this);
        jbConsSRemoveAll.removeActionListener(this);
        jbProvAdd.removeActionListener(this);
        jbProvAddAll.removeActionListener(this);
        jbProvRemove.removeActionListener(this);
        jbProvRemoveAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moTextUser.setValue("");
        
        maMatConsEnt = new ArrayList<>();
        maMatConsEntSelected = new ArrayList<>();
        maMatConsSubent = new ArrayList<>();
        maMatConsSubentSelected = new ArrayList<>();
        maMatProvEnt = new ArrayList<>();
        maMatProvEntSelected = new ArrayList<>();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbConfUserVsEntity) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        moTextUser.setValue(moRegistry.getUserName());
        
        for (SDbMaterialConsumptionEntityUser eu : moRegistry.getConsEntUser()) {
            maMatConsEntSelected.add(eu);
        }
        for (SDbMaterialConsumptionSubentityUser eu : moRegistry.getConsSubentUser()) {
            maMatConsSubentSelected.add(eu);
        }
        for (SDbMaterialProvisionEntityUser eu : moRegistry.getProvEntUser()) {
            maMatProvEntSelected.add(eu);
        }
        
        readMaterialConsumptionEntities();
        readMaterialConsumptionSubentities();
        readMaterialProvisionEntities();
        
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
        populateGridMatConsSubent();
        populateGridMatConsSubentSelected();
        populateGridMatProvEnt();
        populateGridMatProvEntSelected();
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbConfUserVsEntity registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }
        
        registry.getConsEntUser().clear();
        for (SDbMaterialConsumptionEntityUser eu : maMatConsEntSelected) {
            registry.getConsEntUser().add(eu);
        }
        
        registry.getConsSubentUser().clear();
        for (SDbMaterialConsumptionSubentityUser eu : maMatConsSubentSelected) {
            registry.getConsSubentUser().add(eu);
        }
        
        registry.getProvEntUser().clear();
        for (SDbMaterialProvisionEntityUser eu : maMatProvEntSelected) {
            registry.getProvEntUser().add(eu);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid() && !maMatConsEntSelected.isEmpty()) {
            int defaults = 0;
            for (SDbMaterialConsumptionEntityUser eu : maMatConsEntSelected) {
                if (eu.isDefault()) {
                    defaults++;
                }
            }
            if (defaults == 0) {
                validation.setMessage("No ha seleccionado ninguna entidad de consumo como predeterminada.");
            }
            else if (defaults > 1) {
                validation.setMessage("Hay mas de una entidad de consumo seleccionada como predeterminada.");
            }
        }
        
        if (validation.isValid() && !maMatConsSubentSelected.isEmpty()) {
            int defaults = 0;
            for (SDbMaterialConsumptionSubentityUser eu : maMatConsSubentSelected) {
                if (eu.isDefault()) {
                    defaults++;
                }
            }
            if (defaults == 0) {
                validation.setMessage("No ha seleccionado ninguna subentidad de consumo como predeterminada.");
            }
            else if (defaults > 1) {
                validation.setMessage("Hay mas de una entidad de subconsumo seleccionada como predeterminada.");
            }
        }
        
        if (validation.isValid() && !maMatProvEntSelected.isEmpty()) {
            int defaults = 0;
            for (SDbMaterialProvisionEntityUser eu : maMatProvEntSelected) {
                if (eu.isDefault()) {
                    defaults++;
                }
            }
            if (defaults == 0) {
                validation.setMessage("No ha seleccionado ninguna entidad de suministro como predeterminada.");
            }
            else if (defaults > 1) {
                validation.setMessage("Hay mas de una entidad de suministro seleccionada como predeterminada.");
            }
        }
        
        if (validation.isValid()) {
            for (SDbMaterialConsumptionEntityUser eu : maMatConsEntSelected) {
                for (SDbMaterialConsumptionSubentityUser seu : maMatConsSubentSelected) {
                    if (seu.getPkMatConsumptionEntityId() == eu.getPkMatConsumptionEntityId()) {
                        validation.setMessage("No es necesario configurar subentidades de consumo que dependan de una entidad de consumo que ya est√© configurada.");
                        break;
                    }
                }
            }
        }
        
        if (validation.isValid() && (maMatConsEntSelected.isEmpty() || maMatConsSubentSelected.isEmpty())) {
            validation.setMessage("Se debe de configurar al menos una entidad o subentidad de consumo.");
        }
        
        if (validation.isValid() && maMatProvEntSelected.isEmpty()) {
            validation.setMessage("Se debe de configurar al menos una entidad de suministro.");
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbConsAdd) {
                actionConsAdd();
            }
            else if (button == jbConsAddAll) {
                actionConsAddAll();
            }
            else if (button == jbConsRemove) {
                actionConsRemove();
            }
            else if (button == jbConsRemoveAll) {
                actionConsRemoveAll();
            }
            else if (button == jbConsSAdd) {
                actionConsSAdd();
            }
            else if (button == jbConsSAddAll) {
                actionConsSAddAll();
            }
            else if (button == jbConsSRemove) {
                actionConsSRemove();
            }
            else if (button == jbConsSRemoveAll) {
                actionConsSRemoveAll();
            }
            else if (button == jbProvAdd) {
                actionProvAdd();
            }
            else if (button == jbProvAddAll) {
                actionProvAddAll();
            }
            else if (button == jbProvRemove) {
                actionProvRemove();
            }
            else if (button == jbProvRemoveAll) {
                actionProvRemoveAll();
            }
        }
    }
}
