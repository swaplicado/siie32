/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.mbps.data.SDataBizPartner;
import erp.mcfg.data.SDataCurrency;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.utils.SDocUtils;
import erp.mod.trn.db.SDbDps;
import erp.mod.trn.db.SDbDpsEntry;
import erp.mod.trn.db.SDbSupplierFile;
import erp.mod.trn.db.SDbSupplierFileDps;
import erp.mod.trn.db.SDbSupplierFileDpsEntry;
import erp.mod.trn.db.SDbSupplierFileProcess;
import erp.mod.trn.db.SRowSupplierFileDpsEntry;
import erp.mod.trn.db.SRowSupplierFileDpsFiles;
import erp.mtrn.data.SDataDpsType;
import java.awt.BorderLayout;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormSupplierFileProcess extends SBeanForm implements ActionListener, FocusListener, ItemListener, ListSelectionListener, CellEditorListener {

    private final String FILE_EXT = "doc|docx|xls|xlsx|jpg|png|jpeg|pdf";
    
    private SDbSupplierFileProcess moRegistry;
    private SDbSupplierFile moPickedSuppFile;
    private SDbSupplierFile moSuppFileDeleted;
    private File moFile;
    
    private SDataDpsType moDpsType;
    private SDataBizPartner moDocBizPartner;
    private SDataCurrency moDocCur;
    private SDataCurrency moSuppCur;
    
    private ArrayList<SDbSupplierFile> maSuppFiles;
    private ArrayList<SDbSupplierFile> maSuppFilesDeleted;
    private ArrayList<SRowSupplierFileDpsFiles> maSuppFilesRows;
    private ArrayList<SRowSupplierFileDpsEntry> maDpsEntriesRows;
    private ArrayList<File> maFilesDeleted;
    
    private SGridPaneForm moGridSuppFiles;
    private SGridPaneForm moGridDpsEntries;
    
    private JButton jbAddRow;
    private JButton jbCancelRow;
    private JButton jbUpRow;
    private JButton jbDownRow;
    private JButton jbEditRow;
    private JButton jbDeleteRow;
    private JButton jbSelectAll;
    private JButton jbDeselectAll;
    private JButton jbSaveAndSend;
    
    private int mnDpsStAuth;
    private int mnEditingSelectedIndex;
    
    private boolean mbIsDocExtemp;
    private boolean mbIsCapturingFile;
    private boolean mbIsExistingFile;
    private boolean mbCanEdit;
    private boolean mbSendAuth;
    private boolean mbIsEditingFile;
    
    private double mdExchangeRateDoc;
    private double mdExchangeRateLoc;
    
    /**
     * Creates new form SFormSupplierFileProcess
     * @param client
     * @param title
     */
    public SFormSupplierFileProcess(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_SUP_FILE_DPS_PROC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpData = new javax.swing.JPanel();
        jpDataDoc = new javax.swing.JPanel();
        jpDocRow1 = new javax.swing.JPanel();
        jlDocType = new javax.swing.JLabel();
        moTextDocType = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow2 = new javax.swing.JPanel();
        jlDocCob = new javax.swing.JLabel();
        moTextCob = new sa.lib.gui.bean.SBeanFieldText();
        moTextCobCode = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow3 = new javax.swing.JPanel();
        jlDocBp = new javax.swing.JLabel();
        moTextDocBp = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow4 = new javax.swing.JPanel();
        jlFiscalId = new javax.swing.JLabel();
        moTextFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow5 = new javax.swing.JPanel();
        jlDocDate = new javax.swing.JLabel();
        moDateDocDate = new sa.lib.gui.bean.SBeanFieldDate();
        jpDocRow6 = new javax.swing.JPanel();
        jlNum = new javax.swing.JLabel();
        moTextDocSer = new sa.lib.gui.bean.SBeanFieldText();
        moTextDocNum = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow7 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moTextDocReference = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow8 = new javax.swing.JPanel();
        jlDocCurTotal = new javax.swing.JLabel();
        moDecDocCurTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextDocCurTotalCur = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow9 = new javax.swing.JPanel();
        jlDocExchageRate = new javax.swing.JLabel();
        moDecDocExchangeRate = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpDocRow10 = new javax.swing.JPanel();
        jlDocTotal = new javax.swing.JLabel();
        moDecDocTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextDocTotalCur = new sa.lib.gui.bean.SBeanFieldText();
        jpDocRow11 = new javax.swing.JPanel();
        jlDocDpsAuth = new javax.swing.JLabel();
        moTextDocDpsAuth = new sa.lib.gui.bean.SBeanFieldText();
        jpDataSupp = new javax.swing.JPanel();
        jpDataSuppControls = new javax.swing.JPanel();
        jpDataSuppType = new javax.swing.JPanel();
        jpDataSuppTypeButtons = new javax.swing.JPanel();
        jbPickedQ = new javax.swing.JButton();
        jbHiggerQ = new javax.swing.JButton();
        jbLowerQ = new javax.swing.JButton();
        jbTechnical = new javax.swing.JButton();
        jpDataSuppCapture = new javax.swing.JPanel();
        jpDataSuppInfo = new javax.swing.JPanel();
        jpSuppInfoRow1 = new javax.swing.JPanel();
        jlSuppBp = new javax.swing.JLabel();
        moKeySuppBp = new sa.lib.gui.bean.SBeanFieldKey();
        jpSuppInfoRow2 = new javax.swing.JPanel();
        jlSuppNum = new javax.swing.JLabel();
        moTextSuppNum = new sa.lib.gui.bean.SBeanFieldText();
        jbSuppNumPicker = new javax.swing.JButton();
        jpSuppInfoRow3 = new javax.swing.JPanel();
        moBoolNoRegSuppBp = new sa.lib.gui.bean.SBeanFieldBoolean();
        jpSuppInfoRow4 = new javax.swing.JPanel();
        jlNotRegSuppBp = new javax.swing.JLabel();
        moTextNoRegSuppBp = new sa.lib.gui.bean.SBeanFieldText();
        jpSuppInfoRow6 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();
        jpSuppInfoRow7 = new javax.swing.JPanel();
        jlFile = new javax.swing.JLabel();
        jtfFile = new javax.swing.JTextField();
        jbFilePicker = new javax.swing.JButton();
        jpSuppTotals = new javax.swing.JPanel();
        jpSuppTotalRow1 = new javax.swing.JPanel();
        jlSuppCur = new javax.swing.JLabel();
        moKeySuppCur = new sa.lib.gui.bean.SBeanFieldKey();
        jpSuppTotalRow2 = new javax.swing.JPanel();
        jlSuppCurTotal = new javax.swing.JLabel();
        moDecSuppCurTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSuppCurTotalCur = new sa.lib.gui.bean.SBeanFieldText();
        jpSuppTotalRow3 = new javax.swing.JPanel();
        jlSuppExchangeRateDoc = new javax.swing.JLabel();
        moDecSuppExchangeRateDoc = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlInfo = new javax.swing.JLabel();
        jpSuppTotalRow4 = new javax.swing.JPanel();
        jlSuppTotalDoc = new javax.swing.JLabel();
        moDecSuppTotalDoc = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSuppTotalDocCur = new sa.lib.gui.bean.SBeanFieldText();
        jpSuppTotalRow5 = new javax.swing.JPanel();
        jlSuppExchangeRateLoc = new javax.swing.JLabel();
        moDecSuppExchangeRateLoc = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpSuppTotalRow6 = new javax.swing.JPanel();
        jlSuppTotal = new javax.swing.JLabel();
        moDecSuppTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextSuppTotalCur = new sa.lib.gui.bean.SBeanFieldText();
        jpGridSuppFiles = new javax.swing.JPanel();
        jpGridEntries = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpData.setLayout(new java.awt.BorderLayout());

        jpDataDoc.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del documento:"));
        jpDataDoc.setLayout(new java.awt.GridLayout(12, 0, 0, 5));

        jpDocRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocType.setText("Tipo documento:");
        jlDocType.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow1.add(jlDocType);

        moTextDocType.setEnabled(false);
        moTextDocType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpDocRow1.add(moTextDocType);

        jpDataDoc.add(jpDocRow1);

        jpDocRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocCob.setText("Sucursal empresa:");
        jlDocCob.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow2.add(jlDocCob);

        moTextCob.setEnabled(false);
        moTextCob.setPreferredSize(new java.awt.Dimension(125, 23));
        jpDocRow2.add(moTextCob);

        moTextCobCode.setEnabled(false);
        moTextCobCode.setPreferredSize(new java.awt.Dimension(70, 23));
        jpDocRow2.add(moTextCobCode);

        jpDataDoc.add(jpDocRow2);

        jpDocRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocBp.setText("Asoc. negocios:");
        jlDocBp.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow3.add(jlDocBp);
        jlDocBp.getAccessibleContext().setAccessibleName("Asoc. negocios");

        moTextDocBp.setEnabled(false);
        moTextDocBp.setPreferredSize(new java.awt.Dimension(200, 23));
        jpDocRow3.add(moTextDocBp);

        jpDataDoc.add(jpDocRow3);

        jpDocRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow4.add(jlFiscalId);

        moTextFiscalId.setEnabled(false);
        moTextFiscalId.setPreferredSize(new java.awt.Dimension(200, 23));
        jpDocRow4.add(moTextFiscalId);

        jpDataDoc.add(jpDocRow4);

        jpDocRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocDate.setText("Fecha:");
        jlDocDate.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow5.add(jlDocDate);

        moDateDocDate.setEnabled(false);
        jpDocRow5.add(moDateDocDate);

        jpDataDoc.add(jpDocRow5);

        jpDocRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNum.setText("Serie y folio:");
        jlNum.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow6.add(jlNum);

        moTextDocSer.setEnabled(false);
        moTextDocSer.setPreferredSize(new java.awt.Dimension(75, 23));
        jpDocRow6.add(moTextDocSer);

        moTextDocNum.setEnabled(false);
        moTextDocNum.setPreferredSize(new java.awt.Dimension(118, 23));
        jpDocRow6.add(moTextDocNum);

        jpDataDoc.add(jpDocRow6);

        jpDocRow7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia:");
        jlReference.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow7.add(jlReference);

        moTextDocReference.setEnabled(false);
        moTextDocReference.setPreferredSize(new java.awt.Dimension(140, 23));
        jpDocRow7.add(moTextDocReference);

        jpDataDoc.add(jpDocRow7);

        jpDocRow8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocCurTotal.setText("Tolal documento:");
        jlDocCurTotal.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow8.add(jlDocCurTotal);

        moDecDocCurTotal.setEnabled(false);
        jpDocRow8.add(moDecDocCurTotal);

        moTextDocCurTotalCur.setEnabled(false);
        moTextDocCurTotalCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDocRow8.add(moTextDocCurTotalCur);

        jpDataDoc.add(jpDocRow8);

        jpDocRow9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocExchageRate.setText("Tipo cambio:");
        jlDocExchageRate.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow9.add(jlDocExchageRate);

        moDecDocExchangeRate.setEnabled(false);
        jpDocRow9.add(moDecDocExchangeRate);

        jpDataDoc.add(jpDocRow9);

        jpDocRow10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocTotal.setText("Tolal:");
        jlDocTotal.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow10.add(jlDocTotal);

        moDecDocTotal.setEnabled(false);
        jpDocRow10.add(moDecDocTotal);

        moTextDocTotalCur.setText("MXN");
        moTextDocTotalCur.setEnabled(false);
        moTextDocTotalCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jpDocRow10.add(moTextDocTotalCur);

        jpDataDoc.add(jpDocRow10);

        jpDocRow11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDocDpsAuth.setText("Est. autorizaci√≥n:");
        jlDocDpsAuth.setPreferredSize(new java.awt.Dimension(90, 23));
        jpDocRow11.add(jlDocDpsAuth);

        moTextDocDpsAuth.setEnabled(false);
        moTextDocDpsAuth.setPreferredSize(new java.awt.Dimension(140, 23));
        jpDocRow11.add(moTextDocDpsAuth);

        jpDataDoc.add(jpDocRow11);

        jpData.add(jpDataDoc, java.awt.BorderLayout.WEST);

        jpDataSupp.setBorder(javax.swing.BorderFactory.createTitledBorder("Archivos de soporte:"));
        jpDataSupp.setLayout(new java.awt.BorderLayout());

        jpDataSuppControls.setLayout(new java.awt.BorderLayout());

        jpDataSuppType.setLayout(new java.awt.GridLayout(1, 0, 0, 5));

        jpDataSuppTypeButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jbPickedQ.setText("Proveedor");
        jbPickedQ.setPreferredSize(new java.awt.Dimension(150, 23));
        jpDataSuppTypeButtons.add(jbPickedQ);

        jbHiggerQ.setText("Otro proveedor +$");
        jbHiggerQ.setPreferredSize(new java.awt.Dimension(150, 23));
        jpDataSuppTypeButtons.add(jbHiggerQ);

        jbLowerQ.setText("Otro proveedor -$");
        jbLowerQ.setPreferredSize(new java.awt.Dimension(150, 23));
        jpDataSuppTypeButtons.add(jbLowerQ);

        jbTechnical.setText("Ficha t√©cnica");
        jbTechnical.setPreferredSize(new java.awt.Dimension(150, 23));
        jpDataSuppTypeButtons.add(jbTechnical);

        jpDataSuppType.add(jpDataSuppTypeButtons);

        jpDataSuppControls.add(jpDataSuppType, java.awt.BorderLayout.NORTH);

        jpDataSuppCapture.setLayout(new java.awt.BorderLayout());

        jpDataSuppInfo.setLayout(new java.awt.GridLayout(6, 0, 0, 5));

        jpSuppInfoRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppBp.setText("Asociado negocios:");
        jlSuppBp.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSuppInfoRow1.add(jlSuppBp);

        moKeySuppBp.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSuppInfoRow1.add(moKeySuppBp);

        jpDataSuppInfo.add(jpSuppInfoRow1);

        jpSuppInfoRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppNum.setText("Folio archivo:");
        jlSuppNum.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSuppInfoRow2.add(jlSuppNum);
        jpSuppInfoRow2.add(moTextSuppNum);

        jbSuppNumPicker.setText("...");
        jbSuppNumPicker.setToolTipText("Buscar soporte");
        jbSuppNumPicker.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSuppInfoRow2.add(jbSuppNumPicker);

        jpDataSuppInfo.add(jpSuppInfoRow2);

        jpSuppInfoRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolNoRegSuppBp.setText("Asociado de negocios no registrado");
        moBoolNoRegSuppBp.setPreferredSize(new java.awt.Dimension(300, 23));
        jpSuppInfoRow3.add(moBoolNoRegSuppBp);

        jpDataSuppInfo.add(jpSuppInfoRow3);

        jpSuppInfoRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotRegSuppBp.setText("Asoc. no registrado:");
        jlNotRegSuppBp.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSuppInfoRow4.add(jlNotRegSuppBp);

        moTextNoRegSuppBp.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSuppInfoRow4.add(moTextNoRegSuppBp);

        jpDataSuppInfo.add(jpSuppInfoRow4);

        jpSuppInfoRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Comentarios arch.:");
        jlNotes.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSuppInfoRow6.add(jlNotes);

        moTextNotes.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSuppInfoRow6.add(moTextNotes);

        jpDataSuppInfo.add(jpSuppInfoRow6);

        jpSuppInfoRow7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFile.setText("Archivo:");
        jlFile.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSuppInfoRow7.add(jlFile);

        jtfFile.setEditable(false);
        jtfFile.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSuppInfoRow7.add(jtfFile);

        jbFilePicker.setText("...");
        jbFilePicker.setToolTipText("Buscar archivo");
        jbFilePicker.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSuppInfoRow7.add(jbFilePicker);

        jpDataSuppInfo.add(jpSuppInfoRow7);

        jpDataSuppCapture.add(jpDataSuppInfo, java.awt.BorderLayout.CENTER);

        jpSuppTotals.setLayout(new java.awt.GridLayout(6, 0, 0, 5));

        jpSuppTotalRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppCur.setText("Moneda archivo:");
        jlSuppCur.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow1.add(jlSuppCur);

        moKeySuppCur.setPreferredSize(new java.awt.Dimension(165, 23));
        jpSuppTotalRow1.add(moKeySuppCur);

        jpSuppTotals.add(jpSuppTotalRow1);

        jpSuppTotalRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppCurTotal.setText("Total archivo:");
        jlSuppCurTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow2.add(jlSuppCurTotal);

        moDecSuppCurTotal.setEnabled(false);
        jpSuppTotalRow2.add(moDecSuppCurTotal);

        moTextSuppCurTotalCur.setEnabled(false);
        moTextSuppCurTotalCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jpSuppTotalRow2.add(moTextSuppCurTotalCur);

        jpSuppTotals.add(jpSuppTotalRow2);

        jpSuppTotalRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppExchangeRateDoc.setText("TC documento:");
        jlSuppExchangeRateDoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow3.add(jlSuppExchangeRateDoc);

        moDecSuppExchangeRateDoc.setEnabled(false);
        jpSuppTotalRow3.add(moDecSuppExchangeRateDoc);

        jlInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_info.png"))); // NOI18N
        jlInfo.setToolTipText("Se habilita cuando el pedido y la cotizaci√≥n sean extranjeras");
        jlInfo.setPreferredSize(new java.awt.Dimension(23, 23));
        jpSuppTotalRow3.add(jlInfo);

        jpSuppTotals.add(jpSuppTotalRow3);

        jpSuppTotalRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppTotalDoc.setText("Total documento:");
        jlSuppTotalDoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow4.add(jlSuppTotalDoc);

        moDecSuppTotalDoc.setEnabled(false);
        jpSuppTotalRow4.add(moDecSuppTotalDoc);

        moTextSuppTotalDocCur.setEnabled(false);
        moTextSuppTotalDocCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jpSuppTotalRow4.add(moTextSuppTotalDocCur);

        jpSuppTotals.add(jpSuppTotalRow4);

        jpSuppTotalRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppExchangeRateLoc.setText("TC pesos:");
        jlSuppExchangeRateLoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow5.add(jlSuppExchangeRateLoc);

        moDecSuppExchangeRateLoc.setEnabled(false);
        jpSuppTotalRow5.add(moDecSuppExchangeRateLoc);

        jpSuppTotals.add(jpSuppTotalRow5);

        jpSuppTotalRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSuppTotal.setText("Tolal:");
        jlSuppTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSuppTotalRow6.add(jlSuppTotal);

        moDecSuppTotal.setEnabled(false);
        jpSuppTotalRow6.add(moDecSuppTotal);

        moTextSuppTotalCur.setText("MXN");
        moTextSuppTotalCur.setEnabled(false);
        moTextSuppTotalCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jpSuppTotalRow6.add(moTextSuppTotalCur);

        jpSuppTotals.add(jpSuppTotalRow6);

        jpDataSuppCapture.add(jpSuppTotals, java.awt.BorderLayout.EAST);

        jpDataSuppControls.add(jpDataSuppCapture, java.awt.BorderLayout.CENTER);

        jpDataSupp.add(jpDataSuppControls, java.awt.BorderLayout.NORTH);

        jpGridSuppFiles.setPreferredSize(new java.awt.Dimension(699, 106));
        jpGridSuppFiles.setRequestFocusEnabled(false);
        jpGridSuppFiles.setLayout(new java.awt.BorderLayout());
        jpDataSupp.add(jpGridSuppFiles, java.awt.BorderLayout.CENTER);

        jpData.add(jpDataSupp, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpData, java.awt.BorderLayout.NORTH);

        jpGridEntries.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas del documento:"));
        jpGridEntries.setLayout(new java.awt.BorderLayout());
        jpRegistry.add(jpGridEntries, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionCancel();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbFilePicker;
    private javax.swing.JButton jbHiggerQ;
    private javax.swing.JButton jbLowerQ;
    private javax.swing.JButton jbPickedQ;
    private javax.swing.JButton jbSuppNumPicker;
    private javax.swing.JButton jbTechnical;
    private javax.swing.JLabel jlDocBp;
    private javax.swing.JLabel jlDocCob;
    private javax.swing.JLabel jlDocCurTotal;
    private javax.swing.JLabel jlDocDate;
    private javax.swing.JLabel jlDocDpsAuth;
    private javax.swing.JLabel jlDocExchageRate;
    private javax.swing.JLabel jlDocTotal;
    private javax.swing.JLabel jlDocType;
    private javax.swing.JLabel jlFile;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlInfo;
    private javax.swing.JLabel jlNotRegSuppBp;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlNum;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlSuppBp;
    private javax.swing.JLabel jlSuppCur;
    private javax.swing.JLabel jlSuppCurTotal;
    private javax.swing.JLabel jlSuppExchangeRateDoc;
    private javax.swing.JLabel jlSuppExchangeRateLoc;
    private javax.swing.JLabel jlSuppNum;
    private javax.swing.JLabel jlSuppTotal;
    private javax.swing.JLabel jlSuppTotalDoc;
    private javax.swing.JPanel jpData;
    private javax.swing.JPanel jpDataDoc;
    private javax.swing.JPanel jpDataSupp;
    private javax.swing.JPanel jpDataSuppCapture;
    private javax.swing.JPanel jpDataSuppControls;
    private javax.swing.JPanel jpDataSuppInfo;
    private javax.swing.JPanel jpDataSuppType;
    private javax.swing.JPanel jpDataSuppTypeButtons;
    private javax.swing.JPanel jpDocRow1;
    private javax.swing.JPanel jpDocRow10;
    private javax.swing.JPanel jpDocRow11;
    private javax.swing.JPanel jpDocRow2;
    private javax.swing.JPanel jpDocRow3;
    private javax.swing.JPanel jpDocRow4;
    private javax.swing.JPanel jpDocRow5;
    private javax.swing.JPanel jpDocRow6;
    private javax.swing.JPanel jpDocRow7;
    private javax.swing.JPanel jpDocRow8;
    private javax.swing.JPanel jpDocRow9;
    private javax.swing.JPanel jpGridEntries;
    private javax.swing.JPanel jpGridSuppFiles;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpSuppInfoRow1;
    private javax.swing.JPanel jpSuppInfoRow2;
    private javax.swing.JPanel jpSuppInfoRow3;
    private javax.swing.JPanel jpSuppInfoRow4;
    private javax.swing.JPanel jpSuppInfoRow6;
    private javax.swing.JPanel jpSuppInfoRow7;
    private javax.swing.JPanel jpSuppTotalRow1;
    private javax.swing.JPanel jpSuppTotalRow2;
    private javax.swing.JPanel jpSuppTotalRow3;
    private javax.swing.JPanel jpSuppTotalRow4;
    private javax.swing.JPanel jpSuppTotalRow5;
    private javax.swing.JPanel jpSuppTotalRow6;
    private javax.swing.JPanel jpSuppTotals;
    private javax.swing.JTextField jtfFile;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolNoRegSuppBp;
    private sa.lib.gui.bean.SBeanFieldDate moDateDocDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDocCurTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDocExchangeRate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDocTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSuppCurTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSuppExchangeRateDoc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSuppExchangeRateLoc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSuppTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSuppTotalDoc;
    private sa.lib.gui.bean.SBeanFieldKey moKeySuppBp;
    private sa.lib.gui.bean.SBeanFieldKey moKeySuppCur;
    private sa.lib.gui.bean.SBeanFieldText moTextCob;
    private sa.lib.gui.bean.SBeanFieldText moTextCobCode;
    private sa.lib.gui.bean.SBeanFieldText moTextDocBp;
    private sa.lib.gui.bean.SBeanFieldText moTextDocCurTotalCur;
    private sa.lib.gui.bean.SBeanFieldText moTextDocDpsAuth;
    private sa.lib.gui.bean.SBeanFieldText moTextDocNum;
    private sa.lib.gui.bean.SBeanFieldText moTextDocReference;
    private sa.lib.gui.bean.SBeanFieldText moTextDocSer;
    private sa.lib.gui.bean.SBeanFieldText moTextDocTotalCur;
    private sa.lib.gui.bean.SBeanFieldText moTextDocType;
    private sa.lib.gui.bean.SBeanFieldText moTextFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextNoRegSuppBp;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextSuppCurTotalCur;
    private sa.lib.gui.bean.SBeanFieldText moTextSuppNum;
    private sa.lib.gui.bean.SBeanFieldText moTextSuppTotalCur;
    private sa.lib.gui.bean.SBeanFieldText moTextSuppTotalDocCur;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);
        
        jbSaveAndSend = new JButton();
        jbSaveAndSend.setText("Guardar y enviar");
        jbSaveAndSend.setPreferredSize(new java.awt.Dimension(150, 23));
        
        jbAddRow = new JButton();
        jbAddRow.setText("Agregar");
        jbAddRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbCancelRow = new JButton();
        jbCancelRow.setText("Cancelar");
        jbCancelRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbUpRow = new JButton();
        jbUpRow.setText("Subir");
        jbUpRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbDownRow = new JButton();
        jbDownRow.setText("Bajar");
        jbDownRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbEditRow = new JButton();
        jbEditRow.setText("Modificar");
        jbEditRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbDeleteRow = new JButton();
        jbDeleteRow.setText("Eliminar");
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(90, 23));
        
        jbSelectAll = new JButton();
        jbSelectAll.setText("Vincular todo");
        jbSelectAll.setPreferredSize(new java.awt.Dimension(120, 23));
        
        jbDeselectAll = new JButton();
        jbDeselectAll.setText("Desvincular todo");
        jbDeselectAll.setPreferredSize(new java.awt.Dimension(120, 23));
        
        moTextDocType.setTextSettings(SGuiUtils.getLabelName(jlDocType), 100, 0);
        moTextCob.setTextSettings(SGuiUtils.getLabelName(jlDocCob), 100, 0);
        moTextCobCode.setTextSettings(SGuiUtils.getLabelName(jlDocCob), 3, 0);
        moTextDocBp.setTextSettings(SGuiUtils.getLabelName(jlDocBp), 100, 0);
        moTextFiscalId.setTextSettings(SGuiUtils.getLabelName(jlFiscalId), 100, 0);
        moDateDocDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDocDate), false);
        moTextDocSer.setTextSettings(SGuiUtils.getLabelName(jlDocType), 25, 0);
        moTextDocNum.setTextSettings(SGuiUtils.getLabelName(jlDocType), 32, 0);
        moTextDocReference.setTextSettings(SGuiUtils.getLabelName(jlDocType), 25, 0);
        moDecDocCurTotal.setDecimalSettings(SGuiUtils.getLabelName(jlDocCurTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDocExchangeRate.setDecimalSettings(SGuiUtils.getLabelName(jlDocExchageRate), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, false);
        moDecDocTotal.setDecimalSettings(SGuiUtils.getLabelName(jlDocTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextDocDpsAuth.setTextSettings(SGuiUtils.getLabelName(jlDocDpsAuth), 100);
    
        moKeySuppBp.setKeySettings(miClient, SGuiUtils.getLabelName(jlSuppBp), true);
        moTextSuppNum.setTextSettings(SGuiUtils.getLabelName(jlSuppNum), 25, 1);
        moBoolNoRegSuppBp.setBooleanSettings(moBoolNoRegSuppBp.getText(), false);
        moTextNoRegSuppBp.setTextSettings(SGuiUtils.getLabelName(jlNotRegSuppBp), 100, 1);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes), 255, 0);
        moKeySuppCur.setKeySettings(miClient, SGuiUtils.getLabelName(jlSuppCur), true);
        moDecSuppCurTotal.setDecimalSettings(SGuiUtils.getLabelName(jlSuppCurTotal), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecSuppExchangeRateDoc.setDecimalSettings(SGuiUtils.getLabelName(jlSuppExchangeRateDoc), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecSuppTotalDoc.setDecimalSettings(SGuiUtils.getLabelName(jlSuppTotalDoc), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecSuppExchangeRateLoc.setDecimalSettings(SGuiUtils.getLabelName(jlSuppExchangeRateLoc), SGuiConsts.GUI_TYPE_DEC_EXC_RATE, true);
        moDecSuppTotal.setDecimalSettings(SGuiUtils.getLabelName(jlSuppTotal), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        
        moFields.addField(moKeySuppBp);
        moFields.addField(moTextSuppNum);
        moFields.addField(moTextNoRegSuppBp);
        moFields.addField(moTextNotes);
        moFields.addField(moKeySuppCur);
        moFields.addField(moDecSuppCurTotal);
        moFields.addField(moDecSuppExchangeRateDoc);
        moFields.addField(moDecSuppTotalDoc);
        moFields.addField(moDecSuppExchangeRateLoc);
        moFields.addField(moDecSuppTotal);
        
        moFields.setFormButton(jbAddRow);
        
        jtfFile.setDropTarget(new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent event) {
                try {
                    event.acceptDrop(DnDConstants.ACTION_COPY);
                    Transferable transferable = event.getTransferable();
                    if (jtfFile.isEnabled()) {
                        if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                            List<File> files = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
                            if (files.size() > 1) {
                                miClient.showMsgBoxInformation("Solo se puede cargar un archivo por soporte.");
                            }
                            else {
                                if (files.get(0).getName().toLowerCase().matches(".*\\.(" + FILE_EXT + ")$")) {
                                    moFile = files.get(0);
                                    jtfFile.setText(moFile.getAbsolutePath()); 
                                    jtfFile.setToolTipText(moFile.getAbsolutePath());                                
                                }
                                else {
                                    miClient.showMsgBoxError("Formato de archivo no compatible.");
                                }
                            }
                        }
                    }
                } catch (UnsupportedFlavorException | IOException e) {
                    miClient.showMsgBoxError(e.getMessage());
                }
            }
        });
        
        moGridSuppFiles = new SGridPaneForm(miClient, SModConsts.TRN_SUP_FILE_DPS, SLibConsts.UNDEFINED, "Archivos de soporte") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo archivo", 100));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Nombre archivo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Asociado negocios", 150));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio archivo"));
//                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Total mon $"));
//                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
//                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "TC"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Total $"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Extemporaneo"));
                
                return columns;
            }
        };
        
        moGridSuppFiles.setPaneFormOwner(null);
        mvFormGrids.add(moGridSuppFiles);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_LEFT).removeAll();
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbAddRow);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbCancelRow);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbUpRow);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbDownRow);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbEditRow);
        moGridSuppFiles.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbDeleteRow);
        jpGridSuppFiles.add(moGridSuppFiles, BorderLayout.CENTER);
        
        moGridDpsEntries = new SGridPaneForm(miClient, SModConsts.TRN_SUP_FILE_DPS_ETY, SLibConsts.UNDEFINED, "Partidas documento") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Vincular");
                col.setEditable(true);
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Clave"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Concepto"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Cantidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Precio u. $"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Total $"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                //columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Vincular"));
                columns.add(col);
                
                return columns;
            }
        };
        
        moGridDpsEntries.setPaneFormOwner(null);
        mvFormGrids.add(moGridDpsEntries);
        moGridDpsEntries.getPanelCommandsSys(SGuiConsts.PANEL_LEFT).removeAll();
        moGridDpsEntries.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        moGridDpsEntries.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbSelectAll);
        moGridDpsEntries.getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbDeselectAll);
        jpGridEntries.add(moGridDpsEntries, BorderLayout.CENTER);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
        
        jpCommandRight.remove(jbCancel);
        jpCommandRight.add(jbSaveAndSend);
        jpCommandRight.add(jbCancel);
    }
    
    private void populateGridDpsEntries() {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            if (maDpsEntriesRows.size() > 0) {
                vRows.addAll(maDpsEntriesRows);
            }
            moGridDpsEntries.populateGrid(vRows);
            moGridDpsEntries.getTable().getDefaultEditor(Boolean.class).addCellEditorListener(this); 
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateGridFiles() {
        try {
            maSuppFilesRows = new ArrayList<>();
            for (SDbSupplierFile file : maSuppFiles) {
                SDbSupplierFileDps fileDps = file.getSuppFileDps();
                SRowSupplierFileDpsFiles row = new SRowSupplierFileDpsFiles();
                row.setName(file.getFileName());
                row.setNumber(file.getNumber());
                row.setPos(fileDps.getSortingPos());
                row.setType(fileDps.getSupplierFileDpsTypeDecode());
                row.setBizPartner(file.getBizPartnerName(miClient.getSession()));
                row.setTotal(fileDps.getTotalDps_r());
                row.setCur(fileDps.getXtaDpsCurKey());
                row.setIsExtemp(fileDps.isExtemporaneous());
                maSuppFilesRows.add(row);
            }
        
            Vector<SGridRow> vRows = new Vector<>();
            if (maSuppFilesRows.size() > 0) {
                vRows.addAll(maSuppFilesRows);
            }
            moGridSuppFiles.populateGrid(vRows, this);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void enableSuppComponets(boolean enable) {
        moKeySuppBp.setEnabled(enable);
        moTextSuppNum.setEnabled(enable);
        jbSuppNumPicker.setEnabled(enable);
        moBoolNoRegSuppBp.setEnabled(enable);
        moTextNoRegSuppBp.setEnabled(enable);
        moTextNotes.setEnabled(enable);
        jtfFile.setEnabled(enable);
        jbFilePicker.setEnabled(enable);
        moKeySuppCur.setEnabled(enable);
        moDecSuppCurTotal.setEnabled(enable);
        jbAddRow.setEnabled(enable);
        jbCancelRow.setEnabled(enable);
        jbUpRow.setEnabled(!enable);
        jbDownRow.setEnabled(!enable);
        jbEditRow.setEnabled(!enable);
        jbDeleteRow.setEnabled(!enable);
        jbSelectAll.setEnabled(false);
        jbDeselectAll.setEnabled(false);
        moDecSuppExchangeRateDoc.setEnabled(false);
    }
    
    private void cleanSuppComponets() {
        moKeySuppBp.setSelectedIndex(0);
        moTextSuppNum.setValue("");
        moBoolNoRegSuppBp.setValue(false);
        moTextNoRegSuppBp.setValue("");
        moTextNotes.setValue("");
        jtfFile.setText("");
        moKeySuppCur.setSelectedIndex(0);
        moDecSuppCurTotal.setValue(0d);
        moTextSuppCurTotalCur.setValue("");
        moDecSuppExchangeRateDoc.setValue(0d);
        moDecSuppTotalDoc.setValue(0d);
        moDecSuppExchangeRateLoc.setValue(0d);
        moDecSuppTotal.setValue(0d);
    }
    
    private void populateSuppComponets(SDbSupplierFile file) {
        moKeySuppBp.setValue(new int[] { file.getFkBizPartnerId_n() });
        moTextSuppNum.setValue(file.getNumber());
        moBoolNoRegSuppBp.setValue(!file.getExternalBizPartnerName().isEmpty());
        moTextNoRegSuppBp.setValue(file.getExternalBizPartnerName());
        moTextNotes.setValue(file.getSuppFileDps().getNotes());
        jtfFile.setText(file.getFileName());
        moKeySuppCur.setValue(new int[] { file.getFkCurrencyQuotationId() });
        moDecSuppCurTotal.setValue(file.getSuppFileDps().getTotalCyQuotation());
        moDecSuppExchangeRateDoc.setValue(file.getSuppFileDps().getExchangeRateDps());
        moDecSuppTotalDoc.setValue(file.getSuppFileDps().getTotalDps_r());
        moDecSuppExchangeRateLoc.setValue(file.getSuppFileDps().getExchangeRateLocal());
        moDecSuppTotal.setValue(file.getSuppFileDps().getTotalLocal_r());
    }
    
    private boolean isLocalCurrency(int idCurrency) {
        return miClient.getSession().getSessionCustom().isLocalCurrency(new int[] { idCurrency });
    }
    
    private double getExchangeRate(final int idCurrency) {
        double rate = 0;

        try {
            rate = SDataUtilities.obtainExchangeRate((SClientInterface) miClient, idCurrency, moDateDocDate.getValue());
            if (rate == 0d) {
                miClient.showMsgBoxInformation("No hay un tipo de cambio para la fecha del documento y moneda seleccionada.");
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }

        return rate;
    }
    
    private void updateTotal() {
        double total = 0;
        if (jbPickedQ.isEnabled() && mbIsCapturingFile) {
            total = maDpsEntriesRows.stream().filter((row) -> (row.getIsVinculed())).map((row) 
                    -> row.getTotalRow()).reduce(total, (accumulator, _item) -> accumulator + _item);
            moDecSuppCurTotal.setValue(total);
            focusSuppCurTotal();
        }
        else {
            int index = moGridDpsEntries.getTable().getSelectedRow();
            maDpsEntriesRows.get(index).setVinculed(!maDpsEntriesRows.get(index).getIsVinculed());
            populateGridDpsEntries();
            moGridDpsEntries.setSelectedGridRow(index);
        }
    }
    
    private SGuiValidation validateFile() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            for (SDbSupplierFile file : maSuppFiles) {
                SDbSupplierFileDps fileDps = file.getSuppFileDps();
                if (fileDps.getSupplierFileDpsType().equals(SDbSupplierFile.QUA)) {
                    if (jbLowerQ.isEnabled()) {
                        if (fileDps.getTotalLocal_r() < moDecSuppTotal.getValue()) {
                            validation.setMessage("El total del archivo '" + jbLowerQ.getText() + "' no puede ser mayor al total del archivo '" + jbPickedQ.getText() + "'.");
                            validation.setComponent(moDecSuppCurTotal);
                        }
                    }
                    else if (jbHiggerQ.isEnabled()) {
                        if (fileDps.getTotalLocal_r() >= moDecSuppTotal.getValue()) {
                            validation.setMessage("El total del archivo '" + jbHiggerQ.getText() + "' no puede ser menor o igual al total del archivo '" + jbPickedQ.getText() + "'.");
                            validation.setComponent(moDecSuppCurTotal);
                        }
                    }
                }
            }
        }
        if (validation.isValid() && !mbIsExistingFile && (moFile == null || jtfFile.getText().isEmpty())) {
            validation.setMessage("No se ha indicado un archivo de soporte.");
            validation.setComponent(jtfFile);
        }
        if (validation.isValid() && !mbIsExistingFile && !moFile.exists()) {
            validation.setMessage("El archivo de soporte no existe.");
            validation.setComponent(jtfFile);
        }
        if (validation.isValid() && (moDecSuppExchangeRateDoc.getValue() == 0.0 || moDecSuppExchangeRateLoc.getValue() == 0.0)) {
            validation.setMessage("No se puede guardar debido a que no hay un tipo de cambio para la fecha del documento y moneda seleccionada.");
            validation.setComponent(moKeySuppCur);
        }
        if (validation.isValid() && jbPickedQ.isEnabled()) {
            boolean vinculed = false;
            for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) {
                if (row.getIsVinculed()) {
                    vinculed = true;
                    break;
                }
            }
            if (!vinculed) {
                validation.setMessage("No hay ninguna partida vinculada al archivo de soporte.");
                validation.setComponent(moGridDpsEntries);
            }
        }
        
        try {
            if (!jbTechnical.isSelected()) {
                if (!mbIsEditingFile) {
                    if (!mbIsExistingFile) {
                        if (moKeySuppBp.getSelectedIndex() > 0) {
                            String sql = "SELECT * FROM trn_sup_file WHERE num = '" + moTextSuppNum.getValue() + "' AND fid_bp_n = " + moKeySuppBp.getValue()[0];
                            try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                                if (resultSet.next()) {
                                    validation.setMessage("Ya existe un registro para el folio del archivo de soporte del el asociado de negocios seleccionado.\nFavor de verificar.");
                                    validation.setComponent(moTextSuppNum);
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
            
        if (validation.isValid()) {
            for (SDbSupplierFile file : maSuppFiles) {
                if (file.getNumber().equals(moTextSuppNum.getValue()) && file.getFkBizPartnerId_n() == moKeySuppBp.getValue()[0]) {
                    validation.setMessage("El folio del archivo de soporte ya ha sido a√±adido para el asociado de negocios seleccionado.\nFavor de verificar.");
                    validation.setComponent(moTextSuppNum);
                    break;
                }
            }
        }
        
        if (validation.isValid()) {
            for (SDbSupplierFile file : maSuppFiles) {
                if (file.getFileName().equals(moFile.getName())) {
                    validation.setMessage("No puede haber dos o m√°s documentos con el mismo nombre para el mismo pedido de compras.");
                    validation.setComponent(jbFilePicker);
                    break;
                }
            }
        }
        
        return validation;
    }
    
    private void readSuppFile(int[] pk) {
        try {
            moPickedSuppFile = new SDbSupplierFile();
            moPickedSuppFile.read(miClient.getSession(), pk);
            mbIsExistingFile = true;
            moTextSuppNum.setValue(moPickedSuppFile.getNumber());
            moBoolNoRegSuppBp.setValue(!moPickedSuppFile.getExternalBizPartnerName().isEmpty());
            jtfFile.setText(moPickedSuppFile.getFileName());
            moKeySuppBp.setEnabled(false);
            moTextSuppNum.setEnabled(false);
            moBoolNoRegSuppBp.setEnabled(false);
            moTextNoRegSuppBp.setEnabled(false);
            jbFilePicker.setEnabled(false);
            jtfFile.setEnabled(false);
        }
        catch (Exception e) {}
    }
    
    private void actionPickedQ() {
        if (jbPickedQ.isEnabled()) {
            boolean add = true;
            for (SDbSupplierFile file : maSuppFiles) {
                SDbSupplierFileDps fileDps = file.getSuppFileDps();
                if (fileDps.getSupplierFileDpsType().equals(SDbSupplierFile.QUA)) {
                    add = false;
                }
            }
            if (add) {
                cleanSuppComponets();
                mbIsExistingFile = false;
                jbHiggerQ.setEnabled(false);
                jbLowerQ.setEnabled(false);
                jbTechnical.setEnabled(false);
                enableSuppComponets(true);
                moKeySuppBp.setEnabled(false);
                moTextNoRegSuppBp.setEnabled(false);
                moKeySuppCur.setEnabled(false);
                moDecSuppCurTotal.setEnabled(false);
                moKeySuppBp.setValue((int[]) moDocBizPartner.getPrimaryKey());
                moKeySuppCur.setValue((int[]) moDocCur.getPrimaryKey());
                moTextSuppNum.setValue(moTextDocReference.getValue());
                for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) { 
                    row.setVinculed(false);
                }
                jbSelectAll.setEnabled(true);
                jbDeselectAll.setEnabled(true);
                populateGridDpsEntries();

                mbIsCapturingFile = true;
            }
            else {
                miClient.showMsgBoxInformation("No se puede agregar m√°s de un archivo de soporte de proveedor.");
            }
        }
    }
    
    private void actionHiggerQ() {
        if (jbHiggerQ.isEnabled()) {
            cleanSuppComponets();
            mbIsExistingFile = false;
            jbPickedQ.setEnabled(false);
            jbLowerQ.setEnabled(false);
            jbTechnical.setEnabled(false);
            enableSuppComponets(true);
            moKeySuppBp.setEnabled(true);
            moTextNoRegSuppBp.setEnabled(false);
            moKeySuppBp.setSelectedIndex(0);
            moKeySuppCur.setValue((int[]) moDocCur.getPrimaryKey());
            for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) { 
                row.setVinculed(false);
            }
            populateGridDpsEntries();
            
            mbIsCapturingFile = true;
        }
    }
    
    private void actionLowerQ() {
        if (jbLowerQ.isEnabled()) {
            cleanSuppComponets();
            mbIsExistingFile = false;
            jbPickedQ.setEnabled(false);
            jbHiggerQ.setEnabled(false);
            jbTechnical.setEnabled(false);
            enableSuppComponets(true);
            moKeySuppBp.setEnabled(true);
            moTextNoRegSuppBp.setEnabled(false);
            moKeySuppBp.setSelectedIndex(0);
            moKeySuppCur.setValue((int[]) moDocCur.getPrimaryKey());
            for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) { 
                row.setVinculed(false);
            }
            populateGridDpsEntries();
            
            mbIsCapturingFile = true;
        }
    }
    
    private void actionTechnical() {
        if (jbTechnical.isEnabled()) {
            cleanSuppComponets();
            mbIsExistingFile = false;
            jbPickedQ.setEnabled(false);
            jbHiggerQ.setEnabled(false);
            jbLowerQ.setEnabled(false);
            enableSuppComponets(true);
            moTextNoRegSuppBp.setEnabled(false);
            moBoolNoRegSuppBp.setEnabled(false);
            moKeySuppBp.setSelectedIndex(0);
            moKeySuppBp.setEnabled(false);
            moKeySuppCur.setValue(new int[] { 1 });
            moKeySuppCur.setEnabled(false);
            moDecSuppCurTotal.setEnabled(false);
            jbSuppNumPicker.setEnabled(false);
            for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) { 
                row.setVinculed(false);
            }
            populateGridDpsEntries();
            
            mbIsCapturingFile = true;
        }
    }
    
    private void actionSuppNumPicker() {
        if (moKeySuppBp.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("Debe seleccionar un asociado de negocios.");
        }
        else {
            SGuiParams params = new SGuiParams(moKeySuppBp.getValue());
            SGuiOptionPicker pickerSuppNum = miClient.getSession().getModule(SModConsts.MOD_TRN_N).getOptionPicker(SModConsts.TRN_SUP_FILE, SLibConsts.UNDEFINED, params);
            pickerSuppNum.resetPicker();
            pickerSuppNum.setPickerVisible(true);
            if (pickerSuppNum.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
                readSuppFile((int[]) pickerSuppNum.getOption());
            }
        }
    }
    
    private void actionFilePicker() {
        if (jtfFile.isEnabled()) {
            if (!mbIsEditingFile) {
                miClient.getFileChooser().setSelectedFile(moFile);
            }
            else {
                miClient.getFileChooser().setSelectedFile(new File(System.getProperty("user.home")));
            }
            if (miClient.getFileChooser().showOpenDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                if ( miClient.getFileChooser().getSelectedFile().getName().toLowerCase().matches(".*\\.(" + FILE_EXT + ")$")) {
                    jtfFile.setText(miClient.getFileChooser().getSelectedFile().getAbsolutePath());
                    jtfFile.setToolTipText(miClient.getFileChooser().getSelectedFile().getAbsolutePath());
                    moFile = miClient.getFileChooser().getSelectedFile();
                }
                else {
                    miClient.showMsgBoxError("Formato de archivo no compatible.");
                }
            }
        }
    }
    
    private void actionAddRow() {
        try {
            if (jbAddRow.isEnabled()) {
                SGuiValidation validation = validateFile(); 
                if (validation.isValid()) {
                    enableSuppComponets(false);
                    SDbSupplierFile file;
                    if (mbIsExistingFile) {
                        file = moPickedSuppFile.clone();
                    }
                    else {
                        file = new SDbSupplierFile();
                    }
                    SDbSupplierFileDps fileDps = new SDbSupplierFileDps();

                    file.setNumber(moTextSuppNum.getValue());
                    file.setAuxFile(moFile);
                    fileDps.setSortingPos(maSuppFiles.size() + 1);
                    fileDps.setPkYearId(moRegistry.getPkYearId());
                    fileDps.setPkDocId(moRegistry.getPkDocId());
                    fileDps.setExtemporaneous(mbIsDocExtemp);
                    if (jbTechnical.isEnabled()) {
                        file.setSupplierFileType(SModSysConsts.TRN_SUP_FILE_TYPE_T);
                        file.setTotalCyQuotation(0);
                        file.setExternalBizPartnerName(moTextNoRegSuppBp.getValue());
                        file.setFkCurrencyQuotationId(1);
                        file.setFkBizPartnerId_n(0);

                        fileDps.setSupplierFileDpsType(SModSysConsts.TRN_SUP_FILE_DPS_TYPE_T);
                        fileDps.setTotalLocal_r(0);
                        fileDps.setExchangeRateLocal(0);
                        fileDps.setTotalDps_r(0);
                        fileDps.setExchangeRateDps(0);
                        fileDps.setTotalCyQuotation(0);
                        fileDps.setFkCurrencyDpsId(1);
                        fileDps.setFkCurrencyQuotationId(1);
                        fileDps.setXtaDpsCurKey("MXN");
                        fileDps.setNotes(moTextNotes.getValue());
                    }
                    else {
                        file.setSupplierFileType(SModSysConsts.TRN_SUP_FILE_TYPE_Q);
                        file.setTotalCyQuotation(moDecSuppCurTotal.getValue());
                        file.setExternalBizPartnerName(moTextNoRegSuppBp.getValue());
                        file.setFkCurrencyQuotationId(moSuppCur.getPkCurrencyId());
                        file.setFkBizPartnerId_n(moKeySuppBp.getValue()[0]);

                        if (jbPickedQ.isEnabled()) {
                            fileDps.setSupplierFileDpsType(SModSysConsts.TRN_SUP_FILE_DPS_TYPE_PICK_Q);
                            fileDps.getSuppFileDpsEty().clear();
                            for (SGridRow row : moGridDpsEntries.getModel().getGridRows()) {
                                SRowSupplierFileDpsEntry rowEty = (SRowSupplierFileDpsEntry) row;
                                if (rowEty.getIsVinculed()) {
                                    SDbSupplierFileDpsEntry ety = new SDbSupplierFileDpsEntry();
                                    ety.setPkYearId(rowEty.getRowPrimaryKey()[0]);
                                    ety.setPkDocId(rowEty.getRowPrimaryKey()[1]);
                                    ety.setPkEntryId(rowEty.getRowPrimaryKey()[2]);
                                    fileDps.getSuppFileDpsEty().add(ety);
                                }
                            }
                        }
                        else if (jbHiggerQ.isEnabled()) {
                            fileDps.setSupplierFileDpsType(SModSysConsts.TRN_SUP_FILE_DPS_TYPE_HIG_Q);
                        }
                        else if (jbLowerQ.isEnabled()) {
                            fileDps.setSupplierFileDpsType(SModSysConsts.TRN_SUP_FILE_DPS_TYPE_LOW_Q);
                        }
                        fileDps.setTotalLocal_r(moDecSuppTotal.getValue());
                        fileDps.setExchangeRateLocal(moDecSuppExchangeRateLoc.getValue());
                        fileDps.setTotalDps_r(moDecSuppTotalDoc.getValue());
                        fileDps.setExchangeRateDps(moDecSuppExchangeRateDoc.getValue());
                        fileDps.setTotalCyQuotation(moDecSuppCurTotal.getValue());
                        fileDps.setFkCurrencyDpsId(moDocCur.getPkCurrencyId());
                        fileDps.setFkCurrencyQuotationId(moSuppCur.getPkCurrencyId());
                        fileDps.setXtaDpsCurKey(moSuppCur.getKey());
                        fileDps.setNotes(moTextNotes.getValue());
                    }
                    file.setSuppFileDps(fileDps);
                    if (!mbIsEditingFile) {
                        maSuppFiles.add(file);
                    }
                    else {
                        maSuppFiles.add(mnEditingSelectedIndex, file);
                        int i = 1;
                        for (SDbSupplierFile rowAux : maSuppFiles) {
                            rowAux.getSuppFileDps().setSortingPos(i++);
                        }
                    }

                    cleanSuppComponets();
                    populateGridFiles();

                    jbPickedQ.setEnabled(true);
                    jbHiggerQ.setEnabled(true);
                    jbLowerQ.setEnabled(true);
                    jbTechnical.setEnabled(true);

                    jbPickedQ.requestFocus();

                    mbIsCapturingFile = false;
                    mbIsEditingFile = false;
                }
                else {
                    miClient.showMsgBoxInformation(validation.getMessage());
                    validation.getComponent().requestFocus();
                }
            }                    
        }
        catch (Exception e) { 
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionCancelRow() {
        cleanSuppComponets();
        enableSuppComponets(false);
        jbPickedQ.setEnabled(true);
        jbHiggerQ.setEnabled(true);
        jbLowerQ.setEnabled(true);
        jbTechnical.setEnabled(true);
        mbIsCapturingFile = false;
        if (mbIsEditingFile) {
            maSuppFiles.add(mnEditingSelectedIndex, moSuppFileDeleted);
        }
        mbIsEditingFile = false;
        valueChanged(null);
    }
    
    private void actionUpRow() {
        if (moGridSuppFiles.getSelectedGridRow() == null) {
            miClient.showMsgBoxInformation("Debe haber un rengl√≥n seleccionado.");
        }
        else {
            boolean canEdit = true;
            int index = moGridSuppFiles.getTable().getSelectedRow();
            if (index != 0) {
                if (mbIsDocExtemp) {
                    SRowSupplierFileDpsFiles selectedRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getSelectedGridRow();
                    SRowSupplierFileDpsFiles prevRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getGridRow(index - 1);
                    if (!selectedRow.getIsExtemp() || !prevRow.getIsExtemp()){
                        miClient.showMsgBoxInformation("No se puede modificar debido a que afecta a un rengl√≥n que no es extemporaneo.");
                        canEdit = false;
                    }
                }
                if (canEdit) {
                    SDbSupplierFile row = maSuppFiles.remove(index);
                    maSuppFiles.add(index - 1, row);
                    int i = 1;
                    for (SDbSupplierFile rowAux : maSuppFiles) {
                        rowAux.getSuppFileDps().setSortingPos(i++);
                    }
                    populateGridFiles();
                    moGridSuppFiles.setSelectedGridRow(index - 1);
                }
            }
        }
    }
    
    private void actionDownRow() {
        if (moGridSuppFiles.getSelectedGridRow() == null) {
            miClient.showMsgBoxInformation("Debe haber un rengl√≥n seleccionado.");
        }
        else {
            boolean canEdit = true;
            int index = moGridSuppFiles.getTable().getSelectedRow();
            if (index < maSuppFiles.size()) {
                if (mbIsDocExtemp) {
                    SRowSupplierFileDpsFiles selectedRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getSelectedGridRow();
                    SRowSupplierFileDpsFiles nextRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getGridRow(index + 1);
                    if (!selectedRow.getIsExtemp() || !nextRow.getIsExtemp()){
                        miClient.showMsgBoxInformation("No se puede modificar debido a que afecta a un rengl√≥n que no es extemporaneo.");
                        canEdit = false;
                    }
                }
                if (canEdit) {
                    SDbSupplierFile row = maSuppFiles.remove(index);
                    maSuppFiles.add(index + 1, row);
                    int i = 1;
                    for (SDbSupplierFile rowAux : maSuppFiles) {
                        rowAux.getSuppFileDps().setSortingPos(i++);
                    }
                    populateGridFiles();
                    moGridSuppFiles.setSelectedGridRow(index + 1);
                }
            }
        }
    }
    
    private void actionEditRow() {
        if (moGridSuppFiles.getSelectedGridRow() == null) {
            miClient.showMsgBoxInformation("Debe haber un rengl√≥n seleccionado.");
        }
        else {
            boolean canEdit = true;
            mnEditingSelectedIndex = moGridSuppFiles.getTable().getSelectedRow();
            if (mbIsDocExtemp) {
                SRowSupplierFileDpsFiles selectedRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getSelectedGridRow();
                if (!selectedRow.getIsExtemp()){
                    miClient.showMsgBoxInformation("No se puede modificar el rengl√≥n debido a que no es extemporaneo.");
                    canEdit = false;
                }
            }
            if (canEdit) {
                try {
                    mbIsCapturingFile = true;
                    mbIsEditingFile = true;
                    moSuppFileDeleted = maSuppFiles.get(mnEditingSelectedIndex);
                    if (moSuppFileDeleted.isRegistryNew()){
                        moFile = moSuppFileDeleted.getAuxFile();
                        maSuppFiles.remove(mnEditingSelectedIndex);
                    }
                    else {
                        if (!moSuppFileDeleted.getFilevaultId().isEmpty()) {
                            moFile = new File(SDocUtils.downloadFile(miClient.getSession(), SDocUtils.BUCKET_DOC_DPS_SUPPLIER, moSuppFileDeleted.getFilevaultId(), 
                                    new File(System.getProperty("java.io.tmpdir")), true));
                            maFilesDeleted.add(new File(moFile.getAbsolutePath()));
                        }
                        maSuppFilesDeleted.add(maSuppFiles.remove(mnEditingSelectedIndex));
                    }
                    jbPickedQ.setEnabled(false);
                    jbHiggerQ.setEnabled(false);
                    jbLowerQ.setEnabled(false);
                    jbTechnical.setEnabled(false);
                    enableSuppComponets(true);
                    switch (moSuppFileDeleted.getSuppFileDps().getSupplierFileDpsType()) {
                        case "Q": 
                            moKeySuppBp.setEnabled(false);
                            jbPickedQ.setEnabled(true);
                            moKeySuppCur.setEnabled(false);
                            moDecSuppCurTotal.setEnabled(false);
                            break;
                        case "Q+": 
                            jbHiggerQ.setEnabled(true); 
                            break;
                        case "Q-": 
                            jbLowerQ.setEnabled(true); 
                            break;
                        case "T": 
                            jbTechnical.setEnabled(true); 
                            moKeySuppCur.setEnabled(false);
                            moDecSuppCurTotal.setEnabled(false);
                            moKeySuppBp.setEnabled(false);
                            moBoolNoRegSuppBp.setEnabled(false);
                            moTextNoRegSuppBp.setEnabled(true);
                            break;
                    }
                    itemStateChangeNoRegSuppBp();
                }
                catch (Exception e) {
                    miClient.showMsgBoxError(e.getMessage());
                }
            }
        }
    }
    
    private void actionDeleteRow() {
        if (moGridSuppFiles.getSelectedGridRow() == null) {
            miClient.showMsgBoxInformation("Debe haber un rengl√≥n seleccionado.");
        }
        else {
            boolean canEdit = true;
            int index = moGridSuppFiles.getTable().getSelectedRow();
            if (mbIsDocExtemp) {
                SRowSupplierFileDpsFiles selectedRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getSelectedGridRow();
                if (!selectedRow.getIsExtemp()){
                    miClient.showMsgBoxInformation("No se puede modificar el rengl√≥n debido a que no es extemporaneo.");
                    canEdit = false;
                }
            }
            if (canEdit) {
                if (maSuppFiles.get(index).isRegistryNew()){
                    maSuppFiles.remove(index);
                }
                else {
                    maSuppFilesDeleted.add(maSuppFiles.remove(index));
                }

                int i = 1;
                for (SDbSupplierFile row : maSuppFiles) {
                    row.getSuppFileDps().setSortingPos(i++);
                }
                populateGridFiles();

                moGridSuppFiles.setSelectedGridRow(index);

                cleanSuppComponets();

                for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) {
                    row.setVinculed(false);
                }
                populateGridDpsEntries();
            }
        }
    }
    
    private void actionSelectAll() {
        if (jbSelectAll.isEnabled()) {
            maDpsEntriesRows.stream().forEach((row) -> {
                row.setVinculed(true);
            });
            populateGridDpsEntries();
            updateTotal();
        }
    }
    
    private void actionDeselectAll() {
        if (jbDeselectAll.isEnabled()) {
            maDpsEntriesRows.stream().forEach((row) -> {
                row.setVinculed(false);
            });
            populateGridDpsEntries();            
            updateTotal();
        }
    }
    
    private void actionSaveAndSend() {
        mbSendAuth = true;
        super.actionSave();
    }
    
    private void focusSuppCurTotal() {
        moDecSuppTotalDoc.setValue(moDecSuppCurTotal.getValue() * mdExchangeRateDoc);
        moDecSuppTotal.setValue(moDecSuppTotalDoc.getValue() * mdExchangeRateLoc);
    }
    
    private void focusSuppExchangeRateDoc() {
        mdExchangeRateDoc = moDecSuppExchangeRateDoc.getValue();
        focusSuppCurTotal();
    }
    
    private void itemStateChangedKeySuppCur() {
        moDecSuppExchangeRateDoc.setEnabled(false);
        moSuppCur = (SDataCurrency) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.CFGU_CUR, 
                moKeySuppCur.getValue(), SLibConstants.EXEC_MODE_SILENT);
        double exRateDoc = moRegistry.getDps().getExchangeRate();
        if (moSuppCur != null) {
            moTextSuppCurTotalCur.setValue(moSuppCur.getKey());
            // Si ambas monedas son iguales
            if (moDocCur.getPkCurrencyId() == moKeySuppCur.getValue()[0]) {
                mdExchangeRateDoc = 1.0;
                if (isLocalCurrency(moDocCur.getPkCurrencyId())){
                    mdExchangeRateLoc = 1.0;
                }
                else {
                    //mdExchangeRateLoc = getExchangeRate(moDocCur.getPkCurrencyId());
                    mdExchangeRateLoc = exRateDoc;
                }
            }
            else {
                // Si la moneda del DPS es local y la moneda del soporte es extranjera
                if (isLocalCurrency(moDocCur.getPkCurrencyId()) && !isLocalCurrency(moSuppCur.getPkCurrencyId())) {
                    //mdExchangeRateDoc = getExchangeRate(moSuppCur.getPkCurrencyId());
                    mdExchangeRateDoc = exRateDoc;
                    if (mdExchangeRateDoc == 0.0) {
                        moDecSuppTotalDoc.setValue(0d);
                        mdExchangeRateLoc = 0d;
                        moDecSuppTotal.setValue(0d);
                    }
                    else {
                        mdExchangeRateLoc = 1.0;
                    }
                }
                // Si la moneda del DPS es extranjera y la moneda del soporte es local
                else if (!isLocalCurrency(moDocCur.getPkCurrencyId()) && isLocalCurrency(moSuppCur.getPkCurrencyId())) {
                    //double exR = getExchangeRate(moDocCur.getPkCurrencyId());
                    if (exRateDoc > 0) {
                        mdExchangeRateDoc = 1 / exRateDoc;
                        mdExchangeRateLoc = exRateDoc;
                    }
                    else {
                        moDecSuppTotalDoc.setValue(0d);
                        mdExchangeRateLoc = 0d;
                        moDecSuppTotal.setValue(0d);
                    }
                }
                // Ambas son monedas extranjeras
                else {
                    moDecSuppExchangeRateDoc.setEnabled(true);
                    //mdExchangeRateLoc = getExchangeRate(moDocCur.getPkCurrencyId());
                    mdExchangeRateLoc = exRateDoc;
                }
            }
            moDecSuppExchangeRateDoc.setValue(mdExchangeRateDoc);
            moDecSuppExchangeRateLoc.setValue(mdExchangeRateLoc);
        }
        if (moDecSuppCurTotal.getValue() != 0) {
            focusSuppCurTotal();
        }
    }
    
    public void itemStateChangeNoRegSuppBp() {
        if (mbIsCapturingFile) {
            moTextNoRegSuppBp.setEnabled(moBoolNoRegSuppBp.getValue());
        }
        else moTextNoRegSuppBp.setEnabled(false);
        moTextNoRegSuppBp.setValue("");
    }
    
    @Override
    public void addAllListeners() {
        jbPickedQ.addActionListener(this);
        jbHiggerQ.addActionListener(this);
        jbLowerQ.addActionListener(this);
        jbTechnical.addActionListener(this);
        jbSuppNumPicker.addActionListener(this);
        jbFilePicker.addActionListener(this);
        jbAddRow.addActionListener(this);
        jbCancelRow.addActionListener(this);
        jbUpRow.addActionListener(this);
        jbDownRow.addActionListener(this);
        jbEditRow.addActionListener(this);
        jbDeleteRow.addActionListener(this);
        jbSelectAll.addActionListener(this);
        jbDeselectAll.addActionListener(this);
        jbSaveAndSend.addActionListener(this);
        
        moDecSuppCurTotal.addFocusListener(this);
        moDecSuppExchangeRateDoc.addFocusListener(this);
        
        moKeySuppCur.addItemListener(this);
        moBoolNoRegSuppBp.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickedQ.removeActionListener(this);
        jbHiggerQ.removeActionListener(this);
        jbLowerQ.removeActionListener(this);
        jbTechnical.removeActionListener(this);
        jbSuppNumPicker.removeActionListener(this);
        jbFilePicker.removeActionListener(this);
        jbAddRow.removeActionListener(this);
        jbCancelRow.removeActionListener(this);
        jbUpRow.removeActionListener(this);
        jbDownRow.removeActionListener(this);
        jbEditRow.removeActionListener(this);
        jbDeleteRow.removeActionListener(this);
        jbSelectAll.removeActionListener(this);
        jbDeselectAll.removeActionListener(this);
        jbSaveAndSend.removeActionListener(this);
        
        moDecSuppCurTotal.removeFocusListener(this);
        moDecSuppExchangeRateDoc.removeFocusListener(this);
        
        moKeySuppCur.removeItemListener(this);
        moBoolNoRegSuppBp.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeySuppBp, SModConsts.BPSU_BP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeySuppCur, SModConsts.CFGU_CUR, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbSupplierFileProcess) registry;
        SDbDps dps = moRegistry.getDps();
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) { }
        
        jtfRegistryKey.setText("");
        
        moDpsType = (SDataDpsType) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.TRNU_TP_DPS, 
                new int[] { dps.getFkDpsCategoryId(), dps.getFkDpsClassId(), dps.getFkDpsTypeId() }, SLibConstants.EXEC_MODE_VERBOSE);
        moDocBizPartner = (SDataBizPartner) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.BPSU_BP, 
                new int[] { dps.getFkBizPartnerId_r() }, SLibConstants.EXEC_MODE_VERBOSE);
        moDocCur = (SDataCurrency) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.CFGU_CUR, 
                new int[] { dps.getFkCurrencyId() }, SLibConstants.EXEC_MODE_VERBOSE);
        mnDpsStAuth = moRegistry.getDps().getFkDpsAuthorizationStatusId();
        mbIsDocExtemp = mnDpsStAuth != SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA;
        mbCanEdit = mnDpsStAuth == SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA || mnDpsStAuth == SDataConstantsSys.TRNS_ST_DPS_AUTHORN_AUTHORN;
        
        moTextDocType.setValue(moDpsType.getDpsType());
        moTextCob.setValue(SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SDataConstants.BPSU_BPB, new int[] { dps.getFkCompanyBranchId() }));
        moTextCobCode.setValue(SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SDataConstants.BPSU_BPB, new int[] { dps.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
        moTextDocBp.setValue(moDocBizPartner.getBizPartner());
        moTextFiscalId.setValue(moDocBizPartner.getFiscalId());
        moDateDocDate.setValue(dps.getDate());
        moTextDocSer.setValue(dps.getNumberSeries());
        moTextDocNum.setValue(dps.getNumber());
        moTextDocReference.setValue(dps.getNumberReference());
        moDecDocCurTotal.setValue(dps.getTotalCy_r());
        moTextDocCurTotalCur.setValue(moDocCur.getKey());
        moDecDocExchangeRate.setValue(dps.getExchangeRate());
        moDecDocTotal.setValue(dps.getTotal_r());
        moTextDocDpsAuth.setValue(moRegistry.getDpsStatus());
        
        moTextSuppTotalDocCur.setValue(moDocCur.getKey());
        
        maDpsEntriesRows = new ArrayList<>();
        int pos = 1;
        for (SDbDpsEntry ety : dps.getChildEntries()) {
            if (!ety.getIsDeleted()) {
                SRowSupplierFileDpsEntry row = new SRowSupplierFileDpsEntry(miClient, ety, moDocCur.getKey());
                row.setPos(pos++);
                maDpsEntriesRows.add(row);
            }
        }
        
        maSuppFiles = new ArrayList<>();
        moRegistry.getSuppFiles().stream().forEach((file) -> {
            maSuppFiles.add(file);
        });
        
        maSuppFilesDeleted = new ArrayList<>();
        maFilesDeleted = new ArrayList<>();
        
        populateGridFiles();
        populateGridDpsEntries();
        enableSuppComponets(false);
        cleanSuppComponets();
        addAllListeners();
        valueChanged(null);
        
        mbIsCapturingFile = false;
        mbIsEditingFile = false;
        jbPickedQ.setEnabled(mbCanEdit);
        jbHiggerQ.setEnabled(mbCanEdit);
        jbLowerQ.setEnabled(mbCanEdit);
        jbTechnical.setEnabled(mbCanEdit);
        jbUpRow.setEnabled(mbCanEdit);
        jbDownRow.setEnabled(mbCanEdit);
        jbEditRow.setEnabled(mbCanEdit);
        jbDeleteRow.setEnabled(mbCanEdit);
        jbSave.setEnabled(mbCanEdit);
        jbSaveAndSend.setEnabled(mbCanEdit && mnDpsStAuth == SDataConstantsSys.TRNS_ST_DPS_AUTHORN_NA);
        
        mbSendAuth = false;
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbSupplierFileProcess registry = (SDbSupplierFileProcess) moRegistry.clone();
        
        registry.getSuppFilesDeleted().clear();
        for (SDbSupplierFile file : maSuppFilesDeleted) {
            registry.getSuppFilesDeleted().add(file);
        }
        
        registry.getFilesDeleted().clear();
        for (File file : maFilesDeleted){
            registry.getFilesDeleted().add(file);
        }
        
        registry.getSuppFiles().clear();
        for (SDbSupplierFile file : maSuppFiles) {
            registry.getSuppFiles().add(file);
        }
        
        if (mbSendAuth) {
            registry.setClient(miClient);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = new SGuiValidation();
        
        if (jbAddRow.isEnabled()) {
            validation.setMessage("Tiene un archivo de soporte en captura, debe agregarlo antes de guardar.");
            validation.setComponent(jbAddRow);
        }
        
        if (validation.isValid() && moGridSuppFiles.getModel().getRowCount() == 0) {
            validation.setMessage("Debe agregar al menos un archivo de soporte.");
            validation.setComponent(jbPickedQ);
        } 
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbPickedQ) {
                actionPickedQ();
            }
            else if (button == jbHiggerQ) {
                actionHiggerQ();
            }
            else if (button == jbLowerQ) {
                actionLowerQ();
            }
            else if (button == jbTechnical) {
                actionTechnical();
            }
            else if (button == jbSuppNumPicker) {
                actionSuppNumPicker();
            }
            else if (button == jbFilePicker) {
                actionFilePicker();
            }
            else if (button == jbAddRow) {
                actionAddRow();
            }
            else if (button == jbCancelRow) {
                actionCancelRow();
            }
            else if (button == jbUpRow) {
                actionUpRow();
            }
            else if (button == jbDownRow) {
                actionDownRow();
            }
            else if (button == jbEditRow) {
                actionEditRow();
            }
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
            else if (button == jbSelectAll) {
                actionSelectAll();
            }
            else if (button == jbDeselectAll) {
                actionDeselectAll();
            }
            else if (button == jbSaveAndSend) {
                actionSaveAndSend();
            }
        }
    }
    
    @Override
    public void focusGained(FocusEvent e) { }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == moDecSuppCurTotal) {
                focusSuppCurTotal();
            }
            if (textField == moDecSuppExchangeRateDoc) {
                focusSuppExchangeRateDoc();
            }
        }
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (e.getStateChange() == ItemEvent.SELECTED) {
                if (comboBox == moKeySuppCur) {
                    itemStateChangedKeySuppCur();
                }
            }
        }
        else if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            
            if (checkBox == moBoolNoRegSuppBp) {
                itemStateChangeNoRegSuppBp();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        SRowSupplierFileDpsFiles selectedRow = (SRowSupplierFileDpsFiles) moGridSuppFiles.getSelectedGridRow();
        if (selectedRow != null) {
            if (!jbAddRow.isEnabled()) {
                for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) {
                    row.setVinculed(false);
                }
                for (SDbSupplierFile file : maSuppFiles) {
                    if (selectedRow.getPos() == file.getSuppFileDps().getSortingPos()) {
                        for (SDbSupplierFileDpsEntry ety : file.getSuppFileDps().getSuppFileDpsEty()) {
                            for (SRowSupplierFileDpsEntry row : maDpsEntriesRows) {
                                if (SLibUtilities.compareKeys(row.getRowPrimaryKey(), 
                                        new int[] { ety.getPkYearId(), ety.getPkDocId(), ety.getPkEntryId() })) {
                                    row.setVinculed(true);
                                }
                            }
                        }
                        populateSuppComponets(file);
                    }
                }
                populateGridDpsEntries();
            }
            if (mbIsEditingFile) {
                moGridSuppFiles.setSelectedGridRow(mnEditingSelectedIndex);
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        updateTotal();
    }

    @Override
    public void editingCanceled(ChangeEvent e) {}
}
