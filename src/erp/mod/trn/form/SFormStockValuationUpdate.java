/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.mod.SModConsts;
import erp.mod.trn.db.SDbStockValuation;
import erp.mod.trn.db.SStockValuationRecordUpdate;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Edwin Carmona
 * 
 */
public class SFormStockValuationUpdate extends sa.lib.gui.bean.SBeanForm implements ActionListener {

    private SDbStockValuation moRegistry;

    /**
     * Creates new form SFormItemCost
     * @param client
     * @param title
     */
    public SFormStockValuationUpdate(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_STK_VAL, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        moIntMonth = new sa.lib.gui.bean.SBeanFieldCalendarMonth();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 450));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha de actualización:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel21.add(jlDateEnd);
        jPanel21.add(moIntYear);
        jPanel21.add(moIntMonth);

        jPanel23.add(jPanel21);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
    }//GEN-LAST:event_formWindowActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jlDateEnd;
    private sa.lib.gui.bean.SBeanFieldCalendarMonth moIntMonth;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moIntYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 250);

        moFields.setFormButton(jbSave);
    }
    
    public void resetForm() {
        Date dt = miClient.getSession().getCurrentDate();
        // obtener mes y año de la fecha actual con java
        moIntYear.setValue(SLibTimeUtilities.digestDate(dt)[0]);
        moIntMonth.setValue(SLibTimeUtilities.digestDate(dt)[1]);
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbStockValuation) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDateEnd(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbStockValuation registry = (SDbStockValuation) moRegistry.clone();

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            try {
                
            }
            catch (Exception ex) {
                Logger.getLogger(SFormStockValuationUpdate.class.getName()).log(Level.SEVERE, null, ex);
                validation.setMessage(ex.getMessage());
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
        }
    }
    
    @Override
    public void actionSave() {
        int iYear = moIntYear.getValue();
        int iMonth = moIntMonth.getValue();
        if (iYear == 0 || iMonth == 0) {
            miClient.showMsgBoxWarning("Debe seleccionar una fecha válida.");
            return;
        }
        SStockValuationRecordUpdate.updateRecordsByMonth(miClient.getSession(), iYear, iMonth);
        dispose();
    }
}
