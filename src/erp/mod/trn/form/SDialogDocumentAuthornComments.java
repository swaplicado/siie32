/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.trn.db.SRowDocumentAuthornComments;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Isabel Servín
 */
public class SDialogDocumentAuthornComments extends SBeanFormDialog {
    
    protected SGridPaneForm moGridLogs;
    protected ArrayList<SRowDocumentAuthornComments> maRowsAuthComm;

    /**
     * Creates new form SDialogMaterialRequestLogsCardex
     * @param client
     * @param title
     */
    public SDialogDocumentAuthornComments(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.CFGX_AUTHORN_COMMENTS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpAuthorizationRoute = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Comentarios de autorización");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpAuthorizationRoute.setPreferredSize(new java.awt.Dimension(100, 200));
        jpAuthorizationRoute.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpAuthorizationRoute, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jpAuthorizationRoute;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);
        jbCancel.setVisible(false);

        moGridLogs = new SGridPaneForm(miClient, SModConsts.CFGX_AUTHORN_COMMENTS, SLibConsts.UNDEFINED, "Bitácora") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Fecha movimiento"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Folio pedido", 75));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Comentarios", 400));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usuario"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Autorizado"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Rechazado"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Eliminado"));

                return columns;
            }
        };
        moGridLogs.getPanelCommandsSys(SGuiConsts.PANEL_LEFT).removeAll();
        jpAuthorizationRoute.add(moGridLogs, BorderLayout.CENTER);
    }
    
    private void processMatReq(int matId) {
        try {
            String sql = "SELECT DISTINCT fid_dps_year, fid_dps_doc FROM trn_dps_mat_req WHERE fid_mat_req = " + matId;
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            while (resultSet.next()) {
                readAuthComments(new int[] { resultSet.getInt(1), resultSet.getInt(2) });
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void readAuthComments(int[] dpsPk) {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT * FROM( " +
                    "SELECT " +
                    "IF(s.b_authorn, s.dt_time_authorn_n, s.dt_time_reject_n) dt_mov, " +
                    "IF(d.num_ser <> '', CONCAT(d.num_ser, '-', d.num), d.num) folio, " +
                    "IF(s.comments = '', 'SIN COMENTARIOS', s.comments) comments, " +
                    "IF(s.b_authorn, ua.usr, ur.usr) usr, " +
                    "s.b_authorn, s.b_reject, s.b_del " +
                    "FROM cfgu_authorn_step s " +
                    "INNER JOIN trn_dps AS d ON s.res_pk_n1_n = d.id_year AND s.res_pk_n2_n = d.id_doc " +
                    "LEFT JOIN erp.usru_usr AS ua ON s.fk_usr_authorn_n = ua.id_usr " +
                    "LEFT JOIN erp.usru_usr AS ur ON s.fk_usr_reject_n = ur.id_usr " +
                    "WHERE s.res_tab_name_n = 'trn_dps' " +
                    "AND s.res_pk_n1_n = " + dpsPk[0] + " AND s.res_pk_n2_n = " + dpsPk[1] + " " +
                    "AND (s.b_authorn OR s.b_reject)) AS a " +
                    "ORDER BY dt_mov DESC;";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                SRowDocumentAuthornComments row = new SRowDocumentAuthornComments();
                row.setDateMov(resultSet.getTimestamp("dt_mov"));
                row.setNum(resultSet.getString("folio"));
                row.setComments(resultSet.getString("comments"));
                row.setUser(resultSet.getString("usr"));
                row.setAuthorn(resultSet.getBoolean("b_authorn"));
                row.setReject(resultSet.getBoolean("b_reject"));
                row.setDeleted(resultSet.getBoolean("b_del"));
                maRowsAuthComm.add(row);
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void showRows() {
        Vector<SGridRow> rows = new Vector<>();

        for (SRowDocumentAuthornComments oStep : maRowsAuthComm) {
            rows.add(oStep);
        }
        
        moGridLogs.populateGrid(rows);
        moGridLogs.clearSortKeys();
        moGridLogs.setSelectedGridRow(0);
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        maRowsAuthComm = new ArrayList<>();
        switch(type) {
            case SModConsts.TRN_MAT_REQ:
                processMatReq((int) value);
                break;
            case SModConsts.TRN_DPS:
                readAuthComments((int[]) value);
                break;
        }
        showRows();
    }

    @Override
    public Object getValue(final int type) {
        return new Object();
    }
}
