/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.mcfg.data.SDataScale;
import erp.mcfg.data.SDataScaleUtils;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbScaleTicket;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JButton;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Servin
 */
public class SFormScaleTicket extends SBeanForm implements ActionListener, ItemListener, FocusListener {

    private SDbScaleTicket moRegistry;
    private SDataScale moScale;
    
    private boolean mbAut;
    private boolean mbAutArr;
    private boolean mbAutDep;
    private boolean mbHasLinks;
    private int levelRight;
    
    /**
     * Creates new form SFormScaleTicket
     * @param client
     * @param title
     * @param subType
     */
    public SFormScaleTicket(SGuiClient client, String title, int subType) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNU_SCA_TIC, subType, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlScale = new javax.swing.JLabel();
        moKeyScale = new sa.lib.gui.bean.SBeanFieldKey();
        moBoolTared = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel3 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jbImportTicket = new javax.swing.JButton();
        jbCleanTicket = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel7 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlPlate = new javax.swing.JLabel();
        moTextPlate = new sa.lib.gui.bean.SBeanFieldText();
        jlPlatesCage = new javax.swing.JLabel();
        moTextPlateCage = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlDriver = new javax.swing.JLabel();
        moTextDriver = new sa.lib.gui.bean.SBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlWeightArrival = new javax.swing.JLabel();
        moDecWeightArrival = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightArrivalUnit = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlWeightDeparture = new javax.swing.JLabel();
        moDecWeightDeparture = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightDepartureUnit = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jlWeightNet = new javax.swing.JLabel();
        moDecWeightNet = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlWeightNetUnit = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jlDatetimeArrival = new javax.swing.JLabel();
        moDatetimeArrival = new sa.lib.gui.bean.SBeanFieldDatetime();
        jPanel14 = new javax.swing.JPanel();
        jlDatetimeDeparture = new javax.swing.JLabel();
        moDatetimeDeparture = new sa.lib.gui.bean.SBeanFieldDatetime();
        jPanel15 = new javax.swing.JPanel();
        jlTicType = new javax.swing.JLabel();
        moRadioOptionOpe = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadioOptionMaquila = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel16 = new javax.swing.JPanel();
        jlCommentArr = new javax.swing.JLabel();
        moTextCommentArr = new sa.lib.gui.bean.SBeanFieldText();
        jPanel17 = new javax.swing.JPanel();
        jlCommentDep = new javax.swing.JLabel();
        moTextCommentDep = new sa.lib.gui.bean.SBeanFieldText();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.GridLayout(15, 0, 0, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlScale.setForeground(new java.awt.Color(51, 51, 255));
        jlScale.setText("Báscula:*");
        jlScale.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(jlScale);

        moKeyScale.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel2.add(moKeyScale);

        moBoolTared.setText("Boleto tarado");
        jPanel2.add(moBoolTared);

        jPanel1.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Boleto:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlNumber);
        jPanel3.add(moIntNumber);

        jbImportTicket.setText("Importar de la báscula");
        jbImportTicket.setToolTipText("Importar información del boleto de la báscula");
        jbImportTicket.setEnabled(false);
        jbImportTicket.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel3.add(jbImportTicket);

        jbCleanTicket.setText("Limpiar");
        jbCleanTicket.setToolTipText("");
        jbCleanTicket.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jbCleanTicket);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDate);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Asociado de negocios:*");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel6.add(moKeyBizPartner);

        jPanel1.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel7.add(moKeyItem);

        jPanel1.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPlate.setText("Placas vehículo:*");
        jlPlate.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlPlate);
        jPanel8.add(moTextPlate);

        jlPlatesCage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPlatesCage.setText("Placas caja:");
        jlPlatesCage.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel8.add(jlPlatesCage);
        jPanel8.add(moTextPlateCage);

        jPanel1.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDriver.setText("Chofer vehículo:*");
        jlDriver.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlDriver);

        moTextDriver.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moTextDriver);

        jPanel1.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightArrival.setText("Peso entrada:*");
        jlWeightArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlWeightArrival);
        jPanel10.add(moDecWeightArrival);

        jlWeightArrivalUnit.setText("kg");
        jlWeightArrivalUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel10.add(jlWeightArrivalUnit);

        jPanel1.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightDeparture.setText("Peso salida:");
        jlWeightDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlWeightDeparture);
        jPanel11.add(moDecWeightDeparture);

        jlWeightDepartureUnit.setText("kg");
        jlWeightDepartureUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel11.add(jlWeightDepartureUnit);

        jPanel1.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeightNet.setText("Peso neto:");
        jlWeightNet.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlWeightNet);

        moDecWeightNet.setEnabled(false);
        jPanel12.add(moDecWeightNet);

        jlWeightNetUnit.setText("kg");
        jlWeightNetUnit.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel12.add(jlWeightNetUnit);

        jPanel1.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeArrival.setText("Fecha-hora entrada:*");
        jlDatetimeArrival.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlDatetimeArrival);
        jPanel13.add(moDatetimeArrival);

        jPanel1.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeDeparture.setText("Fecha-hora salida:");
        jlDatetimeDeparture.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlDatetimeDeparture);
        jPanel14.add(moDatetimeDeparture);

        jPanel1.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTicType.setText("Tipo de boleto:*");
        jlTicType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlTicType);

        buttonGroup1.add(moRadioOptionOpe);
        moRadioOptionOpe.setSelected(true);
        moRadioOptionOpe.setText("Ventas");
        jPanel15.add(moRadioOptionOpe);

        buttonGroup1.add(moRadioOptionMaquila);
        moRadioOptionMaquila.setText("Maquila");
        moRadioOptionMaquila.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moRadioOptionMaquila);

        jPanel1.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCommentArr.setText("Observaciones entrada:");
        jlCommentArr.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlCommentArr);

        moTextCommentArr.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel16.add(moTextCommentArr);

        jPanel1.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCommentDep.setText("Observaciones salida:");
        jlCommentDep.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlCommentDep);

        moTextCommentDep.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel17.add(moTextCommentDep);

        jPanel1.add(jPanel17);

        jPanel4.add(jPanel1, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCleanTicket;
    private javax.swing.JButton jbImportTicket;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlCommentArr;
    private javax.swing.JLabel jlCommentDep;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDatetimeArrival;
    private javax.swing.JLabel jlDatetimeDeparture;
    private javax.swing.JLabel jlDriver;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPlate;
    private javax.swing.JLabel jlPlatesCage;
    private javax.swing.JLabel jlScale;
    private javax.swing.JLabel jlTicType;
    private javax.swing.JLabel jlWeightArrival;
    private javax.swing.JLabel jlWeightArrivalUnit;
    private javax.swing.JLabel jlWeightDeparture;
    private javax.swing.JLabel jlWeightDepartureUnit;
    private javax.swing.JLabel jlWeightNet;
    private javax.swing.JLabel jlWeightNetUnit;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolTared;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeArrival;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightArrival;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightDeparture;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWeightNet;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBizPartner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyScale;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioOptionMaquila;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioOptionOpe;
    private sa.lib.gui.bean.SBeanFieldText moTextCommentArr;
    private sa.lib.gui.bean.SBeanFieldText moTextCommentDep;
    private sa.lib.gui.bean.SBeanFieldText moTextDriver;
    private sa.lib.gui.bean.SBeanFieldText moTextPlate;
    private sa.lib.gui.bean.SBeanFieldText moTextPlateCage;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        if (mnFormSubtype == SModSysConsts.TRNS_CT_IOG_IN) {
            moRadioOptionOpe.setText("Compra");
            moRadioOptionMaquila.setText("Maquila terceros");
        }
        else if (mnFormSubtype == SModSysConsts.TRNS_CT_IOG_OUT) {
            moRadioOptionOpe.setText("Venta");
            moRadioOptionMaquila.setText("Maquila propia");
        }
        
        moKeyScale.setKeySettings(miClient, SGuiUtils.getLabelName(jlScale), true);
        moBoolTared.setBooleanSettings(moBoolTared.getText(), false);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber), SGuiConsts.GUI_TYPE_INT, true);
        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moKeyBizPartner.setKeySettings(miClient, SGuiUtils.getLabelName(jlBizPartner), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moTextPlate.setTextSettings(SGuiUtils.getLabelName(jlPlate), 25, 1);
        moTextPlateCage.setTextSettings(SGuiUtils.getLabelName(jlPlate), 25, 0);
        moTextDriver.setTextSettings(SGuiUtils.getLabelName(jlDriver), 50, 1);
        moDecWeightArrival.setDecimalSettings(SGuiUtils.getLabelName(jlWeightArrival), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moDecWeightDeparture.setDecimalSettings(SGuiUtils.getLabelName(jlWeightDeparture), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWeightNet.setDecimalSettings(SGuiUtils.getLabelName(jlWeightNet), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDatetimeArrival.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeArrival), true);
        moDatetimeDeparture.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeDeparture), false);
        moRadioOptionOpe.setBooleanSettings(moRadioOptionOpe.getText(), true);
        moRadioOptionMaquila.setBooleanSettings(moRadioOptionOpe.getText(), false);
        moTextCommentArr.setTextSettings(SGuiUtils.getLabelName(jlCommentArr), 500, 0);
        moTextCommentDep.setTextSettings(SGuiUtils.getLabelName(jlCommentDep), 500, 0);
//        moCurCost.setCompoundFieldSettings(miClient);
//        moCurCost.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCost), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
//        
        moFields.addField(moKeyScale);
        moFields.addField(moBoolTared);
        moFields.addField(moIntNumber);
        moFields.addField(moDate);
        moFields.addField(moKeyBizPartner);
        moFields.addField(moKeyItem);
        moFields.addField(moTextPlate);
        moFields.addField(moTextPlateCage);
        moFields.addField(moTextDriver);
        moFields.addField(moDecWeightArrival);
        moFields.addField(moDecWeightDeparture);
        moFields.addField(moDecWeightNet);
        moFields.addField(moDatetimeArrival);
        moFields.addField(moDatetimeDeparture);
        moFields.addField(moRadioOptionOpe);
        moFields.addField(moRadioOptionMaquila);
        moFields.addField(moTextCommentArr);
        moFields.addField(moTextCommentDep);

        moFields.setFormButton(jbSave);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
        
        levelRight = ((SClientInterface)miClient).getSessionXXX().getUser().hasRight((SClientInterface)miClient, SDataConstantsSys.PRV_SAL_SCA_TIC).Level;
    }
    
    @SuppressWarnings("unchecked")
    private void actionImportTicket() {
        try {
            if (moIntNumber.getValue() > 0) {
                String sql = "SELECT * FROM erp.trnu_sca_tic WHERE num = " + moIntNumber.getValue() + " AND NOT b_del ";
                ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
                if (resultSet.next()) {
                    miClient.showMsgBoxInformation("El boleto con el número '" + moIntNumber.getValue() + "' ya ha sido importado con anterioridad.");
                }
                else {
                    Connection connection = SDataScaleUtils.getScaleConnection(miClient.getSession(), moScale.getPkScaleId());

                    sql = "SELECT * FROM dba.Pesadas WHERE Pes_ID = " + moIntNumber.getValue() + " AND Usb_ID = '" + moScale.getScaleCompanyId() + "' ";
                    resultSet = connection.createStatement().executeQuery(sql);
                    if (!resultSet.next()) {
                        miClient.showMsgBoxInformation("No existe ningún boleto con el número '" + moIntNumber.getValue() + "' para la báscula seleccionada.");
                    }
                    else {
                        if (!resultSet.getBoolean("Pes_Completo")){
                            miClient.showMsgBoxInformation("No se puede importar el boleto con el número '" + moIntNumber.getValue() + "' porque no está tarado.");
                        }
                        else {
                            if (mnFormSubtype == SModSysConsts.TRNS_CT_IOG_IN && resultSet.getDouble("Pes_PesoPri") < resultSet.getDouble("Pes_PesoSeg")) {
                                miClient.showMsgBoxInformation("No se puede importar el boleto con el número '" + moIntNumber.getValue() + "' porque es de salida.");
                            }
                            else if (mnFormSubtype == SModSysConsts.TRNS_CT_IOG_OUT && resultSet.getDouble("Pes_PesoPri") > resultSet.getDouble("Pes_PesoSeg")) {
                                miClient.showMsgBoxInformation("No se puede importar el boleto con el número '" + moIntNumber.getValue() + "' porque es de entrada.");
                            }
                            else {

                                ArrayList<SGuiItem> bpGuiItems = SDataScaleUtils.getBizPartnerScaleMap(miClient.getSession(),  moScale.getPkScaleId(), resultSet.getString("Emp_ID") );
                                ArrayList<SGuiItem> itemGuiItems = SDataScaleUtils.getItemScaleMap(miClient.getSession(), moScale.getPkScaleId(), resultSet.getString("Pro_ID") );
                                if (bpGuiItems.size() <= 1) {
                                    miClient.showMsgBoxInformation("No se puede importar el boleto con el número '" + moIntNumber.getValue() + "'\nporque "
                                            + "el asociado de negocio '" + resultSet.getString("Emp_Nombre") + "' de báscula no tiene mapeo con el asociado de negocio de SIIE.");
                                }
                                else {
                                    if (itemGuiItems.size() <= 1) {
                                        miClient.showMsgBoxInformation("No se puede importar el boleto con el número '" + moIntNumber.getValue() + "'\nporque "
                                                + "el ítem '" + resultSet.getString("Pro_Nombre") + "' de báscula no tiene mapeo con el ítem de SIIE.");
                                    }
                                    else {
                                        moDate.setValue(resultSet.getDate("Pes_FecHor"));
                                        moTextPlate.setValue(resultSet.getString("Pes_Placas"));
                                        moTextDriver.setValue(resultSet.getString("Pes_Chofer"));
                                        moDecWeightArrival.setValue(resultSet.getDouble("Pes_PesoPri"));
                                        moDecWeightDeparture.setValue(resultSet.getDouble("Pes_PesoSeg"));
                                        moDecWeightNet.setValue(resultSet.getDouble("Pes_Neto"));
                                        moDatetimeArrival.setValue(resultSet.getTimestamp("Pes_FecHorPri"));
                                        moDatetimeDeparture.setValue(resultSet.getTimestamp("Pes_FecHorSeg"));
                                        moTextCommentArr.setValue(resultSet.getString("Pes_ObsPri"));
                                        moTextCommentDep.setValue(resultSet.getString("Pes_ObsSeg"));
                                        moBoolTared.setValue(true);

                                        moKeyBizPartner.removeAllItems();
                                        for (int i = 0; i < bpGuiItems.size(); i++) {
                                            SGuiItem it = bpGuiItems.get(i);
                                            moKeyBizPartner.addItem(it);
                                            if ((boolean)it.getComplement()){
                                                moKeyBizPartner.setSelectedIndex(i);
                                            }
                                        }
                                        moKeyItem.removeAllItems();
                                        for (int i = 0; i < itemGuiItems.size(); i++) {
                                            SGuiItem it = itemGuiItems.get(i);
                                            moKeyItem.addItem(it);
                                            if ((boolean)it.getComplement()){
                                                moKeyItem.setSelectedIndex(i);
                                            }
                                        }
                                        mbAutArr = true;
                                        mbAutDep = true;
                                        mbAut = true;
                                        enableFields(false);
                                        jbImportTicket.setEnabled(false);
                                        moKeyScale.setEnabled(false);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                miClient.showMsgBoxInformation("Se debe especificar el número de boleto a importar de la báscula.");
            }
        }
        catch (Exception e) { 
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionCleanTicket() {
        moIntNumber.setValue(0);
        moDate.setValue(miClient.getSession().getCurrentDate());
        moTextPlate.setValue("");
        moTextDriver.setValue("");
        moDecWeightArrival.setValue(0.0);
        moDecWeightDeparture.setValue(0.0);
        moDecWeightNet.setValue(0.0);
        moDatetimeArrival.setValue(miClient.getSession().getCurrentDate());
        moDatetimeDeparture.setValue(miClient.getSession().getCurrentDate());
        moTextCommentArr.setValue("");
        moTextCommentDep.setValue("");
        moBoolTared.setValue(false);
        jbImportTicket.setEnabled(moScale.hasConnection());
        moKeyScale.setEnabled(true);
        enableFields(true);
        reloadCatalogues();
    }
    
    private void enableFields(boolean enable) {
        moDate.setEnabled(enable);
        moTextPlate.setEnabled(enable);
        moTextDriver.setEnabled(enable);
        moDecWeightArrival.setEnabled(enable);
        moDecWeightDeparture.setEnabled(enable);
        moDatetimeArrival.setEnabled(enable);
        moDatetimeDeparture.setEnabled(enable);
        moTextCommentArr.setEnabled(enable);
        moTextCommentDep.setEnabled(enable);
        moBoolTared.setEnabled(enable);
        moKeyScale.setEnabled(enable);
        moTextPlateCage.setEnabled(!mbHasLinks);
        moRadioOptionMaquila.setEnabled(!mbHasLinks);
        moRadioOptionOpe.setEnabled(!mbHasLinks);
        if (enable) {
            moKeyItem.setEnabled(true);
            moKeyBizPartner.setEnabled(true);
        }
        else {
            moKeyItem.setEnabled(moKeyItem.getItemCount() > 2);
            moKeyBizPartner.setEnabled(moKeyBizPartner.getItemCount() > 2);
        }
    }
    
    private void itemStateChangedScale() {
        if (moKeyScale.getSelectedIndex() > 0) {
            moScale = new SDataScale();
            moScale.read(moKeyScale.getValue(), miClient.getSession().getStatement());
            jbImportTicket.setEnabled(moScale.hasConnection());
        }
        else {
            jbImportTicket.setEnabled(false);
        }
    }
    
    private void focusLostWeightDeparture() {
        if (moDecWeightArrival.getValue() > moDecWeightDeparture.getValue()) {
            moDecWeightNet.setValue(moDecWeightArrival.getValue() - moDecWeightDeparture.getValue());
        }
        else {
            moDecWeightNet.setValue(moDecWeightDeparture.getValue() - moDecWeightArrival.getValue());
        }
    }

    @Override
    public void addAllListeners() {
        jbImportTicket.addActionListener(this);
        jbCleanTicket.addActionListener(this);
        moKeyScale.addItemListener(this);
        moDecWeightDeparture.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbImportTicket.removeActionListener(this);
        jbCleanTicket.removeActionListener(this);
        moKeyScale.removeItemListener(this);
        moDecWeightDeparture.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyScale, SModConsts.CFGU_SCA, SLibConstants.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, SLibConstants.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, mnFormSubtype == SModSysConsts.TRNS_CT_IOG_OUT ? SModSysConsts.BPSS_CT_BP_CUS : SModSysConsts.BPSS_CT_BP_SUP, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbScaleTicket) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            moRegistry.setDatetimeArrival(miClient.getSession().getCurrentDate());
            moRegistry.setDatetimeDeparture(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moKeyScale.setValue(new int[] { moRegistry.getFkScaleId() });
        moIntNumber.setValue(moRegistry.getNumber());
        moDate.setValue(moRegistry.getDate());
        moKeyBizPartner.setValue(new int[] { moRegistry.getFkBizPartnerId() });
        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        moTextPlate.setValue(moRegistry.getPlate());
        moTextPlateCage.setValue(moRegistry.getPlateCage());
        moTextDriver.setValue(moRegistry.getDriver());
        moDecWeightArrival.setValue(moRegistry.getWeightArrival());
        moDecWeightDeparture.setValue(moRegistry.getWeightDeparture());
        moDecWeightNet.setValue(moRegistry.getWeightNet_r());
        moDatetimeArrival.setValue(moRegistry.getDatetimeArrival());
        moDatetimeDeparture.setValue(moRegistry.getDatetimeDeparture());
        
        moRadioOptionOpe.setSelected(moRegistry.getTicketCase().equals("VTA") || moRegistry.getTicketCase().equals("CPA"));
        moRadioOptionMaquila.setSelected(moRegistry.getTicketCase().equals("MQT") || moRegistry.getTicketCase().equals("MQP")); 
        
        moTextCommentArr.setValue(moRegistry.getCommentArrival());  
        moTextCommentDep.setValue(moRegistry.getCommentDeparture());
        
        moBoolTared.setSelected(moRegistry.isTared());
        
        mbAut = moRegistry.isAutomatic();
        mbAutArr = moRegistry.isAutomaticArrival();
        mbAutDep = moRegistry.isAutomaticDeparture();
        mbHasLinks = moRegistry.hasLinks(miClient.getSession());
        
        boolean enable = !(mbAut || mbHasLinks);
        itemStateChangedScale();
        setFormEditable(!mbHasLinks);
        enableFields(enable);
        moKeyBizPartner.setEnabled(enable);
        moKeyItem.setEnabled(enable);
        jbCleanTicket.setEnabled(enable);
        moKeyScale.setEnabled(enable);
        moIntNumber.setEnabled(enable);
        jbImportTicket.setEnabled(enable);
        
        if (!moRegistry.isRegistryNew() && levelRight < SUtilConsts.LEV_EDITOR){
            setFormEditable(false);
            jbCleanTicket.setEnabled(false);
            jbEdit.setEnabled(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbScaleTicket registry = (SDbScaleTicket) moRegistry.clone();
        
        if (registry.isRegistryNew()) {}
        
        moRegistry.setNumber(moIntNumber.getValue());
        moRegistry.setDate(moDate.getValue());
        moRegistry.setPlate(moTextPlate.getValue());
        moRegistry.setPlateCage(moTextPlateCage.getValue());
        moRegistry.setDriver(moTextDriver.getValue());
        moRegistry.setDatetimeArrival(moDatetimeArrival.getValue());
        moRegistry.setDatetimeDeparture(moDatetimeDeparture.getValue());
        moRegistry.setWeightArrival(moDecWeightArrival.getValue());
        moRegistry.setWeightDeparture(moDecWeightDeparture.getValue());
        moRegistry.setWeightNet_r(moDecWeightNet.getValue());
        moRegistry.setCommentArrival(moTextCommentArr.getValue());
        moRegistry.setCommentDeparture(moTextCommentDep.getValue());
        if (mnFormSubtype == SModSysConsts.TRNS_CT_IOG_IN) {
            moRegistry.setTicketCase(moRadioOptionOpe.isSelected() ? "CPA" : "MQT");
        }
        else{
            moRegistry.setTicketCase(moRadioOptionOpe.isSelected() ? "VTA" : "MQP");
        }
        moRegistry.setAutomatic(mbAut);
        moRegistry.setAutomaticArrival(mbAutArr);
        moRegistry.setAutomaticDeparture(mbAutDep);
        moRegistry.setFkDiogCategoryId(mnFormSubtype);
        moRegistry.setTared(moBoolTared.getValue());
        moRegistry.setFkCompanyId(miClient.getSession().getConfigCompany().getCompanyId());
        moRegistry.setFkScaleId(moKeyScale.getValue()[0]);
        moRegistry.setFkItemId(moKeyItem.getValue()[0]);
        moRegistry.setFkBizPartnerId(moKeyBizPartner.getValue()[0]);
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moBoolTared.isSelected() && moDecWeightDeparture.getValue() == 0.0) {
                validation.setMessage("El boleto esta marcado como tarado, por lo cual debe de tener un peso de salida.");
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbImportTicket) {
                actionImportTicket();
            }
            else if (button == jbCleanTicket) {
                actionCleanTicket();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            if (field == moKeyScale) {
                itemStateChangedScale();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal field = (SBeanFieldDecimal) e.getSource();
            if (field == moDecWeightDeparture) {
                focusLostWeightDeparture();
            }
        }
    }
}
