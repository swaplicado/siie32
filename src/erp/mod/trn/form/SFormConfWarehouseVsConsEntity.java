/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.trn.db.SDbConfWarehouseVsConsEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntityWarehouse;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Servín
 */
public class SFormConfWarehouseVsConsEntity extends SBeanForm implements ActionListener {
    
    private SDbConfWarehouseVsConsEntity moRegistry;
    
    private SGridPaneForm moGridMatConsEnt;
    private SGridPaneForm moGridMatConsEntSelected;
    
    private ArrayList<SDbMaterialConsumptionEntity> maMatConsEnt;
    private ArrayList<SDbMaterialConsumptionEntityWarehouse> maMatConsEntSelected;
    

    /**
     * Creates new form SFormConfWarehouseVsConsEntity
     * @param client
     * @param title
     */
    public SFormConfWarehouseVsConsEntity(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_CONF_WHS_VS_CON_ENT, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpProvision = new javax.swing.JPanel();
        jpWarehouse = new javax.swing.JPanel();
        jlWarehouse = new javax.swing.JLabel();
        moTextWarehouse = new sa.lib.gui.bean.SBeanFieldText();
        jpProvAvailable = new javax.swing.JPanel();
        jpProvAvailableLabel = new javax.swing.JPanel();
        jlConsAvailable = new javax.swing.JLabel();
        jpGridConsAva = new javax.swing.JPanel();
        jpProvButtons = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbConsAdd = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbConsAddAll = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbConsRemove = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jbConsRemoveAll = new javax.swing.JButton();
        jpProvSelected = new javax.swing.JPanel();
        jpProvSelectedLabel = new javax.swing.JPanel();
        jlConsSelected = new javax.swing.JLabel();
        jpGridConsSel = new javax.swing.JPanel();

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpProvision.setLayout(new java.awt.BorderLayout());

        jpWarehouse.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlWarehouse.setText("Almacén:");
        jpWarehouse.add(jlWarehouse);

        moTextWarehouse.setEditable(false);
        moTextWarehouse.setEnabled(false);
        moTextWarehouse.setPreferredSize(new java.awt.Dimension(400, 23));
        jpWarehouse.add(moTextWarehouse);

        jpProvision.add(jpWarehouse, java.awt.BorderLayout.NORTH);

        jpProvAvailable.setLayout(new java.awt.BorderLayout());

        jpProvAvailableLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsAvailable.setText("Centros de consumo disponibles:");
        jpProvAvailableLabel.add(jlConsAvailable);

        jpProvAvailable.add(jpProvAvailableLabel, java.awt.BorderLayout.NORTH);

        jpGridConsAva.setPreferredSize(new java.awt.Dimension(350, 330));
        jpGridConsAva.setLayout(new java.awt.BorderLayout());
        jpProvAvailable.add(jpGridConsAva, java.awt.BorderLayout.CENTER);

        jpProvButtons.setLayout(new java.awt.GridLayout(10, 0));
        jpProvButtons.add(jPanel1);

        jbConsAdd.setText(">");
        jbConsAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel2.add(jbConsAdd);

        jpProvButtons.add(jPanel2);

        jbConsAddAll.setText(">>");
        jbConsAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jbConsAddAll);

        jpProvButtons.add(jPanel3);

        jbConsRemove.setText("<");
        jbConsRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jbConsRemove);

        jpProvButtons.add(jPanel4);

        jbConsRemoveAll.setText("<<");
        jbConsRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jbConsRemoveAll);

        jpProvButtons.add(jPanel5);

        jpProvAvailable.add(jpProvButtons, java.awt.BorderLayout.EAST);

        jpProvision.add(jpProvAvailable, java.awt.BorderLayout.CENTER);

        jpProvSelected.setLayout(new java.awt.BorderLayout());

        jpProvSelectedLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsSelected.setText("Centros de consumo seleccionadas:");
        jlConsSelected.setPreferredSize(new java.awt.Dimension(370, 16));
        jpProvSelectedLabel.add(jlConsSelected);

        jpProvSelected.add(jpProvSelectedLabel, java.awt.BorderLayout.NORTH);

        jpGridConsSel.setPreferredSize(new java.awt.Dimension(380, 330));
        jpGridConsSel.setLayout(new java.awt.BorderLayout());
        jpProvSelected.add(jpGridConsSel, java.awt.BorderLayout.CENTER);

        jpProvision.add(jpProvSelected, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpProvision, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbConsAdd;
    private javax.swing.JButton jbConsAddAll;
    private javax.swing.JButton jbConsRemove;
    private javax.swing.JButton jbConsRemoveAll;
    private javax.swing.JLabel jlConsAvailable;
    private javax.swing.JLabel jlConsSelected;
    private javax.swing.JLabel jlWarehouse;
    private javax.swing.JPanel jpGridConsAva;
    private javax.swing.JPanel jpGridConsSel;
    private javax.swing.JPanel jpProvAvailable;
    private javax.swing.JPanel jpProvAvailableLabel;
    private javax.swing.JPanel jpProvButtons;
    private javax.swing.JPanel jpProvSelected;
    private javax.swing.JPanel jpProvSelectedLabel;
    private javax.swing.JPanel jpProvision;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpWarehouse;
    private sa.lib.gui.bean.SBeanFieldText moTextWarehouse;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        moTextWarehouse.setTextSettings("Almacén", 250);
        
        // Centros de consumo disponibles
        
        moGridMatConsEnt = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT, 0, "Centros de consumo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de consumo"));

                return columns;
            }
        };

        jpGridConsAva.add(moGridMatConsEnt);
        mvFormGrids.add(moGridMatConsEnt);
        
        // Centros de consumo seleccionados
        
        moGridMatConsEntSelected = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT_WHS, 0, "Centros de consumo seleccionados") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Centro de consumo"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Predeterminado");
                col.setEditable(true);
                columns.add(col);

                return columns;
            }
        };

        jpGridConsSel.add(moGridMatConsEntSelected);
        mvFormGrids.add(moGridMatConsEntSelected);
        
        jpCommandRight.remove(jbEdit);
        jpCommandRight.remove(jbReadInfo);
    }
    
    private void readMaterialConsumptionEntities() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_mat_cons_ent FROM trn_mat_cons_ent";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbMaterialConsumptionEntityWarehouse ew : maMatConsEntSelected) {
                    if (resultSet.getInt(1) == ew.getPkMatConsumptionEntityId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SDbMaterialConsumptionEntity ce = new SDbMaterialConsumptionEntity();
                    ce.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                    maMatConsEnt.add(ce);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateGridMatConsEnt() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEnt.size() > 0) {
            vRows.addAll(maMatConsEnt);
        }
        moGridMatConsEnt.populateGrid(vRows);
    }
    
    private void populateGridMatConsEntSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEntSelected.size() > 0) {
            vRows.addAll(maMatConsEntSelected);
        }
        moGridMatConsEntSelected.populateGrid(vRows);
    }
    
    private void actionConsAdd() {
        try {
            int consId = ((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()).getPkMatConsumptionEntityId();
            if (maMatConsEnt.remove((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()) ) {
                SDbMaterialConsumptionEntityWarehouse ew = new SDbMaterialConsumptionEntityWarehouse();
                ew.setPkMatConsumptionEntityId(consId);
                ew.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(ew);

                populateGridMatConsEnt();
                populateGridMatConsEntSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionConsAddAll() {
        try {
            for (SDbMaterialConsumptionEntity ce : maMatConsEnt) {
                SDbMaterialConsumptionEntityWarehouse ew = new SDbMaterialConsumptionEntityWarehouse();
                ew.setPkMatConsumptionEntityId(ce.getPkMatConsumptionEntityId());
                ew.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(ew);
            }
            maMatConsEnt.clear();
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionConsRemove() {
        maMatConsEnt.add(((SDbMaterialConsumptionEntityWarehouse) moGridMatConsEntSelected.getSelectedGridRow()).getAuxMatConsEnt());
        if (maMatConsEntSelected.remove(((SDbMaterialConsumptionEntityWarehouse) moGridMatConsEntSelected.getSelectedGridRow()))) {
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
    }

    private void actionConsRemoveAll() {
        for (SDbMaterialConsumptionEntityWarehouse ew : maMatConsEntSelected) {
            maMatConsEnt.add(ew.getAuxMatConsEnt());
        }
        maMatConsEntSelected.clear();
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
    }
    
    @Override
    public void addAllListeners() {
        jbConsAdd.addActionListener(this);
        jbConsAddAll.addActionListener(this);
        jbConsRemove.addActionListener(this);
        jbConsRemoveAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbConsAdd.removeActionListener(this);
        jbConsAddAll.removeActionListener(this);
        jbConsRemove.removeActionListener(this);
        jbConsRemoveAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moTextWarehouse.setValue("");
        
        maMatConsEnt = new ArrayList<>();
        maMatConsEntSelected = new ArrayList<>();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbConfWarehouseVsConsEntity) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        moTextWarehouse.setValue(moRegistry.getAuxCompBrEnt().getEntity());
        
        for (SDbMaterialConsumptionEntityWarehouse ew : moRegistry.getConsEntWhs()) {
            maMatConsEntSelected.add(ew);
        }
        
        readMaterialConsumptionEntities();
        
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbConfWarehouseVsConsEntity registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) { }
        
        registry.getConsEntWhs().clear();
        for (SDbMaterialConsumptionEntityWarehouse ew : maMatConsEntSelected) {
            registry.getConsEntWhs().add(ew);
            registry.setDefault(ew.isDefault());
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbConsAdd) {
                actionConsAdd();
            }
            else if (button == jbConsAddAll) {
                actionConsAddAll();
            }
            else if (button == jbConsRemove) {
                actionConsRemove();
            }
            else if (button == jbConsRemoveAll) {
                actionConsRemoveAll();
            }
        }
    }
}
