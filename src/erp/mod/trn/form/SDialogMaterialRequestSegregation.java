/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.gui.session.SSessionCustom;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbMaterialRequest;
import erp.mod.trn.db.SDbMaterialRequestEntry;
import erp.mod.trn.db.SMaterialRequestEntryRow;
import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mtrn.data.SDataStockSegregationWarehouseEntry;
import erp.mtrn.data.STrnStock;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnStockSegregationUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Edwin Carmona
 */
public class SDialogMaterialRequestSegregation extends SBeanFormDialog implements ListSelectionListener, ItemListener, ActionListener {
    
    protected SDbMaterialRequest moMaterialRequest;
    protected ArrayList<SDbMaterialRequestEntry> mlMaterialRequestEntries;
    protected SGridPaneForm moGridMatReqEty;
    protected SGridPaneForm moGridSegregationRows;
    protected int mnSegregationId;
    
    private SGuiFieldKeyGroup moFieldKeyEntityGroup;

    /**
     * Creates new form SDialogMaterialRequestSegregation
     * @param client
     * @param title
     */
    public SDialogMaterialRequestSegregation(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_STK_SEG_X, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpBenefit = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moTextBizPartner = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jlWarehouseCompanyBranch = new javax.swing.JLabel();
        moKeyWarehouseCompanyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlWarehouseEntity = new javax.swing.JLabel();
        moKeyWarehouseEntity = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jpRequisitionMaterialRows = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jbSegregate = new javax.swing.JButton();
        jbSegregateAll = new javax.swing.JButton();
        jpReqMaterialRows = new javax.swing.JPanel();
        jpSegregationRows = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbRelease = new javax.swing.JButton();
        jbReleaseAll = new javax.swing.JButton();
        jpSegRows = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Entregas mensuales del contrato");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpBenefit.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida apreciada:"));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlNumber);

        moTextNumber.setText("sBeanFieldText2");
        moTextNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(moTextNumber);

        jPanel4.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Cliente:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlBizPartner);

        moTextBizPartner.setText("sBeanFieldText2");
        moTextBizPartner.setPreferredSize(new java.awt.Dimension(340, 23));
        jPanel12.add(moTextBizPartner);

        jPanel4.add(jPanel12);

        jpBenefit.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Total partida contrato:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseCompanyBranch.setText("Sucursal:*");
        jlWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel30.add(jlWarehouseCompanyBranch);

        moKeyWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel30.add(moKeyWarehouseCompanyBranch);

        jPanel6.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseEntity.setText("Almacén:*");
        jlWarehouseEntity.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel31.add(jlWarehouseEntity);

        moKeyWarehouseEntity.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel31.add(moKeyWarehouseEntity);

        jPanel6.add(jPanel31);

        jpBenefit.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jpBenefit, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpRequisitionMaterialRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas de la requisición:"));
        jpRequisitionMaterialRows.setPreferredSize(new java.awt.Dimension(100, 200));
        jpRequisitionMaterialRows.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel13.add(jLabel1);

        jbSegregate.setText("Apartar");
        jbSegregate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSegregate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jbSegregate);

        jbSegregateAll.setText("Apartar todo");
        jbSegregateAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSegregateAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jbSegregateAll);

        jpRequisitionMaterialRows.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpReqMaterialRows.setLayout(new java.awt.BorderLayout());
        jpRequisitionMaterialRows.add(jpReqMaterialRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpRequisitionMaterialRows, java.awt.BorderLayout.NORTH);

        jpSegregationRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Apartados:"));
        jpSegregationRows.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel14.add(jLabel2);

        jbRelease.setText("Liberar");
        jbRelease.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRelease.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jbRelease);

        jbReleaseAll.setText("Liberar todo");
        jbReleaseAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbReleaseAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jbReleaseAll);

        jpSegregationRows.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpSegRows.setLayout(new java.awt.BorderLayout());
        jpSegregationRows.add(jpSegRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpSegregationRows, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbRelease;
    private javax.swing.JButton jbReleaseAll;
    private javax.swing.JButton jbSegregate;
    private javax.swing.JButton jbSegregateAll;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlWarehouseCompanyBranch;
    private javax.swing.JLabel jlWarehouseEntity;
    private javax.swing.JPanel jpBenefit;
    private javax.swing.JPanel jpReqMaterialRows;
    private javax.swing.JPanel jpRequisitionMaterialRows;
    private javax.swing.JPanel jpSegRows;
    private javax.swing.JPanel jpSegregationRows;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseCompanyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseEntity;
    private sa.lib.gui.bean.SBeanFieldText moTextBizPartner;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber), 150);
        moTextBizPartner.setTextSettings(SGuiUtils.getLabelName(jlBizPartner), 150);
        moKeyWarehouseCompanyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseCompanyBranch), false);
        moKeyWarehouseEntity.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseEntity), false);
        
        moFields.addField(moKeyWarehouseCompanyBranch);
        moFields.addField(moKeyWarehouseEntity);
        
        moFieldKeyEntityGroup = new SGuiFieldKeyGroup(miClient);

        moGridMatReqEty = new SGridPaneForm(miClient, SModConsts.TRN_MAT_REQ_ETY, SLibConsts.UNDEFINED, "Renglones de la requisición") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
                
//                JButton jbAuthCardex = SGridUtils.createButton(new ImageIcon(getClass().getResource("/erp/img/icon_std_kardex.gif")), "Ver entregas mensuales", this);
//        
//                getPanelCommandsSys(SGuiConsts.PANEL_CENTER).add(jbAuthCardex);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Requeridas"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Apartadas"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Existencias"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Libres"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Por apartar"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cant actual");
                col.setEditable(true);
                gridColumnsForm.add(col);

                return gridColumnsForm;
            }
        };
        jpReqMaterialRows.add(moGridMatReqEty, BorderLayout.CENTER);
        
        moGridSegregationRows = new SGridPaneForm(miClient, SModConsts.TRN_STK_SEG_WHS_ETY, SLibConsts.UNDEFINED, "Apartados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<SGridColumnForm>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Almacén"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Apartado"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "A liberar");
                col.setEditable(true);
                gridColumnsForm.add(col);

                return gridColumnsForm;
            }
        };
        jpSegRows.add(moGridSegregationRows, BorderLayout.CENTER);
        
        moTextNumber.setEditable(false);
        moTextBizPartner.setEditable(false);
        
        mnSegregationId = 0;
        
        reloadCatalogues();
        addAllListeners();
    }
    
    private void loadEntryMatRequestSelected() {
        SDbMaterialRequestEntry oMaterialRequestEntry = null;
        
        oMaterialRequestEntry = (SDbMaterialRequestEntry) moGridMatReqEty.getSelectedGridRow();

        if (oMaterialRequestEntry != null) {
            showSegregationEntries(oMaterialRequestEntry);
        }
    }

    @SuppressWarnings("unchecked")
    private void showMaterialRequestEntries() {
        Vector<SGridRow> rows = new Vector<>();

        try {
            mlMaterialRequestEntries = moMaterialRequest.getChildEntries();
            for (SDbMaterialRequestEntry oMaterialRequestEntry : mlMaterialRequestEntries) {
                STrnStockMove params = new STrnStockMove();
                params.setPkYearId(miClient.getSession().getCurrentYear());
                params.setPkItemId(oMaterialRequestEntry.getFkItemId());
                params.setPkUnitId(oMaterialRequestEntry.getFkUnitId());
                params.setPkCompanyBranchId(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[0] : 0);
                params.setPkWarehouseId(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[1] : 0);
                STrnStock oStock = STrnStockSegregationUtils.getAllStock((SClientInterface) miClient, params);
                
                SMaterialRequestEntryRow oRow = new SMaterialRequestEntryRow();
                oRow.setQuantity(oMaterialRequestEntry.getQuantity());
                oRow.setAuxSegregated(oStock.getSegregatedStock());
                oRow.setAuxStock(oStock.getAvailableStock());
                
                rows.add(oRow);
            }

            moGridMatReqEty.populateGrid(rows, this);
            moGridMatReqEty.clearSortKeys();
            moGridMatReqEty.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void showSegregationEntries(SDbMaterialRequestEntry oMaterialRequestEntry) {
        Vector<SGridRow> rows = new Vector<>();

        try {
            ArrayList<SDataStockSegregationWarehouseEntry> etys = SMaterialRequestUtils.getSegregationEtysOfMaterialRequest(miClient.getSession(), oMaterialRequestEntry.getPkMatRequestId(), oMaterialRequestEntry.getPkEntryId());
            for (SDataStockSegregationWarehouseEntry ety : etys) {
                rows.add(ety);
            }

            moGridSegregationRows.populateGrid(rows);
            moGridSegregationRows.clearSortKeys();
            moGridSegregationRows.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void initMaterialRequestData() {
        try {
            moTextNumber.setValue("");
            /*
            moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDelivery_n()));
            moTextDateEnd.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDocLapsing_n()));
            */
            moTextBizPartner.setValue("");

            showMaterialRequestEntries();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void actionSegregate() {
        if (moKeyWarehouseEntity.getSelectedIndex() == 0 || moKeyWarehouseCompanyBranch.getSelectedIndex() == 0) {
            miClient.showMsgBoxWarning("Debe seleccionar un almacén.");
            moKeyWarehouseCompanyBranch.requestFocus();
            return;
        }
        
        SMaterialRequestEntryRow oMatReqRow;
        double dToSegregate = 0d;
        for (int i = 0; i < moGridMatReqEty.getTable().getRowCount(); i++) {
            oMatReqRow = (SMaterialRequestEntryRow) moGridMatReqEty.getGridRow(i);
            if (oMatReqRow.getAuxToSegregate() > 0) {
                dToSegregate += oMatReqRow.getAuxToSegregate();
            }
        }
        
        if (dToSegregate == 0d) {
            miClient.showMsgBoxWarning("No hay nada que apartar.");
        }
        
        ArrayList<SDataStockSegregationWarehouseEntry> lSegregations = new ArrayList<>();
        SDataStockSegregationWarehouseEntry oSegEty;
        for (int i = 0; i < moGridMatReqEty.getTable().getRowCount(); i++) {
            oMatReqRow = (SMaterialRequestEntryRow) moGridMatReqEty.getGridRow(i);
            if (oMatReqRow.getAuxToSegregate() > 0) {
                oSegEty = new SDataStockSegregationWarehouseEntry();
                oSegEty.setPkStockSegregationId(mnSegregationId);
                oSegEty.setPkWarehouseId(moKeyWarehouseEntity.getValue()[1]);
                oSegEty.setQuantityIncrement(oMatReqRow.getAuxToSegregate());
                oSegEty.setQuantityDecrement(0d);
                oSegEty.setFkStockSegregationMovementTypeId(SDataConstantsSys.TRNS_TP_STK_SEG_INC);
                oSegEty.setFkYearId(miClient.getSession().getCurrentYear());
                oSegEty.setFkItemId(oMatReqRow.getFkItemId());
                oSegEty.setFkUnitId(oMatReqRow.getFkUnitId());
                oSegEty.setFkMatRequestId_n(oMatReqRow.getPkMatRequestId());
                oSegEty.setFkMatRequestEtyId_n(oMatReqRow.getPkEntryId());
                
                lSegregations.add(oSegEty);
            }
        }
        
        try {
            STrnStockSegregationUtils.saveSegregations(miClient.getSession(), lSegregations, mnSegregationId, moKeyWarehouseEntity.getValue(), moMaterialRequest.getPkMatRequestId());
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogMaterialRequestSegregation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setFormParams(final int[] pk) {
        moMaterialRequest = (SDbMaterialRequest) miClient.getSession().readRegistry(SModConsts.TRN_MAT_REQ, new int[] { pk[0] });
        try {
            mnSegregationId = STrnStockSegregationUtils.getStockSegregationIdByReference(miClient.getSession(), new int[] { pk[0] }, SDataConstantsSys.TRNS_TP_STK_SEG_REQ_MAT);
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogMaterialRequestSegregation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jlBizPartner.setText("");
        initMaterialRequestData();
    }
    
    @Override
    public void addAllListeners() {
        jbSegregate.addActionListener(this);
        
        moKeyWarehouseCompanyBranch.addItemListener(this);
        moKeyWarehouseEntity.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSegregate.removeActionListener(this);
        
        moKeyWarehouseCompanyBranch.removeItemListener(this);
        moKeyWarehouseEntity.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyEntityGroup.initGroup();
        moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseCompanyBranch, SModConsts.BPSU_BPB, SLibConsts.UNDEFINED, new SGuiParams(new int[] { miClient.getSession().getConfigCompany().getCompanyId() }));
        moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseEntity, SModConsts.CFGU_COB_ENT, SLibConsts.UNDEFINED,
                new SGuiParams(new int[] { ((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey()[0],
                    SModSysConsts.CFGS_CT_ENT_WH }));
        moFieldKeyEntityGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridMatReqEty.getTable().getSelectedRowCount() != -1) {
                loadEntryMatRequestSelected();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbSegregate) {
                actionSegregate();
            }
        }
    }
}
