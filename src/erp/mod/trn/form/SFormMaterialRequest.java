/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.trn.db.SDbItemCost;
import erp.mod.trn.db.SDbMaterialRequest;
import erp.mod.trn.db.SDbMaterialRequestEntry;
import erp.mod.trn.db.SDbMaterialRequestNote;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;

/**
 *
 * @author Isabel Servín
 * 
 */
public class SFormMaterialRequest extends sa.lib.gui.bean.SBeanForm implements SGridPaneFormOwner, ActionListener, ListSelectionListener, ItemListener {

    private SDbMaterialRequest moRegistry;
    private ArrayList<SDbMaterialRequestEntry> maMatReqEntries;
    private ArrayList<SDbMaterialRequestNote> maMatReqNotes;

    /**
     * Creates new form SFormItemCost
     * @param client
     * @param title
     */
    public SFormMaterialRequest(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_MAT_REQ, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpRegistry = new javax.swing.JPanel();
        jpCaptureArea = new javax.swing.JPanel();
        jpRequest = new javax.swing.JPanel();
        jpReq1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlProvEnt = new javax.swing.JLabel();
        moKeyProvEnt = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel7 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        jlUsrReq = new javax.swing.JLabel();
        moKeyUsrReq = new sa.lib.gui.bean.SBeanFieldKey();
        jpReq2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlContractor = new javax.swing.JLabel();
        moKeyContractor = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moTextReferecnce = new sa.lib.gui.bean.SBeanFieldText();
        jbImport = new javax.swing.JButton();
        moBoolImport = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel16 = new javax.swing.JPanel();
        jlConsEnt = new javax.swing.JLabel();
        moKeyConsEnt = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlConsSubent = new javax.swing.JLabel();
        moKeyConsSubent = new sa.lib.gui.bean.SBeanFieldKey();
        jpReq3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDateReq = new javax.swing.JLabel();
        moDateReq = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlPriReq = new javax.swing.JLabel();
        moKeyPriReq = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        moBoolClosed = new sa.lib.gui.bean.SBeanFieldBoolean();
        moTextUsrClo = new sa.lib.gui.bean.SBeanFieldText();
        moTe = new sa.lib.gui.bean.SBeanFieldText();
        jPanel27 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        sBeanFieldText4 = new sa.lib.gui.bean.SBeanFieldText();
        jpReqNotes = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlReqNotes = new javax.swing.JLabel();
        moTextReqNotes = new sa.lib.gui.bean.SBeanFieldText();
        jpEntry = new javax.swing.JPanel();
        jpEtyCapture = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        sBeanFieldText6 = new sa.lib.gui.bean.SBeanFieldText();
        sBeanFieldText7 = new sa.lib.gui.bean.SBeanFieldText();
        jbFkOriginalUnitId = new javax.swing.JButton();
        sBeanFieldBoolean3 = new sa.lib.gui.bean.SBeanFieldBoolean();
        sBeanFieldText8 = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        sBeanFieldKey7 = new sa.lib.gui.bean.SBeanFieldKey();
        sBeanFieldDecimal1 = new sa.lib.gui.bean.SBeanFieldDecimal();
        sBeanFieldDecimal2 = new sa.lib.gui.bean.SBeanFieldDecimal();
        sBeanFieldKey10 = new sa.lib.gui.bean.SBeanFieldKey();
        sBeanFieldInteger2 = new sa.lib.gui.bean.SBeanFieldInteger();
        sBeanFieldKey8 = new sa.lib.gui.bean.SBeanFieldKey();
        sBeanFieldKey9 = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel20 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        sBeanFieldDate3 = new sa.lib.gui.bean.SBeanFieldDate();
        sBeanFieldKey11 = new sa.lib.gui.bean.SBeanFieldKey();
        sBeanFieldText9 = new sa.lib.gui.bean.SBeanFieldText();
        jpEtyButtons = new javax.swing.JPanel();
        jpEtyButtons2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jPanel22 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jpCfdiConcepts = new javax.swing.JPanel();
        jpEntries = new javax.swing.JPanel();

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpCaptureArea.setLayout(new java.awt.BorderLayout());

        jpRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Requisición:"));
        jpRequest.setLayout(new java.awt.BorderLayout());

        jpReq1.setLayout(new java.awt.GridLayout(4, 0));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlProvEnt.setText("Ent. suministro:*");
        jlProvEnt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlProvEnt);

        moKeyProvEnt.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moKeyProvEnt);

        jpReq1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlNumber.setText("Folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlNumber);

        moIntNumber.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel5.add(moIntNumber);

        jpReq1.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlDate.setText("Fecha:*");
        jlDate.setToolTipText("");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDate);
        jPanel7.add(moDate);

        jpReq1.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlUsrReq.setText("Solicitante:*");
        jlUsrReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlUsrReq);

        moKeyUsrReq.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moKeyUsrReq);

        jpReq1.add(jPanel8);

        jpRequest.add(jpReq1, java.awt.BorderLayout.WEST);

        jpReq2.setLayout(new java.awt.GridLayout(4, 0));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlContractor.setText("Contratista:");
        jlContractor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlContractor);

        moKeyContractor.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyContractor);

        jpReq2.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlReference.setText("Referencia:");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlReference);

        moTextReferecnce.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel15.add(moTextReferecnce);

        jbImport.setText("Importar");
        jbImport.setPreferredSize(new java.awt.Dimension(79, 23));
        jPanel15.add(jbImport);

        moBoolImport.setText("Importado");
        jPanel15.add(moBoolImport);

        jpReq2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsEnt.setText("Ent. consumo:*");
        jlConsEnt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlConsEnt);

        moKeyConsEnt.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyConsEnt);

        jpReq2.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsSubent.setText("Subent. cons.:");
        jlConsSubent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlConsSubent);

        moKeyConsSubent.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(moKeyConsSubent);

        jpReq2.add(jPanel17);

        jpRequest.add(jpReq2, java.awt.BorderLayout.CENTER);

        jpReq3.setLayout(new java.awt.GridLayout(4, 0));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlDateReq.setText("Fecha requerida:");
        jlDateReq.setToolTipText("");
        jlDateReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDateReq);
        jPanel1.add(moDateReq);

        jpReq3.add(jPanel1);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPriReq.setText("Prioridad req.:*");
        jlPriReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPriReq);

        moKeyPriReq.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyPriReq);

        jpReq3.add(jPanel6);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        moBoolClosed.setText("Cerrado");
        jPanel26.add(moBoolClosed);

        moTextUsrClo.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(moTextUsrClo);

        moTe.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel26.add(moTe);

        jpReq3.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel8.setText("Estatus:");
        jLabel8.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jLabel8);

        sBeanFieldText4.setPreferredSize(new java.awt.Dimension(197, 23));
        jPanel27.add(sBeanFieldText4);

        jpReq3.add(jPanel27);

        jpRequest.add(jpReq3, java.awt.BorderLayout.EAST);

        jpReqNotes.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlReqNotes.setText("Notas:");
        jlReqNotes.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel2.add(jlReqNotes);

        moTextReqNotes.setPreferredSize(new java.awt.Dimension(895, 23));
        jPanel2.add(moTextReqNotes);

        jpReqNotes.add(jPanel2);

        jpRequest.add(jpReqNotes, java.awt.BorderLayout.SOUTH);

        jpCaptureArea.add(jpRequest, java.awt.BorderLayout.NORTH);

        jpEntry.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida:"));
        jpEntry.setLayout(new java.awt.BorderLayout());

        jpEtyCapture.setLayout(new java.awt.GridLayout(6, 0));

        jPanel9.setPreferredSize(new java.awt.Dimension(636, 23));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel13.setText("Ítem:*");
        jLabel13.setPreferredSize(new java.awt.Dimension(550, 23));
        jPanel9.add(jLabel13);

        jLabel14.setText("Descripción:");
        jPanel9.add(jLabel14);

        jpEtyCapture.add(jPanel9);

        jPanel11.setPreferredSize(new java.awt.Dimension(902, 23));
        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        sBeanFieldText6.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel11.add(sBeanFieldText6);

        sBeanFieldText7.setPreferredSize(new java.awt.Dimension(340, 23));
        jPanel11.add(sBeanFieldText7);

        jbFkOriginalUnitId.setText("...");
        jbFkOriginalUnitId.setToolTipText("Seleccionar unidad");
        jbFkOriginalUnitId.setFocusable(false);
        jbFkOriginalUnitId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbFkOriginalUnitId);

        sBeanFieldBoolean3.setText("Nuevo ítem");
        jPanel11.add(sBeanFieldBoolean3);

        sBeanFieldText8.setPreferredSize(new java.awt.Dimension(340, 23));
        jPanel11.add(sBeanFieldText8);

        jpEtyCapture.add(jPanel11);

        jPanel12.setPreferredSize(new java.awt.Dimension(890, 23));
        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel15.setText("Presentación:");
        jLabel15.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jLabel15);

        jLabel16.setText("Fact. conv.:");
        jLabel16.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jLabel16);

        jLabel17.setText("Cant. req.:");
        jLabel17.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jLabel17);

        jLabel18.setText("Unidad:");
        jLabel18.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jLabel18);

        jLabel19.setText("Días consumo:");
        jLabel19.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jLabel19);

        jLabel20.setText("Enditad consumo:");
        jLabel20.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jLabel20);

        jLabel21.setText("Subentidad consumo:");
        jLabel21.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jLabel21);

        jpEtyCapture.add(jPanel12);

        jPanel13.setPreferredSize(new java.awt.Dimension(890, 23));
        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        sBeanFieldKey7.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(sBeanFieldKey7);
        jPanel13.add(sBeanFieldDecimal1);
        jPanel13.add(sBeanFieldDecimal2);
        jPanel13.add(sBeanFieldKey10);
        jPanel13.add(sBeanFieldInteger2);

        sBeanFieldKey8.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(sBeanFieldKey8);

        sBeanFieldKey9.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(sBeanFieldKey9);

        jpEtyCapture.add(jPanel13);

        jPanel20.setPreferredSize(new java.awt.Dimension(375, 23));
        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel22.setText("Fecha requerida:");
        jLabel22.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel20.add(jLabel22);

        jLabel27.setText("Prioridad:");
        jLabel27.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel20.add(jLabel27);

        jLabel23.setText("Notas:");
        jLabel23.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jLabel23);

        jpEtyCapture.add(jPanel20);

        jPanel25.setPreferredSize(new java.awt.Dimension(903, 28));
        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel25.add(sBeanFieldDate3);

        sBeanFieldKey11.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel25.add(sBeanFieldKey11);

        sBeanFieldText9.setPreferredSize(new java.awt.Dimension(630, 23));
        jPanel25.add(sBeanFieldText9);

        jpEtyCapture.add(jPanel25);

        jpEntry.add(jpEtyCapture, java.awt.BorderLayout.CENTER);

        jpEtyButtons.setLayout(new java.awt.BorderLayout());

        jpEtyButtons2.setLayout(new java.awt.GridLayout(4, 0));

        jButton4.setText("Registrar");
        jButton4.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel21.add(jButton4);

        jpEtyButtons2.add(jPanel21);

        jButton3.setText("Editar");
        jButton3.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel22.add(jButton3);

        jpEtyButtons2.add(jPanel22);

        jButton5.setText("Eliminar");
        jButton5.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel23.add(jButton5);

        jpEtyButtons2.add(jPanel23);
        jpEtyButtons2.add(jPanel24);

        jpEtyButtons.add(jpEtyButtons2, java.awt.BorderLayout.NORTH);

        jpEntry.add(jpEtyButtons, java.awt.BorderLayout.EAST);

        jpCaptureArea.add(jpEntry, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpCaptureArea, java.awt.BorderLayout.NORTH);

        jpCfdiConcepts.setLayout(new java.awt.BorderLayout(0, 5));

        jpEntries.setName(""); // NOI18N
        jpEntries.setLayout(new java.awt.BorderLayout());
        jpCfdiConcepts.add(jpEntries, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpCfdiConcepts, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbFkOriginalUnitId;
    private javax.swing.JButton jbImport;
    private javax.swing.JLabel jlConsEnt;
    private javax.swing.JLabel jlConsSubent;
    private javax.swing.JLabel jlContractor;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateReq;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPriReq;
    private javax.swing.JLabel jlProvEnt;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlReqNotes;
    private javax.swing.JLabel jlUsrReq;
    private javax.swing.JPanel jpCaptureArea;
    private javax.swing.JPanel jpCfdiConcepts;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpEntry;
    private javax.swing.JPanel jpEtyButtons;
    private javax.swing.JPanel jpEtyButtons2;
    private javax.swing.JPanel jpEtyCapture;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpReq1;
    private javax.swing.JPanel jpReq2;
    private javax.swing.JPanel jpReq3;
    private javax.swing.JPanel jpReqNotes;
    private javax.swing.JPanel jpRequest;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolClosed;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolImport;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateReq;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsEnt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsSubent;
    private sa.lib.gui.bean.SBeanFieldKey moKeyContractor;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPriReq;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProvEnt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUsrReq;
    private sa.lib.gui.bean.SBeanFieldText moTe;
    private sa.lib.gui.bean.SBeanFieldText moTextReferecnce;
    private sa.lib.gui.bean.SBeanFieldText moTextReqNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextUsrClo;
    private sa.lib.gui.bean.SBeanFieldBoolean sBeanFieldBoolean3;
    private sa.lib.gui.bean.SBeanFieldDate sBeanFieldDate3;
    private sa.lib.gui.bean.SBeanFieldDecimal sBeanFieldDecimal1;
    private sa.lib.gui.bean.SBeanFieldDecimal sBeanFieldDecimal2;
    private sa.lib.gui.bean.SBeanFieldInteger sBeanFieldInteger2;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey10;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey11;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey7;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey8;
    private sa.lib.gui.bean.SBeanFieldKey sBeanFieldKey9;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText4;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText6;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText7;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText8;
    private sa.lib.gui.bean.SBeanFieldText sBeanFieldText9;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart), true);
        moCurCost.setCompoundFieldSettings(miClient);
        moCurCost.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCost), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        
        moFields.addField(moKeyItem);
        moFields.addField(moDateDateStart);
        moFields.addField(moCurCost.getField());

        moFields.setFormButton(jbSave);
        
        jbPickItem.addActionListener(this);
    }
    
    private SGuiValidation validateRegistryUnicity() {
        SGuiValidation validation = new SGuiValidation();
        validation.setValid(true);
        
        if (moRegistry.isRegistryNew()) {
            try {
                String sql = "SELECT b_del FROM trn_item_cost " +
                    "WHERE fk_item = " + moKeyItem.getValue()[0] + " " +
                    "AND fk_unit = " + moDataUnit.getPkUnitId() + " " +
                    "AND dt_sta = '" + SLibUtils.DbmsDateFormatDate.format(moDateDateStart.getValue()) + "';";

                ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
                if (resultSet.next()) {
                    validation.setMessage("Ya existe un registro para este ítem, unidad y fecha." +
                            (resultSet.getBoolean("b_del") ? "\nEl registro en cuestión está eliminado." : ""));
                }
            }
            catch (Exception e) {
                miClient.showMsgBoxError(e.getMessage());
            }
        }
        return validation;
    }

    private void actionPerformedPickItem() {
        int[] key;
        SGuiOptionPicker picker;

        picker = miClient.getSession().getModule(SModConsts.MOD_ITM_N).getOptionPicker(SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != SLibConsts.UNDEFINED) {
                    moKeyItem.setValue(new int[] { key[0] });
                }
            }
        }
    }
    
    private void itemStateChangedItem() {
        try {
            if(moKeyItem.getSelectedIndex() <= 0) {
                moDataUnit = null;
                
                moUnit.setValue("");
            }
            else {
                SDataItem item = (SDataItem) SDataUtilities.readRegistry((SClientInterface) miClient,
                                SDataConstants.ITMU_ITEM, moKeyItem.getValue(), SLibConstants.EXEC_MODE_SILENT);
                moDataUnit = item.getDbmsDataUnit();
                
                moUnit.setValue(moDataUnit.getUnit());
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    @Override
    public void addAllListeners() {
        moKeyItem.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyItem.removeItemListener(this); 
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbItemCost) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDateStart(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moKeyItem.setValue(new int[] { moRegistry.getFkItemId() });
        itemStateChangedItem();
        moDateDateStart.setValue(moRegistry.getDateStart());
        moCurCost.getField().setValue(moRegistry.getCost());
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbItemCost registry = (SDbItemCost) moRegistry.clone();

        if (registry.isRegistryNew()) {}
        
        moRegistry.setFkItemId(moKeyItem.getValue()[0]);
        moRegistry.setFkUnitId(moDataUnit.getPkUnitId());
        moRegistry.setDateStart(moDateDateStart.getValue());
        moRegistry.setCost(moCurCost.getField().getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            validation = validateRegistryUnicity();
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbPickItem) {
                actionPerformedPickItem();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            if (field == moKeyItem) {
                itemStateChangedItem();
            }
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
