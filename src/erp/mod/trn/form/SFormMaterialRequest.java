/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.cfg.utils.SAuthorizationUtils;
import erp.mod.trn.db.SDbMaterialRequest;
import erp.mod.trn.db.SDbMaterialRequestEntry;
import erp.mod.trn.db.SDbMaterialRequestEntryNote;
import erp.mod.trn.db.SDbMaterialRequestNote;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 * 
 */
public class SFormMaterialRequest extends sa.lib.gui.bean.SBeanForm implements SGridPaneFormOwner, ActionListener, ListSelectionListener, ItemListener, FocusListener {

    private SDbMaterialRequest moRegistry;
    private ArrayList<SDbMaterialRequestEntry> maMatReqEntries;
    private ArrayList<SDbMaterialRequestNote> maMatReqNotes;
    private SGridPaneForm moGridMatReqList;
    
    private boolean isEtyNew;
    private boolean isCapturingData;
    private boolean isRegistryEditable;
    private boolean hasUserRevRight;
    private boolean hasUserProvRight;
    
    private int mnStatusReqId;
    
    private SGuiFieldKeyGroup moFieldKeyConsEntity;
    private SGuiFieldKeyGroup moFieldKeyConsEntityEty;
    private SGuiFields moFieldsEty;
    private SDataItem moItemEty;
    
    private JButton jbSaveAndSend;

    /**
     * Creates new form SFormItemCost
     * @param client
     * @param title
     * @param type
     */
    public SFormMaterialRequest(SGuiClient client, String title, int type) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_MAT_REQ, type, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jpRegistry = new javax.swing.JPanel();
        jpCaptureArea = new javax.swing.JPanel();
        jpRequest = new javax.swing.JPanel();
        jpReq1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlProvEnt = new javax.swing.JLabel();
        moKeyProvEnt = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel7 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        jlUsrReq = new javax.swing.JLabel();
        moKeyUsrReq = new sa.lib.gui.bean.SBeanFieldKey();
        jpReq2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlConsEnt = new javax.swing.JLabel();
        moKeyConsEnt = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlConsSubent = new javax.swing.JLabel();
        moKeyConsSubent = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel16 = new javax.swing.JPanel();
        jlContractor = new javax.swing.JLabel();
        moKeyContractor = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlReference = new javax.swing.JLabel();
        moTextReferecnce = new sa.lib.gui.bean.SBeanFieldText();
        jbImport = new javax.swing.JButton();
        moBoolImport = new sa.lib.gui.bean.SBeanFieldBoolean();
        jpReq3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlDateReq = new javax.swing.JLabel();
        moDateReq = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlPriReq = new javax.swing.JLabel();
        moKeyPriReq = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlReqStatus = new javax.swing.JLabel();
        moTextReqStatus = new sa.lib.gui.bean.SBeanFieldText();
        jPanel27 = new javax.swing.JPanel();
        jpReqNotes = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlReqNotes = new javax.swing.JLabel();
        moTextReqNotes = new sa.lib.gui.bean.SBeanFieldText();
        jpEty = new javax.swing.JPanel();
        jpEtyCapture = new javax.swing.JPanel();
        jpItem = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItemCode = new sa.lib.gui.bean.SBeanFieldText();
        moTextItemName = new sa.lib.gui.bean.SBeanFieldText();
        jbPickItem = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        moBoolNewItem = new sa.lib.gui.bean.SBeanFieldBoolean();
        moTextItemDescription = new sa.lib.gui.bean.SBeanFieldText();
        jPanel44 = new javax.swing.JPanel();
        jlQty = new javax.swing.JLabel();
        moDecQty = new sa.lib.gui.bean.SBeanFieldDecimal();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jlConsEntEty = new javax.swing.JLabel();
        moKeyConsEntEty = new sa.lib.gui.bean.SBeanFieldKey();
        jlDateReqEty = new javax.swing.JLabel();
        moDateReqEty = new sa.lib.gui.bean.SBeanFieldDate();
        jlSpace = new javax.swing.JLabel();
        jPanel45 = new javax.swing.JPanel();
        jlConsDays = new javax.swing.JLabel();
        moIntConsDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jLabel5 = new javax.swing.JLabel();
        jlConsSubentEty = new javax.swing.JLabel();
        moKeyConsSubentEty = new sa.lib.gui.bean.SBeanFieldKey();
        jlPriEty = new javax.swing.JLabel();
        moKeyPriEty = new sa.lib.gui.bean.SBeanFieldKey();
        jlSpace3 = new javax.swing.JLabel();
        jPanel46 = new javax.swing.JPanel();
        jlPresentation = new javax.swing.JLabel();
        moKeyPresentation = new sa.lib.gui.bean.SBeanFieldKey();
        jlFactConv = new javax.swing.JLabel();
        moDecFactConv = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpButtons = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jbNewEty = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jbRegisterEty = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jbEditEty = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jbDeleteEty = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlEtyNotes = new javax.swing.JLabel();
        moTextEtyNotes = new sa.lib.gui.bean.SBeanFieldText();
        jpTable = new javax.swing.JPanel();
        jpEntries = new javax.swing.JPanel();
        jpValidate = new javax.swing.JPanel();
        jpEstados = new javax.swing.JPanel();
        jlAuthStatus = new javax.swing.JLabel();
        moTextAuthStatus = new sa.lib.gui.bean.SBeanFieldText();
        jbAuthorize = new javax.swing.JButton();
        jbReject = new javax.swing.JButton();
        jlspace = new javax.swing.JLabel();
        jlProvStatus = new javax.swing.JLabel();
        moTextProvStatus = new sa.lib.gui.bean.SBeanFieldText();
        moBoolProvClosed = new sa.lib.gui.bean.SBeanFieldBoolean();
        jlPurStatus = new javax.swing.JLabel();
        moTextPurStatus = new sa.lib.gui.bean.SBeanFieldText();
        moBoolPurClosed = new sa.lib.gui.bean.SBeanFieldBoolean();

        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpCaptureArea.setLayout(new java.awt.BorderLayout());

        jpRequest.setBorder(javax.swing.BorderFactory.createTitledBorder("Requisición:"));
        jpRequest.setLayout(new java.awt.BorderLayout());

        jpReq1.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProvEnt.setText("Ent. suministro:*");
        jlProvEnt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlProvEnt);

        moKeyProvEnt.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moKeyProvEnt);

        jpReq1.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlNumber);

        moIntNumber.setEnabled(false);
        moIntNumber.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel5.add(moIntNumber);

        jpReq1.add(jPanel5);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setToolTipText("");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDate);

        moDate.setEditable(false);
        moDate.setEnabled(false);
        jPanel7.add(moDate);

        jpReq1.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUsrReq.setText("Solicitante:*");
        jlUsrReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlUsrReq);

        moKeyUsrReq.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel8.add(moKeyUsrReq);

        jpReq1.add(jPanel8);

        jpRequest.add(jpReq1, java.awt.BorderLayout.WEST);

        jpReq2.setLayout(new java.awt.GridLayout(4, 0));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsEnt.setText("Ent. consumo:*");
        jlConsEnt.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlConsEnt);

        moKeyConsEnt.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel14.add(moKeyConsEnt);

        jpReq2.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsSubent.setText("Subent. cons.:");
        jlConsSubent.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlConsSubent);

        moKeyConsSubent.setEnabled(false);
        moKeyConsSubent.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moKeyConsSubent);

        jpReq2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlContractor.setText("Contratista:");
        jlContractor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlContractor);

        moKeyContractor.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyContractor);

        jpReq2.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReference.setText("Referencia:");
        jlReference.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlReference);

        moTextReferecnce.setEnabled(false);
        moTextReferecnce.setPreferredSize(new java.awt.Dimension(73, 23));
        jPanel17.add(moTextReferecnce);

        jbImport.setText("Importar");
        jbImport.setEnabled(false);
        jbImport.setPreferredSize(new java.awt.Dimension(79, 23));
        jPanel17.add(jbImport);

        moBoolImport.setText("Importado");
        moBoolImport.setEnabled(false);
        jPanel17.add(moBoolImport);

        jpReq2.add(jPanel17);

        jpRequest.add(jpReq2, java.awt.BorderLayout.CENTER);

        jpReq3.setLayout(new java.awt.GridLayout(4, 0));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateReq.setText("Fecha requerida:");
        jlDateReq.setToolTipText("");
        jlDateReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlDateReq);
        jPanel1.add(moDateReq);

        jpReq3.add(jPanel1);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPriReq.setText("Prioridad:*");
        jlPriReq.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPriReq);

        moKeyPriReq.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyPriReq);

        jpReq3.add(jPanel6);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReqStatus.setText("Estatus:");
        jlReqStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlReqStatus);

        moTextReqStatus.setEditable(false);
        moTextReqStatus.setEnabled(false);
        moTextReqStatus.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel26.add(moTextReqStatus);

        jpReq3.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jpReq3.add(jPanel27);

        jpRequest.add(jpReq3, java.awt.BorderLayout.EAST);

        jpReqNotes.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlReqNotes.setText("Notas:");
        jlReqNotes.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel2.add(jlReqNotes);

        moTextReqNotes.setPreferredSize(new java.awt.Dimension(895, 23));
        jPanel2.add(moTextReqNotes);

        jpReqNotes.add(jPanel2);

        jpRequest.add(jpReqNotes, java.awt.BorderLayout.SOUTH);

        jpCaptureArea.add(jpRequest, java.awt.BorderLayout.NORTH);

        jpEty.setBorder(javax.swing.BorderFactory.createTitledBorder("Partida:"));
        jpEty.setLayout(new java.awt.BorderLayout());

        jpEtyCapture.setLayout(new java.awt.BorderLayout(0, 5));

        jpItem.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel29.add(jlItem);

        moTextItemCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(moTextItemCode);

        moTextItemName.setEditable(false);
        moTextItemName.setEnabled(false);
        moTextItemName.setPreferredSize(new java.awt.Dimension(690, 23));
        jPanel29.add(moTextItemName);

        jbPickItem.setText("...");
        jbPickItem.setToolTipText("Seleccionar unidad");
        jbPickItem.setFocusable(false);
        jbPickItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel29.add(jbPickItem);

        jpItem.add(jPanel29);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolNewItem.setText("Nuevo ítem");
        jPanel30.add(moBoolNewItem);

        moTextItemDescription.setEnabled(false);
        moTextItemDescription.setPreferredSize(new java.awt.Dimension(800, 23));
        jPanel30.add(moTextItemDescription);

        jpItem.add(jPanel30);

        jPanel44.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQty.setText("Cant. requerida:*");
        jlQty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jlQty);

        moDecQty.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel44.add(moDecQty);

        moKeyUnit.setEditable(true);
        moKeyUnit.setEnabled(false);
        jPanel44.add(moKeyUnit);

        jlConsEntEty.setText("Ent. consumo:");
        jlConsEntEty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jlConsEntEty);

        moKeyConsEntEty.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel44.add(moKeyConsEntEty);

        jlDateReqEty.setText("Fecha requerida:");
        jlDateReqEty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel44.add(jlDateReqEty);
        jPanel44.add(moDateReqEty);

        jlSpace.setPreferredSize(new java.awt.Dimension(51, 23));
        jlSpace.setVerifyInputWhenFocusTarget(false);
        jPanel44.add(jlSpace);

        jpItem.add(jPanel44);

        jPanel45.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsDays.setText("Días consumo:");
        jlConsDays.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.add(jlConsDays);

        moIntConsDays.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel45.add(moIntConsDays);

        jLabel5.setText("(estimación)");
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 23));
        jLabel5.setVerifyInputWhenFocusTarget(false);
        jPanel45.add(jLabel5);

        jlConsSubentEty.setText("Subent. cons.:");
        jlConsSubentEty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.add(jlConsSubentEty);

        moKeyConsSubentEty.setEnabled(false);
        moKeyConsSubentEty.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel45.add(moKeyConsSubentEty);

        jlPriEty.setText("Prioridad:");
        jlPriEty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel45.add(jlPriEty);

        moKeyPriEty.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel45.add(moKeyPriEty);

        jlSpace3.setPreferredSize(new java.awt.Dimension(4, 23));
        jlSpace3.setVerifyInputWhenFocusTarget(false);
        jPanel45.add(jlSpace3);

        jpItem.add(jPanel45);

        jPanel46.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPresentation.setText("Presentación:");
        jlPresentation.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel46.add(jlPresentation);

        moKeyPresentation.setEnabled(false);
        moKeyPresentation.setPreferredSize(new java.awt.Dimension(236, 23));
        jPanel46.add(moKeyPresentation);

        jlFactConv.setText("Fact. conversión:");
        jlFactConv.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel46.add(jlFactConv);

        moDecFactConv.setToolTipText("Factor de conversión");
        moDecFactConv.setEnabled(false);
        jPanel46.add(moDecFactConv);

        jpItem.add(jPanel46);

        jpEtyCapture.add(jpItem, java.awt.BorderLayout.CENTER);

        jpButtons.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 0));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbNewEty.setText("Nuevo");
        jbNewEty.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel9.add(jbNewEty);

        jPanel13.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbRegisterEty.setText("Agregar");
        jbRegisterEty.setEnabled(false);
        jbRegisterEty.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel10.add(jbRegisterEty);

        jPanel13.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbEditEty.setText("Modificar");
        jbEditEty.setEnabled(false);
        jbEditEty.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel11.add(jbEditEty);

        jPanel13.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbDeleteEty.setText("Eliminar");
        jbDeleteEty.setEnabled(false);
        jbDeleteEty.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel12.add(jbDeleteEty);

        jPanel13.add(jPanel12);

        jpButtons.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpEtyCapture.add(jpButtons, java.awt.BorderLayout.EAST);

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEtyNotes.setText("Notas:");
        jlEtyNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlEtyNotes);

        moTextEtyNotes.setPreferredSize(new java.awt.Dimension(890, 23));
        jPanel19.add(moTextEtyNotes);

        jPanel18.add(jPanel19, java.awt.BorderLayout.CENTER);

        jpEtyCapture.add(jPanel18, java.awt.BorderLayout.SOUTH);

        jpEty.add(jpEtyCapture, java.awt.BorderLayout.CENTER);

        jpCaptureArea.add(jpEty, java.awt.BorderLayout.PAGE_END);

        jpRegistry.add(jpCaptureArea, java.awt.BorderLayout.NORTH);

        jpTable.setLayout(new java.awt.BorderLayout(0, 5));

        jpEntries.setName(""); // NOI18N
        jpEntries.setLayout(new java.awt.BorderLayout());
        jpTable.add(jpEntries, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpTable, java.awt.BorderLayout.CENTER);

        jpValidate.setLayout(new java.awt.BorderLayout());

        jpEstados.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlAuthStatus.setText("Autorización:");
        jpEstados.add(jlAuthStatus);

        moTextAuthStatus.setEnabled(false);
        moTextAuthStatus.setPreferredSize(new java.awt.Dimension(110, 23));
        jpEstados.add(moTextAuthStatus);

        jbAuthorize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_st_thumbs_up.png"))); // NOI18N
        jbAuthorize.setToolTipText("Autorizar");
        jbAuthorize.setEnabled(false);
        jbAuthorize.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEstados.add(jbAuthorize);

        jbReject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_st_thumbs_down.png"))); // NOI18N
        jbReject.setToolTipText("Rechazar");
        jbReject.setEnabled(false);
        jbReject.setPreferredSize(new java.awt.Dimension(23, 23));
        jpEstados.add(jbReject);

        jlspace.setPreferredSize(new java.awt.Dimension(10, 23));
        jpEstados.add(jlspace);

        jlProvStatus.setText("Suministro:");
        jpEstados.add(jlProvStatus);

        moTextProvStatus.setEnabled(false);
        moTextProvStatus.setPreferredSize(new java.awt.Dimension(110, 23));
        jpEstados.add(moTextProvStatus);

        moBoolProvClosed.setText("Terminado");
        moBoolProvClosed.setToolTipText("Cerrado para suministro");
        moBoolProvClosed.setEnabled(false);
        moBoolProvClosed.setPreferredSize(new java.awt.Dimension(125, 23));
        jpEstados.add(moBoolProvClosed);

        jlPurStatus.setText("Compras:");
        jpEstados.add(jlPurStatus);

        moTextPurStatus.setEnabled(false);
        moTextPurStatus.setPreferredSize(new java.awt.Dimension(110, 23));
        jpEstados.add(moTextPurStatus);

        moBoolPurClosed.setText("Terminado");
        moBoolPurClosed.setToolTipText("Cerrado para suministro");
        moBoolPurClosed.setEnabled(false);
        moBoolPurClosed.setPreferredSize(new java.awt.Dimension(125, 23));
        jpEstados.add(moBoolPurClosed);

        jpValidate.add(jpEstados, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpValidate, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAuthorize;
    private javax.swing.JButton jbDeleteEty;
    private javax.swing.JButton jbEditEty;
    private javax.swing.JButton jbImport;
    private javax.swing.JButton jbNewEty;
    private javax.swing.JButton jbPickItem;
    private javax.swing.JButton jbRegisterEty;
    private javax.swing.JButton jbReject;
    private javax.swing.JLabel jlAuthStatus;
    private javax.swing.JLabel jlConsDays;
    private javax.swing.JLabel jlConsEnt;
    private javax.swing.JLabel jlConsEntEty;
    private javax.swing.JLabel jlConsSubent;
    private javax.swing.JLabel jlConsSubentEty;
    private javax.swing.JLabel jlContractor;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateReq;
    private javax.swing.JLabel jlDateReqEty;
    private javax.swing.JLabel jlEtyNotes;
    private javax.swing.JLabel jlFactConv;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPresentation;
    private javax.swing.JLabel jlPriEty;
    private javax.swing.JLabel jlPriReq;
    private javax.swing.JLabel jlProvEnt;
    private javax.swing.JLabel jlProvStatus;
    private javax.swing.JLabel jlPurStatus;
    private javax.swing.JLabel jlQty;
    private javax.swing.JLabel jlReference;
    private javax.swing.JLabel jlReqNotes;
    private javax.swing.JLabel jlReqStatus;
    private javax.swing.JLabel jlSpace;
    private javax.swing.JLabel jlSpace3;
    private javax.swing.JLabel jlUsrReq;
    private javax.swing.JLabel jlspace;
    private javax.swing.JPanel jpButtons;
    private javax.swing.JPanel jpCaptureArea;
    private javax.swing.JPanel jpEntries;
    private javax.swing.JPanel jpEstados;
    private javax.swing.JPanel jpEty;
    private javax.swing.JPanel jpEtyCapture;
    private javax.swing.JPanel jpItem;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpReq1;
    private javax.swing.JPanel jpReq2;
    private javax.swing.JPanel jpReq3;
    private javax.swing.JPanel jpReqNotes;
    private javax.swing.JPanel jpRequest;
    private javax.swing.JPanel jpTable;
    private javax.swing.JPanel jpValidate;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolImport;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolNewItem;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolProvClosed;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPurClosed;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateReq;
    private sa.lib.gui.bean.SBeanFieldDate moDateReqEty;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecFactConv;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecQty;
    private sa.lib.gui.bean.SBeanFieldInteger moIntConsDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsEnt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsEntEty;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsSubent;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsSubentEty;
    private sa.lib.gui.bean.SBeanFieldKey moKeyContractor;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPresentation;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPriEty;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPriReq;
    private sa.lib.gui.bean.SBeanFieldKey moKeyProvEnt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUsrReq;
    private sa.lib.gui.bean.SBeanFieldText moTextAuthStatus;
    private sa.lib.gui.bean.SBeanFieldText moTextEtyNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextItemCode;
    private sa.lib.gui.bean.SBeanFieldText moTextItemDescription;
    private sa.lib.gui.bean.SBeanFieldText moTextItemName;
    private sa.lib.gui.bean.SBeanFieldText moTextProvStatus;
    private sa.lib.gui.bean.SBeanFieldText moTextPurStatus;
    private sa.lib.gui.bean.SBeanFieldText moTextReferecnce;
    private sa.lib.gui.bean.SBeanFieldText moTextReqNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextReqStatus;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 671);
        
        moFieldsEty = new SGuiFields();
        
        moKeyProvEnt.setKeySettings(miClient, SGuiUtils.getLabelName(jlProvEnt), true);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlNumber), SGuiConsts.GUI_TYPE_INT, true);
        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moKeyUsrReq.setKeySettings(miClient, SGuiUtils.getLabelName(jlUsrReq), true);
        moKeyContractor.setKeySettings(miClient, SGuiUtils.getLabelName(jlContractor), false);
        moTextReferecnce.setTextSettings(SGuiUtils.getLabelName(jlReference), 25, 0);
        moKeyConsEnt.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsEnt), true);
        moKeyConsSubent.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsSubent), false);
        moDateReq.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateReq), false);
        moKeyPriReq.setKeySettings(miClient, SGuiUtils.getLabelName(jlPriReq), true);
        moTextReqStatus.setTextSettings(SGuiUtils.getLabelName(jlReqStatus), 100, 0);
        moTextReqNotes.setTextSettings(SGuiUtils.getLabelName(jlReqNotes), 500, 0);
        
        moTextItemCode.setTextSettings(SGuiUtils.getLabelName(jlItem), 500, 1);
        moTextItemName.setTextSettings(SGuiUtils.getLabelName(jlItem), 500, 1);
        moBoolNewItem.setBooleanSettings(SGuiUtils.getLabelName(moBoolNewItem.getText()), false);
        moTextItemDescription.setTextSettings(SGuiUtils.getLabelName("Descripción"), 500, 1);
        moKeyPresentation.setKeySettings(miClient, SGuiUtils.getLabelName(jlPresentation), false);
        moDecFactConv.setDecimalSettings(SGuiUtils.getLabelName(jlFactConv), SGuiConsts.GUI_TYPE_DEC, false);
        moDecQty.setDecimalSettings(SGuiUtils.getLabelName(jlQty), SGuiConsts.GUI_TYPE_DEC, true);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName("Unidad"), true);
        moIntConsDays.setIntegerSettings(SGuiUtils.getLabelName(jlConsDays), SGuiConsts.GUI_TYPE_INT, false);
        moKeyConsEntEty.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsEntEty), false);
        moKeyConsSubentEty.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsSubentEty), false);
        moDateReqEty.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateReqEty), false);
        moKeyPriEty.setKeySettings(miClient, SGuiUtils.getLabelName(jlPriEty), false);
        
        moTextAuthStatus.setTextSettings(SGuiUtils.getLabelName(jlAuthStatus), 500, 0);
        moTextProvStatus.setTextSettings(SGuiUtils.getLabelName(jlProvStatus), 500, 0);
        moBoolProvClosed.setBooleanSettings(SGuiUtils.getLabelName(moBoolProvClosed.getText()), false);
        moTextPurStatus.setTextSettings(SGuiUtils.getLabelName(jlPurStatus), 500, 0);
        moBoolPurClosed.setBooleanSettings(SGuiUtils.getLabelName(moBoolPurClosed.getText()), false);

        moFields.addField(moKeyProvEnt);
        moFields.addField(moIntNumber); 
        moFields.addField(moDate);
        moFields.addField(moKeyUsrReq);
        moFields.addField(moKeyContractor);
        moFields.addField(moTextReferecnce);
        moFields.addField(moKeyConsEnt);
        moFields.addField(moKeyConsSubent);
        moFields.addField(moDateReq);
        moFields.addField(moKeyPriReq);
        moFields.addField(moBoolProvClosed);
        moFields.addField(moTextReqStatus);
        moFields.addField(moTextReqNotes);
        
        moFieldsEty.addField(moTextItemCode);
        moFieldsEty.addField(moTextItemName);
        moFieldsEty.addField(moBoolNewItem);
        moFieldsEty.addField(moTextItemDescription);
        moFieldsEty.addField(moKeyPresentation);
        moFieldsEty.addField(moDecFactConv);
        moFieldsEty.addField(moDecQty);
        moFieldsEty.addField(moKeyUnit);
        moFieldsEty.addField(moIntConsDays);
        moFieldsEty.addField(moKeyConsEntEty);
        moFieldsEty.addField(moKeyConsSubentEty);
        moFieldsEty.addField(moDateReqEty);
        moFieldsEty.addField(moKeyPriEty);
        
        moFieldKeyConsEntity = new SGuiFieldKeyGroup(miClient);
        moFieldKeyConsEntityEty = new SGuiFieldKeyGroup(miClient);

        moFields.setFormButton(jbSave);
        
        moGridMatReqList = new SGridPaneForm(miClient, SModConsts.TRN_MAT_REQ_ETY, SLibConsts.UNDEFINED, "Ítems") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código ítem"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem", 350));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "Cantidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Nuevo ítem"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Ent. cosumo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Subent. consumo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha requerida"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Prioridad"));
                
                return columns;
            }
        };
        
        moGridMatReqList.setPaneFormOwner(this);
        mvFormGrids.add(moGridMatReqList);
        jpEntries.add(moGridMatReqList, BorderLayout.CENTER);
        
        jbSaveAndSend = new JButton();
        jbSaveAndSend.setText("Guardar y solicitar");
        jbSaveAndSend.setPreferredSize(new java.awt.Dimension(200, 23));
        jpCommandRight.remove(jbCancel);
        jpCommandRight.add(jbSaveAndSend);
        jpCommandRight.add(jbCancel);
        
        moKeyConsSubent.setEnabled(false);
        moBoolProvClosed.setEnabled(false);
        
        hasUserRevRight = ((SClientInterface) miClient).getSessionXXX().getUser().hasRight((SClientInterface) miClient, SDataConstantsSys.PRV_INV_REQ_MAT_REV).HasRight;
        hasUserProvRight = ((SClientInterface) miClient).getSessionXXX().getUser().hasRight((SClientInterface) miClient, SDataConstantsSys.PRV_INV_REQ_MAT_PROV).HasRight;
    }
    
    private void populateMatReqEntries() throws Exception {
        ArrayList<SDbMaterialRequestEntry> aux = new ArrayList<>();
        int i = 0;
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatReqEntries.size() > 0) {
            for (SDbMaterialRequestEntry ety : maMatReqEntries) {
                if (!ety.isDeleted()) {
                    ety.setAuxRowId(i++);
                    aux.add(ety);
                }
            }
            vRows.addAll(aux);
        }
        moGridMatReqList.populateGrid(vRows, this); 
    }
    
    private void enableReqControls(boolean enable) {
        moKeyProvEnt.setEnabled(enable);
        moKeyUsrReq.setEnabled(enable);
        moKeyContractor.setEnabled(enable);
        moKeyConsEnt.setEnabled(enable);
        moDateReq.setEnabled(enable);
        moKeyPriReq.setEnabled(enable);
        moTextReqNotes.setEnabled(enable);
        
        jbNewEty.setEnabled(enable);
        
        jbSave.setEnabled(enable);
        jbSaveAndSend.setEnabled(enable);
    }
    
    private void clearEntryControls() {
        moTextItemCode.setValue("");
        moTextItemName.setValue("");
        moTextItemDescription.setValue("");
        moBoolNewItem.setValue(false);
        moKeyPresentation.setSelectedIndex(0);
        moDecFactConv.setValue(0.0);
        moDecQty.setValue(0.0);
        moKeyUnit.setSelectedIndex(0);
        moIntConsDays.setValue(0);
        moKeyConsEntEty.setSelectedIndex(0);
        moDateReqEty.setValue(null);
        moKeyPriEty.setSelectedIndex(0);
        moTextEtyNotes.setValue("");
    }
    
    private void enableEntryControls(boolean enable) {
        moTextItemCode.setEnabled(enable);
        jbPickItem.setEnabled(enable);
        moBoolNewItem.setEnabled(enable);
        moTextItemDescription.setEnabled(!enable ? enable : moBoolNewItem.getValue());
        moDecQty.setEnabled(enable);
        moIntConsDays.setEnabled(enable);
        moKeyConsEntEty.setEnabled(enable);
        moDateReqEty.setEnabled(enable);
        moKeyPriEty.setEnabled(enable);
        moTextEtyNotes.setEnabled(enable);
        moKeyPresentation.setEnabled(isCapturingData && moKeyPresentation.getItemCount() > 1);
        
        jbRegisterEty.setEnabled(enable);
    }
    
    private void setComponetsEntryData(SDbMaterialRequestEntry ety) {
        if (ety != null) {
            moItemEty = ety.getDataItem();
            
            populatePresentation(moItemEty.getFkUnitId());

            moTextItemCode.setValue(moItemEty.getCode());
            moTextItemName.setValue(moItemEty.getName());
            moBoolNewItem.setValue(ety.isNewItem());
            moKeyPresentation.setValue(new int[] { ety.getFkMatPresentationId() });
            moDecFactConv.setValue(ety.getFactorConvertion());
            moDecQty.setValue(ety.getQuantity());
            moKeyUnit.setValue(new int[] { ety.getFkUnitId() });
            moIntConsDays.setValue(ety.getCosnsumptionEstimated());
            moKeyConsEntEty.setValue(new int[] { ety.getFkEntMatConsumptionEntityId_n() });
            moKeyConsSubentEty.setValue(new int[] { ety.getFkSubentMatConsumptionEntityId_n(), ety.getFkSubentMatConsumptionSubentityId_n() });
            moDateReqEty.setValue(ety.getDateRequest_n());
            moKeyPriEty.setValue(new int[] { ety.getFkMatRequestPriorityId_n()});
            moTextItemDescription.setValue("");
            moTextEtyNotes.setValue("");
            
            for (SDbMaterialRequestEntryNote note : ety.getChildNotes()) {
                if (note.getIsDescription()) {
                    moTextItemDescription.setValue(note.getNotes());
                }
                else {
                    moTextEtyNotes.setValue(note.getNotes());
                }
            }
            isCapturingData = false;
            enableEntryControls(false);
            stateChangeConsEntEty();
        }
    }
    
    private SDbMaterialRequestEntry setEtyValues(SDbMaterialRequestEntry ety) throws Exception {
        ety.setDateRequest_n(moDateReqEty.getValue());
        ety.setQuantity(moDecQty.getValue());
        ety.setFactorConvertion(moDecFactConv.getValue());
        ety.setCosnsumptionEstimated(moIntConsDays.getValue());
        ety.setNewItem(moBoolNewItem.getValue());
        ety.setFkItemId(moItemEty.getPkItemId());
        ety.setFkUnitId(moKeyUnit.getValue()[0]);
        ety.setFkMatPresentationId(moKeyPresentation.getSelectedIndex() == 0 ? SModSysConsts.TRNU_MAT_PRES_NA : moKeyPresentation.getValue()[0]);
        ety.setFkMatRequestPriorityId_n(moKeyPriEty.getSelectedIndex() == 0 ? 0 : moKeyPriEty.getValue()[0]);
        ety.setFkEntMatConsumptionEntityId_n(moKeyConsEntEty.getSelectedIndex() == 0 ? 0 : moKeyConsEntEty.getValue()[0]);
        ety.setFkSubentMatConsumptionEntityId_n(moKeyConsSubentEty.getSelectedIndex() <= 0 ? 0 : moKeyConsSubentEty.getValue()[0]);
        ety.setFkSubentMatConsumptionSubentityId_n(moKeyConsSubentEty.getSelectedIndex() <= 0 ? 0 : moKeyConsSubentEty.getValue()[1]);
        ety.setDataItem(moItemEty);
        ety.readOptionalInfo(miClient.getSession());
        
        if (moBoolNewItem.getValue()) {
            SDbMaterialRequestEntryNote note = new SDbMaterialRequestEntryNote();
            note.setNotes(moTextItemDescription.getValue());
            note.setIsDescription(true);
            ety.getChildNotes().add(note);
        }
        
        if (!moTextEtyNotes.getValue().isEmpty()) {
            SDbMaterialRequestEntryNote note = new SDbMaterialRequestEntryNote();
            note.setNotes(moTextEtyNotes.getValue());
            note.setIsDescription(false);
            ety.getChildNotes().add(note);
        }
        
        return ety;
    }
    
    private int getNextNumber() {
        try {
            String sql = "SELECT COALESCE(MAX(num), 0) + 1 FROM trn_mat_req WHERE fk_mat_prov_ent = " + moKeyProvEnt.getValue()[0] + " AND NOT b_del;";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
        return 0;
    }
    
    private int[] getDefaultPriority() {
        try {
            String sql = "SELECT param_value FROM cfg_param WHERE param_key = '" + SDataConstantsSys.CFG_PARAM_TRN_MAT_PTY + "';";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                return new int[] { resultSet.getInt(1) };
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
        return new int[] { 0 };
    }
    
    private void enableGridButtons() {
        if (moGridMatReqList.getTable().getSelectedRow() >= 0 && isRegistryEditable) {
            jbEditEty.setEnabled(true);
            jbDeleteEty.setEnabled(true);
        }
    }
    
    private void populatePresentation(int unit) {
        SGuiParams params = new SGuiParams(unit);
        miClient.getSession().populateCatalogue(moKeyPresentation, SModConsts.TRNU_MAT_PRES, SLibConsts.UNDEFINED, params);
        moKeyPresentation.setEnabled(isCapturingData && moKeyPresentation.getItemCount() > 1);
    }
    
    private void stateChangeNewItem() {
        try {
            moTextItemDescription.setEnabled(moBoolNewItem.getValue());
            moTextItemCode.setEnabled(!moBoolNewItem.getValue());
            if (moBoolNewItem.getValue()) {
                String sql = "SELECT param_value FROM cfg_param WHERE param_key = '" + SDataConstantsSys.CFG_PARAM_TRN_MAT_ITM_DMY + "';";
                ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
                if (resultSet.next()) {
                    moItemEty = new SDataItem();
                    moItemEty.read(new int[] { resultSet.getInt(1) }, miClient.getSession().getStatement());
                    moTextItemCode.setValue(moItemEty.getCode());
                    moTextItemName.setValue(moItemEty.getName());
                    moKeyUnit.setValue(new int[] { moItemEty.getFkUnitId() } );
                    populatePresentation(moItemEty.getFkUnitId());
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void stateChangePresentation() {
        try {
            if (moKeyPresentation.getSelectedIndex() > 0) {
                String sql = "SELECT fact_conv FROM erp.trnu_mat_pres WHERE id_mat_pres = " + moKeyPresentation.getValue()[0] + " ";
                ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
                if (resultSet.next()) {
                    moDecFactConv.setValue(resultSet.getDouble(1));
                }
            }
            if (moKeyPresentation.isEnabled() && moDecFactConv.getValue() == 0) {
                moDecFactConv.setEnabled(true);
            }
            else moDecFactConv.setEnabled(false);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void stateChangeConsEnt() {
        if (!isRegistryEditable){
            moKeyConsSubent.setEnabled(false);            
        }
        if (moKeyConsEnt.getSelectedIndex() <= 0) {
            moKeyConsSubent.setSelectedIndex(0);
            moKeyConsSubent.setEnabled(false);
        }
        else if (isRegistryEditable && moKeyConsEnt.getSelectedIndex() > 0) {
            moKeyConsSubent.setEnabled(true);
        }
    }
    
    private void stateChangeConsEntEty() {
        if (!isRegistryEditable){
            moKeyConsSubentEty.setEnabled(false);
        }
        else if (moKeyConsEntEty.getSelectedIndex() <= 0) {
            moKeyConsSubentEty.setSelectedIndex(0);
            moKeyConsSubentEty.setEnabled(false);
        }
        else if (isRegistryEditable && moKeyConsEntEty.getSelectedIndex() > 0) {
            moKeyConsSubentEty.setEnabled(true);
        }
    }
    
    private void actionPickItem() {
        int[] key;
        SGuiOptionPicker picker;

        picker = miClient.getSession().getModule(SModConsts.MOD_ITM_N).getOptionPicker(SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            key = (int[]) picker.getOption();

            if (key != null) {
                assignItem(key);
            }
        }
    }
    
    private void actionItemCode() {
        try {
            String sql = "SELECT id_item FROM erp.itmu_item WHERE code = '" + moTextItemCode.getValue() + "' ";
            ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql);
            if (resultSet.next()) {
                assignItem(new int[] { resultSet.getInt(1) });
            }
            else {
                miClient.showMsgBoxInformation("No hay ningún ítem con el código ingresado.");
            }
        }
        catch(Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void assignItem(int[] key) {
        moItemEty = new SDataItem();
        moItemEty.read(key, miClient.getSession().getStatement());
        moTextItemCode.setValue(moItemEty.getCode());
        moTextItemName.setValue(moItemEty.getName());
        moKeyUnit.setValue(new int[] { moItemEty.getFkUnitId() } );
        populatePresentation(moItemEty.getFkUnitId());
    }
    
    private void actionNew() {
        isEtyNew = true;
        isCapturingData = true;
        clearEntryControls();
        enableEntryControls(true);
        jbEditEty.setEnabled(false);
        jbDeleteEty.setEnabled(false);
    }
    
    private void actionRegister() {
        try {
            SGuiValidation validation = moFieldsEty.validateFields();
            
            if (SGuiUtils.computeValidation(miClient, validation)) {
                if (isEtyNew) {
                    SDbMaterialRequestEntry ety = new SDbMaterialRequestEntry();
                    ety = setEtyValues(ety);
                    ety.setRegistryNew(true);
                    maMatReqEntries.add(ety);
                }
                else {
                    int rowId = ((SDbMaterialRequestEntry) moGridMatReqList.getSelectedGridRow()).getAuxRowId();
                    for (SDbMaterialRequestEntry ety : maMatReqEntries) {
                        if (ety.getAuxRowId() == rowId) {
                            ety.setRegistryNew(false);
                            setEtyValues(ety);
                        }
                    }
                }
                
                populateMatReqEntries();
                isCapturingData = false;
                enableEntryControls(false);
            }
            else {
                miClient.showMsgBoxInformation(validation.getMessage());
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionEditEty() {
        isEtyNew = false;
        isCapturingData = true;
        jbEditEty.setEnabled(false);
        jbDeleteEty.setEnabled(false);
        enableEntryControls(true);
    }
    
    private void actionDeleteEty() {
        try {
            int rowId = ((SDbMaterialRequestEntry) moGridMatReqList.getSelectedGridRow()).getAuxRowId();
            for (SDbMaterialRequestEntry ety : maMatReqEntries) {
                if (ety.getAuxRowId() == rowId) {
                    ety.setDeleted(true);
                }
            }
            populateMatReqEntries();
            isCapturingData = false;
            enableEntryControls(false);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionSave(int statusReq) {
        mnStatusReqId = statusReq;
        super.actionSave();
    }
    
    private void actionAuthorizeOrRejectResource(final int iAction) {
        try {
            String response = SAuthorizationUtils.authorizeOrReject(miClient.getSession(), 
                                                                    moRegistry.getPrimaryKey(), 
                                                                    SAuthorizationUtils.AUTH_TYPE_MAT_REQUEST, 
                                                                    iAction);
            
            if (response.length() > 0) {
                miClient.showMsgBoxError(response);
            }
            else {
                miClient.showMsgBoxInformation((iAction == SAuthorizationUtils.AUTH_ACTION_AUTHORIZE ? "Autorizado" : "Rechazado") + 
                        " con éxito");
                jbSave.setEnabled(true);
                super.actionSave();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void addAllListeners() {
        jbImport.addActionListener(this);
        jbPickItem.addActionListener(this);
        jbNewEty.addActionListener(this);
        jbRegisterEty.addActionListener(this);
        jbEditEty.addActionListener(this);
        jbDeleteEty.addActionListener(this);
        jbAuthorize.addActionListener(this);
        jbReject.addActionListener(this);
        jbSave.addActionListener(this);
        jbSaveAndSend.addActionListener(this);
        moBoolNewItem.addItemListener(this);
        moKeyPresentation.addItemListener(this);
        moTextItemCode.addFocusListener(this);
        moKeyConsEnt.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbImport.removeActionListener(this);
        jbPickItem.removeActionListener(this);
        jbNewEty.removeActionListener(this);
        jbRegisterEty.removeActionListener(this);
        jbEditEty.removeActionListener(this);
        jbDeleteEty.removeActionListener(this);
        jbAuthorize.removeActionListener(this);
        jbReject.removeActionListener(this);
        jbSave.removeActionListener(this);
        jbSaveAndSend.removeActionListener(this);
        moBoolNewItem.removeItemListener(this);
        moKeyPresentation.removeItemListener(this);
        moTextItemCode.removeFocusListener(this);
        moKeyConsEnt.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.USRU_USR, miClient.getSession().getUser().getPkUserId());

        moFieldKeyConsEntity.initGroup();
        moFieldKeyConsEntity.addFieldKey(moKeyConsEnt, SModConsts.TRN_MAT_CONS_ENT, hasUserProvRight || hasUserRevRight ? SLibConsts.UNDEFINED : SModConsts.USRU_USR, params);
        moFieldKeyConsEntity.addFieldKey(moKeyConsSubent, SModConsts.TRN_MAT_CONS_SUBENT, SLibConsts.UNDEFINED, null);
        moFieldKeyConsEntity.populateCatalogues();
        
        moFieldKeyConsEntityEty.initGroup();
        moFieldKeyConsEntityEty.addFieldKey(moKeyConsEntEty, SModConsts.TRN_MAT_CONS_ENT, hasUserProvRight || hasUserRevRight ? SLibConsts.UNDEFINED : SModConsts.USRU_USR, params);
        moFieldKeyConsEntityEty.addFieldKey(moKeyConsSubentEty, SModConsts.TRN_MAT_CONS_SUBENT, SLibConsts.UNDEFINED, null);
        moFieldKeyConsEntityEty.populateCatalogues();
        
        miClient.getSession().populateCatalogue(moKeyProvEnt, SModConsts.TRN_MAT_PROV_ENT, hasUserProvRight || hasUserRevRight ? SLibConsts.UNDEFINED : SModConsts.USRU_USR, params);
        miClient.getSession().populateCatalogue(moKeyUsrReq, SModConsts.USRU_USR, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyContractor, SModConsts.TRN_MAINT_USER, SModSysConsts.TRNX_TP_MAINT_USER_CONTRACTOR, null);
        miClient.getSession().populateCatalogue(moKeyPriReq, SModConsts.TRNU_MAT_REQ_PTY, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.ITMU_UNIT, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyPriEty, SModConsts.TRNU_MAT_REQ_PTY, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMaterialRequest) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        clearEntryControls();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            moRegistry.setDate(miClient.getSession().getSystemDate());
            jtfRegistryKey.setText("");
            moKeyUsrReq.setValue(new int[] { miClient.getSession().getUser().getPkUserId() });
            moKeyPriReq.setValue(getDefaultPriority());
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moKeyUsrReq.setValue(new int[] { moRegistry.getFkUserRequesterId() });
            moKeyPriReq.setValue(new int[] { moRegistry.getFkMatRequestPriorityId() });
        }

        moKeyProvEnt.setValue(new int[] { moRegistry.getFkMatProvisionEntityId() });
        moIntNumber.setValue(moRegistry.getNumber());
        moDate.setValue(moRegistry.getDate());
        moKeyContractor.setValue(new int[] { moRegistry.getFkContractorId_n() });
        moTextReferecnce.setValue(moRegistry.getReference());
        moTextReferecnce.setValue(moRegistry.getReference());
        moBoolImport.setValue(moRegistry.isExternalSystem());
        moKeyConsEnt.setValue(new int[] { moRegistry.getFkEntMatConsumptionEntityId() });
        moKeyConsSubent.setValue(new int[] { moRegistry.getFkSubentMatConsumptionEntityId_n(), moRegistry.getFkSubentMatConsumptionSubentityId_n() });
        moDateReq.setValue(moRegistry.getDateRequest_n());
        moTextReqStatus.setValue(moRegistry.getAuxReqStatus());
        
        moBoolProvClosed.setValue(moRegistry.isCloseProvision());
        moBoolPurClosed.setValue(moRegistry.isClosePurchase());
        
        maMatReqNotes = moRegistry.getChildNotes();
        maMatReqEntries = moRegistry.getChildEntries();
        
        if (maMatReqNotes.size() > 0) {
            moTextReqNotes.setValue(maMatReqNotes.get(0).getNotes());
        }
        else {
            moTextReqNotes.setValue("");
        }
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { 
            enableReqControls(true);
            isRegistryEditable = true;
        }
        else if (moRegistry.getFkMatRequestStatusId() != SModSysConsts.TRNS_ST_MAT_REQ_NEW) {
            enableReqControls(false);
            isRegistryEditable = false;
        }
        else {
            enableReqControls(true);
            isRegistryEditable = true;
        }
        
        moTextAuthStatus.setValue(moRegistry.getAuxAuthStatus());
        
        if (getFormSubtype() == SModConsts.TRNX_MAT_REQ_PEND) {
            jbSave.setEnabled(false);
            jbSaveAndSend.setEnabled(false);
        }
        
        if (!moRegistry.isRegistryNew()) {
            jbAuthorize.setEnabled(hasUserRevRight);
            jbReject.setEnabled(hasUserRevRight);
        }
        
        addAllListeners();
        populateMatReqEntries();
        enableEntryControls(false);
        moBoolProvClosed.setEnabled(false);
        moKeyUsrReq.setEnabled(false);
        moDate.setEnabled(false);
        stateChangeConsEnt();
        enableGridButtons();
        
        isEtyNew = false;
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbMaterialRequest registry = (SDbMaterialRequest) moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setFkMatProvisionStatusId(SModSysConsts.TRNS_ST_MAT_PROV_NA);
            registry.setFkMatPurchaseStatusId(SModSysConsts.TRNS_ST_MAT_PUR_NA);
        }
        if (registry.isRegistryNew() || moRegistry.getFkMatProvisionEntityId() != moKeyProvEnt.getValue()[0]) {
            registry.setNumber(getNextNumber());
        }
        
        registry.setDate(moDate.getValue());
        registry.setDateRequest_n(moDateReq.getValue());
        registry.setReference(moTextReferecnce.getValue());
        registry.setExternalSystem(moBoolImport.getValue());
        registry.setExternalSystemId("");
        registry.setCloseProvision(moBoolProvClosed.getValue());
        registry.setFkMatProvisionEntityId(moKeyProvEnt.getValue()[0]);
        registry.setFkMatRequestPriorityId(moKeyPriReq.getValue()[0]);
        registry.setFkMatRequestStatusId(mnStatusReqId);
        registry.setFkUserRequesterId(moKeyUsrReq.getValue()[0]);
        registry.setFkContractorId_n(moKeyContractor.getSelectedIndex() == 0 ? 0 : moKeyContractor.getValue()[0]);
        registry.setFkEntMatConsumptionEntityId(moKeyConsEnt.getValue()[0]);
        registry.setFkSubentMatConsumptionEntityId_n(moKeyConsSubent.getSelectedIndex() == 0 ? 0 : moKeyConsSubent.getValue()[0]);
        registry.setFkSubentMatConsumptionSubentityId_n(moKeyConsSubent.getSelectedIndex() == 0 ? 0 : moKeyConsSubent.getValue()[1]);
        
        registry.getChildNotes().clear();
        if (!moTextReqNotes.getValue().isEmpty()) {
            SDbMaterialRequestNote note = new SDbMaterialRequestNote();
            note.setNotes(moTextReqNotes.getValue());
            registry.getChildNotes().add(note);
        }
        
        registry.getChildEntries().clear();
        for (SDbMaterialRequestEntry ety : maMatReqEntries) {
            registry.getChildEntries().add(ety);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid() && maMatReqEntries.size() <= 0) {
            validation.setMessage("Debe agregar al menos un ítem para solicitar.");
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbPickItem) {
                actionPickItem();
            }
            else if (button == jbNewEty) {
                actionNew();
            }
            else if (button == jbRegisterEty) {
                actionRegister();
            }
            else if (button == jbEditEty) {
                actionEditEty();
            }
            else if (button == jbDeleteEty) {
                actionDeleteEty();
            }
            else if (button == jbSave) {
                actionSave(SModSysConsts.TRNS_ST_MAT_REQ_NEW);
            }
            else if (button == jbSaveAndSend) {
                actionSave(SModSysConsts.TRNS_ST_MAT_REQ_AUTH);
            }
            else if (button == jbAuthorize) {
                actionAuthorizeOrRejectResource(SAuthorizationUtils.AUTH_ACTION_AUTHORIZE);
            }
            else if (button == jbReject) {
                actionAuthorizeOrRejectResource(SAuthorizationUtils.AUTH_ACTION_REJECT);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox) e.getSource();
            if (checkBox == moBoolNewItem) {
                stateChangeNewItem();
            }
        }
        else if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            if (comboBox == moKeyPresentation) {
                stateChangePresentation();
            }
            else if (comboBox == moKeyConsEnt) {
                stateChangeConsEnt();
            }
            else if (comboBox == moKeyConsEntEty) {
                stateChangeConsEntEty();
            }
        }
        
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            enableGridButtons();
            setComponetsEntryData((SDbMaterialRequestEntry) moGridMatReqList.getSelectedGridRow());
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) e.getSource();
            
            if (textField == moTextItemCode) {
                actionItemCode();
            }
        }
    }
}
