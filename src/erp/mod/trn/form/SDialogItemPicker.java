/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mod.trn.db.SRowItemPicker;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import javax.swing.JRadioButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.bean.SBeanOptionPicker;

/**
 *
 * @author Isabel Servin
 */
public class SDialogItemPicker extends SBeanOptionPicker implements KeyListener, ItemListener {

    /**
     * Creates new form SBeanItemPicker
     */
    
    public static final int ALL_ITEMS = 1;
    public static final int INV_ITEMS = 2;
    public static final int NOINV_ITEMS = 3;
    public static final int REF_ITEMS = 4;
    
    private javax.swing.JPanel jpControl;
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    protected Vector<SGridRow> moAllRows;
    protected Vector<SGridRow> moAllRowsAux;
    private javax.swing.JRadioButton jrbAllItems;
    private javax.swing.JRadioButton jrbInvItem;
    private javax.swing.JRadioButton jrbNoInvItem;
    private javax.swing.JRadioButton jrbRefItem;
    private javax.swing.ButtonGroup jbgItems;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        jpControl = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        
        jbgItems = new javax.swing.ButtonGroup();
        
        jrbAllItems = new javax.swing.JRadioButton();
        jrbAllItems.setText("Todos los ítems");
        jrbAllItems.setPreferredSize(new java.awt.Dimension(125, 23));
        jrbAllItems.addItemListener(this);
        jbgItems.add(jrbAllItems);
        
        jrbInvItem = new javax.swing.JRadioButton();
        jrbInvItem.setText("Ítems inventariables");
        jrbInvItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jrbInvItem.addItemListener(this);
        jbgItems.add(jrbInvItem);
        
        jrbNoInvItem = new javax.swing.JRadioButton();
        jrbNoInvItem.setText("Ítems no inventariables");
        jrbNoInvItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jrbNoInvItem.addItemListener(this);
        jbgItems.add(jrbNoInvItem);
        
        jrbRefItem = new javax.swing.JRadioButton();
        jrbRefItem.setText("Ítems de referencia");
        jrbRefItem.setPreferredSize(new java.awt.Dimension(150, 23));
        jrbRefItem.addItemListener(this);
        jbgItems.add(jrbRefItem);
        
        moAllRows = new Vector<>(moGridPicker.getModel().getGridRows());
        moAllRowsAux = new Vector<>(moGridPicker.getModel().getGridRows());
        
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        moTextItem.setPreferredSize(new java.awt.Dimension(200, 23));
        moTextItem.addKeyListener(this);
        
        jpGrid.add(jpControl, BorderLayout.NORTH);
        jpControl.add(moTextItem);
        jpControl.add(jrbAllItems);
        jpControl.add(jrbInvItem);
        jpControl.add(jrbNoInvItem);
        
        if (mnPickerSubtype != SModConsts.TRN_MAT_REQ) {
            jpControl.add(jrbRefItem);            
        }
    }
    
    private void stateChangeAllItems() {
        moAllRowsAux.addAll(moAllRows);
        moGridPicker.populateGrid(moAllRowsAux);
    }

    private void stateChangeInvItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getInv()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }

    private void stateChangeNoInvItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (!((SRowItemPicker) row).getInv()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
    private void stateChangeRefItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getRef()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
//    public void setItemPickerInvDefault(boolean inv) {
//        if (inv) {
//            jrbInvItem.setSelected(true);
//            stateChangeInvItem();
//        }
//        else {
//            jrbNoInvItem.setSelected(true);
//            stateChangeNoInvItem();
//        }
//    }
    
    public void setDefaultEnableRadio(int radio){
        switch (radio) {
            case ALL_ITEMS:
                jrbAllItems.setSelected(true);
                stateChangeAllItems();
                break;
            case INV_ITEMS:
                jrbInvItem.setSelected(true);
                stateChangeInvItem();
                break;
            case NOINV_ITEMS:
                jrbNoInvItem.setSelected(true);
                stateChangeNoInvItem();
                break;
            case REF_ITEMS:
                jrbRefItem.setSelected(true);
                stateChangeRefItem();
                break;
        }
    }
    
    @Override
    protected void populateGridPicker() {
        int col;
        int cols = moSettings.getGridColumns().size();
        int[] key = null;
        Class colClass;
        ResultSet resultSet;
        SRowItemPicker row;
        Vector<SGridRow> rows = new Vector<>();
        
        try {
            resultSet = miClient.getSession().getStatement().executeQuery(moSettings.getSql());
            while (resultSet.next()) {
                if (moSettings.getPrimaryKeyLength() > 0) {
                    key = new int[moSettings.getPrimaryKeyLength()];
                    for (col = 0; col < moSettings.getPrimaryKeyLength(); col++) {
                        key[col] = resultSet.getInt(SDbConsts.FIELD_ID + (col + 1));
                    }
                }

                row = new SRowItemPicker(key);
                for (col = 0; col < cols; col++) {
                    colClass = SGridUtils.getDataTypeClass(moSettings.getGridColumns().get(col).getColumnType());

                    if (colClass == Long.class) {
                        row.getValues().add(resultSet.getLong(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Integer.class) {
                        row.getValues().add(resultSet.getInt(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Double.class) {
                        row.getValues().add(resultSet.getDouble(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Float.class) {
                        row.getValues().add(resultSet.getFloat(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Boolean.class) {
                        row.getValues().add(resultSet.getBoolean(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == String.class) {
                        row.getValues().add(resultSet.getString(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Date.class) {
                        switch (moSettings.getGridColumns().get(col).getColumnType()) {
                            case SGridConsts.COL_TYPE_DATE:
                                row.getValues().add(resultSet.getDate(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case SGridConsts.COL_TYPE_DATE_DATETIME:
                                row.getValues().add(resultSet.getTimestamp(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case SGridConsts.COL_TYPE_DATE_TIME:
                                row.getValues().add(resultSet.getTime(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            default:
                                throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                        }
                    }
                    else {
                        throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }

                if (moSettings.isMainOptionApplying()) {
                    switch (moSettings.getMainOptionDataType()) {
                        case SLibConsts.DATA_TYPE_INT:
                            row.setMainOption(resultSet.getLong(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_DEC:
                            row.setMainOption(resultSet.getDouble(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_BOOL:
                            row.setMainOption(resultSet.getBoolean(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_TEXT:
                            row.setMainOption(resultSet.getString(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_DATE:
                            row.setMainOption(resultSet.getDate(SDbConsts.FIELD_VALUE));
                            break;
                        default:
                            throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }
                row.setInv(resultSet.getBoolean(SMaterialRequestUtils.ITEM_INV));
                row.setRef(resultSet.getBoolean(SMaterialRequestUtils.ITEM_REF));

                rows.add(row);
            }

            moGridPicker.populateGrid(rows);
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Vector<SGridRow> items = new Vector<>();
        String textToSearch = moTextItem.getValue();
        if (textToSearch.isEmpty()) {
            items.addAll(moAllRowsAux);
        }
        else {
            for (SGridRow item : moAllRowsAux) {
                if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(0).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
                else if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(1).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
                else if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(2).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
            }
        }
        moGridPicker.populateGrid(items);
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            
            if (radioButton == jrbAllItems) {
                stateChangeAllItems();
            }
            else if (radioButton == jrbInvItem) {
                stateChangeInvItem();
            }
            else if (radioButton == jrbNoInvItem) {
                stateChangeNoInvItem();
            }
            else if (radioButton == jrbRefItem) {
                stateChangeRefItem();
            }
        }
    }
    
    @Override
    public Object getOption() {
        Object option = null;
        SRowItemPicker row = (SRowItemPicker) moGridPicker.getSelectedGridRow();

        if (row != null) {
            option = moSettings.isMainOptionApplying() ? row.getMainOption() : row.getRowPrimaryKey();
        }

        return option;
    }
}
