/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Vector;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridRowOptionPicker;
import sa.lib.gui.bean.SBeanOptionPicker;

/**
 *
 * @author Isabel Servin
 */
public class SDialogItemPicker extends SBeanOptionPicker implements KeyListener {

    /**
     * Creates new form SBeanItemPicker
     */
    
    private sa.lib.gui.bean.SBeanFieldText moTextItem;
    protected Vector<SGridRow> moAllRows;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void initComponentsCustom() {
        moAllRows = new Vector<>(moGridPicker.getModel().getGridRows());
        
        moTextItem = new sa.lib.gui.bean.SBeanFieldText();
        moTextItem.setPreferredSize(new java.awt.Dimension(600, 23));
        moTextItem.addKeyListener(this);
        
        jpGrid.add(moTextItem, BorderLayout.NORTH);
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Vector<SGridRow> items = new Vector<>();
        String textToSearch = moTextItem.getValue();
        if (textToSearch.isEmpty()) {
            items.addAll(moAllRows);
        }
        else {
            for (SGridRow item : moAllRows) {
                if (SLibUtils.textToAscii(((SGridRowOptionPicker) item).getValues().get(0).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
                else if (SLibUtils.textToAscii(((SGridRowOptionPicker) item).getValues().get(1).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
            }
        }
        moGridPicker.populateGrid(items);
    }
}
