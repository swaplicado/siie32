/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mod.trn.db.SRowItemPicker;
import java.awt.BorderLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Vector;
import javax.swing.JRadioButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridRow;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.bean.SBeanOptionPicker;

/**
 *
 * @author Isabel Servin
 */
public class SDialogItemPicker extends SBeanOptionPicker implements KeyListener, ItemListener {

    /**
     * Creates new form SBeanItemPicker
     */
    
    public static final int ALL_ITEMS = 1;
    public static final int INV_ITEMS = 2;
    public static final int NOINV_ITEMS = 3;
    public static final int SAL_ITEMS = 4;
    public static final int ASS_ITEMS = 5;
    public static final int PUR_ITEMS = 6;
    public static final int EXP_ITEMS = 7;
    
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpInvControl;
    private javax.swing.JPanel jpRefControl;
    private javax.swing.JLabel jlSearchItems;
    protected sa.lib.gui.bean.SBeanFieldText moSearchItem;
    private Vector<SGridRow> moAllRows;
    private Vector<SGridRow> moAllRowsAux;
    private javax.swing.JLabel jlFilterItems;
    private javax.swing.JRadioButton jrbAllItems;
    private javax.swing.JRadioButton jrbInvItem;
    private javax.swing.JRadioButton jrbNoInvItem;
    private javax.swing.JRadioButton jrbSalItem;
    private javax.swing.JRadioButton jrbAssItem;
    private javax.swing.JRadioButton jrbPurItem;
    private javax.swing.JRadioButton jrbExpItem;
    private javax.swing.ButtonGroup jbgItems;
    private javax.swing.JLabel jlShowedItems;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        
        jpControls = new javax.swing.JPanel(new java.awt.GridLayout(2, 1, 0, 0));
        jpInvControl = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpRefControl = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        
        jbgItems = new javax.swing.ButtonGroup();
        
        jlSearchItems = new javax.swing.JLabel("Buscar ítems:");
        jlSearchItems.setPreferredSize(new java.awt.Dimension(75, 23));
        
        jlFilterItems = new javax.swing.JLabel("Filtrar ítems:");
        jlFilterItems.setPreferredSize(new java.awt.Dimension(75, 23));
        
        jrbAllItems = new javax.swing.JRadioButton();
        jrbAllItems.setText("Todos");
        jrbAllItems.setPreferredSize(new java.awt.Dimension(70, 23));
        jrbAllItems.addItemListener(this);
        jbgItems.add(jrbAllItems);
        
        jrbInvItem = new javax.swing.JRadioButton();
        jrbInvItem.setText("Inventariables");
        jrbInvItem.setPreferredSize(new java.awt.Dimension(110, 23));
        jrbInvItem.addItemListener(this);
        jbgItems.add(jrbInvItem);
        
        jrbNoInvItem = new javax.swing.JRadioButton();
        jrbNoInvItem.setText("No inventariables");
        jrbNoInvItem.setPreferredSize(new java.awt.Dimension(110, 23));
        jrbNoInvItem.addItemListener(this);
        jbgItems.add(jrbNoInvItem);
        
        jrbSalItem = new javax.swing.JRadioButton();
        jrbSalItem.setText("Ventas");
        jrbSalItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jrbSalItem.addItemListener(this);
        jbgItems.add(jrbSalItem);
        
        jrbAssItem = new javax.swing.JRadioButton();
        jrbAssItem.setText("Activos");
        jrbAssItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jrbAssItem.addItemListener(this);
        jbgItems.add(jrbAssItem);
        
        jrbPurItem = new javax.swing.JRadioButton();
        jrbPurItem.setText("Compras");
        jrbPurItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jrbPurItem.addItemListener(this);
        jbgItems.add(jrbPurItem);
        
        jrbExpItem = new javax.swing.JRadioButton();
        jrbExpItem.setText("Gastos");
        jrbExpItem.setPreferredSize(new java.awt.Dimension(75, 23));
        jrbExpItem.addItemListener(this);
        jbgItems.add(jrbExpItem);
        
        moAllRows = new Vector<>(moGridPicker.getModel().getGridRows());
        moAllRowsAux = new Vector<>(moGridPicker.getModel().getGridRows());
        
        moSearchItem = new sa.lib.gui.bean.SBeanFieldText();
        moSearchItem.setPreferredSize(new java.awt.Dimension(300, 23));
        moSearchItem.addKeyListener(this);
        
        jpGrid.add(jpControls, BorderLayout.NORTH);
        jpControls.add(jpInvControl);
        jpControls.add(jpRefControl);
        jpInvControl.add(jlSearchItems);
        jpInvControl.add(moSearchItem);
        jpRefControl.add(jlFilterItems);
        jpRefControl.add(jrbAllItems);
        jpRefControl.add(jrbInvItem);
        jpRefControl.add(jrbNoInvItem);
        jpRefControl.add(jrbSalItem);            
        jpRefControl.add(jrbAssItem);            
        jpRefControl.add(jrbPurItem);            
        jpRefControl.add(jrbExpItem);
        
    }
    
    private void stateChangeAllItems() {
        moAllRowsAux.addAll(moAllRows);
        moGridPicker.populateGrid(moAllRowsAux);
    }

    private void stateChangeInvItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getInv()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }

    private void stateChangeNoInvItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (!((SRowItemPicker) row).getInv()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
    private void stateChangeSalItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getSal()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
    private void stateChangeAssItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getAss()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
    private void stateChangePurItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getPur()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
    private void stateChangeExpItem() {
        moAllRowsAux.clear();
        for (SGridRow row : moAllRows) {
            if (((SRowItemPicker) row).getExp()) {
                moAllRowsAux.add(row);
            }
        }
        moGridPicker.populateGrid(moAllRowsAux);
    }
    
//    public void setItemPickerInvDefault(boolean inv) {
//        if (inv) {
//            jrbInvItem.setSelected(true);
//            stateChangeInvItem();
//        }
//        else {
//            jrbNoInvItem.setSelected(true);
//            stateChangeNoInvItem();
//        }
//    }
    
    public void setDefaultEnableRadio(int radio){
        switch (radio) {
            case ALL_ITEMS:
                jrbAllItems.setSelected(true);
                stateChangeAllItems();
                break;
            case INV_ITEMS:
                jrbInvItem.setSelected(true);
                stateChangeInvItem();
                break;
            case NOINV_ITEMS:
                jrbNoInvItem.setSelected(true);
                stateChangeNoInvItem();
                break;
            case SAL_ITEMS:
                jrbSalItem.setSelected(true);
                stateChangeSalItem();
                break;
            case ASS_ITEMS:
                jrbAssItem.setSelected(true);
                stateChangeAssItem();
                break;
            case PUR_ITEMS:
                jrbPurItem.setSelected(true);
                stateChangePurItem();
                break;
            case EXP_ITEMS:
                jrbExpItem.setSelected(true);
                stateChangeExpItem();
                break;
        }
    }
    
    public void setShowedItems(String text) {
        jlShowedItems = new javax.swing.JLabel(text);
        super.jpCommand.remove(jbOk);
        super.jpCommand.remove(jbCancel);
        super.jpCommand.add(jlShowedItems);
        super.jpCommand.add(jbOk);
        super.jpCommand.add(jbCancel);
    }
    
    @Override
    protected void populateGridPicker() {
        int col;
        int cols = moSettings.getGridColumns().size();
        int[] key = null;
        Class colClass;
        ResultSet resultSet;
        SRowItemPicker row;
        Vector<SGridRow> rows = new Vector<>();
        
        try {
            resultSet = miClient.getSession().getStatement().executeQuery(moSettings.getSql());
            while (resultSet.next()) {
                if (moSettings.getPrimaryKeyLength() > 0) {
                    key = new int[moSettings.getPrimaryKeyLength()];
                    for (col = 0; col < moSettings.getPrimaryKeyLength(); col++) {
                        key[col] = resultSet.getInt(SDbConsts.FIELD_ID + (col + 1));
                    }
                }

                row = new SRowItemPicker(key);
                for (col = 0; col < cols; col++) {
                    colClass = SGridUtils.getDataTypeClass(moSettings.getGridColumns().get(col).getColumnType());

                    if (colClass == Long.class) {
                        row.getValues().add(resultSet.getLong(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Integer.class) {
                        row.getValues().add(resultSet.getInt(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Double.class) {
                        row.getValues().add(resultSet.getDouble(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Float.class) {
                        row.getValues().add(resultSet.getFloat(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Boolean.class) {
                        row.getValues().add(resultSet.getBoolean(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == String.class) {
                        row.getValues().add(resultSet.getString(SDbConsts.FIELD_PICK + (col + 1)));
                    }
                    else if (colClass == Date.class) {
                        switch (moSettings.getGridColumns().get(col).getColumnType()) {
                            case SGridConsts.COL_TYPE_DATE:
                                row.getValues().add(resultSet.getDate(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case SGridConsts.COL_TYPE_DATE_DATETIME:
                                row.getValues().add(resultSet.getTimestamp(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            case SGridConsts.COL_TYPE_DATE_TIME:
                                row.getValues().add(resultSet.getTime(SDbConsts.FIELD_PICK + (col + 1)));
                                break;
                            default:
                                throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                        }
                    }
                    else {
                        throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }

                if (moSettings.isMainOptionApplying()) {
                    switch (moSettings.getMainOptionDataType()) {
                        case SLibConsts.DATA_TYPE_INT:
                            row.setMainOption(resultSet.getLong(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_DEC:
                            row.setMainOption(resultSet.getDouble(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_BOOL:
                            row.setMainOption(resultSet.getBoolean(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_TEXT:
                            row.setMainOption(resultSet.getString(SDbConsts.FIELD_VALUE));
                            break;
                        case SLibConsts.DATA_TYPE_DATE:
                            row.setMainOption(resultSet.getDate(SDbConsts.FIELD_VALUE));
                            break;
                        default:
                            throw new Exception(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
                    }
                }
                row.setInv(resultSet.getBoolean(SMaterialRequestUtils.ITEM_INV));
                row.setSal(resultSet.getBoolean(SMaterialRequestUtils.ITEM_SAL));
                row.setAss(resultSet.getBoolean(SMaterialRequestUtils.ITEM_ASS));
                row.setPur(resultSet.getBoolean(SMaterialRequestUtils.ITEM_PUR));
                row.setExp(resultSet.getBoolean(SMaterialRequestUtils.ITEM_EXP));

                rows.add(row);
            }

            moGridPicker.populateGrid(rows);
        }
        catch (SQLException e) {
            SLibUtils.showException(this, e);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        Vector<SGridRow> items = new Vector<>();
        String textToSearch = moSearchItem.getValue();
        if (textToSearch.isEmpty()) {
            items.addAll(moAllRowsAux);
        }
        else {
            for (SGridRow item : moAllRowsAux) {
                if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(0).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
                else if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(1).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
                else if (SLibUtils.textToAscii(((SRowItemPicker) item).getValues().get(2).toString()).contains(SLibUtils.textToAscii(textToSearch).toUpperCase())) {
                    items.add(item);
                }
            }
        }
        moGridPicker.populateGrid(items);
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JRadioButton) {
            JRadioButton radioButton = (JRadioButton) e.getSource();
            
            if (radioButton == jrbAllItems) {
                stateChangeAllItems();
            }
            else if (radioButton == jrbInvItem) {
                stateChangeInvItem();
            }
            else if (radioButton == jrbNoInvItem) {
                stateChangeNoInvItem();
            }
            else if (radioButton == jrbSalItem) {
                stateChangeSalItem();
            }
            else if (radioButton == jrbAssItem) {
                stateChangeAssItem();
            }
            else if (radioButton == jrbPurItem) {
                stateChangePurItem();
            }
            else if (radioButton == jrbExpItem) {
                stateChangeExpItem();
            }
        }
    }
    
    @Override
    public Object getOption() {
        Object option = null;
        SRowItemPicker row = (SRowItemPicker) moGridPicker.getSelectedGridRow();

        if (row != null) {
            option = moSettings.isMainOptionApplying() ? row.getMainOption() : row.getRowPrimaryKey();
        }

        return option;
    }
    
    public int getSetectedMode() {
        if (jrbAllItems.isSelected()) {
            return ALL_ITEMS;
        }
        else if (jrbInvItem.isSelected()) {
            return INV_ITEMS;
        }
        else if (jrbNoInvItem.isSelected()) {
            return NOINV_ITEMS;
        }
        else if (jrbSalItem.isSelected()) {
            return SAL_ITEMS;
        }
        else if (jrbAssItem.isSelected()) {
            return ASS_ITEMS;
        }
        else if (jrbPurItem.isSelected()) {
            return PUR_ITEMS;
        }
        else if (jrbExpItem.isSelected()) {
            return EXP_ITEMS;
        }
        return 0;
    }
}
