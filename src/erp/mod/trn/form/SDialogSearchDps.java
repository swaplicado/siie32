/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.trn.db.STrnUtils;
import erp.mtrn.data.SRowDpsFinder;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanFieldText;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogSearchDps extends SBeanFormDialog implements ActionListener, ItemListener, FocusListener {
    
    private static final int DPS_LIMIT = 1000;
    
    private int mnDpsCategory;
    private SGridPaneForm moResultsGrid;

    /**
     * Creates new form SDialogDpsFinderByNumber
     * @param client
     * @param title
     */
    public SDialogSearchDps(SGuiClient client, int dpsCategory, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, 0, 0, title);
        mnDpsCategory = dpsCategory;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgOption = new javax.swing.ButtonGroup();
        jpSearch = new javax.swing.JPanel();
        jpParams = new javax.swing.JPanel();
        jpParams1 = new javax.swing.JPanel();
        moRadioOptionNumber = new sa.lib.gui.bean.SBeanFieldRadio();
        moTextSeries = new sa.lib.gui.bean.SBeanFieldText();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jtfDpsNumber = new javax.swing.JTextField();
        jpParams2 = new javax.swing.JPanel();
        moRadioOptionReference = new sa.lib.gui.bean.SBeanFieldRadio();
        moTextReference = new sa.lib.gui.bean.SBeanFieldText();
        jlDummy1 = new javax.swing.JLabel();
        moBoolPerfectMatch = new sa.lib.gui.bean.SBeanFieldBoolean();
        jbSearch = new javax.swing.JButton();
        jbReset = new javax.swing.JButton();
        jpResults = new javax.swing.JPanel();

        jpSearch.setLayout(new java.awt.BorderLayout());

        jpParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros de búsqueda:"));
        jpParams.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpParams1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgOption.add(moRadioOptionNumber);
        moRadioOptionNumber.setText("Por serie y folio");
        jpParams1.add(moRadioOptionNumber);

        moTextSeries.setToolTipText("Serie");
        moTextSeries.setPreferredSize(new java.awt.Dimension(75, 23));
        jpParams1.add(moTextSeries);

        moTextNumber.setToolTipText("Foliio");
        moTextNumber.setPreferredSize(new java.awt.Dimension(150, 23));
        jpParams1.add(moTextNumber);

        jtfDpsNumber.setEditable(false);
        jtfDpsNumber.setFocusable(false);
        jtfDpsNumber.setPreferredSize(new java.awt.Dimension(225, 23));
        jpParams1.add(jtfDpsNumber);

        jpParams.add(jpParams1);

        jpParams2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgOption.add(moRadioOptionReference);
        moRadioOptionReference.setText("Por referencia");
        jpParams2.add(moRadioOptionReference);

        moTextReference.setToolTipText("Foliio");
        moTextReference.setPreferredSize(new java.awt.Dimension(150, 23));
        jpParams2.add(moTextReference);

        jlDummy1.setPreferredSize(new java.awt.Dimension(75, 23));
        jpParams2.add(jlDummy1);

        moBoolPerfectMatch.setText("Búsqueda exacta");
        moBoolPerfectMatch.setPreferredSize(new java.awt.Dimension(150, 23));
        jpParams2.add(moBoolPerfectMatch);

        jbSearch.setText("Buscar");
        jbSearch.setPreferredSize(new java.awt.Dimension(100, 23));
        jpParams2.add(jbSearch);

        jbReset.setText("Reiniciar");
        jbReset.setPreferredSize(new java.awt.Dimension(100, 23));
        jpParams2.add(jbReset);

        jpParams.add(jpParams2);

        jpSearch.add(jpParams, java.awt.BorderLayout.NORTH);

        jpResults.setBorder(javax.swing.BorderFactory.createTitledBorder("Resultados de la búsqueda:"));
        jpResults.setLayout(new java.awt.BorderLayout());
        jpSearch.add(jpResults, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpSearch, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgOption;
    private javax.swing.JButton jbReset;
    private javax.swing.JButton jbSearch;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JPanel jpParams;
    private javax.swing.JPanel jpParams1;
    private javax.swing.JPanel jpParams2;
    private javax.swing.JPanel jpResults;
    private javax.swing.JPanel jpSearch;
    private javax.swing.JTextField jtfDpsNumber;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPerfectMatch;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioOptionNumber;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioOptionReference;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextReference;
    private sa.lib.gui.bean.SBeanFieldText moTextSeries;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moRadioOptionNumber.setBooleanSettings(moRadioOptionNumber.getText(), false);
        moRadioOptionReference.setBooleanSettings(moRadioOptionReference.getText(), false);
        moTextSeries.setTextSettings(moRadioOptionNumber.getText() + " (" + moTextSeries.getToolTipText().toLowerCase() + ")", 25, 0);
        moTextNumber.setTextSettings(moRadioOptionNumber.getText() + " (" + moTextNumber.getToolTipText().toLowerCase()+ ")", 32);
        moTextReference.setTextSettings(moRadioOptionReference.getText(), 25);
        moBoolPerfectMatch.setBooleanSettings(moBoolPerfectMatch.getText(), false);
        
        moFields.addField(moRadioOptionNumber);
        moFields.addField(moRadioOptionReference);
        moFields.addField(moTextSeries);
        moFields.addField(moTextNumber);
        moFields.addField(moTextReference);
        moFields.addField(moBoolPerfectMatch);
        moFields.setFormButton(jbSearch);
        
        jbSave.setEnabled(false);
        jbCancel.setText(SGuiConsts.TXT_BTN_CLOSE);
        
        moResultsGrid = new SGridPaneForm(miClient, mnFormType, mnFormSubtype, msTitle) {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo doc."));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Folio doc."));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Referencia doc."));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha doc."));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Estatus doc."));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CO, "Sucursal empresa"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Asociado negocios"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Total $"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CUR, "Moneda"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "Póliza contable", 125));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Tipo CFD"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_REG_NUM, "UUID CFD", 150));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Estatus CFD"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, SGridConsts.COL_TITLE_IS_DEL));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. creación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Creación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. modificación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Modificación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr. eliminación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Eliminación"));
                
                return columns;
            }
        };
        
        jpResults.add(moResultsGrid, BorderLayout.CENTER);
        
        initForm();
    }
    
    private void search() {
        try {
            try (Statement statement = miClient.getSession().getStatement().getConnection().createStatement()) {
                String sql;
                String where;
                ResultSet resultSet;
                Vector<SGridRow> rows = new Vector<>();
                int count = 0;
                
                where = "WHERE d.fid_ct_dps = " + mnDpsCategory + " ";
                
                if (moRadioOptionNumber.isSelected()) {
                    if (!moTextSeries.getValue().isEmpty()) {
                        where += "AND d.num_ser " + (moBoolPerfectMatch.getValue() ? "=" : "LIKE") + " '" + moTextSeries.getValue() + (moBoolPerfectMatch.getValue() ? "" : "%") + "' ";
                    }
                    if (!moTextNumber.getValue().isEmpty()) {
                        where += "AND d.num " + (moBoolPerfectMatch.getValue() ? "=" : "LIKE") + " '" + moTextNumber.getValue() + (moBoolPerfectMatch.getValue() ? "" : "%") + "' ";
                    }
                }
                else {
                    where += "AND d.num_ref " + (moBoolPerfectMatch.getValue() ? "=" : "LIKE") + " '" + moTextReference.getValue() + (moBoolPerfectMatch.getValue() ? "" : "%") + "' ";
                }
                
                sql = "SELECT COUNT(*) FROM trn_dps AS d " + where + ";";
                resultSet = statement.executeQuery(sql);
                if (resultSet.next()) {
                    count = resultSet.getInt(1);
                    if (count > DPS_LIMIT) {
                        throw new Exception("Se encontraron demasiados documentos, " + SLibUtils.DecimalFormatInteger.format(count) + ", pero sólo se permite consultar hasta " + SLibUtils.DecimalFormatInteger.format(DPS_LIMIT) + " documentos.\n"
                                + "Favor de intentar de nuevo con parámetros de búsqueda que sean más explícitos.");
                    }
                }
                
                sql = "SELECT d.id_year, d.id_doc, d.num_ser, d.num, d.num_ref, d.dt, d.tot_r, d.b_del, d.fid_st_dps, d.ts_new, d.ts_edit, d.ts_del, "
                        + "dt.code, ds.st_dps, cb.id_bpb, cb.code, b.id_bp, b.bp, c.cur_key, uc.usr, um.usr, ud.usr, "
                        + "dr.fid_rec_year, dr.fid_rec_per, dr.fid_rec_bkc, dr.fid_rec_tp_rec, dr.fid_rec_num, "
                        + "cfd.id_cfd, cfd.uuid, cfdt.tp_xml, cfds.st_dps "
                        + "FROM trn_dps AS d "
                        + "INNER JOIN erp.trnu_tp_dps AS dt ON dt.id_ct_dps = d.fid_ct_dps AND dt.id_cl_dps = d.fid_cl_dps AND dt.id_tp_dps = d.fid_tp_dps "
                        + "INNER JOIN erp.trns_st_dps AS ds ON ds.id_st_dps = d.fid_st_dps "
                        + "INNER JOIN erp.bpsu_bpb AS cb ON cb.id_bpb = d.fid_cob "
                        + "INNER JOIN erp.bpsu_bp AS b ON b.id_bp = d.fid_bp_r "
                        + "INNER JOIN erp.cfgu_cur AS c ON c.id_cur = d.fid_cur "
                        + "INNER JOIN erp.usru_usr AS uc ON uc.id_usr = d.fid_usr_new "
                        + "INNER JOIN erp.usru_usr AS um ON um.id_usr = d.fid_usr_edit "
                        + "INNER JOIN erp.usru_usr AS ud ON ud.id_usr = d.fid_usr_del "
                        + "LEFT OUTER JOIN trn_dps_rec AS dr ON dr.id_dps_year = d.id_year AND dr.id_dps_doc = d.id_doc "
                        + "LEFT OUTER JOIN trn_cfd AS cfd ON cfd.fid_dps_year_n = d.id_year AND cfd.fid_dps_doc_n = d.id_doc "
                        + "LEFT OUTER JOIN erp.trns_tp_xml AS cfdt ON cfdt.id_tp_xml = cfd.fid_tp_xml "
                        + "LEFT OUTER JOIN erp.trns_st_dps AS cfds ON cfds.id_st_dps = cfd.fid_st_xml "
                        + where + ""
                        + "ORDER BY dt.code, d.num_ser, d.num, d.num_ref, d.dt, ds.st_dps, cb.code, b.bp, d.id_year, d.id_doc ;";
                resultSet = statement.executeQuery(sql);
                while (resultSet.next()) {
                    
                    String journalVoucher = SLibUtils.DecimalFormatCalendarYear.format(resultSet.getInt("dr.fid_rec_year")) + "-" + SLibUtils.DecimalFormatCalendarMonth.format(resultSet.getInt("dr.fid_rec_per"))
                    + "-" + resultSet.getInt("dr.fid_rec_bkc") + "-" + resultSet.getString("dr.fid_rec_tp_rec") + "-" + SLibUtils.DecimalNumberFormat.format(resultSet.getInt("dr.fid_rec_num"));
                    
                    SRowDpsFinder row = new SRowDpsFinder();
                    
                    row.DpsTypeCode = resultSet.getString("dt.code");
                    row.DpsNumber = STrnUtils.formatDocNumber(resultSet.getString("d.num_ser"), resultSet.getString("d.num"));
                    row.DpsNumberRef = resultSet.getString("d.num_ref");
                    row.DpsDate = resultSet.getDate("d.dt");
                    row.DpsStatusName = resultSet.getString("ds.st_dps");
                    row.CompanyBranchCode = resultSet.getString("cb.code");
                    row.BizPartnerName = resultSet.getString("b.bp");
                    row.DpsTotal = resultSet.getDouble("d.tot_r");
                    row.DpsCurrencyCode = resultSet.getString("c.cur_key");
                    row.JournalVoucher = journalVoucher;
                    row.CfdTypeName = resultSet.getString("cfdt.tp_xml");
                    row.CfdUuid = resultSet.getString("cfd.uuid");
                    row.CfdStatusName = resultSet.getString("cfds.st_dps");
                    row.DpsDeleted = resultSet.getBoolean("d.b_del");
                    row.UserNew = resultSet.getString("uc.usr");
                    row.UserEdit = resultSet.getString("um.usr");
                    row.UserDelete = resultSet.getString("ud.usr");
                    row.TsNew = resultSet.getDate("d.ts_new");
                    row.TsEdit = resultSet.getDate("d.ts_edit");
                    row.TsDelete = resultSet.getDate("d.ts_del");

                    row.DpsKey = new int[] { resultSet.getInt("d.id_year"), resultSet.getInt("d.id_doc") };
                    row.BizPartnerId = resultSet.getInt("b.id_bp");
                    row.JournalVoucherKey = new Object[] { resultSet.getInt("dr.fid_rec_year"), resultSet.getInt("dr.fid_rec_per"), resultSet.getInt("dr.fid_rec_bkc"), resultSet.getString("dr.fid_rec_tp_rec"), resultSet.getInt("dr.fid_rec_num") };
                    
                    rows.add(row);
                }
                
                moResultsGrid.populateGrid(rows);
                
                miClient.showMsgBoxInformation(count == 1 ? "Se encontró 1 documento." : "Se encontraron " + SLibUtils.DecimalFormatInteger.format(count) + " documentos.");
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void reset() {
        moTextSeries.resetField();
        moTextNumber.resetField();
        moTextReference.resetField();
        jtfDpsNumber.setText("");
        
        moResultsGrid.populateGrid(new Vector<>());
    }
    
    private void actionPerformedSearch() {
        SGuiValidation validation = new SGuiValidation();
        
        if (moRadioOptionNumber.isSelected()) {
            if (moTextSeries.getValue().isEmpty() && moTextNumber.getValue().isEmpty()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moTextNumber.getFieldName() + "'.");
                validation.setComponent(moTextNumber);
            }
        }
        else {
            if (moTextReference.getValue().isEmpty()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moTextReference.getFieldName() + "'.");
                validation.setComponent(moTextReference);
            }
        }
        
        if (!validation.isValid()) {
            SGuiUtils.computeValidation(miClient, validation);
        }
        else {
            search();
        }
    }
    
    private void actionPerformedReset() {
        reset();
        
        if (moRadioOptionNumber.isSelected()) {
            moTextSeries.requestFocusInWindow();
        }
        else {
            moTextReference.requestFocusInWindow();
        }
    }
    
    private void itemStateChangedOption() {
        reset();
        
        if (moRadioOptionNumber.isSelected()) {
            moTextSeries.setEnabled(true);
            moTextNumber.setEnabled(true);
            moTextReference.setEnabled(false);
            
            moTextSeries.requestFocusInWindow();
        }
        else {
            moTextSeries.setEnabled(false);
            moTextNumber.setEnabled(false);
            moTextReference.setEnabled(true);
            
            moTextReference.requestFocusInWindow();
        }
    }
    
    private void focusLostNumber() {
        jtfDpsNumber.setText(STrnUtils.formatDocNumber(moTextSeries.getValue(), moTextNumber.getValue()));
        jtfDpsNumber.setCaretPosition(0);
    }

    @Override
    public void initForm() {
        removeAllListeners();
        
        moRadioOptionNumber.setSelected(true);
        itemStateChangedOption();
        
        addAllListeners();
    }

    @Override
    public void addAllListeners() {
        jbSearch.addActionListener(this);
        jbReset.addActionListener(this);
        moRadioOptionNumber.addItemListener(this);
        moRadioOptionReference.addItemListener(this);
        moTextSeries.addFocusListener(this);
        moTextNumber.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSearch.removeActionListener(this);
        jbReset.removeActionListener(this);
        moRadioOptionNumber.removeItemListener(this);
        moRadioOptionReference.removeItemListener(this);
        moTextSeries.removeFocusListener(this);
        moTextNumber.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSearch) {
                actionPerformedSearch();
            }
            else if (button == jbReset) {
                actionPerformedReset();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldRadio field = (SBeanFieldRadio) e.getSource();
            if (field == moRadioOptionNumber || field == moRadioOptionReference) {
                itemStateChangedOption();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextSeries || field == moTextNumber) {
                focusLostNumber();
            }
        }
    }
}
