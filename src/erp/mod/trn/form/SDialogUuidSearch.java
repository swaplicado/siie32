/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.SClientUtils;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.mbps.data.SDataBizPartner;
import erp.mod.bps.db.SBpsUtils;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import sa.lib.SLibConsts;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Isabel Servin
 */
public class SDialogUuidSearch extends JDialog implements ActionListener {
    
    private final SGuiClient miClient;
    private final int mnCfdType;
    private final int mnDpsCategory;
    
    private String msXml;

    /**
     * Creates new form SDialogUuidSearch
     * @param client
     * @param cfdType
     * @param dpsCt
     */
    public SDialogUuidSearch(SGuiClient client, int cfdType, int dpsCt) {
        miClient = client;
        mnCfdType = cfdType;
        mnDpsCategory = dpsCt;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpContent = new javax.swing.JPanel();
        jpGridComponets = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlUuid = new javax.swing.JLabel();
        moTextUuid = new sa.lib.gui.bean.SBeanFieldText();
        jbSearch = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlType = new javax.swing.JLabel();
        moTextType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jlIssuing = new javax.swing.JLabel();
        moTextIssuingFI = new sa.lib.gui.bean.SBeanFieldText();
        moTextIssuingName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlReceptor = new javax.swing.JLabel();
        moTextReceptorFI = new sa.lib.gui.bean.SBeanFieldText();
        moTextReceptorName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlTotal = new javax.swing.JLabel();
        moDecTotal = new sa.lib.gui.bean.SBeanFieldDecimal();
        moTextTotalMon = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jlStatus = new javax.swing.JLabel();
        moTextStatus = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlNumDoc = new javax.swing.JLabel();
        moTextNumDoc = new sa.lib.gui.bean.SBeanFieldText();
        jlDateDoc = new javax.swing.JLabel();
        moDateDoc = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel8 = new javax.swing.JPanel();
        jlNameFile = new javax.swing.JLabel();
        moTextNameFile = new sa.lib.gui.bean.SBeanFieldText();
        jbDownload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Busqueda de CFDI por UUID");

        jpContent.setBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n del CFDI"));
        jpContent.setLayout(new java.awt.BorderLayout());

        jpGridComponets.setLayout(new java.awt.GridLayout(8, 0));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlUuid.setText("UUID:");
        jlUuid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlUuid);

        moTextUuid.setPreferredSize(new java.awt.Dimension(270, 23));
        jPanel1.add(moTextUuid);

        jbSearch.setText("Buscar");
        jbSearch.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jbSearch);

        jbClear.setText("Limpiar");
        jbClear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jbClear);

        jpGridComponets.add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlType.setText("Tipo CFDI:");
        jlType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlType);

        moTextType.setEnabled(false);
        moTextType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel2.add(moTextType);

        jpGridComponets.add(jPanel2);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlIssuing.setText("Emisor:");
        jlIssuing.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlIssuing);

        moTextIssuingFI.setEnabled(false);
        jPanel3.add(moTextIssuingFI);

        moTextIssuingName.setEnabled(false);
        moTextIssuingName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(moTextIssuingName);

        jpGridComponets.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlReceptor.setText("Receptor:");
        jlReceptor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlReceptor);

        moTextReceptorFI.setEnabled(false);
        jPanel4.add(moTextReceptorFI);

        moTextReceptorName.setEnabled(false);
        moTextReceptorName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(moTextReceptorName);

        jpGridComponets.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlTotal.setText("Total CFDI:");
        jlTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlTotal);

        moDecTotal.setEnabled(false);
        jPanel5.add(moDecTotal);

        moTextTotalMon.setEnabled(false);
        moTextTotalMon.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel5.add(moTextTotalMon);

        jpGridComponets.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlStatus.setText("Estatus CFDI:");
        jlStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlStatus);

        moTextStatus.setEnabled(false);
        moTextStatus.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moTextStatus);

        jpGridComponets.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlNumDoc.setText("Folio:");
        jlNumDoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlNumDoc);

        moTextNumDoc.setEnabled(false);
        jPanel7.add(moTextNumDoc);

        jlDateDoc.setText("Fecha:");
        jlDateDoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDateDoc);

        moDateDoc.setEnabled(false);
        jPanel7.add(moDateDoc);

        jpGridComponets.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlNameFile.setText("Nombre archivo:");
        jlNameFile.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlNameFile);

        moTextNameFile.setEnabled(false);
        moTextNameFile.setPreferredSize(new java.awt.Dimension(375, 23));
        jPanel8.add(moTextNameFile);

        jbDownload.setText("Descargar");
        jbDownload.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jbDownload);

        jpGridComponets.add(jPanel8);

        jpContent.add(jpGridComponets, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbDownload;
    private javax.swing.JButton jbSearch;
    private javax.swing.JLabel jlDateDoc;
    private javax.swing.JLabel jlIssuing;
    private javax.swing.JLabel jlNameFile;
    private javax.swing.JLabel jlNumDoc;
    private javax.swing.JLabel jlReceptor;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JLabel jlTotal;
    private javax.swing.JLabel jlType;
    private javax.swing.JLabel jlUuid;
    private javax.swing.JPanel jpContent;
    private javax.swing.JPanel jpGridComponets;
    private sa.lib.gui.bean.SBeanFieldDate moDateDoc;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecTotal;
    private sa.lib.gui.bean.SBeanFieldText moTextIssuingFI;
    private sa.lib.gui.bean.SBeanFieldText moTextIssuingName;
    private sa.lib.gui.bean.SBeanFieldText moTextNameFile;
    private sa.lib.gui.bean.SBeanFieldText moTextNumDoc;
    private sa.lib.gui.bean.SBeanFieldText moTextReceptorFI;
    private sa.lib.gui.bean.SBeanFieldText moTextReceptorName;
    private sa.lib.gui.bean.SBeanFieldText moTextStatus;
    private sa.lib.gui.bean.SBeanFieldText moTextTotalMon;
    private sa.lib.gui.bean.SBeanFieldText moTextType;
    private sa.lib.gui.bean.SBeanFieldText moTextUuid;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        moTextUuid.setTextSettings(SGuiUtils.getLabelName(jlUuid), 36);
        moTextType.setTextSettings(SGuiUtils.getLabelName(jlType), 50);
        moTextIssuingFI.setTextSettings(SGuiUtils.getLabelName(jlIssuing), 50);
        moTextIssuingName.setTextSettings(SGuiUtils.getLabelName(jlIssuing), 255);
        moTextReceptorFI.setTextSettings(SGuiUtils.getLabelName(jlReceptor), 50);
        moTextReceptorName.setTextSettings(SGuiUtils.getLabelName(jlReceptor), 255);
        moDecTotal.setDecimalSettings(SGuiUtils.getLabelName(jlTotal.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextStatus.setTextSettings(SGuiUtils.getLabelName(jlStatus), 50);
        moTextNumDoc.setTextSettings(SGuiUtils.getLabelName(jlNumDoc), 50);
        moDateDoc.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateDoc), false);
        moTextNameFile.setTextSettings(SGuiUtils.getLabelName(jlNameFile), 128);
        
        moDateDoc.setValue(null);
        
        jbSearch.addActionListener(this);
        jbClear.addActionListener(this);
        jbDownload.addActionListener(this);
        
        jbSearch.setEnabled(true);
        jbClear.setEnabled(false);
        jbDownload.setEnabled(false);
    }
    
    private void actionSearch() {
        try{
            Statement statement = miClient.getSession().getStatement();
            String sql = "SELECT c.id_cfd, c.fid_tp_cfd, tc.tp_cfd, c.xml_rfc_emi, c.xml_rfc_rec, c.xml_tot, c.xml_mon, s.st_dps, " +
                    "IF(d.num_ser = '', d.num, CONCAT(d.num_ser, '-', d.num)) num, d.dt, d.fid_ct_dps, cd.ct_dps, xc.doc_xml_name, xc.doc_xml, " +
                    "IF(p.ser = '', p.num, CONCAT(p.ser, '-', p.num)) pay_num, p.dt pay_dy, " +
                    "IF(b.ser = '', b.num, CONCAT(b.ser, '-', b.num)) bol_num, b.dt bol_dt, " +
                    "IF(n.num_ser = '', n.num, CONCAT(n.num_ser, '-', n.num)) nom_num, n.dt_pay " +
                    "FROM trn_cfd AS c " +
                    "INNER JOIN erp.trns_tp_cfd AS tc ON c.fid_tp_cfd = tc.id_tp_cfd " +
                    "INNER JOIN erp.trns_st_dps AS s ON c.fid_st_xml = s.id_st_dps " +
                    "INNER JOIN " + SClientUtils.getComplementaryDbName(statement.getConnection()) + ".trn_cfd AS xc ON c.id_cfd = xc.id_cfd " +
                    "LEFT JOIN trn_dps AS d ON c.fid_dps_year_n = d.id_year AND c.fid_dps_doc_n = d.id_doc " +
                    "LEFT JOIN erp.trns_ct_dps AS cd ON d.fid_ct_dps = cd.id_ct_dps " +
                    "LEFT JOIN log_bol AS b ON c.fid_bol_n = b.id_bol " +                   
                    "LEFT JOIN trn_pay AS p ON c.fid_rcp_pay_n = p.id_rcp " +                   
                    "LEFT JOIN hrs_pay_rcp_iss AS n ON c.fid_pay_rcp_pay_n = n.id_pay AND c.fid_pay_rcp_emp_n = n.id_emp AND c.fid_pay_rcp_iss_n = n.id_iss " +                   
                    "WHERE c.uuid = '" + moTextUuid.getValue().toUpperCase() + "';";
            try (ResultSet resultSet = statement.executeQuery(sql)) {
                if (resultSet.next()) {
                    int tpCfd = resultSet.getInt("fid_tp_cfd");
                    if (mnCfdType == tpCfd) {
                        if (tpCfd == SDataConstantsSys.TRNS_TP_CFD_INV) {
                            int ctDps = resultSet.getInt("fid_ct_dps");
                            if (mnDpsCategory == ctDps) {
                                processData(resultSet);
                            }
                            else {
                                miClient.showMsgBoxInformation("No se puede mostrar el CFDI encontrado porque corresponde a una factura de \"" + resultSet.getString("ct_dps") + "\".");
                            }
                        }
                        else {
                            processData(resultSet);
                        }
                    }
                    else {
                        miClient.showMsgBoxInformation("No de puede mostrar el CFDI encontrado porque es del tipo \"" + resultSet.getString("tp_cfd") + "\".");
                    }
                }
                else {
                    miClient.showMsgBoxInformation("No se encontr√≥ ningun CFDI con el UUID especificado.");
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void processData(ResultSet resultSet) throws Exception {
        jbSearch.setEnabled(false);
        jbClear.setEnabled(true);
        jbDownload.setEnabled(true);
        moTextType.setValue(resultSet.getString("tp_cfd"));
        moTextIssuingFI.setValue(resultSet.getString("xml_rfc_emi"));
        moTextIssuingName.setValue(getBizPartnerName(resultSet.getString("xml_rfc_emi")));
        moTextReceptorFI.setValue(resultSet.getString("xml_rfc_rec"));
        moTextReceptorName.setValue(getBizPartnerName(resultSet.getString("xml_rfc_rec")));
        moDecTotal.setValue(resultSet.getDouble("xml_tot"));
        moTextTotalMon.setValue(resultSet.getString("xml_mon"));
        moTextStatus.setValue(resultSet.getString("st_dps"));
        switch (mnCfdType) {
            case SDataConstantsSys.TRNS_TP_CFD_PAY_REC:
                moTextNumDoc.setValue(resultSet.getString("pay_num"));
                moDateDoc.setValue(resultSet.getDate("pay_dt"));
                break;
            case SDataConstantsSys.TRNS_TP_CFD_BOL:
                moTextNumDoc.setValue(resultSet.getString("bol_num"));
                moDateDoc.setValue(resultSet.getDate("bol_dt"));
                break;
            case SDataConstantsSys.TRNS_TP_CFD_PAYROLL:
                moTextNumDoc.setValue(resultSet.getString("nom_num"));
                moDateDoc.setValue(resultSet.getDate("dt_pay"));
                break;
            default:
                moTextNumDoc.setValue(resultSet.getString("num"));
                moDateDoc.setValue(resultSet.getDate("dt"));
                break;
        }
        moTextNameFile.setValue(resultSet.getString("doc_xml_name"));
        msXml = resultSet.getString("doc_xml");
    }
    
    private String getBizPartnerName(String fiscalId) throws Exception {
        Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
        int bizPartnerId = SBpsUtils.getBizParterIdByFiscalId(statement, fiscalId, "", SLibConsts.UNDEFINED);
        SDataBizPartner bp = new SDataBizPartner();
        bp.read(new int[] { bizPartnerId }, statement);
        return bp.getBizPartner();
    }
    
    private void actionClear() {
        jbSearch.setEnabled(true);
        jbClear.setEnabled(false);
        jbDownload.setEnabled(false);
        
        moTextType.setValue("");
        moTextIssuingFI.setValue("");
        moTextIssuingName.setValue("");
        moTextReceptorFI.setValue("");
        moTextReceptorName.setValue("");
        moDecTotal.setValue(0.0);
        moTextTotalMon.setValue("");
        moTextStatus.setValue("");
        moTextNumDoc.setValue("");
        moDateDoc.setValue(null);
        moTextNameFile.setValue("");
        msXml = "";
    }

    private void actionDownload() {
        try {
            miClient.getFileChooser().setSelectedFile(new File(moTextNameFile.getValue()));
            if (miClient.getFileChooser().showSaveDialog(miClient.getFrame()) == JFileChooser.APPROVE_OPTION) {
                File file = new File(miClient.getFileChooser().getSelectedFile().getAbsolutePath());
                try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF8"))) {
                    bw.write(msXml);
                }
                miClient.showMsgBoxInformation(SLibConstants.MSG_INF_FILE_CREATE + file.getAbsolutePath());
            }
        }
        catch (HeadlessException | IOException e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSearch) {
                actionSearch();
            }
            else if (button == jbClear) {
                actionClear();
            }
            else if (button == jbDownload) {
                actionDownload();
            }
        }
    }
}
