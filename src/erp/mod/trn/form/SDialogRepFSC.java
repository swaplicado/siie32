/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.cfg.db.SDbCustomerReport;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 */
public class SDialogRepFSC extends sa.lib.gui.bean.SBeanDialogReport implements ActionListener {
    
    SDbCustomerReport moCustomerRep;
    boolean mbConfEdit;
    
    /**
     * Creates new form SDialogRepFSC
     * @param client
     * @param subType
     * @param title
     */
    public SDialogRepFSC(SGuiClient client, int subType, String title) {
        setFormSettings(client, SModConsts.TRNR_VTAS_FSC, subType, title);

        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgDocs = new javax.swing.ButtonGroup();
        bgDetai = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel7 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel5 = new javax.swing.JPanel();
        moRadioAllDocs = new sa.lib.gui.bean.SBeanFieldRadio();
        jLabel1 = new javax.swing.JLabel();
        moRadioDetail = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel6 = new javax.swing.JPanel();
        moRadioCurDocs = new sa.lib.gui.bean.SBeanFieldRadio();
        moKeyCur = new sa.lib.gui.bean.SBeanFieldKey();
        moRadioResume = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel4 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlTitle = new javax.swing.JLabel();
        moTextTitle = new sa.lib.gui.bean.SBeanFieldText();
        jPanel11 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaItemKeys = new javax.swing.JTextArea();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaItemName = new javax.swing.JTextArea();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jbModify = new javax.swing.JButton();
        jPanel19 = new javax.swing.JPanel();
        jbSaveConf = new javax.swing.JButton();
        jPanel20 = new javax.swing.JPanel();
        jbCancelConf = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Infomación de reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel12.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel3.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDateStart);
        jPanel16.add(moDateStart);

        jPanel3.add(jPanel16);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlDateEnd);
        jPanel7.add(moDateEnd);

        jPanel3.add(jPanel7);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgDocs.add(moRadioAllDocs);
        moRadioAllDocs.setSelected(true);
        moRadioAllDocs.setText("Todos los documentos");
        moRadioAllDocs.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moRadioAllDocs);

        jLabel1.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(jLabel1);

        bgDetai.add(moRadioDetail);
        moRadioDetail.setSelected(true);
        moRadioDetail.setText("Modalidad a detalle");
        moRadioDetail.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(moRadioDetail);

        jPanel3.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        bgDocs.add(moRadioCurDocs);
        moRadioCurDocs.setText("Sólo documentos en moneda:");
        moRadioCurDocs.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moRadioCurDocs);

        moKeyCur.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyCur);

        bgDetai.add(moRadioResume);
        moRadioResume.setText("Modalidad resumen");
        moRadioResume.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moRadioResume);

        jPanel3.add(jPanel6);

        jPanel12.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración del reporte:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.GridLayout());

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlTitle.setText("Titulo del reporte:");
        jlTitle.setPreferredSize(new java.awt.Dimension(100, 16));
        jPanel9.add(jlTitle);

        moTextTitle.setPreferredSize(new java.awt.Dimension(640, 23));
        jPanel9.add(moTextTitle);

        jPanel8.add(jPanel9);

        jPanel18.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Códigos de ítems: (separados por salto de línea)"));
        jPanel13.setLayout(new java.awt.BorderLayout());

        jtaItemKeys.setColumns(20);
        jtaItemKeys.setRows(5);
        jScrollPane1.setViewportView(jtaItemKeys);

        jPanel13.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel13, java.awt.BorderLayout.CENTER);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Contenidos en la descripción: (separados por salto de línea)"));
        jPanel21.setPreferredSize(new java.awt.Dimension(370, 83));
        jPanel21.setLayout(new java.awt.BorderLayout());

        jtaItemName.setColumns(20);
        jtaItemName.setRows(5);
        jScrollPane2.setViewportView(jtaItemName);

        jPanel21.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel21, java.awt.BorderLayout.EAST);

        jPanel18.add(jPanel11, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel18, java.awt.BorderLayout.WEST);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.GridLayout(3, 0, 0, 5));

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jbModify.setText("Modificar");
        jbModify.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel17.add(jbModify);

        jPanel15.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jbSaveConf.setText("Guardar");
        jbSaveConf.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel19.add(jbSaveConf);

        jPanel15.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        jbCancelConf.setText("Cancelar");
        jbCancelConf.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel20.add(jbCancelConf);

        jPanel15.add(jPanel20);

        jPanel14.add(jPanel15, java.awt.BorderLayout.NORTH);

        jPanel4.add(jPanel14, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgDetai;
    private javax.swing.ButtonGroup bgDocs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbCancelConf;
    private javax.swing.JButton jbModify;
    private javax.swing.JButton jbSaveConf;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JTextArea jtaItemKeys;
    private javax.swing.JTextArea jtaItemName;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCur;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioAllDocs;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioCurDocs;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioDetail;
    private sa.lib.gui.bean.SBeanFieldRadio moRadioResume;
    private sa.lib.gui.bean.SBeanFieldText moTextTitle;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);
        mbConfEdit = false;
        moTextTitle.setEnabled(false);
        jtaItemKeys.setEnabled(false);
        jtaItemName.setEnabled(false);
        jbSaveConf.setEnabled(false);
        jbCancelConf.setEnabled(false);

        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart.getText()), false);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd.getText()), false);
        moRadioAllDocs.setBooleanSettings(SGuiUtils.getLabelName(moRadioAllDocs.getText()), true);
        moRadioCurDocs.setBooleanSettings(SGuiUtils.getLabelName(moRadioCurDocs.getText()), false);
        moKeyCur.setKeySettings(miClient, SGuiUtils.getLabelName(moRadioCurDocs.getText()), false);
        moRadioDetail.setBooleanSettings(SGuiUtils.getLabelName(moRadioDetail.getText()), true);
        moRadioResume.setBooleanSettings(SGuiUtils.getLabelName(moRadioResume.getText()), false);
        
        moTextTitle.setTextSettings(SGuiUtils.getLabelName(jlTitle), 100);
        
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);
        moFields.addField(moRadioAllDocs);
        moFields.addField(moRadioCurDocs);
        moFields.addField(moKeyCur);
        
        moCustomerRep = new SDbCustomerReport();
        reloadCatalogues();
        
        jbModify.addActionListener(this);
        jbSaveConf.addActionListener(this);
        jbCancelConf.addActionListener(this);
    }
    
    private void reloadCatalogues() {
        try {
            moDateStart.setValue(SLibTimeUtils.getBeginOfYear(miClient.getSession().getCurrentDate()));
            moDateEnd.setValue(SLibTimeUtils.getEndOfMonth(miClient.getSession().getCurrentDate()));
            miClient.getSession().populateCatalogue(moKeyCur, SModConsts.CFGU_CUR, SLibConsts.UNDEFINED, null);
            moCustomerRep.readByReportKey(miClient.getSession(), SModSysConsts.CFG_CUSTOM_REP_FSC);
            moTextTitle.setValue(moCustomerRep.getName());
            jtaItemKeys.setText(moCustomerRep.getSettingsCode().replaceAll(",", "\n"));
            jtaItemName.setText(moCustomerRep.getSettingsName().replaceAll(",", "\n"));
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionModify() {
        mbConfEdit = true;
        jbSaveConf.setEnabled(true);
        jbCancelConf.setEnabled(true);
        moTextTitle.setEnabled(true);
        jtaItemKeys.setEnabled(true);
        jtaItemName.setEnabled(true);
        jbPrint.setEnabled(false);
    }
    
    private void actionSaveConf() {
        if (mbConfEdit) {
            if (miClient.showMsgBoxConfirm("¿Está seguro/a de guardar la nueva configuración?") == JOptionPane.OK_OPTION) {
                try {
                    moCustomerRep.setRegistryEdited(true);
                    moCustomerRep.setName(moTextTitle.getValue());
                    moCustomerRep.setSettingsCode(jtaItemKeys.getText().replaceAll("\n", ","));
                    moCustomerRep.setSettingsName(jtaItemName.getText().replaceAll("\n", ","));
                    moCustomerRep.save(miClient.getSession());
                    if (moCustomerRep.getQueryResultId() == SDbConsts.SAVE_OK) {
                        miClient.showMsgBoxInformation("¡Configuración guardada con éxito!");
                        mbConfEdit = false;
                        jbSaveConf.setEnabled(false);
                        jbCancelConf.setEnabled(false);
                        moTextTitle.setEnabled(false);
                        jtaItemKeys.setEnabled(false);
                        jtaItemName.setEnabled(false);
                        jbPrint.setEnabled(true);
                    }
                }
                catch (Exception e) {
                    miClient.showMsgBoxError(e.getMessage());
                }
            }
        }
    }

    private void actionCancelConf() {
        mbConfEdit = false;
        jbSaveConf.setEnabled(false);
        jbCancelConf.setEnabled(false);
        moTextTitle.setEnabled(false);
        jtaItemKeys.setEnabled(false);
        jtaItemName.setEnabled(false);
        jbPrint.setEnabled(true);
        moTextTitle.setValue(moCustomerRep.getName());
        jtaItemKeys.setText(moCustomerRep.getSettingsCode().replaceAll(",", "\n"));
        jtaItemName.setText(moCustomerRep.getSettingsName().replaceAll(",", "\n"));
    }
    
    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        if (validation.isValid()) {
            if (moRadioCurDocs.isSelected() && moKeyCur.getSelectedIndex() <= 0) {
                validation.setMessage("Debe seleccionar una moneda de documento.");
                validation.setComponent(moKeyCur);
            }
        }
        if (validation.isValid()) {
            if (jtaItemKeys.getText().isEmpty() && jtaItemName.getText().isEmpty()) {
                validation.setMessage("Debe existir configuración del reporte para códigos de ítems o contenido de descripción");
                validation.setComponent(jbModify);
            }
        }
        return validation;
    }

    @Override
    public void createParamsMap() {
        if (jbPrint.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                String itemKeys = ""; 
                String itemName = "";
                String cur;
                String whereCur = "";
                String parameters = "";
                String between = "dt BETWEEN '" + SLibUtils.DbmsDateFormatDate.format(moDateStart.getValue()) + "' AND '" + SLibUtils.DbmsDateFormatDate.format(moDateEnd.getValue()) + "'";
                if (!jtaItemKeys.getText().isEmpty()) {
                    for (String key : jtaItemKeys.getText().split("\n")) {
                        if (itemKeys.isEmpty()) {
                            itemKeys += "AND i.item_key IN ('" + key + "'";
                        }
                        else {
                            itemKeys += ", '" + key + "'";
                        }
                        if (parameters.isEmpty()) {
                            parameters += "'" + key + "'";
                        }
                        else{
                            parameters += ", '" + key + "'";
                        }
                    }
                }
                if (!itemKeys.isEmpty()) {
                    itemKeys += ") ";
                }
                
                if (!jtaItemName.getText().isEmpty()) {
                    for (String name : jtaItemName.getText().split("\n")) {
                        if (itemName.isEmpty()) {
                            itemName += "AND (i.item LIKE '%" + name + "%' ";
                        }
                        else {
                            itemName += "OR i.item LIKE '%" + name + "%' ";
                        }
                        if (parameters.isEmpty()) {
                            parameters = "'" + name + "'";
                        }
                        else {
                            parameters += ", '" + name + "'";
                        }
                    }
                }
                
                if (!itemName.isEmpty()){
                    itemName += ")";
                }
                
                if (moRadioAllDocs.isSelected()) {
                    cur = "TODAS";
                }
                else {
                    cur = moKeyCur.getSelectedItem().toString();
                    whereCur = "AND d.fid_cur = " + moKeyCur.getValue()[0] + " ";
                }
                
                moParamsMap = miClient.createReportParams();
                
                moParamsMap.put("sTitle", moTextTitle.getValue());
                moParamsMap.put("nDpsCategory", mnFormSubtype);
                moParamsMap.put("sItemKeys", itemKeys);  
                moParamsMap.put("tDateStart", moDateStart.getValue());  
                moParamsMap.put("tDateEnd", moDateEnd.getValue());  
                moParamsMap.put("sCur", cur);  
                moParamsMap.put("bDetail", moRadioDetail.isSelected());  
                moParamsMap.put("sParameters", parameters);  
                moParamsMap.put("sWhereCur", whereCur);   
                moParamsMap.put("sItemName", itemName);
                moParamsMap.put("sBetween", between);
            }
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbModify) {
                actionModify();
            }
            else if (button == jbSaveConf) {
                actionSaveConf();
            }
            else if (button == jbCancelConf) {
                actionCancelConf();
            }
        }
    }
}