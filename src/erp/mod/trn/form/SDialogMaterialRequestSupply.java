/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.mcfg.data.SCfgUtils;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbMaintDiogSignature;
import erp.mod.trn.db.SDbMaintUser;
import erp.mod.trn.db.SDbMaintUserSupervisor;
import erp.mod.trn.db.SDbMaterialRequest;
import erp.mod.trn.db.SDbMaterialRequestEntry;
import erp.mod.trn.db.SMaterialRequestEntryRow;
import erp.mod.trn.db.SMaterialRequestSupplyRow;
import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mtrn.data.SDataDiog;
import erp.mtrn.data.SDataDiogEntry;
import erp.mtrn.data.STrnConsumeUtils;
import erp.mtrn.data.STrnMaintConstants;
import erp.mtrn.data.STrnMaintUtilities;
import erp.mtrn.data.STrnStock;
import erp.mtrn.data.STrnStockMove;
import erp.mtrn.data.STrnStockSegregationUtils;
import static erp.mtrn.form.SFormMaintDiog.COLOR_NONSIGNED;
import static erp.mtrn.form.SFormMaintDiog.COLOR_SIGNED;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldBoolean;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Edwin Carmona
 */
public class SDialogMaterialRequestSupply extends SBeanFormDialog implements ListSelectionListener, ItemListener, ActionListener {
    
    protected SDbMaterialRequest moMaterialRequest;
    protected ArrayList<SDbMaterialRequestEntry> mlMaterialRequestEntries;
    protected SGridPaneForm moGridMatReqEty;
    protected SGridPaneForm moGridSuppliesRows;
    protected SDbMaintDiogSignature moMaintDiogSignature;
    protected int mnSegregationId;
    protected int mnParamMaintUserType;
    protected int mnItemDefaultId;
    protected boolean mbAreSigned;
    
    private SGuiFieldKeyGroup moFieldKeyEntityGroup;
    private SGuiFieldKeyGroup moFieldKeyConsumeEntityGroup;
    
    protected ArrayList<SMaterialRequestSupplyRow> mlDbMaterialRequestSupplies;
    protected ArrayList<SMaterialRequestSupplyRow> mlMemoryMaterialRequestSupplies;

    /**
     * Creates new form SDialogMaterialRequestSegregation
     * @param client
     * @param title
     */
    public SDialogMaterialRequestSupply(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_STK_SEG_X, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpBenefit = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlRequest = new javax.swing.JLabel();
        moTextRequest = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlEntity = new javax.swing.JLabel();
        moTextEntity = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jlWarehouseCompanyBranch = new javax.swing.JLabel();
        moKeyWarehouseCompanyBranch = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel31 = new javax.swing.JPanel();
        jlMaintUser = new javax.swing.JLabel();
        moKeyMaintUser = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel32 = new javax.swing.JPanel();
        jlWarehouseEntity = new javax.swing.JLabel();
        moKeyWarehouseEntity = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel33 = new javax.swing.JPanel();
        jlMaintUserSupervisor = new javax.swing.JLabel();
        moKeyMaintUserSupervisor = new sa.lib.gui.bean.SBeanFieldKey();
        jlInfo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jpRequisitionMaterialRows = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        moCheckModifyConsEntity = new sa.lib.gui.bean.SBeanFieldBoolean();
        moKeyConsumeEntity = new sa.lib.gui.bean.SBeanFieldKey();
        moKeySubConsumeEntity = new sa.lib.gui.bean.SBeanFieldKey();
        jbSupply = new javax.swing.JButton();
        jbSupplyAll = new javax.swing.JButton();
        jpReqMaterialRows = new javax.swing.JPanel();
        jpSupplyRows = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jbDeleteRow = new javax.swing.JButton();
        jpSegRows = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jpCommands1 = new javax.swing.JPanel();
        jbSign = new javax.swing.JButton();
        jtfSignatureStatus = new javax.swing.JTextField();
        jpCommands2 = new javax.swing.JPanel();
        jbEditHelp = new javax.swing.JButton();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Surtidos de requisición de materiales");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpBenefit.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Requisición de materiales:"));
        jPanel4.setPreferredSize(new java.awt.Dimension(400, 102));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlNumber);

        moTextNumber.setBackground(new java.awt.Color(240, 240, 240));
        moTextNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(moTextNumber);

        jPanel4.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRequest.setText("Solicita:");
        jlRequest.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel12.add(jlRequest);

        moTextRequest.setBackground(new java.awt.Color(240, 240, 240));
        moTextRequest.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moTextRequest);

        jPanel4.add(jPanel12);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEntity.setText("Suministra:");
        jlEntity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlEntity);

        moTextEntity.setBackground(new java.awt.Color(240, 240, 240));
        moTextEntity.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moTextEntity);

        jPanel4.add(jPanel15);

        jpBenefit.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos para surtido:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 2, 0, 5));

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseCompanyBranch.setText("Sucursal:*");
        jlWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlWarehouseCompanyBranch);

        moKeyWarehouseCompanyBranch.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel30.add(moKeyWarehouseCompanyBranch);

        jPanel6.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaintUser.setText("Responsable:*");
        jlMaintUser.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jlMaintUser);

        moKeyMaintUser.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel31.add(moKeyMaintUser);

        jPanel6.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWarehouseEntity.setText("Almacén:*");
        jlWarehouseEntity.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel32.add(jlWarehouseEntity);

        moKeyWarehouseEntity.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel32.add(moKeyWarehouseEntity);

        jPanel6.add(jPanel32);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaintUserSupervisor.setText("Residente:");
        jlMaintUserSupervisor.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel33.add(jlMaintUserSupervisor);

        moKeyMaintUserSupervisor.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel33.add(moKeyMaintUserSupervisor);

        jPanel6.add(jPanel33);

        jlInfo.setForeground(new java.awt.Color(0, 51, 255));
        jlInfo.setText("Info: Los materiales apartados serán liberados al guardar.");
        jPanel6.add(jlInfo);

        jpBenefit.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel1.add(jpBenefit, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpRequisitionMaterialRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Partidas de la requisición:"));
        jpRequisitionMaterialRows.setPreferredSize(new java.awt.Dimension(100, 250));
        jpRequisitionMaterialRows.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel1.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel13.add(jLabel1);

        moCheckModifyConsEntity.setText("Modificar entidad de consumo");
        moCheckModifyConsEntity.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel13.add(moCheckModifyConsEntity);

        moKeyConsumeEntity.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel13.add(moKeyConsumeEntity);

        moKeySubConsumeEntity.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel13.add(moKeySubConsumeEntity);

        jbSupply.setText("Surtir");
        jbSupply.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSupply.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jbSupply);

        jbSupplyAll.setText("Surtir todo");
        jbSupplyAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSupplyAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jbSupplyAll);

        jpRequisitionMaterialRows.add(jPanel13, java.awt.BorderLayout.NORTH);

        jpReqMaterialRows.setLayout(new java.awt.BorderLayout());
        jpRequisitionMaterialRows.add(jpReqMaterialRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpRequisitionMaterialRows, java.awt.BorderLayout.NORTH);

        jpSupplyRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Surtido:"));
        jpSupplyRows.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jButton1.setText("Ver lotes");
        jButton1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jButton1);

        jLabel2.setPreferredSize(new java.awt.Dimension(735, 23));
        jPanel14.add(jLabel2);

        jbDeleteRow.setText("Eliminar partida");
        jbDeleteRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jbDeleteRow);

        jpSupplyRows.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpSegRows.setLayout(new java.awt.BorderLayout());
        jpSupplyRows.add(jpSegRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpSupplyRows, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(592, 33));
        jPanel2.setLayout(new java.awt.GridLayout(1, 2));

        jpCommands1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jbSign.setText("Firmar"); // NOI18N
        jbSign.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommands1.add(jbSign);

        jtfSignatureStatus.setEditable(false);
        jtfSignatureStatus.setFocusable(false);
        jtfSignatureStatus.setPreferredSize(new java.awt.Dimension(250, 20));
        jpCommands1.add(jtfSignatureStatus);

        jPanel2.add(jpCommands1);

        jpCommands2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbEditHelp.setText("?");
        jbEditHelp.setToolTipText("¿Por qué no se puede modificar el documento?");
        jbEditHelp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jbEditHelp.setPreferredSize(new java.awt.Dimension(23, 23));
        jpCommands2.add(jbEditHelp);

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jpCommands2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jpCommands2.add(jbCancel);

        jPanel2.add(jpCommands2);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDeleteRow;
    private javax.swing.JButton jbEditHelp;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbSign;
    private javax.swing.JButton jbSupply;
    private javax.swing.JButton jbSupplyAll;
    private javax.swing.JLabel jlEntity;
    private javax.swing.JLabel jlInfo;
    private javax.swing.JLabel jlMaintUser;
    private javax.swing.JLabel jlMaintUserSupervisor;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlRequest;
    private javax.swing.JLabel jlWarehouseCompanyBranch;
    private javax.swing.JLabel jlWarehouseEntity;
    private javax.swing.JPanel jpBenefit;
    private javax.swing.JPanel jpCommands1;
    private javax.swing.JPanel jpCommands2;
    private javax.swing.JPanel jpReqMaterialRows;
    private javax.swing.JPanel jpRequisitionMaterialRows;
    private javax.swing.JPanel jpSegRows;
    private javax.swing.JPanel jpSupplyRows;
    private javax.swing.JTextField jtfSignatureStatus;
    private sa.lib.gui.bean.SBeanFieldBoolean moCheckModifyConsEntity;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsumeEntity;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMaintUser;
    private sa.lib.gui.bean.SBeanFieldKey moKeyMaintUserSupervisor;
    private sa.lib.gui.bean.SBeanFieldKey moKeySubConsumeEntity;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseCompanyBranch;
    private sa.lib.gui.bean.SBeanFieldKey moKeyWarehouseEntity;
    private sa.lib.gui.bean.SBeanFieldText moTextEntity;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextRequest;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber), 150);
        moTextRequest.setTextSettings(SGuiUtils.getLabelName(jlRequest), 150);
        moKeyWarehouseCompanyBranch.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseCompanyBranch), false);
        moKeyWarehouseEntity.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseEntity), false);
        moKeyMaintUser.setKeySettings(miClient, SGuiUtils.getLabelName(jlMaintUser), true);
        moKeyMaintUserSupervisor.setKeySettings(miClient, SGuiUtils.getLabelName(jlMaintUserSupervisor), false);
        moKeyConsumeEntity.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseEntity), false);
        moKeySubConsumeEntity.setKeySettings(miClient, SGuiUtils.getLabelName(jlWarehouseEntity), false);
        
        moFields.addField(moKeyWarehouseCompanyBranch);
        moFields.addField(moKeyWarehouseEntity);
        moFields.addField(moKeyConsumeEntity);
        moFields.addField(moKeySubConsumeEntity);
        
        moFieldKeyEntityGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyConsumeEntityGroup = new SGuiFieldKeyGroup(miClient);

        moGridMatReqEty = new SGridPaneForm(miClient, SModConsts.TRNX_MAT_REQ_ETY_ROW, SLibConsts.UNDEFINED, "Renglones de la requisición") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Concepto"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Requeridas"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Surtidas"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Apartadas"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Existencias"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Pendiente"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_2D, "A surtir");
                col.setEditable(true);
                gridColumnsForm.add(col);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Entidad consumo"));

                return gridColumnsForm;
            }
        };
        jpReqMaterialRows.add(moGridMatReqEty, BorderLayout.CENTER);
        
        moGridSuppliesRows = new SGridPaneForm(miClient, SModConsts.TRN_STK_SEG_WHS_ETY, SLibConsts.UNDEFINED, "Apartados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Ítem"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Almacén"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Entidad cons"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Subentidad cons"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_3D, "Surtido"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Guardado"));

                return gridColumnsForm;
            }
        };
        jpSegRows.add(moGridSuppliesRows, BorderLayout.CENTER);
        
        moTextNumber.setEditable(false);
        moTextRequest.setEditable(false);
        moTextEntity.setEditable(false);
        
        mnSegregationId = 0;
        mnItemDefaultId = 0;
        
        try {
            removeAllListeners();
            reloadCatalogues();
            addAllListeners();
        }
        catch (NullPointerException ex) {
            Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void resetFormLocal() {
        try {
            moKeyMaintUser.setSelectedIndex(0);
            moKeyWarehouseCompanyBranch.setSelectedIndex(0);
//            moKeyWarehouseCompanyBranch.setValue(((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey());
//            SGuiUtils.locateItem(moKeyWarehouseCompanyBranch, ((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey());
        }
        catch (NullPointerException ex) {
            Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
        moCheckModifyConsEntity.setValue(false);
        changeCheckConsumeEntity();
    }
    
    private void actionChangeConsumeEntity() {
        moKeySubConsumeEntity.setEnabled(false);
        moKeySubConsumeEntity.removeAllItems();
        
        if (((SGuiItem) moKeyConsumeEntity.getSelectedItem()) == null || ((SGuiItem) moKeyConsumeEntity.getSelectedItem()).getPrimaryKey().length == 0) {
            moKeySubConsumeEntity.setEnabled(false);
        }
        else {
            SGuiParams params = new SGuiParams();
            params.setKey(moKeyConsumeEntity.getValue());
            miClient.getSession().populateCatalogue(moKeySubConsumeEntity, SModConsts.TRN_MAT_CONS_SUBENT, SLibConstants.UNDEFINED, params);

            moKeySubConsumeEntity.setEnabled(moKeySubConsumeEntity.getItemCount() > 0);
        }
    }
    
    private void loadEntryMatRequestSelected() {
        SMaterialRequestEntryRow oMaterialRequestEntry = null;
        
        oMaterialRequestEntry = (SMaterialRequestEntryRow) moGridMatReqEty.getSelectedGridRow();

        if (oMaterialRequestEntry != null) {
            showSupplyEntries(oMaterialRequestEntry);
        }
    }
    
    private void changeCheckConsumeEntity() {
        moKeyConsumeEntity.setEnabled(moCheckModifyConsEntity.isSelected());
        moKeySubConsumeEntity.setEnabled(moCheckModifyConsEntity.isSelected());
        
        if (moCheckModifyConsEntity.isSelected()) {
            int idConsumeEntity = STrnConsumeUtils.getDefaultEntityOfUser(miClient.getSession(), miClient.getSession().getUser().getPkUserId());
            SGuiUtils.locateItem(moKeyConsumeEntity, new int[] { idConsumeEntity });
        }
        else {
            moKeyConsumeEntity.setSelectedIndex(-1);
        }
        
        this.actionChangeConsumeEntity();
    }

    /**
     * Mostrar registros en la tabla superior
     */
    @SuppressWarnings("unchecked")
    private void showMaterialRequestEntries(boolean bReset) {
        Vector<SGridRow> rows = new Vector<>();

        try {
            moGridMatReqEty.clearGridRows();
            if (bReset) {
                mbAreSigned = false;
                mlDbMaterialRequestSupplies = new ArrayList<>();
            }
            
            mlMaterialRequestEntries = moMaterialRequest.getChildEntries();
            for (SDbMaterialRequestEntry oMaterialRequestEntry : mlMaterialRequestEntries) {
                STrnStockMove params = new STrnStockMove();
                params.setPkYearId(miClient.getSession().getCurrentYear());
                params.setPkItemId(oMaterialRequestEntry.getFkItemId());
                params.setPkUnitId(oMaterialRequestEntry.getFkUnitId());
                params.setPkCompanyBranchId(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[0] : 0);
                params.setPkWarehouseId(moKeyWarehouseEntity.getSelectedIndex() > 0 ? moKeyWarehouseEntity.getValue()[1] : 0);
                STrnStock oStock = STrnStockSegregationUtils.getAllStock((SClientInterface) miClient, params);
                
                int consEntity = oMaterialRequestEntry.getFkEntMatConsumptionEntityId_n() > 0 ? 
                                        oMaterialRequestEntry.getFkEntMatConsumptionEntityId_n() : 
                                        moMaterialRequest.getFkEntMatConsumptionEntityId();
                
                int subConsEntity = oMaterialRequestEntry.getFkSubentMatConsumptionSubentityId_n() > 0 ? 
                                        oMaterialRequestEntry.getFkSubentMatConsumptionSubentityId_n() : 
                                        moMaterialRequest.getFkSubentMatConsumptionSubentityId();
                
                SMaterialRequestEntryRow oRow = new SMaterialRequestEntryRow((SClientInterface) miClient, 
                                                                            SMaterialRequestEntryRow.FORM_SUPPLY,
                                                                            oMaterialRequestEntry.getFkItemId(), 
                                                                            oMaterialRequestEntry.getFkUnitId(),
                                                                            consEntity,
                                                                            subConsEntity
                                                                            );
                
                oRow.setPkMatRequestId(oMaterialRequestEntry.getPkMatRequestId());
                oRow.setPkEntryId(oMaterialRequestEntry.getPkEntryId());
                oRow.setQuantity(oMaterialRequestEntry.getQuantity());
                oRow.setAuxStock(params.getPkWarehouseId() == 0 ? 0d : oStock.getAvailableStock());
                
                double dSegregated = 0d;
                if (mnSegregationId > 0) {
                    params.setPkCompanyBranchId(0);
                    params.setPkWarehouseId(0);
                    params.setSegregationId(mnSegregationId);
                    STrnStock oReqSeg = STrnStockSegregationUtils.getStockSegregated((SClientInterface) miClient, params);
                
                    dSegregated = oReqSeg.getSegregatedStock();
                }
                oRow.setAuxSegregated(dSegregated);
                
                if (bReset) {
                    ArrayList<SMaterialRequestSupplyRow> lEntrySuppliesRows = SMaterialRequestUtils.getMaterialRequestSupplies(miClient, oMaterialRequestEntry.getPkMatRequestId(), oMaterialRequestEntry.getPkEntryId());
                    mlDbMaterialRequestSupplies.addAll(lEntrySuppliesRows);
                }
                
                /**
                 * Surtido desde la base de datos
                 */
                double qtySupplied = 0d;
                if (mlDbMaterialRequestSupplies.size() > 0) {
                    qtySupplied = mlDbMaterialRequestSupplies.stream()
                                .filter(row -> (row.getFkMatRequestId() == oMaterialRequestEntry.getPkMatRequestId() 
                                                && row.getFkMatRequestEntryId() == oMaterialRequestEntry.getPkEntryId()
                                                && ! row.isDeleted()))
                                .mapToDouble(o -> o.getQuantity())
                                .sum();
                }
                /**
                 * Surtido que se mantiene en memoria
                 */
                List<SMaterialRequestSupplyRow> filteredList = mlMemoryMaterialRequestSupplies.stream()
                                            .filter(row -> (row.getFkMatRequestId() == oMaterialRequestEntry.getPkMatRequestId() && row.getFkMatRequestEntryId() == oMaterialRequestEntry.getPkEntryId()))
                                            .collect(Collectors.toList());
                double qtyMemorySupplied = 0d;
                if (filteredList.size() > 0) {
                    qtyMemorySupplied = filteredList.stream()
                                .mapToDouble(o -> o.getQuantity())
                                .sum();
                }
                oRow.setAuxSupplied(qtySupplied + qtyMemorySupplied);
                
                rows.add(oRow);
            }

            moGridMatReqEty.populateGrid(rows, this);
            moGridMatReqEty.clearSortKeys();
            moGridMatReqEty.setSelectedGridRow(0);
            
            if (rows.isEmpty()) {
                moGridSuppliesRows.clearGridRows();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Mostrar renglones de la tabla
     * @param oMaterialRequestEntry 
     */
    private void showSupplyEntries(SMaterialRequestEntryRow oMaterialRequestEntry) {
        Vector<SGridRow> rows = new Vector<>();

        try {
            ArrayList<SMaterialRequestSupplyRow> etys = new ArrayList<>();
            etys.addAll(mlDbMaterialRequestSupplies);
            etys.addAll(mlMemoryMaterialRequestSupplies);
            
            for (SMaterialRequestSupplyRow ety : etys) {
                if (ety.getFkMatRequestId() == oMaterialRequestEntry.getPkMatRequestId() && ety.getFkMatRequestEntryId() == oMaterialRequestEntry.getPkEntryId()
                        && ! ety.isDeleted()) {
                    rows.add(ety);
                }
            }
            
            moGridSuppliesRows.populateGrid(rows);
            moGridSuppliesRows.clearSortKeys();
            moGridSuppliesRows.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Mostrar encabezado de requisición
     */
    private void initMaterialRequestData() {
        try {
            moTextNumber.setValue(moMaterialRequest.getNumber() + "");
            /*
            moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDelivery_n()));
            moTextDateEnd.setValue(SLibUtils.DateFormatDate.format(moDps.getDateDocLapsing_n()));
            */
            moTextRequest.setValue(moMaterialRequest.getAuxConsEntName());
            moTextEntity.setValue(moMaterialRequest.getAuxProvEntName());

            mlMemoryMaterialRequestSupplies = new ArrayList<>();
            boolean bReset = true;
            showMaterialRequestEntries(bReset);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Apartar todo
     */
    private void actionSupplyAll() {
        if (moKeyWarehouseEntity.getSelectedIndex() == 0 || moKeyWarehouseCompanyBranch.getSelectedIndex() == 0) {
            miClient.showMsgBoxWarning("Debe seleccionar un almacén.");
            moKeyWarehouseCompanyBranch.requestFocus();
            return;
        }
        
        SMaterialRequestEntryRow oMatReqRow;
        for (int i = 0; i < moGridMatReqEty.getTable().getRowCount(); i++) {
            oMatReqRow = (SMaterialRequestEntryRow) moGridMatReqEty.getGridRow(i);
            if (oMatReqRow.getQuantity() - oMatReqRow.getAuxSegregated() > 0) {
                oMatReqRow.setAuxToSegregate(oMatReqRow.getQuantity() - oMatReqRow.getAuxSegregated());
            }
        }
        
        this.actionSupply();
    }
    
    /**
     * Segregar
     */
    private void actionSupply() {
        if (moKeyWarehouseEntity.getSelectedIndex() == 0 || moKeyWarehouseCompanyBranch.getSelectedIndex() == 0) {
            miClient.showMsgBoxWarning("Debe seleccionar un almacén.");
            moKeyWarehouseCompanyBranch.requestFocus();
            return;
        }
        
        SMaterialRequestEntryRow oMatReqRow;
        double dToSupply = 0d;
        for (int i = 0; i < moGridMatReqEty.getTable().getRowCount(); i++) {
            oMatReqRow = (SMaterialRequestEntryRow) moGridMatReqEty.getGridRow(i);
            if (oMatReqRow.getAuxToSupply() > 0) {
                if (oMatReqRow.getFkItemId() == mnItemDefaultId) {
                    miClient.showMsgBoxWarning("No se puede surtir esta partida, el ítem debe ser cambiado.");
                    return;
                }
                if (oMatReqRow.getAuxToSupply() > oMatReqRow.getAuxStock()) {
                    miClient.showMsgBoxWarning("No puede surtir más de lo que hay en existencia.");
                    return;
                }
                if (oMatReqRow.getAuxToSupply() > (oMatReqRow.getQuantity() - oMatReqRow.getAuxSupplied())) {
                    miClient.showMsgBoxWarning("No puede surtir más de lo restante por surtir.");
                    return;
                }
                dToSupply += oMatReqRow.getAuxToSupply();
            }
        }
        
        if (dToSupply == 0d) {
            miClient.showMsgBoxWarning("No hay nada que surtir.");
            return;
        }
        
        ArrayList<SMaterialRequestSupplyRow> lSupplyRows = new ArrayList<>();
        SMaterialRequestSupplyRow oSupplyEty;
        for (int i = 0; i < moGridMatReqEty.getTable().getRowCount(); i++) {
            oMatReqRow = (SMaterialRequestEntryRow) moGridMatReqEty.getGridRow(i);
            if (oMatReqRow.getAuxToSupply() > 0) {
                int consumeEntity = moCheckModifyConsEntity.isSelected() ? 
                                        (moKeyConsumeEntity.getValue().length > 0 ? moKeyConsumeEntity.getValue()[0] : 0) : 
                                        oMatReqRow.getFkConsumeEntityId_n();
                int subConsumeEntity = moCheckModifyConsEntity.isSelected() ? 
                                        (moKeySubConsumeEntity.getValue().length > 1 ? moKeySubConsumeEntity.getValue()[1] : 0) : 
                                        oMatReqRow.getFkSubConsumeEntityId_n();
                
                oSupplyEty = new SMaterialRequestSupplyRow((SClientInterface) miClient, 
                                                            oMatReqRow.getFkItemId(), 
                                                            oMatReqRow.getFkUnitId(),
                                                            moKeyWarehouseEntity.getValue()[0],
                                                            moKeyWarehouseEntity.getValue()[1],
                                                            consumeEntity,
                                                            subConsumeEntity
                                                            );
                
                oSupplyEty.setPkDiogYearId(miClient.getSession().getCurrentYear());
                
                oSupplyEty.setQuantity(oMatReqRow.getAuxToSupply());
                oSupplyEty.setFkMatRequestId(oMatReqRow.getPkMatRequestId());
                oSupplyEty.setFkMatRequestEntryId(oMatReqRow.getPkEntryId());
                
                lSupplyRows.add(oSupplyEty);
            }
        }
        mlMemoryMaterialRequestSupplies.addAll(lSupplyRows);
        boolean bReset = false;
        showMaterialRequestEntries(bReset);
        mbAreSigned = false;
        showSignatureStatus();
    }
    
    /**
     * Liberar
     */
    private void actionDeleteRow() {
        SGridRow row = moGridSuppliesRows.getSelectedGridRow();
        
        if (row == null) {
            return;
        }
        
        SMaterialRequestSupplyRow oRow = (SMaterialRequestSupplyRow) row;
        SMaterialRequestSupplyRow oAuxRow = null;
        if (oRow.getPkDocId() > 0) {
            if (miClient.showMsgBoxConfirm("El documento ya está firmado. ¿Deseas remover la firma y continuar?") != JOptionPane.YES_OPTION) {
                return;
            }
            
            for (SMaterialRequestSupplyRow oDbRow : mlDbMaterialRequestSupplies) {
                if (oRow.isTheSameRow(oDbRow)) {
                    oDbRow.setIsDeleted(true);
                    break;
                }
            }
        }
        else {
            for (SMaterialRequestSupplyRow oMemoryRow : mlMemoryMaterialRequestSupplies) {
                if (oRow.isTheSameRow(oMemoryRow)) {
                    oAuxRow = oMemoryRow;
                    break;
                }
            }
        }
        
        if (oAuxRow != null) {
            mlMemoryMaterialRequestSupplies.remove(oAuxRow);
        }
        
        mbAreSigned = true;
        boolean bReset = false;
        showMaterialRequestEntries(bReset);
    }
    
    private void actionOk() {
        if (! isDiogSigned()) {
            try {
                if (getSignatoryFingerprint() == null) {
                    if (miClient.showMsgBoxConfirm("El firmante carece de huella digital.\n¿Deseas dejar el movimiento sin firmar?") != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                else {
                    if (miClient.showMsgBoxConfirm("¿Deseas dejar el movimiento sin firmar?") != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        if (SGuiUtils.computeValidation(miClient, validateForm())) {
            /**
            * Creación de Diogs que están en memoria
            */
            int user = moKeyMaintUser.getSelectedIndex() <= 0 ? 0 : moKeyMaintUser.getValue()[0];
            int userSup = moKeyMaintUserSupervisor.getSelectedIndex() <= 0 ? 1 : moKeyMaintUserSupervisor.getValue()[0];
            ArrayList<SDataDiog> lDiogs = SMaterialRequestUtils.makeDiogs(miClient.getSession().getCurrentYear(), 
                                                                 miClient.getSession().getCurrentDate(), 
                                                                 miClient.getSession().getUser().getPkUserId(),
                                                                 mlMemoryMaterialRequestSupplies,
                                                                 mnSegregationId,
                                                                 user,
                                                                 userSup
                                                            );

           HashMap<String, SDataDiog> mDbDiogs = new HashMap<>();
           SDataDiog oAuxDiog;
           for (SMaterialRequestSupplyRow moDiogDbRow : mlDbMaterialRequestSupplies) {
               /**
                * Si alguno de las partidas de diogs de db están borradas, se lee el 
                * Diog, se marca como eliminada y se agrega al arraylist para guardarse
                */
               if (moDiogDbRow.isDeleted()) {
                   String diogKey = moDiogDbRow.getPkYearId() + "_" + moDiogDbRow.getPkDocId();
                   if (! mDbDiogs.containsKey(diogKey)) {
                       try {
                           oAuxDiog = new SDataDiog();
                           oAuxDiog.read(new int[] { moDiogDbRow.getPkYearId(), moDiogDbRow.getPkDocId() }, miClient.getSession().getStatement().getConnection().createStatement());
                           mDbDiogs.put(diogKey, oAuxDiog);
                       }
                       catch (SQLException ex) {
                           Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
                       }
                   }

                   oAuxDiog = mDbDiogs.get(diogKey);
                   if (oAuxDiog == null) {
                       miClient.showMsgBoxError("Ocurrió un error al guardar las partidas eliminadas.\nInténtelo de nuevo.");
                       return;
                   }

                   for (SDataDiogEntry dbmsEntry : oAuxDiog.getDbmsEntries()) {
                       if (dbmsEntry.getPkYearId() == moDiogDbRow.getPkYearId() 
                               && dbmsEntry.getPkDocId() == moDiogDbRow.getPkDocId() 
                               && dbmsEntry.getPkEntryId() == moDiogDbRow.getPkEtyId()) {
                           dbmsEntry.setIsDeleted(true);
                           dbmsEntry.setIsRegistryEdited(true);
                           oAuxDiog.setAuxSegregationStockId(mnSegregationId);
                           break;
                       }
                   }
               }
           }

           for (Map.Entry<String, SDataDiog> entry : mDbDiogs.entrySet()) {
               SDataDiog oDbDiog = entry.getValue();
               lDiogs.add(oDbDiog);
           }
           
           if (lDiogs.isEmpty()) {
               miClient.showMsgBoxWarning("No hay nada que guardar");
               return;
           }

           String result = SMaterialRequestUtils.saveDiogs(miClient.getSession().getDatabase().getConnection(), lDiogs);
           if (result.length() > 0) {
               miClient.showMsgBoxError(result);
               return;
           }
           mlMemoryMaterialRequestSupplies = new ArrayList<>();
           resetFormLocal();
           boolean bReset = true;
           showMaterialRequestEntries(bReset);
           miClient.showMsgBoxInformation("Movimientos guardados correctamente");
        }
    }
    
    private void populateMaintUserSupervisor() {
        moKeyMaintUserSupervisor.setEnabled(false);
        moKeyMaintUserSupervisor.removeAllItems();
        moKeyMaintUser.getSelectedItem();
        
        if (shouldEnableMaintUserSupervisor()) {
            miClient.getSession().populateCatalogue(moKeyMaintUserSupervisor, SModConsts.TRN_MAINT_USER_SUPV, SLibConstants.UNDEFINED, new SGuiParams(moKeyMaintUser.getValue()));
            moKeyMaintUserSupervisor.setEnabled(true);
        }
        
//        int idBp = ((SGuiItem) moKeyMaintUser.getSelectedItem()).getPrimaryKey()[0];
//        int idConsumeEntity = STrnConsumeUtils.getDefaultEntityOfBp(miClient.getSession(), idBp);
//        SGuiUtils.locateItem(jcbEntryConsEntity, new int[] { idConsumeEntity });
    }
    
    private boolean shouldEnableMaintUserSupervisor() {
        return mnParamMaintUserType == SModSysConsts.TRNX_TP_MAINT_USER_CONTRACTOR &&               
                moKeyMaintUser.getSelectedIndex() > 0;                
    }
    
    private boolean isDiogSigned() {
        if (moMaintDiogSignature == null) {
            return false;
        }
        
        boolean thereAreDeleted = false;
        for (SMaterialRequestSupplyRow moDiogDbRow : mlDbMaterialRequestSupplies) {
            /**
             * Si alguno de las partidas de diogs de db están borradas, se lee el 
             * Diog, se marca como eliminada y se agrega al arraylist para guardarse
             */
            if (moDiogDbRow.isDeleted()) {
                thereAreDeleted = true;
            }
        }
        
        return !(thereAreDeleted && !mbAreSigned);
    }
    
    private byte[] getSignatoryFingerprint() throws SQLException {
        int dataType = SLibConstants.UNDEFINED;
        int[] signatoryKey = null;
        byte[] fingerprint = null;
                
        if (moKeyMaintUserSupervisor.getSelectedIndex() > 0) {
            dataType = SModConsts.TRN_MAINT_USER_SUPV;
            signatoryKey = ((SGuiItem) moKeyMaintUserSupervisor.getSelectedItem()).getPrimaryKey();
        }
        else if (moKeyMaintUser.getSelectedIndex() > 0) {
            dataType = SModConsts.TRN_MAINT_USER;
            signatoryKey = ((SGuiItem) moKeyMaintUser.getSelectedItem()).getPrimaryKey();
        }
        
        switch (dataType) {
            case SModConsts.TRN_MAINT_USER:
                SDbMaintUser user = (SDbMaintUser) miClient.getSession().readRegistry(dataType, signatoryKey);
                if (user.getFingerprint_n() != null) {
                    fingerprint = user.getFingerprint_n().getBytes(1, (int) user.getFingerprint_n().length());
                }
                break;
            case SModConsts.TRN_MAINT_USER_SUPV:
                SDbMaintUserSupervisor userSupervisor = (SDbMaintUserSupervisor) miClient.getSession().readRegistry(dataType, signatoryKey);
                if (userSupervisor.getFingerprint_n() != null) {
                    fingerprint = userSupervisor.getFingerprint_n().getBytes(1, (int) userSupervisor.getFingerprint_n().length());
                }
                break;
        }

        return fingerprint;
    }
    
    private int getSignatoryFingerPassword() throws SQLException {
        int dataType = SLibConstants.UNDEFINED;
        int[] signatoryKey = null;
        int fingerPassword = 0;
        
        if (moKeyMaintUserSupervisor.getSelectedIndex() > 0) {
            dataType = SModConsts.TRN_MAINT_USER_SUPV;
            signatoryKey = ((SGuiItem) moKeyMaintUserSupervisor.getSelectedItem()).getPrimaryKey();
        }
        else if (moKeyMaintUser.getSelectedIndex() > 0) {
            dataType = SModConsts.TRN_MAINT_USER;
            signatoryKey = ((SGuiItem) moKeyMaintUser.getSelectedItem()).getPrimaryKey();
        }
        
        switch (dataType) {
            case SModConsts.TRN_MAINT_USER:
                SDbMaintUser user = (SDbMaintUser) miClient.getSession().readRegistry(dataType, signatoryKey);
                fingerPassword = String.valueOf(user.getPinNumber()).length();
                
                if (String.valueOf(user.getPinNumber()).length() == 4) {
                fingerPassword = user.getPinNumber();
                }
                break;
            case SModConsts.TRN_MAINT_USER_SUPV:
                getSignatoryFingerprint();
                break;
        }

        return fingerPassword;
    }
    
    private void showSignatureStatus() {
        if (isDiogSigned()) {
            jtfSignatureStatus.setText(STrnMaintConstants.SIGNED);
            jtfSignatureStatus.setBackground(COLOR_SIGNED);
        }
        else {
            jtfSignatureStatus.setText(STrnMaintConstants.NONSIGNED);
            jtfSignatureStatus.setBackground(COLOR_NONSIGNED);
        }
        jtfSignatureStatus.setCaretPosition(0);
    }
    
    private void actionSign() {
        try {
            byte[] fingerprint = getSignatoryFingerprint();
            int fingerPassword = getSignatoryFingerPassword();
            
            if (fingerprint == null && fingerPassword == 0) {
                throw new Exception("No hay un firmante seleccionado o el firmante carece de huella digital y contraseña.");
            }
            if (fingerprint != null) {
                if (STrnMaintUtilities.verifyFingerprint((SClientInterface) miClient, fingerprint)) {
                    moMaintDiogSignature = new SDbMaintDiogSignature();
                    showSignatureStatus();
                }
            }            
            else if (fingerPassword != 0) {
                if (STrnMaintUtilities.verifyFingerPassword((SClientInterface) miClient, fingerPassword)) {
                    moMaintDiogSignature = new SDbMaintDiogSignature();
                    showSignatureStatus();                
                }
            } 
            else {
                throw new Exception("No hay un firmante seleccionado o el firmante carece de huella digital y contraseña.");
            }
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
            miClient.showMsgBoxError(ex.getMessage());
        }
        
    }
    
    public void setFormParams(final int[] pk, final int paramMaintUserType) {
        moMaterialRequest = (SDbMaterialRequest) miClient.getSession().readRegistry(SModConsts.TRN_MAT_REQ, new int[] { pk[0] });
        mnParamMaintUserType = paramMaintUserType;
        try {
            mnSegregationId = STrnStockSegregationUtils.getStockSegregationIdByReference(miClient.getSession(), new int[] { pk[0] }, SDataConstantsSys.TRNS_TP_STK_SEG_REQ_MAT);
            mnItemDefaultId = Integer.parseInt(SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_TRN_MAT_REQ_ETY_ITEM_NEW));
        }
        catch(NumberFormatException e) {
            Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, e);
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogMaterialRequestSupply.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        resetFormLocal();
        initMaterialRequestData();
    }
    
    @Override
    public void addAllListeners() {
        jbSupply.addActionListener(this);
        jbDeleteRow.addActionListener(this);
        jbSupplyAll.addActionListener(this);
        jbOk.addActionListener(this);
        jbSign.addActionListener(this);
        
        moKeyWarehouseCompanyBranch.addItemListener(this);
        moKeyWarehouseEntity.addItemListener(this);
        moKeyMaintUser.addItemListener(this);
        moKeyMaintUserSupervisor.addItemListener(this);
        moKeyConsumeEntity.addItemListener(this);
        moKeySubConsumeEntity.addItemListener(this);
        moCheckModifyConsEntity.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSupply.removeActionListener(this);
        jbDeleteRow.removeActionListener(this);
        jbSupplyAll.removeActionListener(this);
        jbOk.removeActionListener(this);
        jbSign.removeActionListener(this);
        
        moKeyWarehouseCompanyBranch.removeItemListener(this);
        moKeyWarehouseEntity.removeItemListener(this);
        moKeyMaintUser.removeItemListener(this);
        moKeyMaintUserSupervisor.removeItemListener(this);
        moKeyConsumeEntity.removeItemListener(this);
        moKeySubConsumeEntity.removeItemListener(this);
        moCheckModifyConsEntity.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moFieldKeyEntityGroup.initGroup();
        moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseCompanyBranch, SModConsts.BPSU_BPB, miClient.getSession().getConfigCompany().getCompanyId(), null);
        moFieldKeyEntityGroup.addFieldKey(moKeyWarehouseEntity, SModConsts.CFGU_COB_ENT, SModSysConsts.CFGS_CT_ENT_WH, null);
        moFieldKeyEntityGroup.populateCatalogues();
        
        miClient.getSession().populateCatalogue(moKeyMaintUser, SModConsts.TRN_MAINT_USER, mnParamMaintUserType, null);
        
        moFieldKeyConsumeEntityGroup.initGroup();
        moFieldKeyConsumeEntityGroup.addFieldKey(moKeyConsumeEntity, SModConsts.TRN_MAT_CONS_ENT, SLibConsts.UNDEFINED, null);
        moFieldKeyConsumeEntityGroup.addFieldKey(moKeySubConsumeEntity, SModConsts.TRN_MAT_CONS_SUBENT, SLibConsts.UNDEFINED, null);
        moFieldKeyConsumeEntityGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridMatReqEty.getTable().getSelectedRowCount() != -1) {
                loadEntryMatRequestSelected();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == moKeyWarehouseEntity) {
                boolean bReset = false;
                showMaterialRequestEntries(bReset);
            }
            else if (comboBox == moKeyConsumeEntity) {
                actionChangeConsumeEntity();
            }
            else if (comboBox == moKeyMaintUser) {
                populateMaintUserSupervisor();
            }
        }
        else if (e.getSource() instanceof SBeanFieldBoolean) {
            SBeanFieldBoolean bean = (SBeanFieldBoolean) e.getSource();
            
            if (bean == moCheckModifyConsEntity) {
                changeCheckConsumeEntity();
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbSupply) {
                actionSupply();
            }
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
            else if (button == jbSupplyAll) {
                actionSupplyAll();
            }
            else if (button == jbSign) {
                actionSign();
            }
            else if (button == jbOk) {
                actionOk();
            }
        }
    }
}
