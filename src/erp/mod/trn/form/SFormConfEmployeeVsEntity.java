/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.mod.SModConsts;
import erp.mod.trn.db.SDbConfEmployeeVsEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntity;
import erp.mod.trn.db.SDbMaterialConsumptionEntityEmployee;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormConfEmployeeVsEntity extends SBeanForm implements ActionListener {
    
    private SDbConfEmployeeVsEntity moRegistry;
    
    private SGridPaneForm moGridMatConsEnt;
    private SGridPaneForm moGridMatConsEntSelected;
    
    private ArrayList<SDbMaterialConsumptionEntity> maMatConsEnt;
    private ArrayList<SDbMaterialConsumptionEntityEmployee> maMatConsEntSelected;
    

    /**
     * Creates new form SFormConfEmployeeVsEntity
     * @param client
     * @param title
     */
    public SFormConfEmployeeVsEntity(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRNX_CONF_EMP_VS_ENT, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpConsumption = new javax.swing.JPanel();
        jpEmployee = new javax.swing.JPanel();
        moTextEmployee = new sa.lib.gui.bean.SBeanFieldText();
        jpConsAvailable = new javax.swing.JPanel();
        jpConsAvailableLabel = new javax.swing.JPanel();
        jlConsAvailable = new javax.swing.JLabel();
        jpGridConsAva = new javax.swing.JPanel();
        jpConsButtons = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbConsAdd = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jbConsAddAll = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbConsRemove = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jbConsRemoveAll = new javax.swing.JButton();
        jpConsSelected = new javax.swing.JPanel();
        jpConsSelectedLabel = new javax.swing.JPanel();
        jlConsSelected = new javax.swing.JLabel();
        jpGridConsSel = new javax.swing.JPanel();

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpConsumption.setLayout(new java.awt.BorderLayout());

        jpEmployee.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        moTextEmployee.setEditable(false);
        moTextEmployee.setEnabled(false);
        moTextEmployee.setPreferredSize(new java.awt.Dimension(400, 23));
        jpEmployee.add(moTextEmployee);

        jpConsumption.add(jpEmployee, java.awt.BorderLayout.NORTH);

        jpConsAvailable.setLayout(new java.awt.BorderLayout());

        jpConsAvailableLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsAvailable.setText("Entidades de consumo disponibles:");
        jpConsAvailableLabel.add(jlConsAvailable);

        jpConsAvailable.add(jpConsAvailableLabel, java.awt.BorderLayout.NORTH);

        jpGridConsAva.setPreferredSize(new java.awt.Dimension(350, 330));
        jpGridConsAva.setLayout(new java.awt.BorderLayout());
        jpConsAvailable.add(jpGridConsAva, java.awt.BorderLayout.CENTER);

        jpConsButtons.setLayout(new java.awt.GridLayout(10, 0));
        jpConsButtons.add(jPanel1);

        jbConsAdd.setText(">");
        jbConsAdd.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel2.add(jbConsAdd);

        jpConsButtons.add(jPanel2);

        jbConsAddAll.setText(">>");
        jbConsAddAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jbConsAddAll);

        jpConsButtons.add(jPanel3);

        jbConsRemove.setText("<");
        jbConsRemove.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jbConsRemove);

        jpConsButtons.add(jPanel4);

        jbConsRemoveAll.setText("<<");
        jbConsRemoveAll.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jbConsRemoveAll);

        jpConsButtons.add(jPanel5);

        jpConsAvailable.add(jpConsButtons, java.awt.BorderLayout.EAST);

        jpConsumption.add(jpConsAvailable, java.awt.BorderLayout.CENTER);

        jpConsSelected.setLayout(new java.awt.BorderLayout());

        jpConsSelectedLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsSelected.setText("Entidades de consumo seleccionadas:");
        jlConsSelected.setPreferredSize(new java.awt.Dimension(370, 16));
        jpConsSelectedLabel.add(jlConsSelected);

        jpConsSelected.add(jpConsSelectedLabel, java.awt.BorderLayout.NORTH);

        jpGridConsSel.setPreferredSize(new java.awt.Dimension(380, 330));
        jpGridConsSel.setLayout(new java.awt.BorderLayout());
        jpConsSelected.add(jpGridConsSel, java.awt.BorderLayout.CENTER);

        jpConsumption.add(jpConsSelected, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpConsumption, java.awt.BorderLayout.NORTH);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbConsAdd;
    private javax.swing.JButton jbConsAddAll;
    private javax.swing.JButton jbConsRemove;
    private javax.swing.JButton jbConsRemoveAll;
    private javax.swing.JLabel jlConsAvailable;
    private javax.swing.JLabel jlConsSelected;
    private javax.swing.JPanel jpConsAvailable;
    private javax.swing.JPanel jpConsAvailableLabel;
    private javax.swing.JPanel jpConsButtons;
    private javax.swing.JPanel jpConsSelected;
    private javax.swing.JPanel jpConsSelectedLabel;
    private javax.swing.JPanel jpConsumption;
    private javax.swing.JPanel jpEmployee;
    private javax.swing.JPanel jpGridConsAva;
    private javax.swing.JPanel jpGridConsSel;
    private javax.swing.JPanel jpRegistry;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployee;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        moTextEmployee.setTextSettings("Empleado", 250);
        
        // Entidades de consumo disponibles
        
        moGridMatConsEnt = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT, 0, "Entidades de consumo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Entidad de consumo"));

                return columns;
            }
        };

        jpGridConsAva.add(moGridMatConsEnt);
        mvFormGrids.add(moGridMatConsEnt);
        
        // Entidades de consumo seleccionadas
        
        moGridMatConsEntSelected = new SGridPaneForm(miClient, SModConsts.TRN_MAT_CONS_ENT_USR, 0, "Entidades de consumo seleccionadas") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Entidad de consumo"));
                SGridColumnForm col = new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_M, "Predeterminado");
                col.setEditable(true);
                columns.add(col);

                return columns;
            }
        };

        jpGridConsSel.add(moGridMatConsEntSelected);
        mvFormGrids.add(moGridMatConsEntSelected);
        
        jpCommandRight.remove(jbEdit);
        jpCommandRight.remove(jbReadInfo);
    }
    
    private void readMaterialConsumptionEntities() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_mat_cons_ent FROM trn_mat_cons_ent";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbMaterialConsumptionEntityEmployee ee : maMatConsEntSelected) {
                    if (resultSet.getInt(1) == ee.getPkMatConsumptionEntityId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SDbMaterialConsumptionEntity ce = new SDbMaterialConsumptionEntity();
                    ce.read(miClient.getSession(), new int[] { resultSet.getInt(1) });
                    maMatConsEnt.add(ce);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateGridMatConsEnt() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEnt.size() > 0) {
            vRows.addAll(maMatConsEnt);
        }
        moGridMatConsEnt.populateGrid(vRows);
    }
    
    private void populateGridMatConsEntSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maMatConsEntSelected.size() > 0) {
            vRows.addAll(maMatConsEntSelected);
        }
        moGridMatConsEntSelected.populateGrid(vRows);
    }
    
    private void actionConsAdd() {
        try {
            int consId = ((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()).getPkMatConsumptionEntityId();
            if (maMatConsEnt.remove((SDbMaterialConsumptionEntity) moGridMatConsEnt.getSelectedGridRow()) ) {
                SDbMaterialConsumptionEntityEmployee ee = new SDbMaterialConsumptionEntityEmployee();
                ee.setPkMatConsumptionEntityId(consId);
                ee.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(ee);

                populateGridMatConsEnt();
                populateGridMatConsEntSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionConsAddAll() {
        try {
            for (SDbMaterialConsumptionEntity ce : maMatConsEnt) {
                SDbMaterialConsumptionEntityEmployee ee = new SDbMaterialConsumptionEntityEmployee();
                ee.setPkMatConsumptionEntityId(ce.getPkMatConsumptionEntityId());
                ee.readAuxMatConsEnt(miClient.getSession());
                maMatConsEntSelected.add(ee);
            }
            maMatConsEnt.clear();
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void actionConsRemove() {
        maMatConsEnt.add(((SDbMaterialConsumptionEntityEmployee) moGridMatConsEntSelected.getSelectedGridRow()).getAuxMatConsEnt());
        if (maMatConsEntSelected.remove(((SDbMaterialConsumptionEntityEmployee) moGridMatConsEntSelected.getSelectedGridRow()))) {
            populateGridMatConsEnt();
            populateGridMatConsEntSelected();
        }
    }

    private void actionConsRemoveAll() {
        for (SDbMaterialConsumptionEntityEmployee ee : maMatConsEntSelected) {
            maMatConsEnt.add(ee.getAuxMatConsEnt());
        }
        maMatConsEntSelected.clear();
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
    }
    
    @Override
    public void addAllListeners() {
        jbConsAdd.addActionListener(this);
        jbConsAddAll.addActionListener(this);
        jbConsRemove.addActionListener(this);
        jbConsRemoveAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbConsAdd.removeActionListener(this);
        jbConsAddAll.removeActionListener(this);
        jbConsRemove.removeActionListener(this);
        jbConsRemoveAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moTextEmployee.setValue("");
        
        maMatConsEnt = new ArrayList<>();
        maMatConsEntSelected = new ArrayList<>();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbConfEmployeeVsEntity) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        moTextEmployee.setValue(moRegistry.getAuxBizPartner().getBizPartner());
        
        for (SDbMaterialConsumptionEntityEmployee ee : moRegistry.getConsEntEmp()) {
            maMatConsEntSelected.add(ee);
        }
        
        readMaterialConsumptionEntities();
        
        populateGridMatConsEnt();
        populateGridMatConsEntSelected();
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbConfEmployeeVsEntity registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) { }
        
        registry.getConsEntEmp().clear();
        for (SDbMaterialConsumptionEntityEmployee ee : maMatConsEntSelected) {
            registry.getConsEntEmp().add(ee);
        }
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid() && !maMatConsEntSelected.isEmpty()) {
            int defaults = 0;
            for (SDbMaterialConsumptionEntityEmployee ee : maMatConsEntSelected) {
                if (ee.isDefault()) {
                    defaults++;
                }
            }
            if (defaults == 0) {
                validation.setMessage("No ha seleccionado ninguna entidad de consumo como predeterminada.");
            }
            else if (defaults > 1) {
                validation.setMessage("Hay mas de una entidad de consumo seleccionada como predeterminada.");
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbConsAdd) {
                actionConsAdd();
            }
            else if (button == jbConsAddAll) {
                actionConsAddAll();
            }
            else if (button == jbConsRemove) {
                actionConsRemove();
            }
            else if (button == jbConsRemoveAll) {
                actionConsRemoveAll();
            }
        }
    }
}
