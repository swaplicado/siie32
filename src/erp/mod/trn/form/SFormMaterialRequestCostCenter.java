/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.data.SDataConstantsSys;
import erp.mod.SModConsts;
import erp.mod.trn.db.SDbMaterialRequestCostCenter;
import erp.mod.trn.db.SMaterialRequestUtils;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 * 
 */
public class SFormMaterialRequestCostCenter extends sa.lib.gui.bean.SBeanForm implements ItemListener {

    private SDbMaterialRequestCostCenter moRegistry;
    
    private SGuiFieldKeyGroup moFieldKeyConsEntity;
    
    /**
     * Creates new form SFormMaterialRequestCostCenter
     * @param client
     * @param type
     * @param title
     */
    public SFormMaterialRequestCostCenter(SGuiClient client, int type, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_MAT_REQ_CC, type, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jlConsEnt = new javax.swing.JLabel();
        moKeyConsEnt = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel24 = new javax.swing.JPanel();
        jlConsSubent = new javax.swing.JLabel();
        moKeyConsSubent = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel21 = new javax.swing.JPanel();
        jlCostCenter = new javax.swing.JLabel();
        moKeyCC = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlBudget = new javax.swing.JLabel();
        moKeyBudget = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlAsign = new javax.swing.JLabel();
        moDecPer = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setPreferredSize(new java.awt.Dimension(750, 450));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsEnt.setText("Centro de consumo:*");
        jlConsEnt.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel22.add(jlConsEnt);

        moKeyConsEnt.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel22.add(moKeyConsEnt);

        jPanel23.add(jPanel22);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlConsSubent.setText("Subcentro de consumo:*");
        jlConsSubent.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel24.add(jlConsSubent);

        moKeyConsSubent.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel24.add(moKeyConsSubent);

        jPanel23.add(jPanel24);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCostCenter.setText("Centro de costo:*");
        jlCostCenter.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel21.add(jlCostCenter);

        moKeyCC.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel21.add(moKeyCC);

        jPanel23.add(jPanel21);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBudget.setText("Presupuesto:*");
        jlBudget.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel25.add(jlBudget);

        moKeyBudget.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel25.add(moKeyBudget);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAsign.setText("Asignación:*");
        jlAsign.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel26.add(jlAsign);
        jPanel26.add(moDecPer);

        jPanel23.add(jPanel26);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel jlAsign;
    private javax.swing.JLabel jlBudget;
    private javax.swing.JLabel jlConsEnt;
    private javax.swing.JLabel jlConsSubent;
    private javax.swing.JLabel jlCostCenter;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPer;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBudget;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCC;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsEnt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyConsSubent;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        moKeyConsEnt.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsEnt), true);
        moKeyConsSubent.setKeySettings(miClient, SGuiUtils.getLabelName(jlConsEnt), true);
        moKeyCC.setKeySettings(miClient, SGuiUtils.getLabelName(jlCostCenter), true);
        moKeyBudget.setKeySettings(miClient, SGuiUtils.getLabelName(jlBudget), true);
        moDecPer.setDecimalSettings(SGuiUtils.getLabelName(jlAsign), SGuiConsts.GUI_TYPE_DEC_PER, true);
        
        moFields.addField(moKeyConsEnt);
        moFields.addField(moKeyConsSubent);
        moFields.addField(moKeyCC);
        moFields.addField(moKeyBudget);
        moFields.addField(moDecPer);
        
        moFieldKeyConsEntity = new SGuiFieldKeyGroup(miClient);
        
        moFields.setFormButton(jbSave);
    }
    
    @Override
    public void addAllListeners() {
        moKeyConsEnt.addItemListener(this);
        moKeyConsSubent.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyConsEnt.removeItemListener(this);
        moKeyConsSubent.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        boolean hasUserRevRight = ((SClientInterface) miClient).getSessionXXX().getUser().hasRight((SClientInterface) miClient, SDataConstantsSys.PRV_INV_REQ_MAT_REV).HasRight;
        boolean hasUserProvRight = ((SClientInterface) miClient).getSessionXXX().getUser().hasRight((SClientInterface) miClient, SDataConstantsSys.PRV_INV_REQ_MAT_PROV).HasRight;
        
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.USRU_USR, miClient.getSession().getUser().getPkUserId());
        
        moFieldKeyConsEntity.initGroup();
        moFieldKeyConsEntity.addFieldKey(moKeyConsEnt, SModConsts.TRN_MAT_CONS_ENT, hasUserProvRight || hasUserRevRight ? SLibConsts.UNDEFINED : SModConsts.USRU_USR, params);
        moFieldKeyConsEntity.addFieldKey(moKeyConsSubent, SModConsts.TRN_MAT_CONS_SUBENT, hasUserProvRight || hasUserRevRight ? SLibConsts.UNDEFINED : SModConsts.USRU_USR, params);
        moFieldKeyConsEntity.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbMaterialRequestCostCenter) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        moKeyConsEnt.setValue(new int[] { moRegistry.getPkEntMatConsumptionEntityId() });
        moKeyConsSubent.setValue(new int[] { moRegistry.getPkSubentMatConsumptionEntityId(), moRegistry.getPkSubentMatConsumptionSubentityId()});
        moKeyCC.setValue(new int[] { moRegistry.getPkCostCenterId() });
        moKeyBudget.setValue(new int[] { moRegistry.getFkBudgetMatConsumptionEntityId(), moRegistry.getFkBudgetYearId(), moRegistry.getFkBudgetPeriodId() });
        jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        
        if (moRegistry.isRegistryNew()) {
            moDecPer.setValue(1.0);
        }
        else {
            moDecPer.setValue(moRegistry.getPercentage());
        }
        
        setFormEditable(true);

        addAllListeners();
        
        if (moKeyConsEnt.getItemCount() == 2) {
            moKeyConsEnt.setSelectedIndex(1);
        } 
        if (moKeyConsSubent.getItemCount() == 2) {
            moKeyConsSubent.setSelectedIndex(1);
        } 
        
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbMaterialRequestCostCenter registry = (SDbMaterialRequestCostCenter) moRegistry.clone();

        if (registry.isRegistryNew()) {}
        
        moRegistry.setPkEntMatConsumptionEntityId(moKeyConsEnt.getValue()[0]);
        moRegistry.setPkSubentMatConsumptionEntityId(moKeyConsSubent.getValue()[0]);
        moRegistry.setPkSubentMatConsumptionSubentityId(moKeyConsSubent.getValue()[1]);
        moRegistry.setPkCostCenterId(moKeyCC.getValue()[0]);
        moRegistry.setPercentage(moDecPer.getValue());
        moRegistry.setFkBudgetMatConsumptionEntityId(moKeyBudget.getValue()[0]);
        moRegistry.setFkBudgetYearId(moKeyBudget.getValue()[1]);
        moRegistry.setFkBudgetPeriodId(moKeyBudget.getValue()[2]);
        
        moRegistry.readSubentity(miClient.getSession());
        moRegistry.readCostCenter(miClient.getSession());
        moRegistry.readEntBudget(miClient.getSession());
        
        moRegistry.setRowConsBudWOReq(SMaterialRequestUtils.getConsumedBudget(miClient.getSession(), moKeyBudget.getValue(), 0));
        moRegistry.setRowConsBudWReq(SMaterialRequestUtils.getConsumedBudget(miClient.getSession(), moKeyBudget.getValue(), 0));
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            if (comboBox == moKeyConsSubent) {
                stateChangeConsSubent();
            }
            else if (comboBox == moKeyConsEnt) {
                stateChangeConsEnt();
            }
        }
    }

    private void stateChangeConsSubent() {
        if (moKeyConsSubent.getSelectedIndex() <= 0) {
            moKeyCC.removeAllItems();
            moKeyCC.setEnabled(false);
        }
        else {
            SGuiParams params = new SGuiParams();
            params.getParamsMap().put(SModConsts.USRU_USR, miClient.getSession().getUser().getPkUserId());
            params.getParamsMap().put(SModConsts.TRN_MAT_CONS_SUBENT, moKeyConsSubent.getValue());
            miClient.getSession().populateCatalogue(moKeyCC, SModConsts.FIN_CC, SModConsts.TRN_MAT_REQ, params);
            moKeyCC.setEnabled(true);
            if (moKeyCC.getItemCount() == 2) {
                moKeyCC.setSelectedIndex(1);
            } 
        }
    }

    private void stateChangeConsEnt() {
        if (moKeyConsEnt.getSelectedIndex() <= 0) {
            moKeyBudget.removeAllItems();
            moKeyBudget.setEnabled(false);
        }
        else {
            SGuiParams params = new SGuiParams();
            
            params.getParamsMap().put(SModConsts.TRN_MAT_CONS_ENT, moKeyConsEnt.getValue());
            params.getParamsMap().put(SLibConsts.DATA_TYPE_DATE, miClient.getSession().getSystemYear());
            miClient.getSession().populateCatalogue(moKeyBudget, SModConsts.TRN_MAT_CONS_ENT_BUDGET, SModConsts.TRN_MAT_REQ, params);
            moKeyBudget.setEnabled(true);
            if (moKeyBudget.getItemCount() == 2) {
                moKeyBudget.setSelectedIndex(1);
            } 
        }
    }
}
