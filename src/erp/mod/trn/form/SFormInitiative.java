/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.trn.form;

import erp.client.SClientInterface;
import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.trn.db.SDbInitiative;
import erp.mtrn.data.STrnUtilities;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Servín
 */
public class SFormInitiative extends SBeanForm implements ItemListener {
    
    private SDbInitiative moRegistry;

    /**
     * Creates new form SFormInitiative
     * @param client
     * @param title
     */
    public SFormInitiative(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.TRN_INIT, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpRegistry = new javax.swing.JPanel();
        jpNorth = new javax.swing.JPanel();
        jpNorthWest = new javax.swing.JPanel();
        jpRow1 = new javax.swing.JPanel();
        jlTextCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jpRow2 = new javax.swing.JPanel();
        jlTextName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jpRow3 = new javax.swing.JPanel();
        jlKeyType = new javax.swing.JLabel();
        moKeyType = new sa.lib.gui.bean.SBeanFieldKey();
        jpRow4 = new javax.swing.JPanel();
        jlKeyPeriod = new javax.swing.JLabel();
        moKeyPeriod = new sa.lib.gui.bean.SBeanFieldKey();
        jpNorthCenter = new javax.swing.JPanel();
        jpRow5 = new javax.swing.JPanel();
        jlDateDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jpRow6 = new javax.swing.JPanel();
        jlDateDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jpRow7 = new javax.swing.JPanel();
        jlKeyFuncArea = new javax.swing.JLabel();
        moKeyFuncArea = new sa.lib.gui.bean.SBeanFieldKey();
        jpNorthEast = new javax.swing.JPanel();
        jpRow8 = new javax.swing.JPanel();
        jlCurBudget = new javax.swing.JLabel();
        moCurBudget = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlBudgetHint = new javax.swing.JLabel();
        jpRow9 = new javax.swing.JPanel();
        jlCurComBudget = new javax.swing.JLabel();
        moCurComBudget = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlComBudgetHint = new javax.swing.JLabel();
        jpRow10 = new javax.swing.JPanel();
        jlCurSpentBudget = new javax.swing.JLabel();
        moCurSpentBudget = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlSpentBudgetHint = new javax.swing.JLabel();
        jpCenter = new javax.swing.JPanel();
        jpPurpose = new javax.swing.JPanel();
        jpPurRow1 = new javax.swing.JPanel();
        jlPurpose = new javax.swing.JLabel();
        jlPurposeHint = new javax.swing.JLabel();
        jpPurRow2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaPurpose = new javax.swing.JTextArea();
        jpCenterCenter = new javax.swing.JPanel();
        jpDescription = new javax.swing.JPanel();
        jpPurRow3 = new javax.swing.JPanel();
        jlDescription = new javax.swing.JLabel();
        jlDescriptionHint = new javax.swing.JLabel();
        jpPurRow4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtaDescription = new javax.swing.JTextArea();
        jpGoals = new javax.swing.JPanel();
        jpPurRow5 = new javax.swing.JPanel();
        jlGoals = new javax.swing.JLabel();
        jlGoalsHint = new javax.swing.JLabel();
        jpPurRow6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtaGoals = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jpRegistry.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jpRegistry.setLayout(new java.awt.BorderLayout());

        jpNorth.setLayout(new java.awt.BorderLayout());

        jpNorthWest.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jpRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTextCode.setText("Código:*");
        jlTextCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow1.add(jlTextCode);

        moTextCode.setEnabled(false);
        jpRow1.add(moTextCode);

        jpNorthWest.add(jpRow1);

        jpRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTextName.setText("Nombre:*");
        jlTextName.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow2.add(jlTextName);

        moTextName.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRow2.add(moTextName);

        jpNorthWest.add(jpRow2);

        jpRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlKeyType.setText("Tipo propuesta:*");
        jlKeyType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow3.add(jlKeyType);

        moKeyType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRow3.add(moKeyType);

        jpNorthWest.add(jpRow3);

        jpRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlKeyPeriod.setText("Periodicidad:*");
        jlKeyPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow4.add(jlKeyPeriod);

        moKeyPeriod.setPreferredSize(new java.awt.Dimension(200, 23));
        jpRow4.add(moKeyPeriod);

        jpNorthWest.add(jpRow4);

        jpNorth.add(jpNorthWest, java.awt.BorderLayout.WEST);

        jpNorthCenter.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jpRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDateStart.setText("Fecha inicial:");
        jlDateDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow5.add(jlDateDateStart);
        jpRow5.add(moDateDateStart);

        jpNorthCenter.add(jpRow5);

        jpRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateDateEnd.setText("Fecha final:");
        jlDateDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow6.add(jlDateDateEnd);
        jpRow6.add(moDateDateEnd);

        jpNorthCenter.add(jpRow6);

        jpRow7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlKeyFuncArea.setText("Aréa funcional:*");
        jlKeyFuncArea.setPreferredSize(new java.awt.Dimension(100, 23));
        jpRow7.add(jlKeyFuncArea);

        moKeyFuncArea.setEnabled(false);
        moKeyFuncArea.setPreferredSize(new java.awt.Dimension(150, 23));
        jpRow7.add(moKeyFuncArea);

        jpNorthCenter.add(jpRow7);

        jpNorth.add(jpNorthCenter, java.awt.BorderLayout.CENTER);

        jpNorthEast.setLayout(new java.awt.GridLayout(4, 0, 0, 5));

        jpRow8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurBudget.setText("Presupuesto estimado:*");
        jlCurBudget.setPreferredSize(new java.awt.Dimension(175, 23));
        jpRow8.add(jlCurBudget);
        jpRow8.add(moCurBudget);

        jlBudgetHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBudgetHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlBudgetHint.setToolTipText("Presupuesto que requerirá la propuesta");
        jlBudgetHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpRow8.add(jlBudgetHint);

        jpNorthEast.add(jpRow8);

        jpRow9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurComBudget.setText("Presupuesto comprometido:");
        jlCurComBudget.setPreferredSize(new java.awt.Dimension(175, 23));
        jpRow9.add(jlCurComBudget);

        moCurComBudget.setEnabled(false);
        jpRow9.add(moCurComBudget);

        jlComBudgetHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlComBudgetHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlComBudgetHint.setToolTipText("Suma del total de pedidos de la propuesta");
        jlComBudgetHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpRow9.add(jlComBudgetHint);

        jpNorthEast.add(jpRow9);

        jpRow10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCurSpentBudget.setText("Presupuesto ejercido:");
        jlCurSpentBudget.setPreferredSize(new java.awt.Dimension(175, 23));
        jpRow10.add(jlCurSpentBudget);

        moCurSpentBudget.setEnabled(false);
        jpRow10.add(moCurSpentBudget);

        jlSpentBudgetHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSpentBudgetHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlSpentBudgetHint.setToolTipText("Suma del total de facturas de la propuesta");
        jlSpentBudgetHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpRow10.add(jlSpentBudgetHint);

        jpNorthEast.add(jpRow10);

        jpNorth.add(jpNorthEast, java.awt.BorderLayout.EAST);

        jpRegistry.add(jpNorth, java.awt.BorderLayout.NORTH);

        jpCenter.setLayout(new java.awt.BorderLayout());

        jpPurpose.setLayout(new java.awt.BorderLayout());

        jpPurRow1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPurpose.setText("Proposito de la propuesta:");
        jlPurpose.setPreferredSize(new java.awt.Dimension(175, 23));
        jpPurRow1.add(jlPurpose);

        jlPurposeHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPurposeHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlPurposeHint.setToolTipText("Especifica la razón de ser o por qué es importante la propuesta.");
        jlPurposeHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpPurRow1.add(jlPurposeHint);

        jpPurpose.add(jpPurRow1, java.awt.BorderLayout.NORTH);

        jpPurRow2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(900, 100));

        jtaPurpose.setColumns(20);
        jtaPurpose.setRows(5);
        jScrollPane1.setViewportView(jtaPurpose);

        jpPurRow2.add(jScrollPane1);

        jpPurpose.add(jpPurRow2, java.awt.BorderLayout.CENTER);

        jpCenter.add(jpPurpose, java.awt.BorderLayout.NORTH);

        jpCenterCenter.setLayout(new java.awt.BorderLayout());

        jpDescription.setLayout(new java.awt.BorderLayout());

        jpPurRow3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDescription.setText("Descripción de la propuesta:");
        jlDescription.setPreferredSize(new java.awt.Dimension(175, 23));
        jpPurRow3.add(jlDescription);

        jlDescriptionHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDescriptionHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlDescriptionHint.setToolTipText("Especifica a detalle en qué consiste la propuesta.");
        jlDescriptionHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpPurRow3.add(jlDescriptionHint);

        jpDescription.add(jpPurRow3, java.awt.BorderLayout.NORTH);

        jpPurRow4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jScrollPane4.setPreferredSize(new java.awt.Dimension(900, 100));

        jtaDescription.setColumns(20);
        jtaDescription.setRows(5);
        jScrollPane4.setViewportView(jtaDescription);

        jpPurRow4.add(jScrollPane4);

        jpDescription.add(jpPurRow4, java.awt.BorderLayout.CENTER);

        jpCenterCenter.add(jpDescription, java.awt.BorderLayout.NORTH);

        jpGoals.setLayout(new java.awt.BorderLayout());

        jpPurRow5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlGoals.setText("Objetivos de la propuesta:");
        jlGoals.setPreferredSize(new java.awt.Dimension(175, 23));
        jpPurRow5.add(jlGoals);

        jlGoalsHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlGoalsHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlGoalsHint.setToolTipText("Especifica cuáles son los resultados especificos a lograr con la propuesta.");
        jlGoalsHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jpPurRow5.add(jlGoalsHint);

        jpGoals.add(jpPurRow5, java.awt.BorderLayout.NORTH);

        jpPurRow6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jScrollPane5.setPreferredSize(new java.awt.Dimension(900, 100));

        jtaGoals.setColumns(20);
        jtaGoals.setRows(5);
        jScrollPane5.setViewportView(jtaGoals);

        jpPurRow6.add(jScrollPane5);

        jpGoals.add(jpPurRow6, java.awt.BorderLayout.CENTER);

        jpCenterCenter.add(jpGoals, java.awt.BorderLayout.CENTER);

        jpCenter.add(jpCenterCenter, java.awt.BorderLayout.CENTER);

        jpRegistry.add(jpCenter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpRegistry, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel jlBudgetHint;
    private javax.swing.JLabel jlComBudgetHint;
    private javax.swing.JLabel jlCurBudget;
    private javax.swing.JLabel jlCurComBudget;
    private javax.swing.JLabel jlCurSpentBudget;
    private javax.swing.JLabel jlDateDateEnd;
    private javax.swing.JLabel jlDateDateStart;
    private javax.swing.JLabel jlDescription;
    private javax.swing.JLabel jlDescriptionHint;
    private javax.swing.JLabel jlGoals;
    private javax.swing.JLabel jlGoalsHint;
    private javax.swing.JLabel jlKeyFuncArea;
    private javax.swing.JLabel jlKeyPeriod;
    private javax.swing.JLabel jlKeyType;
    private javax.swing.JLabel jlPurpose;
    private javax.swing.JLabel jlPurposeHint;
    private javax.swing.JLabel jlSpentBudgetHint;
    private javax.swing.JLabel jlTextCode;
    private javax.swing.JLabel jlTextName;
    private javax.swing.JPanel jpCenter;
    private javax.swing.JPanel jpCenterCenter;
    private javax.swing.JPanel jpDescription;
    private javax.swing.JPanel jpGoals;
    private javax.swing.JPanel jpNorth;
    private javax.swing.JPanel jpNorthCenter;
    private javax.swing.JPanel jpNorthEast;
    private javax.swing.JPanel jpNorthWest;
    private javax.swing.JPanel jpPurRow1;
    private javax.swing.JPanel jpPurRow2;
    private javax.swing.JPanel jpPurRow3;
    private javax.swing.JPanel jpPurRow4;
    private javax.swing.JPanel jpPurRow5;
    private javax.swing.JPanel jpPurRow6;
    private javax.swing.JPanel jpPurpose;
    private javax.swing.JPanel jpRegistry;
    private javax.swing.JPanel jpRow1;
    private javax.swing.JPanel jpRow10;
    private javax.swing.JPanel jpRow2;
    private javax.swing.JPanel jpRow3;
    private javax.swing.JPanel jpRow4;
    private javax.swing.JPanel jpRow5;
    private javax.swing.JPanel jpRow6;
    private javax.swing.JPanel jpRow7;
    private javax.swing.JPanel jpRow8;
    private javax.swing.JPanel jpRow9;
    private javax.swing.JTextArea jtaDescription;
    private javax.swing.JTextArea jtaGoals;
    private javax.swing.JTextArea jtaPurpose;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBudget;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurComBudget;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurSpentBudget;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldKey moKeyFuncArea;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPeriod;
    private sa.lib.gui.bean.SBeanFieldKey moKeyType;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlTextCode), 5);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlTextName), 50);
        moKeyType.setKeySettings(miClient, SGuiUtils.getLabelName(jlKeyType), true);
        moKeyPeriod.setKeySettings(miClient, SGuiUtils.getLabelName(jlKeyPeriod), true);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateDateStart), false);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateDateEnd), false);
        moKeyFuncArea.setKeySettings(miClient, SGuiUtils.getLabelName(jlKeyFuncArea), true);
        moCurBudget.setCompoundFieldSettings(miClient);
        moCurBudget.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCurBudget), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moCurComBudget.setCompoundFieldSettings(miClient);
        moCurComBudget.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCurComBudget), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurSpentBudget.setCompoundFieldSettings(miClient);
        moCurSpentBudget.getField().setDecimalSettings(SGuiUtils.getLabelName(jlCurSpentBudget), SGuiConsts.GUI_TYPE_DEC_AMT, false);
       
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moKeyType);
        moFields.addField(moKeyPeriod);
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        moFields.addField(moKeyFuncArea);
        moFields.addField(moCurBudget.getField());
        moFields.addField(moCurComBudget.getField());
        moFields.addField(moCurSpentBudget.getField());
        
        moFields.setFormButton(jbSave);
        
        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
    }
    
    private boolean isApplingFunctionalAreas() {
        return ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getIsFunctionalAreas();
    }
    
    private double getComBudget() {
        if (moKeyType.getValue()[0] == SModSysConsts.TRNX_TP_PERIOD_EVENT_ID){
            return STrnUtilities.getInitiativeComBudget((SClientInterface) miClient, moRegistry.getPkInitiativeId());
        }
        return 0d;
    }
    
    private double getSpentBudget() {
        if (moKeyType.getValue()[0] == SModSysConsts.TRNX_TP_PERIOD_EVENT_ID){
            return STrnUtilities.getInitiativeSpentBudget((SClientInterface) miClient, moRegistry.getPkInitiativeId());
        }
        return 0d;
    }
    
    private void stateChangeKeyType() {
        if (moKeyType.getValue()[0] == SModSysConsts.TRNX_TP_PERIOD_REC_ID) {
            moKeyPeriod.setEnabled(true);
        } 
        else {
            moKeyPeriod.setEnabled(false);
            moKeyPeriod.setValue(new int[] { 0 });
        }
    }
    
    @Override
    public void addAllListeners() {
        moKeyType.addItemListener(this);    
    }

    @Override
    public void removeAllListeners() {
        moKeyType.removeItemListener(this);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void reloadCatalogues() {
        moKeyType.removeAllItems();
        SModSysConsts.TRNX_TP_PERIOD_CATALOG.forEach((item) -> {
            moKeyType.addItem(item);
        });
        moKeyType.setSelectedIndex(0);
        
        miClient.getSession().populateCatalogue(moKeyPeriod, SModConsts.TRNS_TP_PERIOD, SLibConsts.UNDEFINED, null);
        
        if (!isApplingFunctionalAreas()) {
            miClient.getSession().populateCatalogue(moKeyFuncArea, SModConsts.CFGU_FUNC, SLibConsts.UNDEFINED, null);
        }
        else {
            miClient.getSession().populateCatalogue(moKeyFuncArea, SModConsts.CFGU_FUNC, miClient.getSession().getUser().getPkUserId(), null);
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbInitiative) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        moKeyFuncArea.setEnabled(isApplingFunctionalAreas() && (moKeyFuncArea.getItemCount() - 1) > 1); // enable when functional areas applying and only one asignated to current user
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moKeyPeriod.setSelectedIndex(0);
            if (!isApplingFunctionalAreas()) {
                moKeyFuncArea.setValue(new int[] { SModSysConsts.CFGU_FUNC_NA });
            }
            else if ((moKeyFuncArea.getItemCount() - 1) == 1) {
                moKeyFuncArea.setSelectedIndex(1);
            }
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moKeyPeriod.setValue(new int[] { moRegistry.getFkTypePeriodId() });
            moKeyFuncArea.setValue(new int[] { moRegistry.getFkFunctionalAreaId() });
        }
        
        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        for (int i = 1; i <= SModSysConsts.TRNX_TP_PERIOD_CODES.size(); i++) {
            if (SModSysConsts.TRNX_TP_PERIOD_CODES.get(i).equals(moRegistry.getType())) {
                moKeyType.setValue(new int[] { i });
                break;
            }
        }
        moDateDateStart.setValue(moRegistry.getDateStart_n());
        moDateDateEnd.setValue(moRegistry.getDateEnd_n());
        moCurBudget.getField().setValue(moRegistry.getBudget());
        moCurComBudget.getField().setValue(getComBudget());
        moCurSpentBudget.getField().setValue(getSpentBudget());
        
        jtaPurpose.setText(moRegistry.getPurpose());
        jtaDescription.setText(moRegistry.getDescription());
        jtaGoals.setText(moRegistry.getGoals());
        
        setFormEditable(true);
        
        addAllListeners();
        
        stateChangeKeyType();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbInitiative registry = moRegistry.clone();
        
        if (registry.isRegistryNew()) { }
        
        registry.setName(moTextName.getValue());
        registry.setPurpose(jtaPurpose.getText());
        registry.setGoals(jtaGoals.getText());
        registry.setDescription(jtaDescription.getText());
        registry.setType(SModSysConsts.TRNX_TP_PERIOD_CODES.get(moKeyType.getValue()[0]));
        registry.setBudget(moCurBudget.getField().getValue());
        registry.setDateStart_n(moDateDateStart.getValue());
        registry.setDateEnd_n(moDateDateEnd.getValue());
        registry.setFkTypePeriodId(moKeyPeriod.getValue()[0]);
        registry.setFkFunctionalAreaId(moKeyFuncArea.getValue()[0]);
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (moKeyPeriod.isEnabled() && moKeyPeriod.getValue()[0] == SModSysConsts.TRNS_TP_PERIOD_NA) {
            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + moKeyPeriod.getFieldName());
            validation.setComponent(moKeyPeriod);
        }
        
        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == moKeyType) {
                stateChangeKeyType();
            }
        }
    }
}
