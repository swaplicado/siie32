/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.log.form;

import erp.SClient;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.form.SFormOptionPickerInterface;
import erp.mbps.data.SDataBizPartnerBranchAddress;
import erp.mitm.data.SDataItem;
import erp.mitm.data.SDataUnit;
import erp.mod.SModConsts;
import erp.mod.log.db.SDbBillOfLading;
import erp.mod.log.db.SDbBolMerchandise;
import erp.mod.log.db.SDbBolMerchandiseQuantity;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Servín
 */
public class SFormBolMerchandise extends SBeanForm implements ActionListener, ItemListener, ListSelectionListener, FocusListener {
    
    public static final int MERCHANDISE_DISCHARGED = 1;
    public static final int MERCHANDISE_CHARGED = 2;
    
    public static final int ENABLE_DISABLE_LIST = 1;
    
    private SDbBillOfLading moBillOfLading;
    private SDbBolMerchandiseQuantity moRegistry;
    
    private DefaultListModel modelo;
    
    private int[] moLocationKey;
    
    /**
     * Creates new form SFormMerchandise
     * @param client
     * @param subTp
     * @param title
     */
    public SFormBolMerchandise(SGuiClient client, int subTp, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.LOG_BOL_MERCH_QTY, subTp, title);
        initComponents();
        initComponentsCustom();
    }
    
    private void enableComponents() {
        jbEdit.setEnabled(false);
        jbReadInfo.setEnabled(false);
        if (mnFormSubtype == MERCHANDISE_CHARGED) {
            moKeyItem.setEnabled(true);
            jbItem.setEnabled(true);
            moKeyUnit.setEnabled(true);
            moDecimalQty.setEnabled(true);
            moDecimalWeight.setEnabled(true);
            moTextUuid.setEnabled(true);
        }
        else if (mnFormSubtype == MERCHANDISE_DISCHARGED) {
            moKeyItem.setEnabled(false);
            jbItem.setEnabled(false);
            moKeyUnit.setEnabled(false);
            moDecimalQty.setEnabled(true);
            moDecimalWeight.setEnabled(false);
            moTextUuid.setEnabled(false);
        }
    }
    
    private void actionItem() {
        if (moKeyItem.getSelectedIndex() > 0) {
            SDataItem item = (SDataItem) SDataUtilities.readRegistry((SClientInterface) miClient, 
                    SDataConstants.ITMU_ITEM, moKeyItem.getValue(), SLibConstants.EXEC_MODE_SILENT);
            moKeyUnit.setValue(new int[] { item.getFkUnitId()}); 
            
        }
    }
    
    private void actionUnit() {
        if (moKeyUnit.getValue()[0] == SDataConstantsSys.ITMU_KG) { // kg
            moDecimalWeight.setEnabled(false);
        }
        else {
            moDecimalWeight.setEnabled(true);
        }
    }
    
    private void actionSelectItem() {
        if (pickOption(SDataConstants.ITMX_ITEM_IOG) == SLibConstants.FORM_RESULT_OK) {
            actionItem();
        }
    }
    
    @SuppressWarnings("unchecked")
    private void populateItemList() {
        if (moBillOfLading != null) {
            modelo = new DefaultListModel();
            for (SDbBolMerchandise merch : moBillOfLading.getBolMerchandises()) {
                SDataItem item = (SDataItem) SDataUtilities.readRegistry((SClientInterface) miClient, 
                        SDataConstants.ITMU_ITEM, new int[] {merch.getFkItemId()}, SLibConstants.EXEC_MODE_SILENT);
                modelo.addElement(item);
            }
            jListItems.setModel(modelo); 
        }
    }
    
    public int pickOption(int optionType) {
        SFormOptionPickerInterface picker = ((SClient) miClient).getOptionPicker(optionType);

        picker.formReset();
        picker.formRefreshOptionPane();
        picker.setFormVisible(true);

        if (picker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            moKeyItem.setValue(picker.getSelectedPrimaryKey());
        }

        return picker.getFormResult();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jbItem = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jlQty = new javax.swing.JLabel();
        moDecimalQty = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel13 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel5 = new javax.swing.JPanel();
        jlWeight = new javax.swing.JLabel();
        moDecimalWeight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel12 = new javax.swing.JPanel();
        jlUuid = new javax.swing.JLabel();
        moTextUuid = new sa.lib.gui.bean.SBeanFieldText();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListItems = new javax.swing.JList();

        setTitle("Mercancias");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros:"));
        jPanel17.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel7.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem*:");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moKeyItem);

        jbItem.setText("...");
        jbItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbItem);

        jPanel7.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQty.setText("Cantidad*:");
        jlQty.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlQty);
        jPanel9.add(moDecimalQty);

        jPanel7.add(jPanel9);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad*:");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel13.add(moKeyUnit);

        jPanel7.add(jPanel13);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlWeight.setText("Peso en kg*:");
        jlWeight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlWeight);
        jPanel5.add(moDecimalWeight);

        jPanel7.add(jPanel5);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUuid.setText("UUID comercio ext.:");
        jlUuid.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlUuid);

        moTextUuid.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(moTextUuid);

        jPanel7.add(jPanel12);

        jPanel6.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel17.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Ítems cargados:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jListItems.setPreferredSize(new java.awt.Dimension(250, 90));
        jScrollPane1.setViewportView(jListItems);

        jPanel3.add(jScrollPane1);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jListItems;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbItem;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlQty;
    private javax.swing.JLabel jlUnit;
    private javax.swing.JLabel jlUuid;
    private javax.swing.JLabel jlWeight;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalQty;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecimalWeight;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    private sa.lib.gui.bean.SBeanFieldText moTextUuid;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 250);
        
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem.getText()), true);
        moKeyItem.setFieldButton(jbItem);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit.getText()), true);
        moDecimalQty.setDecimalSettings(SGuiUtils.getLabelName(jlQty.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moDecimalWeight.setDecimalSettings(SGuiUtils.getLabelName(jlWeight), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moTextUuid.setTextSettings(SGuiUtils.getLabelName(jlWeight.getText()), 32);
        
        reloadCatalogues();
        enableComponents();
    }
    
    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.ITMU_UNIT, SLibConsts.UNDEFINED, null);
        jListItems.setEnabled(true);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        return validation;
    }

    @Override
    public void addAllListeners() {
        moKeyItem.addItemListener(this);
        jbItem.addActionListener(this);
        jListItems.addListSelectionListener(this); 
        moKeyUnit.addItemListener(this);
        moDecimalQty.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyItem.removeItemListener(this);
        jbItem.removeActionListener(this);
        jListItems.removeListSelectionListener(this);
        moKeyUnit.removeItemListener(this);
        moDecimalQty.removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry regitry) throws Exception {
        moRegistry = (SDbBolMerchandiseQuantity) regitry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moKeyItem.setValue(new int[] { moRegistry.getParentMerchandise() != null ? moRegistry.getParentMerchandise().getFkItemId() : 0 });
        moKeyUnit.setValue(new int[] { moRegistry.getParentMerchandise() != null ? moRegistry.getParentMerchandise().getFkUnitId() : 0 });
        moDecimalQty.setValue(moRegistry.getQuantity());
        moDecimalWeight.setValue(moRegistry.getParentMerchandise() != null ? moRegistry.getParentMerchandise().getWeight() : 0);
        moTextUuid.setValue(moRegistry.getParentMerchandise() != null ? moRegistry.getParentMerchandise().getExternalUUID() : "");
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbBolMerchandiseQuantity registry = (SDbBolMerchandiseQuantity) moRegistry.clone();
        registry.setRegistryNew(moRegistry.isRegistryNew());
        
        if (registry.isRegistryNew()) {
        
        SDataItem item = new SDataItem();
        item.read(moKeyItem.getValue(), miClient.getSession().getStatement());
        
        SDataUnit unit = new SDataUnit();
        unit.read(moKeyUnit.getValue(), miClient.getSession().getStatement());
        
        SDataBizPartnerBranchAddress add = new SDataBizPartnerBranchAddress();
        add.read(moLocationKey, miClient.getSession().getStatement());
        
        registry.setQuantity(moDecimalQty.getValue());
        if (mnFormSubtype == 2) {
            registry.setFkOriginBizPartnerAddress_n(moLocationKey[0]);
            registry.setFkOriginAddressAddress_n(moLocationKey[1]);
            registry.setFkDestinationBizPartnerAddress_n(0);
            registry.setFkDestinationAddressAddress_n(0);
            registry.setDataOriginBizPartnerBranchAddress(add);
            if (registry.getParentMerchandise() == null) {
                SDbBolMerchandise merch = new SDbBolMerchandise();
                registry.setParentMerchandise(merch);
            }
            registry.getParentMerchandise().setWeight(registry.getParentMerchandise().getWeight() + moDecimalWeight.getValue());
        }
        else if (mnFormSubtype == 1) {
            registry.setFkOriginBizPartnerAddress_n(0);
            registry.setFkOriginAddressAddress_n(0);
            registry.setFkDestinationBizPartnerAddress_n(moLocationKey[0]);
            registry.setFkDestinationAddressAddress_n(moLocationKey[1]);
            registry.setDataDestinationBizPartnerBranchAddress(add);
        }
        if (registry.getParentMerchandise() == null) {
            SDbBolMerchandise merch = new SDbBolMerchandise();
            registry.setParentMerchandise(merch);
        }
        registry.getParentMerchandise().setFkItemId(moKeyItem.getValue()[0]);
        registry.getParentMerchandise().setFkUnitId(moKeyUnit.getValue()[0]);
        registry.getParentMerchandise().updateSatCodes(miClient.getSession());
        registry.getParentMerchandise().setDataItem(item);
        registry.getParentMerchandise().setDataUnit(unit);
        
        registry.getParentMerchandise().updateSatCodes(miClient.getSession());
        
        registry.setXtaItemName(registry.getParentMerchandise().getDataItem().getItem());
        registry.setXtaUnitName(registry.getParentMerchandise().getDataUnit().getSymbol());
        }
        else {
            registry.setQuantity(moDecimalQty.getValue());
        }
        return registry;
    }
    
    @Override
    public void setValue(int type, java.lang.Object value) {
        switch (type) {
            case SModConsts.LOG_BOL_LOCATION:
                moLocationKey = (int[]) value;
                break;
            case SModConsts.LOG_BOL: 
                moBillOfLading = (SDbBillOfLading) value;
                populateItemList();
                break;
            case ENABLE_DISABLE_LIST: 
                jListItems.setEnabled((boolean) value);
                break;
            default:
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbItem) {
                actionSelectItem();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox) {
            JComboBox comboBox = (JComboBox)  e.getSource();
            if (comboBox == moKeyItem) {
                actionItem();
            }
            else if (comboBox == moKeyUnit) {
                actionUnit();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        SDataItem item = (SDataItem) jListItems.getSelectedValue();
        if (item != null) {
            moKeyItem.setValue(new int[] { item.getPkItemId()});
            for (SDbBolMerchandise merch : moBillOfLading.getBolMerchandises()){
                if (merch.getFkItemId() == item.getPkItemId()) {
                    moKeyUnit.setValue(new int[] { merch.getFkUnitId()});
                }
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (moKeyUnit.getValue()[0] == SDataConstantsSys.ITMU_KG) {
             moDecimalWeight.setValue(moDecimalQty.getValue());
        }
    }
}
