/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SViewFilter.java
 *
 * Created on 7/07/2025, 12:20:00 PM
 */

package erp.mod.view;

import erp.client.SClientInterface;
import erp.mod.SModConsts;
import erp.mtrn.data.STrnFunctionalAreaUtils;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JPanel;
import sa.lib.SLibConsts;
import sa.lib.db.SDbConsts;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridFilter;
import sa.lib.grid.SGridFilterValue;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPickerSettings;
import sa.lib.gui.bean.SBeanOptionPicker;

/**
 *
 * @author Isabel Servín
 */
public class SViewFilter extends JPanel implements SGridFilter {
    
    public static final int FILTER_STP_CUR_USER = 1; // para filtros de usuario, mostrar sólo el usuario actual
    public static final int FILTER_STP_INIT_USER = 2; // para filtros de usuario, mostrar sólo los que han creado propuestas
    public static final int FILTER_STP_ALL_USER = 3; // para filtros de usuario, todos los usuarios

    protected SGuiClient miClient;
    protected SGridPaneView moPaneView;
    protected SBeanOptionPicker moPicker;
    protected String msValue;
    
    protected int mnFilterType;
    protected int mnFilterSubtype;

    /** Creates new form SViewFilter
     * @param client
     * @param paneView */
    public SViewFilter(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        mnFilterSubtype = 0;
        initComponents();
        initComponentsCustom();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfValue = new javax.swing.JTextField();
        jbPicker = new javax.swing.JButton();
        jbDeleteFilter = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jtfValue.setEditable(false);
        jtfValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfValue.setToolTipText("");
        jtfValue.setFocusable(false);
        jtfValue.setPreferredSize(new java.awt.Dimension(70, 23));
        add(jtfValue);

        jbPicker.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_filter_func.gif"))); // NOI18N
        jbPicker.setToolTipText("Filtrar");
        jbPicker.setPreferredSize(new java.awt.Dimension(23, 23));
        jbPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPickerActionPerformed(evt);
            }
        });
        add(jbPicker);

        jbDeleteFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteFilter.setToolTipText("Quitar filtro");
        jbDeleteFilter.setPreferredSize(new java.awt.Dimension(23, 23));
        jbDeleteFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeleteFilterActionPerformed(evt);
            }
        });
        add(jbDeleteFilter);
    }// </editor-fold>//GEN-END:initComponents

    private void jbPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPickerActionPerformed
        moPicker.resetPicker();
        moPicker.setPickerVisible(true);
        
        String texts[] = {"", "ND"};
        if (moPicker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            switch (mnFilterType) {
                case SModConsts.CFGU_FUNC:
                    texts = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas((SClientInterface) miClient, ((int[]) moPicker.getOption())[0]);
                    break;
                case SModConsts.USRU_USR:
                    texts = getTextFilterOfUsers(((int[]) moPicker.getOption())[0]);
                    break;
            }
            moPaneView.putFilter(mnFilterType, new SGridFilterValue(mnFilterType, SGridConsts.FILTER_DATA_TYPE_TEXT, texts[0]));
            setValue(texts[1]);
        }
    }//GEN-LAST:event_jbPickerActionPerformed

    private void jbDeleteFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeleteFilterActionPerformed
       resetFilter(true);
    }//GEN-LAST:event_jbDeleteFilterActionPerformed

    private void initComponentsCustom() {
        moPicker = new SBeanOptionPicker();
    }
    
    private void renderValue() {
        jtfValue.setText(msValue);
    }
    
    private void setValue(final String value) {
        msValue = value;
        renderValue();
    }
    
    private SBeanOptionPicker getFilterPicker() {
        String sql = "";
        String desc = "";
        ArrayList<SGridColumnForm> gridColums = new ArrayList<>();
        SGuiOptionPickerSettings settings;
        SBeanOptionPicker picker = new SBeanOptionPicker();
        
        switch(mnFilterType) {
            case SModConsts.CFGU_FUNC:
                desc = "Área funcional";
                sql = "SELECT fa.id_func AS " + SDbConsts.FIELD_ID + "1, "
                        + "fa.name AS " + SDbConsts.FIELD_PICK + "1 "
                        + "FROM cfgu_func AS fa "
                        + "INNER JOIN usr_usr_func AS fau ON "
                        + "fa.id_func = fau.id_func AND fau.id_usr = " + miClient.getSession().getUser().getPkUserId() + " "
                        + "WHERE NOT b_del "
                        + "ORDER BY fa.name";
                break;
            case SModConsts.USRU_USR:
                desc = "Usuario";
                switch (mnFilterSubtype) {
                    case FILTER_STP_INIT_USER:
                        sql = "SELECT DISTINCT u.id_usr AS " + SDbConsts.FIELD_ID + "1, "
                                + "u.usr AS " + SDbConsts.FIELD_PICK + "1 "
                                + "FROM erp.usru_usr AS u "
                                + "INNER JOIN trn_init AS i ON "
                                + "u.id_usr = i.fk_usr_ins "
                                + "ORDER BY usr";
                        break;
                    case FILTER_STP_ALL_USER:
                        sql = "SELECT id_usr AS " + SDbConsts.FIELD_ID + "1, "
                                + "usr AS " + SDbConsts.FIELD_PICK + "1 "
                                + "FROM erp.usru_usr "
                                + "WHERE NOT u.b_del AND b_act "
                                + "ORDER BY usr";
                    break;    
                }
                break;
        }
        gridColums.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Nombre", 300));
        settings = new SGuiOptionPickerSettings(desc, sql, gridColums, 1);
        
        picker.setPickerSettings(miClient, mnFilterType, SLibConsts.UNDEFINED, settings);
        
        return picker;
    }
    
    private void resetFilter(boolean reload) {
        String texts[] = {"", "ND"};
        switch (mnFilterType) {
            case SModConsts.CFGU_FUNC:
                texts = STrnFunctionalAreaUtils.getTextFilterOfFunctionalAreas((SClientInterface) miClient, SLibConsts.UNDEFINED);
                String ids[] = texts[0].split(",");
                if (ids.length <= 1) {
                    jbPicker.setVisible(false);
                    jbDeleteFilter.setVisible(false);
                }
                break;
            case SModConsts.USRU_USR:
                texts = getTextFilterOfUsers(SLibConsts.UNDEFINED);
                ids = texts[0].split(",");
                if (!texts[1].equals("(TODOS)") && ids.length <= 1) {
                    jbPicker.setVisible(false);
                    jbDeleteFilter.setVisible(false);
                }
                break;
        }
        if (reload) {
            moPaneView.putFilter(mnFilterType, new SGridFilterValue(mnFilterType, SGridConsts.FILTER_DATA_TYPE_TEXT, texts[0]));
        }
        else {
            moPaneView.getFiltersMap().put(mnFilterType, new SGridFilterValue(mnFilterType, SGridConsts.FILTER_DATA_TYPE_TEXT, texts[0]));
        }
        setValue(texts[1]);
    }
    
    private String[] getTextFilterOfUsers(int id) {
        String ids = "";
        String names = "";
        String sql;
        ResultSet resultSet;
        try {
            if (id == SLibConsts.UNDEFINED) {
                switch (mnFilterSubtype) {
                    case FILTER_STP_CUR_USER:
                        return new String[] { miClient.getSession().getUser().getPkUserId() + "", miClient.getSession().getUser().getName() };
                    case FILTER_STP_INIT_USER:
                        sql = "SELECT DISTINCT u.id_usr, u.usr FROM erp.usru_usr AS u "
                                + "INNER JOIN trn_init AS i ON "
                                + "u.id_usr = i.fk_usr_ins "
                                + "ORDER BY u.usr";
                        resultSet = miClient.getSession().getStatement().executeQuery(sql);
                        while (resultSet.next()) {
                            ids += (ids.isEmpty() ? "" : ", ") + resultSet.getInt(1);
                        }   
                        names = "(TODOS)";
                        break;
                    case FILTER_STP_ALL_USER:
                        sql = "SELECT u.id_usr, u.usr FROM erp.usru_usr AS u "
                                + "WHERE NOT b_del AND b_act "
                                + "ORDER BY u.usr";
                        resultSet = miClient.getSession().getStatement().executeQuery(sql);
                        while (resultSet.next()) {
                            ids += (ids.isEmpty() ? "" : ", ") + resultSet.getInt(1);
                        }   
                        names = "(TODOS)";
                        break;
                    default:
                        break;
                }
            }
            else {
                sql = "SELECT u.id_usr, u.usr FROM erp.usru_usr AS u "
                        + "WHERE id_usr = " + id + " "
                        + "ORDER BY u.usr";
                resultSet = miClient.getSession().getStatement().executeQuery(sql);
                if (resultSet.next()) {
                    ids = resultSet.getString(1);
                    names = resultSet.getString(2);
                }   
            }
        }
        catch (SQLException e) {
            miClient.showMsgBoxError(e.getMessage());
        }
        return new String[] {ids, names};
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbDeleteFilter;
    private javax.swing.JButton jbPicker;
    private javax.swing.JTextField jtfValue;
    // End of variables declaration//GEN-END:variables

    /**
     * Recibe un int[], 
     * en primera posición se recibe el tipo de filtro (SModConsts.CFGU_FUNC, SModConsts.USRU_USR)
     * en segunda pocición subtipo de filtro, (SViewFilter.FILTER_STP_ALL_USER, etc...)
     * @param value 
     */
    @Override
    public void initFilter(Object value) {
        mnFilterType = ((int[]) value)[0];
        if (((int[]) value).length > 1) {
            mnFilterSubtype = ((int[]) value)[1];
        }
        moPicker = getFilterPicker();
        resetFilter(false);
        jtfValue.setToolTipText(mnFilterType == SModConsts.CFGU_FUNC ? "Área funcional" : "Usuario");
    }
}
