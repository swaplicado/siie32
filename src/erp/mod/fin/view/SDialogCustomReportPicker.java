/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.view;

import erp.mod.SModConsts;
import java.util.ArrayList;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogCustomReportPicker extends SBeanFormDialog {
    
    protected ArrayList<SCustomReportsParser.Report> maCustomReports;

    /**
     * Creates new form SFinCustomReportPicker
     * @param client GUI Client.
     * @param formType Form type. Options defined as constants in class <code>SViewCustomReports</code>.
     * @param title Form title.
     */
    public SDialogCustomReportPicker(final SGuiClient client, final int formType, final String title, final ArrayList<SCustomReportsParser.Report> customReports) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, formType, 0, title);
        maCustomReports = customReports;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlReport = new javax.swing.JLabel();
        moKeyReport = new sa.lib.gui.bean.SBeanFieldKey();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlReport.setText("Reporte:*");
        jlReport.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlReport);

        moKeyReport.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel2.add(moKeyReport);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jlReport;
    private sa.lib.gui.bean.SBeanFieldKey moKeyReport;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 400, 250);
        
        moKeyReport.setKeySettings(miClient, SGuiUtils.getLabelName(jlReport), true);
        
        moFields.addField(moKeyReport);
        
        moKeyReport.setFormButton(jbSave);
        
        jbSave.setText(SGuiConsts.TXT_BTN_OK);
    }
    
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = false;
        
        reloadCatalogues();
        
        moFields.resetFields();
    }
    
    @Override
    public void addAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeAllListeners() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    @SuppressWarnings("unchecked")
    public void reloadCatalogues() {
        moKeyReport.removeAllItems();
        
        moKeyReport.addItem(new SGuiItem("- " + SLibUtils.textProperCase(moKeyReport.getFieldName()) + " -"));
        
        for (SCustomReportsParser.Report report : maCustomReports) {
            moKeyReport.addItem(new SGuiItem(new int[] { report.Id }, report.Report));
        }
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        return moFields.validateFields();
    }
    
    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.FINX_CUST_REPS_EXPS:
                value = moKeyReport.getSelectedItem().getPrimaryKey()[0];
                break;
            default:
                // nothing
        }
        
        return value;
    }
}
