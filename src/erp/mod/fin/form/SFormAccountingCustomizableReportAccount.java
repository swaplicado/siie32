/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.data.SDataConstantsSys;
import erp.gui.account.SAccount;
import erp.gui.account.SAccountConsts;
import erp.mod.SModConsts;
import erp.mod.fin.db.SDbAccountingCustomizableReportAccount;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Isabel Serv√≠n
 */
public class SFormAccountingCustomizableReportAccount extends SBeanForm {
    
    private SDbAccountingCustomizableReportAccount moRegistry;

    /**
     * Creates new form SFormAccountingCustomizableReportAccount
     * @param client
     * @param title
     */
    public SFormAccountingCustomizableReportAccount(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_REP_CUS_ACC_ACC, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpContent = new javax.swing.JPanel();
        jpCc = new javax.swing.JPanel();
        jpStart = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlStart = new javax.swing.JLabel();
        moPanelCcStart = new erp.gui.account.SBeanPanelAccount();
        jpEnd = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlEnd = new javax.swing.JLabel();
        moPanelCcEnd = new erp.gui.account.SBeanPanelAccount();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpContent.setLayout(new java.awt.BorderLayout());

        jpCc.setLayout(new java.awt.GridLayout(2, 0));

        jpStart.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlStart.setText("Seleccione cuenta contable inicial:*");
        jlStart.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel5.add(jlStart);

        jpStart.add(jPanel5, java.awt.BorderLayout.PAGE_START);
        jpStart.add(moPanelCcStart, java.awt.BorderLayout.CENTER);

        jpCc.add(jpStart);

        jpEnd.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlEnd.setText("Seleccione cuenta contable final:*");
        jlEnd.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel8.add(jlEnd);

        jpEnd.add(jPanel8, java.awt.BorderLayout.PAGE_START);
        jpEnd.add(moPanelCcEnd, java.awt.BorderLayout.CENTER);

        jpCc.add(jpEnd);

        jpContent.add(jpCc, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpContent, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jlEnd;
    private javax.swing.JLabel jlStart;
    private javax.swing.JPanel jpCc;
    private javax.swing.JPanel jpContent;
    private javax.swing.JPanel jpEnd;
    private javax.swing.JPanel jpStart;
    private erp.gui.account.SBeanPanelAccount moPanelCcEnd;
    private erp.gui.account.SBeanPanelAccount moPanelCcStart;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        moPanelCcStart.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, true, true, true);
        moPanelCcEnd.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_ACCOUNT, true, true, true);
        
        moPanelCcStart.setAccountNameWidth(500);
        moPanelCcStart.initPanel();
        moPanelCcEnd.setAccountNameWidth(500);
        moPanelCcEnd.initPanel();
    }
    
    @Override
    public void addAllListeners() {
    
    }

    @Override
    public void removeAllListeners() {
    
    }

    @Override
    public void reloadCatalogues() {
    
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbAccountingCustomizableReportAccount) registry;
        
        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moPanelCcStart.setSelectedAccount(new SAccount(moRegistry.getPkAccountStartId() == 0 ? 1 : moRegistry.getPkAccountStartId(), (String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { moRegistry.getPkAccountStartId() == 0 ? 1 : moRegistry.getPkAccountStartId() }, SDbRegistry.FIELD_CODE), "", false, 0, 0));
        moPanelCcEnd.setSelectedAccount(new SAccount(moRegistry.getPkAccountEndId() == 0 ? 1 : moRegistry.getPkAccountEndId(), (String) miClient.getSession().readField(SModConsts.FIN_ACC, new int[] { moRegistry.getPkAccountEndId() == 0 ? 1 : moRegistry.getPkAccountEndId() }, SDbRegistry.FIELD_CODE), "", false, 0, 0));
    
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAccountingCustomizableReportAccount registry = (SDbAccountingCustomizableReportAccount) moRegistry.clone();

        if (registry.isRegistryNew()) {}
        
        moRegistry.setPkAccountStartId(moPanelCcStart.getSelectedAccount() != null ? moPanelCcStart.getSelectedAccount().getAccountId() : SDataConstantsSys.NA);
        moRegistry.setPkAccountEndId(moPanelCcEnd.getSelectedAccount() != null ? moPanelCcEnd.getSelectedAccount().getAccountId() : SDataConstantsSys.NA);
        
        moRegistry.readAccountStart(miClient.getSession());
        moRegistry.readAccountEnd(miClient.getSession());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            validation = moPanelCcStart.validatePanel();
        }
        if (validation.isValid()) {
            validation = moPanelCcEnd.validatePanel();
        }
        if (validation.isValid()) {
            if (moPanelCcStart.getSelectedAccount().getCodeStd().compareTo(moPanelCcEnd.getSelectedAccount().getCodeStd()) == 1) {
                validation.setComponent(moPanelCcEnd);
                validation.setMessage("El valor de la cuenta contable final debe ser mayor o igual al valor de la cuenta contable inicial.");
            }
        }
        return validation;
    }
}
