/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.gui.account.SAccountConsts;
import erp.gui.account.SAccountUtils;
import erp.mcfg.data.SDataParamsCompany;
import erp.mod.SModConsts;
import erp.mod.bps.db.SDbBizPartner;
import erp.mod.fin.db.SFiscalConsts;
import erp.mod.fin.db.SFiscalUtils;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanFormDialog;
import sa.lib.xml.SXmlDocument;
import sa.lib.xml.SXmlUtils;

/**
 *
// * @author Sergio Flores, Claudio Peña
 */
public class SDialogFiscalXmlFile extends SBeanFormDialog implements ItemListener {

    private int mnMonth;

    /**
     * Creates new form SDialogFiscalXmlFile
     */
    public SDialogFiscalXmlFile(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        
        initComponents();
        initComponentsCustom();
        
        initForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgPeriod = new javax.swing.ButtonGroup();
        jbgXmlFile = new javax.swing.ButtonGroup();
        jbgTrialSheet = new javax.swing.ButtonGroup();
        jbgRequest = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        jsYear = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        moRadMonth01 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth04 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth07 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth10 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth13 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth02 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth05 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth08 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth11 = new sa.lib.gui.bean.SBeanFieldRadio();
        jlMonthDummy01 = new javax.swing.JLabel();
        moRadMonth03 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth06 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth09 = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadMonth12 = new sa.lib.gui.bean.SBeanFieldRadio();
        jtfMonthNotes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        moRadXmlFileChartOfAccounts = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadXmlFileTrialSheet = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadXmlFileJournalVouchers = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadXmlFileDetailedCfdi = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadXmlFileDetailedLedger = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel6 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        moRadTrialSheetNormal = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel9 = new javax.swing.JPanel();
        jlTrialSheetLastModification = new javax.swing.JLabel();
        moRadTrialSheetComplem = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel10 = new javax.swing.JPanel();
        moDateTrialSheetLastModification = new sa.lib.gui.bean.SBeanFieldDate();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        moRadRequestInspect = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel14 = new javax.swing.JPanel();
        jlRequestOrder = new javax.swing.JLabel();
        moRadRequestCertif = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel15 = new javax.swing.JPanel();
        moTextRequestOrder = new sa.lib.gui.bean.SBeanFieldText();
        jLabel3 = new javax.swing.JLabel();
        moRadRequestRefund = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel16 = new javax.swing.JPanel();
        jlRequestTransaction = new javax.swing.JLabel();
        moRadRequestCompen = new sa.lib.gui.bean.SBeanFieldRadio();
        jPanel17 = new javax.swing.JPanel();
        moTextRequestTransaction = new sa.lib.gui.bean.SBeanFieldText();
        jLabel6 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jlAccountStart = new javax.swing.JLabel();
        moPanelAccountStart = new erp.gui.account.SBeanPanelAccount();
        jPanel21 = new javax.swing.JPanel();
        jlAccountEnd = new javax.swing.JLabel();
        moPanelAccountEnd = new erp.gui.account.SBeanPanelAccount();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Período del reporte:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlYear.setText("Ejercicio:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlYear);

        jsYear.setModel(new javax.swing.SpinnerNumberModel());
        jsYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jsYear);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.GridLayout(3, 5));

        jbgPeriod.add(moRadMonth01);
        moRadMonth01.setText("Enero");
        jPanel3.add(moRadMonth01);

        jbgPeriod.add(moRadMonth04);
        moRadMonth04.setText("Abril");
        jPanel3.add(moRadMonth04);

        jbgPeriod.add(moRadMonth07);
        moRadMonth07.setText("Julio");
        jPanel3.add(moRadMonth07);

        jbgPeriod.add(moRadMonth10);
        moRadMonth10.setText("Octubre");
        jPanel3.add(moRadMonth10);

        jbgPeriod.add(moRadMonth13);
        moRadMonth13.setText("Mes 13");
        jPanel3.add(moRadMonth13);

        jbgPeriod.add(moRadMonth02);
        moRadMonth02.setText("Febrero");
        jPanel3.add(moRadMonth02);

        jbgPeriod.add(moRadMonth05);
        moRadMonth05.setText("Mayo");
        jPanel3.add(moRadMonth05);

        jbgPeriod.add(moRadMonth08);
        moRadMonth08.setText("Agosto");
        jPanel3.add(moRadMonth08);

        jbgPeriod.add(moRadMonth11);
        moRadMonth11.setText("Noviembre");
        jPanel3.add(moRadMonth11);
        jPanel3.add(jlMonthDummy01);

        jbgPeriod.add(moRadMonth03);
        moRadMonth03.setText("Marzo");
        jPanel3.add(moRadMonth03);

        jbgPeriod.add(moRadMonth06);
        moRadMonth06.setText("Junio");
        jPanel3.add(moRadMonth06);

        jbgPeriod.add(moRadMonth09);
        moRadMonth09.setText("Septiembre");
        jPanel3.add(moRadMonth09);

        jbgPeriod.add(moRadMonth12);
        moRadMonth12.setText("Diciembre");
        jPanel3.add(moRadMonth12);

        jtfMonthNotes.setEditable(false);
        jtfMonthNotes.setFocusable(false);
        jPanel3.add(jtfMonthNotes);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de reporte:"));
        jPanel5.setLayout(new java.awt.GridLayout(5, 1));

        jbgXmlFile.add(moRadXmlFileChartOfAccounts);
        moRadXmlFileChartOfAccounts.setSelected(true);
        moRadXmlFileChartOfAccounts.setText("Catálogo de cuentas utilizado en el período");
        jPanel5.add(moRadXmlFileChartOfAccounts);

        jbgXmlFile.add(moRadXmlFileTrialSheet);
        moRadXmlFileTrialSheet.setText("Balanza de comprobación");
        jPanel5.add(moRadXmlFileTrialSheet);

        jbgXmlFile.add(moRadXmlFileJournalVouchers);
        moRadXmlFileJournalVouchers.setText("Pólizas del período");
        jPanel5.add(moRadXmlFileJournalVouchers);

        jbgXmlFile.add(moRadXmlFileDetailedCfdi);
        moRadXmlFileDetailedCfdi.setText("Auxiliares de folios fiscales asignados a los comprobantes fiscales dentro de las pólizas");
        moRadXmlFileDetailedCfdi.setEnabled(false);
        jPanel5.add(moRadXmlFileDetailedCfdi);

        jbgXmlFile.add(moRadXmlFileDetailedLedger);
        moRadXmlFileDetailedLedger.setText("Auxiliares de cuenta de nivel mayor y/o de la subcuenta de primer nivel");
        jPanel5.add(moRadXmlFileDetailedLedger);

        jPanel4.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel6.setLayout(new java.awt.GridLayout(1, 2));

        jPanel18.setLayout(new java.awt.GridLayout(2, 1));

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Balanza de comprobación:"));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(4, 2));

        jbgTrialSheet.add(moRadTrialSheetNormal);
        moRadTrialSheetNormal.setSelected(true);
        moRadTrialSheetNormal.setText("Normal");
        jPanel7.add(moRadTrialSheetNormal);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlTrialSheetLastModification.setText("Última modificación:*");
        jlTrialSheetLastModification.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlTrialSheetLastModification);

        jPanel7.add(jPanel9);

        jbgTrialSheet.add(moRadTrialSheetComplem);
        moRadTrialSheetComplem.setText("Complementaria");
        jPanel7.add(moRadTrialSheetComplem);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));
        jPanel10.add(moDateTrialSheetLastModification);

        jPanel7.add(jPanel10);
        jPanel7.add(jLabel1);
        jPanel7.add(jLabel2);
        jPanel7.add(jLabel4);
        jPanel7.add(jLabel5);

        jPanel11.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel18.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de solicitud:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.GridLayout(4, 2));

        jbgRequest.add(moRadRequestInspect);
        moRadRequestInspect.setSelected(true);
        moRadRequestInspect.setText("Acto de fiscalización");
        jPanel13.add(moRadRequestInspect);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlRequestOrder.setText("Número de orden:*");
        jlRequestOrder.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlRequestOrder);

        jPanel13.add(jPanel14);

        jbgRequest.add(moRadRequestCertif);
        moRadRequestCertif.setText("Fiscalización compulsa");
        jPanel13.add(moRadRequestCertif);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));
        jPanel15.add(moTextRequestOrder);

        jLabel3.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel3.setText("AAA0000000/00");
        jLabel3.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel15.add(jLabel3);

        jPanel13.add(jPanel15);

        jbgRequest.add(moRadRequestRefund);
        moRadRequestRefund.setText("Devolución");
        jPanel13.add(moRadRequestRefund);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlRequestTransaction.setText("Número de trámite:*");
        jlRequestTransaction.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlRequestTransaction);

        jPanel13.add(jPanel16);

        jbgRequest.add(moRadRequestCompen);
        moRadRequestCompen.setText("Compensación");
        jPanel13.add(moRadRequestCompen);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));
        jPanel17.add(moTextRequestTransaction);

        jLabel6.setForeground(java.awt.SystemColor.textInactiveText);
        jLabel6.setText("AA00000000000");
        jLabel6.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel17.add(jLabel6);

        jPanel13.add(jPanel17);

        jPanel12.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel18.add(jPanel12);

        jPanel6.add(jPanel18);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuentas contables:"));
        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel8.setLayout(new java.awt.GridLayout(2, 1));

        jPanel20.setLayout(new java.awt.BorderLayout());

        jlAccountStart.setText("Cuenta contable inicial:");
        jlAccountStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlAccountStart, java.awt.BorderLayout.NORTH);
        jPanel20.add(moPanelAccountStart, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel20);

        jPanel21.setLayout(new java.awt.BorderLayout());

        jlAccountEnd.setText("Cuenta contable final:");
        jlAccountEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlAccountEnd, java.awt.BorderLayout.NORTH);
        jPanel21.add(moPanelAccountEnd, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel21);

        jPanel19.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel6.add(jPanel19);

        jPanel4.add(jPanel6, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.ButtonGroup jbgPeriod;
    private javax.swing.ButtonGroup jbgRequest;
    private javax.swing.ButtonGroup jbgTrialSheet;
    private javax.swing.ButtonGroup jbgXmlFile;
    private javax.swing.JLabel jlAccountEnd;
    private javax.swing.JLabel jlAccountStart;
    private javax.swing.JLabel jlMonthDummy01;
    private javax.swing.JLabel jlRequestOrder;
    private javax.swing.JLabel jlRequestTransaction;
    private javax.swing.JLabel jlTrialSheetLastModification;
    private javax.swing.JLabel jlYear;
    private javax.swing.JSpinner jsYear;
    private javax.swing.JTextField jtfMonthNotes;
    private sa.lib.gui.bean.SBeanFieldDate moDateTrialSheetLastModification;
    private erp.gui.account.SBeanPanelAccount moPanelAccountEnd;
    private erp.gui.account.SBeanPanelAccount moPanelAccountStart;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth01;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth02;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth03;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth04;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth05;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth06;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth07;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth08;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth09;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth10;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth11;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth12;
    private sa.lib.gui.bean.SBeanFieldRadio moRadMonth13;
    private sa.lib.gui.bean.SBeanFieldRadio moRadRequestCertif;
    private sa.lib.gui.bean.SBeanFieldRadio moRadRequestCompen;
    private sa.lib.gui.bean.SBeanFieldRadio moRadRequestInspect;
    private sa.lib.gui.bean.SBeanFieldRadio moRadRequestRefund;
    private sa.lib.gui.bean.SBeanFieldRadio moRadTrialSheetComplem;
    private sa.lib.gui.bean.SBeanFieldRadio moRadTrialSheetNormal;
    private sa.lib.gui.bean.SBeanFieldRadio moRadXmlFileChartOfAccounts;
    private sa.lib.gui.bean.SBeanFieldRadio moRadXmlFileDetailedCfdi;
    private sa.lib.gui.bean.SBeanFieldRadio moRadXmlFileDetailedLedger;
    private sa.lib.gui.bean.SBeanFieldRadio moRadXmlFileJournalVouchers;
    private sa.lib.gui.bean.SBeanFieldRadio moRadXmlFileTrialSheet;
    private sa.lib.gui.bean.SBeanFieldText moTextRequestOrder;
    private sa.lib.gui.bean.SBeanFieldText moTextRequestTransaction;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        moRadMonth01.setBooleanSettings(moRadMonth01.getText(), false);
        moRadMonth02.setBooleanSettings(moRadMonth02.getText(), false);
        moRadMonth03.setBooleanSettings(moRadMonth03.getText(), false);
        moRadMonth04.setBooleanSettings(moRadMonth04.getText(), false);
        moRadMonth05.setBooleanSettings(moRadMonth05.getText(), false);
        moRadMonth06.setBooleanSettings(moRadMonth06.getText(), false);
        moRadMonth07.setBooleanSettings(moRadMonth07.getText(), false);
        moRadMonth08.setBooleanSettings(moRadMonth08.getText(), false);
        moRadMonth09.setBooleanSettings(moRadMonth09.getText(), false);
        moRadMonth10.setBooleanSettings(moRadMonth10.getText(), false);
        moRadMonth11.setBooleanSettings(moRadMonth11.getText(), false);
        moRadMonth12.setBooleanSettings(moRadMonth12.getText(), false);
        moRadMonth13.setBooleanSettings(moRadMonth13.getText(), false);
        moRadXmlFileChartOfAccounts.setBooleanSettings(moRadXmlFileChartOfAccounts.getText(), false);
        moRadXmlFileTrialSheet.setBooleanSettings(moRadXmlFileTrialSheet.getText(), false);
        moRadXmlFileJournalVouchers.setBooleanSettings(moRadXmlFileJournalVouchers.getText(), false);
        moRadXmlFileDetailedCfdi.setBooleanSettings(moRadXmlFileDetailedCfdi.getText(), false);
        moRadXmlFileDetailedLedger.setBooleanSettings(moRadXmlFileDetailedLedger.getText(), false);
        moRadTrialSheetNormal.setBooleanSettings(moRadTrialSheetNormal.getText(), false);
        moRadTrialSheetComplem.setBooleanSettings(moRadTrialSheetComplem.getText(), false);
        moDateTrialSheetLastModification.setDateSettings(miClient, SGuiUtils.getLabelName(jlTrialSheetLastModification), true);
        moRadRequestInspect.setBooleanSettings(moRadRequestInspect.getText(), false);
        moRadRequestCertif.setBooleanSettings(moRadRequestCertif.getText(), false);
        moRadRequestRefund.setBooleanSettings(moRadRequestRefund.getText(), false);
        moRadRequestCompen.setBooleanSettings(moRadRequestCompen.getText(), false);
        moTextRequestOrder.setTextSettings(SGuiUtils.getLabelName(jlRequestOrder), 13, 13);
        moTextRequestTransaction.setTextSettings(SGuiUtils.getLabelName(jlRequestTransaction), 14, 14);

        moPanelAccountStart.setPanelSettings(miClient, SAccountConsts.TYPE_ACCOUNT, false, true, false);
        moPanelAccountStart.setAccountNameWidth(300);
        moPanelAccountStart.setComponentPrevious(moRadXmlFileDetailedLedger);
        moPanelAccountStart.setComponentNext(moPanelAccountEnd);

        moPanelAccountEnd.setPanelSettings(miClient, SAccountConsts.TYPE_ACCOUNT, false, true, false);
        moPanelAccountEnd.setAccountNameWidth(300);
        moPanelAccountEnd.setComponentPrevious(moPanelAccountStart);
        moPanelAccountEnd.setComponentNext(jbSave);

        moFields.addField(moRadMonth01);
        moFields.addField(moRadMonth02);
        moFields.addField(moRadMonth03);
        moFields.addField(moRadMonth04);
        moFields.addField(moRadMonth05);
        moFields.addField(moRadMonth06);
        moFields.addField(moRadMonth07);
        moFields.addField(moRadMonth08);
        moFields.addField(moRadMonth09);
        moFields.addField(moRadMonth10);
        moFields.addField(moRadMonth11);
        moFields.addField(moRadMonth12);
        moFields.addField(moRadMonth13);
        moFields.addField(moRadXmlFileChartOfAccounts);
        moFields.addField(moRadXmlFileTrialSheet);
        moFields.addField(moRadXmlFileJournalVouchers);
        moFields.addField(moRadXmlFileDetailedCfdi);
        moFields.addField(moRadXmlFileDetailedLedger);
        moFields.addField(moRadTrialSheetNormal);
        moFields.addField(moRadTrialSheetComplem);
        moFields.addField(moDateTrialSheetLastModification);
        moFields.addField(moTextRequestOrder);
        moFields.addField(moTextRequestTransaction);

        jbSave.setText(SGuiConsts.TXT_BTN_OK);
        jbCancel.setText(SGuiConsts.TXT_BTN_CLOSE);

        moFields.setFormButton(jbSave);

        ((JSpinner.NumberEditor) jsYear.getEditor()).getFormat().setGroupingUsed(false);
        ((SpinnerNumberModel) jsYear.getModel()).setMinimum(SFiscalConsts.YEAR_MIN);
        ((SpinnerNumberModel) jsYear.getModel()).setMaximum(SFiscalConsts.YEAR_MAX);
    }

    private void itemStateChangedMonth() {
        if (!moRadXmlFileTrialSheet.isSelected()) {
            jtfMonthNotes.setText("");
        }
        else {
            if (moRadMonth12.isSelected()) {
                jtfMonthNotes.setText("SIN ajustes de cierre y auditoría");
            }
            else if (moRadMonth13.isSelected()) {
                jtfMonthNotes.setText("CON ajustes de cierre y auditoría");
            }
            else {
                jtfMonthNotes.setText("TODAS las pólizas contables");
            }
        }
    }

    private void itemStateChangedXmlFile() {
        boolean enableMonth13 = false;
        boolean enablePanelTrialSheet = false;
        boolean enablePanelRequest = false;
        boolean enablePanelAccounts = false;

        moRadMonth13.setEnabled(false);
        
        moDateTrialSheetLastModification.setValue(null);
        moDateTrialSheetLastModification.setEditable(false);
        moRadTrialSheetNormal.setEnabled(false);
        moRadTrialSheetComplem.setEnabled(false);
        jbgTrialSheet.clearSelection();

        moTextRequestOrder.setValue("");
        moTextRequestOrder.setEditable(false);
        moTextRequestTransaction.setValue("");
        moTextRequestTransaction.setEditable(false);
        moRadRequestInspect.setEnabled(false);
        moRadRequestCertif.setEnabled(false);
        moRadRequestRefund.setEnabled(false);
        moRadRequestCompen.setEnabled(false);
        jbgRequest.clearSelection();

        moPanelAccountStart.initPanel();
        moPanelAccountStart.setPanelEditable(false);
        moPanelAccountEnd.initPanel();
        moPanelAccountEnd.setPanelEditable(false);

        if (moRadXmlFileChartOfAccounts.isSelected()) {

        }
        else if (moRadXmlFileTrialSheet.isSelected()) {
            enableMonth13 = true;
            enablePanelTrialSheet = true;
        }
        else if (moRadXmlFileJournalVouchers.isSelected()) {
            enablePanelRequest = true;
        }
        else if (moRadXmlFileDetailedCfdi.isSelected()) {
            enablePanelRequest = true;
        }
        else if (moRadXmlFileDetailedLedger.isSelected()) {
            enablePanelRequest = true;
            enablePanelAccounts = true;
        }
        
        if (enableMonth13) {
            moRadMonth13.setEnabled(true);
        }
        
        if (moRadMonth13.isSelected() && !moRadMonth13.isEnabled()) {
            moRadMonth12.setSelected(true);
        }
        
        itemStateChangedMonth();

        if (enablePanelTrialSheet) {
            moDateTrialSheetLastModification.setEditable(true);
            moRadTrialSheetNormal.setEnabled(true);
            moRadTrialSheetComplem.setEnabled(true);

            moRadTrialSheetNormal.setSelected(true);    // triggers item state changed event
        }

        if (enablePanelRequest) {
            moTextRequestOrder.setEditable(true);
            moTextRequestTransaction.setEditable(true);
            moRadRequestInspect.setEnabled(true);
            moRadRequestCertif.setEnabled(true);
            moRadRequestRefund.setEnabled(true);
            moRadRequestCompen.setEnabled(true);

            moRadRequestInspect.setSelected(true);           // triggers item state changed event
        }

        if (enablePanelAccounts) {
            moPanelAccountStart.setPanelEditable(true);
            moPanelAccountEnd.setPanelEditable(true);
        }
    }

    private void itemStateChangedTrialSheet() {
        boolean enableLastModification = false;

        moDateTrialSheetLastModification.setEditable(false);

        if (moRadTrialSheetNormal.isSelected()) {

        }
        else if (moRadTrialSheetComplem.isSelected()) {
            enableLastModification = true;
        }

        if (enableLastModification) {
            moDateTrialSheetLastModification.setEditable(true);
        }
    }

    private void itemStateChangedRequest() {
        boolean enableOrder = false;
        boolean enableTransaction = false;

        moTextRequestOrder.setEditable(false);
        moTextRequestTransaction.setEditable(false);

        if (moRadRequestInspect.isSelected()) {
            enableOrder = true;
        }
        else if (moRadRequestCertif.isSelected()) {
            enableOrder = true;
        }
        else if (moRadRequestRefund.isSelected()) {
            enableTransaction = true;
        }
        else if (moRadRequestCompen.isSelected()) {
            enableTransaction = true;
        }

        if (enableOrder) {
            moTextRequestOrder.setEditable(true);
        }

        if (enableTransaction) {
            moTextRequestTransaction.setEditable(true);
        }
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            moRadMonth01.requestFocus();
        }
    }

    @Override
    public void initForm() {
        int[] period = null;

        removeAllListeners();

        mbFirstActivation = true;

        period = SLibTimeUtils.digestMonth(miClient.getSession().getCurrentDate());
        jsYear.setValue(period[0]);

        mnMonth = period[1];
        switch (mnMonth) {
            case 1:
                moRadMonth01.setSelected(true);
                break;
            case 2:
                moRadMonth02.setSelected(true);
                break;
            case 3:
                moRadMonth03.setSelected(true);
                break;
            case 4:
                moRadMonth04.setSelected(true);
                break;
            case 5:
                moRadMonth05.setSelected(true);
                break;
            case 6:
                moRadMonth06.setSelected(true);
                break;
            case 7:
                moRadMonth07.setSelected(true);
                break;
            case 8:
                moRadMonth08.setSelected(true);
                break;
            case 9:
                moRadMonth09.setSelected(true);
                break;
            case 10:
                moRadMonth10.setSelected(true);
                break;
            case 11:
                moRadMonth11.setSelected(true);
                break;
            case 12:
                moRadMonth12.setSelected(true);
                break;
            default:
        }

        moRadXmlFileChartOfAccounts.setSelected(true);

        itemStateChangedXmlFile();
        itemStateChangedTrialSheet();
        itemStateChangedRequest();

        addAllListeners();
    }

    @Override
    public void addAllListeners() {
        moRadMonth01.addItemListener(this);
        moRadMonth02.addItemListener(this);
        moRadMonth03.addItemListener(this);
        moRadMonth04.addItemListener(this);
        moRadMonth05.addItemListener(this);
        moRadMonth06.addItemListener(this);
        moRadMonth07.addItemListener(this);
        moRadMonth08.addItemListener(this);
        moRadMonth09.addItemListener(this);
        moRadMonth10.addItemListener(this);
        moRadMonth11.addItemListener(this);
        moRadMonth12.addItemListener(this);
        moRadMonth13.addItemListener(this);
        moRadXmlFileChartOfAccounts.addItemListener(this);
        moRadXmlFileTrialSheet.addItemListener(this);
        moRadXmlFileJournalVouchers.addItemListener(this);
        moRadXmlFileDetailedCfdi.addItemListener(this);
        moRadXmlFileDetailedLedger.addItemListener(this);
        moRadTrialSheetNormal.addItemListener(this);
        moRadTrialSheetComplem.addItemListener(this);
        moRadRequestInspect.addItemListener(this);
        moRadRequestCertif.addItemListener(this);
        moRadRequestRefund.addItemListener(this);
        moRadRequestCompen.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moRadMonth01.removeItemListener(this);
        moRadMonth02.removeItemListener(this);
        moRadMonth03.removeItemListener(this);
        moRadMonth04.removeItemListener(this);
        moRadMonth05.removeItemListener(this);
        moRadMonth06.removeItemListener(this);
        moRadMonth07.removeItemListener(this);
        moRadMonth08.removeItemListener(this);
        moRadMonth09.removeItemListener(this);
        moRadMonth10.removeItemListener(this);
        moRadMonth11.removeItemListener(this);
        moRadMonth12.removeItemListener(this);
        moRadMonth13.removeItemListener(this);
        moRadXmlFileChartOfAccounts.removeItemListener(this);
        moRadXmlFileTrialSheet.removeItemListener(this);
        moRadXmlFileJournalVouchers.removeItemListener(this);
        moRadXmlFileDetailedCfdi.removeItemListener(this);
        moRadXmlFileDetailedLedger.removeItemListener(this);
        moRadTrialSheetNormal.removeItemListener(this);
        moRadTrialSheetComplem.removeItemListener(this);
        moRadRequestInspect.removeItemListener(this);
        moRadRequestCertif.removeItemListener(this);
        moRadRequestRefund.removeItemListener(this);
        moRadRequestCompen.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        String accountStart = "";
        String accountEnd = "";
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moRadXmlFileDetailedLedger.isSelected()) {
                validation = moPanelAccountStart.validatePanel();

                if (validation.isValid()) {
                    validation = moPanelAccountEnd.validatePanel();

                    if (validation.isValid()) {
                        accountStart = moPanelAccountStart.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMin() : moPanelAccountStart.getSelectedAccount().getCodeStd();
                        accountEnd = moPanelAccountEnd.getSelectedAccount() == null ? SAccountUtils.composeCodeStdMax(((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount()) : moPanelAccountEnd.getSelectedAccount().getCodeStd();

                        if (accountStart.compareTo(accountEnd) > 0) {
                            validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlAccountStart) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_LESS + "'" + SGuiUtils.getLabelName(jlAccountEnd) + "'.");
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                try {
                    boolean computeXml = true;
                    
                    if (moRadXmlFileChartOfAccounts.isSelected()) {
                        SDialogFiscalXmlFileChartOfAccounts dialogChartOfAccounts = new SDialogFiscalXmlFileChartOfAccounts(miClient, "Configuración del catálogo de cuentas utilizado en el período");
                        dialogChartOfAccounts.setValue(SGuiConsts.PARAM_DATE, new int[] { (int) jsYear.getValue(), mnMonth });
                        dialogChartOfAccounts.initForm();
                        dialogChartOfAccounts.setVisible(true);
                        computeXml = dialogChartOfAccounts.getFormResult() == SGuiConsts.FORM_RESULT_OK;
                    }

                    if (computeXml) {
                        String name = "";
                        SDbBizPartner company = null;
                        
                        if (moRadXmlFileChartOfAccounts.isSelected()) {
                            name = SFiscalConsts.XML_COA;
                        }
                        else if (moRadXmlFileTrialSheet.isSelected()) {
                            name = SFiscalConsts.XML_TRS + (moRadTrialSheetNormal.isSelected() ? SFiscalConsts.XML_TRS_NOR : SFiscalConsts.XML_TRS_SUB);
                        }
                        else if (moRadXmlFileJournalVouchers.isSelected()) {
                            name = SFiscalConsts.XML_JOV;
                        }
                        else if (moRadXmlFileDetailedCfdi.isSelected()) {
                            name = SFiscalConsts.XML_DEC;
                        }
                        else if (moRadXmlFileDetailedLedger.isSelected()) {
                            name = SFiscalConsts.XML_DEL;
                        }

                        company = (SDbBizPartner) miClient.getSession().readRegistry(SModConsts.BPSU_BP, new int[] { miClient.getSession().getConfigCompany().getCompanyId() });
                        name = company.getFiscalId() + (int) jsYear.getValue() + SLibUtils.DecimalFormatCalendarMonth.format(mnMonth) + name + ".xml";

                        miClient.getFileChooser().setSelectedFile(new File(name));
                        if (miClient.getFileChooser().showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                            SXmlDocument doc = null;
                            
                            if (moRadXmlFileChartOfAccounts.isSelected()) {
                                doc = SFiscalUtils.createDocCatalogo13(miClient.getSession(), (int) jsYear.getValue(), mnMonth);
                            }
                            else if (moRadXmlFileTrialSheet.isSelected()) {
                                doc = SFiscalUtils.createDocBalanza13(miClient.getSession(), (int) jsYear.getValue(), mnMonth,
                                        moRadTrialSheetNormal.isSelected() ? SFiscalConsts.TRS_NOR : SFiscalConsts.TRS_CMP, moRadTrialSheetNormal.isSelected() ? null : moDateTrialSheetLastModification.getValue());
                            }
                            else if (moRadXmlFileJournalVouchers.isSelected()) {
                                doc = SFiscalUtils.createDocPolizas13(miClient.getSession(), (int) jsYear.getValue(), mnMonth,
                                        moRadRequestInspect.isSelected() ? SFiscalConsts.JOV_REQ_TP_AF : SFiscalConsts.JOV_REQ_TP_FC, moTextRequestOrder.getValue(), moTextRequestTransaction.getValue());
                            }
                            else if (moRadXmlFileDetailedCfdi.isSelected()) {
                                // do not needed actually
                            }
                            else if (moRadXmlFileDetailedLedger.isSelected()) {
                                doc = SFiscalUtils.createDocAuxiliarCtas13(miClient.getSession(), (int) jsYear.getValue(), mnMonth,
                                        moRadRequestInspect.isSelected() ? SFiscalConsts.JOV_REQ_TP_AF : SFiscalConsts.JOV_REQ_TP_FC, moTextRequestOrder.getValue(), moTextRequestTransaction.getValue(),
                                        moPanelAccountStart.getSelectedAccount() == null ? "" : moPanelAccountStart.getSelectedAccount().getCodeStd(),
                                        moPanelAccountEnd.getSelectedAccount() == null ? "" : moPanelAccountEnd.getSelectedAccount().getCodeStd());
                            }

                            SXmlUtils.writeXml(doc.getXmlString(), miClient.getFileChooser().getSelectedFile().getAbsolutePath());
                            miClient.showMsgBoxInformation(SLibConsts.MSG_PROCESS_FINISHED);
                        }
                    }
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldRadio) {
            if (e.getStateChange() == ItemEvent.SELECTED) {            
                SBeanFieldRadio field = (SBeanFieldRadio) e.getSource();

                if (field == moRadMonth01) {
                    mnMonth = 1;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth02) {
                    mnMonth = 2;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth03) {
                    mnMonth = 3;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth04) {
                    mnMonth = 4;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth05) {
                    mnMonth = 5;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth06) {
                    mnMonth = 6;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth07) {
                    mnMonth = 7;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth08) {
                    mnMonth = 8;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth09) {
                    mnMonth = 9;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth10) {
                    mnMonth = 10;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth11) {
                    mnMonth = 11;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth12) {
                    mnMonth = 12;
                    itemStateChangedMonth();
                }
                else if (field == moRadMonth13) {
                    mnMonth = 13;
                    itemStateChangedMonth();
                }
                else if (field == moRadXmlFileChartOfAccounts) {
                    itemStateChangedXmlFile();
                }
                else if (field == moRadXmlFileTrialSheet) {
                    itemStateChangedXmlFile();
                }
                else if (field == moRadXmlFileJournalVouchers) {
                    itemStateChangedXmlFile();
                }
                else if (field == moRadXmlFileDetailedCfdi) {
                    itemStateChangedXmlFile();
                }
                else if (field == moRadXmlFileDetailedLedger) {
                    itemStateChangedXmlFile();
                }
                else if (field == moRadTrialSheetNormal) {
                    itemStateChangedTrialSheet();
                }
                else if (field == moRadTrialSheetComplem) {
                    itemStateChangedTrialSheet();
                }
                else if (field == moRadRequestInspect) {
                    itemStateChangedRequest();
                }
                else if (field == moRadRequestCertif) {
                    itemStateChangedRequest();
                }
                else if (field == moRadRequestRefund) {
                    itemStateChangedRequest();
                }
                else if (field == moRadRequestCompen) {
                    itemStateChangedRequest();
                }
            }
        }
    }
}
