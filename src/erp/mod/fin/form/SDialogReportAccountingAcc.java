/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.gui.account.SAccountConsts;
import erp.mod.SModConsts;
import java.sql.ResultSet;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Isabel Servín
 */
public class SDialogReportAccountingAcc extends SBeanFormDialog implements ListSelectionListener{
    
    private int mnAccType;
    
    /**
     * Creates new form SDialogAuthorizationCardex
     * @param client
     * @param subtype
     * @param title
     */
    public SDialogReportAccountingAcc(SGuiClient client, int subtype) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FINX_REP_CUS_ACC, subtype, "");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaContent = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pasos de la autorización");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jtaContent.setEditable(false);
        jtaContent.setColumns(20);
        jtaContent.setRows(5);
        jScrollPane1.setViewportView(jtaContent);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaContent;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);
    }
    
    public void populateArea() {
        String sql;
        ResultSet resultSet;
        jtaContent.setText("");
        try {
            switch (mnAccType) {
                case SAccountConsts.TYPE_ACCOUNT:
                    sql = "SELECT ccs.id_acc _sta, cce.id_acc _end FROM fin_rep_cus_acc_acc as r " +
                            "INNER JOIN fin_acc AS ccs ON r.id_acc_start = ccs.pk_acc " +
                            "INNER JOIN fin_acc AS cce ON r.id_acc_end = cce.pk_acc " +
                            "WHERE r.id_rep_cus_acc = " + mnFormSubtype;
                    resultSet = miClient.getSession().getStatement().executeQuery(sql);
                    while (resultSet.next()) {
                        sql = "SELECT id_acc FROM fin_acc WHERE id_acc BETWEEN '" + resultSet.getString(1) + "' AND '" + resultSet.getString(2) + "' AND NOT b_del AND b_act";
                        ResultSet resultSetAcc = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
                        while (resultSetAcc.next()) {
                            jtaContent.append(resultSetAcc.getString(1) + "\n");
                        }
                    }
                break;
                case SAccountConsts.TYPE_COST_CENTER:
                    sql = "SELECT ccs.id_cc _sta, cce.id_cc _end FROM fin_rep_cus_acc_cc as r " +
                            "INNER JOIN fin_cc AS ccs ON r.id_cc_start = ccs.pk_cc " +
                            "INNER JOIN fin_cc AS cce ON r.id_cc_end = cce.pk_cc " +
                            "WHERE r.id_rep_cus_acc = " + mnFormSubtype;
                    resultSet = miClient.getSession().getStatement().executeQuery(sql);
                    while (resultSet.next()) {
                        sql = "SELECT id_cc FROM fin_cc WHERE id_cc BETWEEN '" + resultSet.getString(1) + "' AND '" + resultSet.getString(2) + "' AND NOT b_del AND b_act";
                        ResultSet resultSetCc = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql);
                        while (resultSetCc.next()) {
                            jtaContent.append(resultSetCc.getString(1) + "\n");
                        }
                    }
                break;
            }
        }
        catch (Exception e) {}
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case 1: mnAccType = (int) value;break;
            case 2: this.setTitle((String) value); break;
        }
    }

    @Override
    public Object getValue(final int type) {
        return new Object();
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
    }
}
