/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.fin.form;

import erp.lib.SLibConstants;
import erp.mod.SModConsts;
import erp.mod.fin.db.SDbAccountingCustomizableReport;
import erp.mod.fin.db.SDbAccountingCustomizableReportAccount;
import erp.mod.fin.db.SDbAccountingCustomizableReportCostCenter;
import erp.mod.fin.db.SDbAccountingCustomizableReportUser;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiSession;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 */
public class SFormAccountingCustomizableReport extends sa.lib.gui.bean.SBeanForm implements SGridPaneFormOwner, ActionListener {

    private SDbAccountingCustomizableReport moRegistry;
    
    private ArrayList<SDbAccountingCustomizableReportAccount> maAccCusRepAcc;
    private ArrayList<SDbAccountingCustomizableReportCostCenter> maAccCusRepCc;
    private ArrayList<SRowAccUser> maAccUsrAv;
    private ArrayList<SDbAccountingCustomizableReportUser> maAccCusRepUsrSelected;
    
    private SFormAccountingCustomizableReportAccount moFormAcc;
    private SFormAccountingCustomizableReportCostCenter moFormCc;
    
    private SGridPaneForm moGridAcc;
    private SGridPaneForm moGridCc;
    private SGridPaneForm moGridUsrAv;
    private SGridPaneForm moGridUsrSelected;

    /**
     * Creates new form SFormAbpBizPartnerLink
     * @param client
     * @param title
     */
    public SFormAccountingCustomizableReport(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.FIN_REP_CUS_ACC, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jlTitle = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jlDescription = new javax.swing.JLabel();
        moTextDescription = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jpAcc = new javax.swing.JPanel();
        jpCc = new javax.swing.JPanel();
        jpUsr = new javax.swing.JPanel();
        jpProvAvailable = new javax.swing.JPanel();
        jpProvAvailableLabel = new javax.swing.JPanel();
        jlConsAvailable = new javax.swing.JLabel();
        jpGridUsrAva = new javax.swing.JPanel();
        jpProvButtons = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jbUsrAdd = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jbUsrAddAll = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jbUsrRemove = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jbUsrRemoveAll = new javax.swing.JButton();
        jpProvSelected = new javax.swing.JPanel();
        jpProvSelectedLabel = new javax.swing.JPanel();
        jlConsSelected = new javax.swing.JLabel();
        jpGridUsrSel = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel23.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTitle.setText("Título:*");
        jlTitle.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlTitle);

        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel25.add(moTextName);

        jLabel1.setForeground(new java.awt.Color(153, 153, 153));
        jLabel1.setText("(Aparecerá en la pestaña de la vista.)");
        jPanel25.add(jLabel1);

        jPanel23.add(jPanel25);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDescription.setText("Descripción:*");
        jlDescription.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlDescription);

        moTextDescription.setPreferredSize(new java.awt.Dimension(671, 23));
        jPanel21.add(moTextDescription);

        jPanel23.add(jPanel21);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Configuración adicional:"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jpAcc.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Cuentas contables", jpAcc);

        jpCc.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Centros de costo", jpCc);

        jpUsr.setLayout(new java.awt.BorderLayout());

        jpProvAvailable.setLayout(new java.awt.BorderLayout());

        jpProvAvailableLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsAvailable.setText("Usuarios disponibles:");
        jpProvAvailableLabel.add(jlConsAvailable);

        jpProvAvailable.add(jpProvAvailableLabel, java.awt.BorderLayout.NORTH);

        jpGridUsrAva.setPreferredSize(new java.awt.Dimension(350, 300));
        jpGridUsrAva.setLayout(new java.awt.BorderLayout());
        jpProvAvailable.add(jpGridUsrAva, java.awt.BorderLayout.CENTER);

        jpProvButtons.setLayout(new java.awt.GridLayout(14, 0));
        jpProvButtons.add(jPanel2);

        jbUsrAdd.setText(">");
        jbUsrAdd.setToolTipText("Agregar");
        jbUsrAdd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jbUsrAdd);

        jpProvButtons.add(jPanel4);

        jbUsrAddAll.setText(">>");
        jbUsrAddAll.setToolTipText("Agregar todos");
        jbUsrAddAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jbUsrAddAll);

        jpProvButtons.add(jPanel5);

        jbUsrRemove.setText("<");
        jbUsrRemove.setToolTipText("Quitar");
        jbUsrRemove.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jbUsrRemove);

        jpProvButtons.add(jPanel6);

        jbUsrRemoveAll.setText("<<");
        jbUsrRemoveAll.setToolTipText("Quitar todos");
        jbUsrRemoveAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jbUsrRemoveAll);

        jpProvButtons.add(jPanel7);

        jpProvAvailable.add(jpProvButtons, java.awt.BorderLayout.EAST);

        jpUsr.add(jpProvAvailable, java.awt.BorderLayout.CENTER);

        jpProvSelected.setPreferredSize(new java.awt.Dimension(453, 300));
        jpProvSelected.setLayout(new java.awt.BorderLayout());

        jpProvSelectedLabel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlConsSelected.setText("Usuarios seleccionados:");
        jlConsSelected.setPreferredSize(new java.awt.Dimension(370, 16));
        jpProvSelectedLabel.add(jlConsSelected);

        jpProvSelected.add(jpProvSelectedLabel, java.awt.BorderLayout.NORTH);

        jpGridUsrSel.setPreferredSize(new java.awt.Dimension(200, 250));
        jpGridUsrSel.setLayout(new java.awt.BorderLayout());
        jpProvSelected.add(jpGridUsrSel, java.awt.BorderLayout.CENTER);

        jpUsr.add(jpProvSelected, java.awt.BorderLayout.EAST);

        jTabbedPane1.addTab("Usuarios", jpUsr);

        jPanel8.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel8, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbUsrAdd;
    private javax.swing.JButton jbUsrAddAll;
    private javax.swing.JButton jbUsrRemove;
    private javax.swing.JButton jbUsrRemoveAll;
    private javax.swing.JLabel jlConsAvailable;
    private javax.swing.JLabel jlConsSelected;
    private javax.swing.JLabel jlDescription;
    private javax.swing.JLabel jlTitle;
    private javax.swing.JPanel jpAcc;
    private javax.swing.JPanel jpCc;
    private javax.swing.JPanel jpGridUsrAva;
    private javax.swing.JPanel jpGridUsrSel;
    private javax.swing.JPanel jpProvAvailable;
    private javax.swing.JPanel jpProvAvailableLabel;
    private javax.swing.JPanel jpProvButtons;
    private javax.swing.JPanel jpProvSelected;
    private javax.swing.JPanel jpProvSelectedLabel;
    private javax.swing.JPanel jpUsr;
    private sa.lib.gui.bean.SBeanFieldText moTextDescription;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1040, 650);

        jbEdit.setVisible(false);
        jbReadInfo.setVisible(false);
        
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlTitle), 25, 1);
        moTextDescription.setTextSettings(SGuiUtils.getLabelName(jlDescription), 100, 1);
        
        moFields.addField(moTextName);
        moFields.addField(moTextDescription);
        
        moFields.setFormButton(jbSave);
        
        moFormAcc = new SFormAccountingCustomizableReportAccount(miClient, "Seleccionar rango de cuentas contables");
        
        moGridAcc = new SGridPaneForm(miClient, SModConsts.FIN_REP_CUS_ACC_ACC, SLibConsts.UNDEFINED, "Rangos de cuentas contables") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, false, true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. cuenta contable inicial"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Cuenta contable inicial"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. cuenta contable final"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Cuenta contable final"));
                
                return columns;
            }
        };
        moGridAcc.setForm(moFormAcc);
        moGridAcc.setPaneFormOwner(this);
        mvFormGrids.add(moGridAcc);
        jpAcc.add(moGridAcc, BorderLayout.CENTER);
        
        moFormCc = new SFormAccountingCustomizableReportCostCenter(miClient, "Seleccionar rango de centros de costo");
        
        moGridCc = new SGridPaneForm(miClient, SModConsts.FIN_REP_CUS_ACC_CC, SLibConsts.UNDEFINED, "Rengos de centros de costo") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, false, true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. centro costo inicial"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Centro costo inicial"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. centro costo final"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Centro costo final"));
                
                return columns;
            }
        };
        moGridCc.setForm(moFormCc);
        moGridCc.setPaneFormOwner(this);
        mvFormGrids.add(moGridCc);
        jpCc.add(moGridCc, BorderLayout.CENTER);
        
        moGridUsrAv = new SGridPaneForm(miClient, SModConsts.USRU_USR, SLibConsts.UNDEFINED, "Usuarios disponibles") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usuario", 400));

                return columns;
            }
        };
        jpGridUsrAva.add(moGridUsrAv);
        mvFormGrids.add(moGridUsrAv);
        
        moGridUsrSelected = new SGridPaneForm(miClient, SModConsts.FIN_REP_CUS_ACC_USR, mnFormSubtype, msTitle) {
            
             @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();

                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usuario", 400));

                return columns;
            }
        };
        jpGridUsrSel.add(moGridUsrSelected);
        mvFormGrids.add(moGridUsrSelected);
    }
    
    private void populateAcc() {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            if (maAccCusRepAcc.size() > 0) {
                vRows.addAll(maAccCusRepAcc);
            }
            moGridAcc.populateGrid(vRows);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateCc() {
        try {
            Vector<SGridRow> vRows = new Vector<>();
            if (maAccCusRepCc.size() > 0) {
                vRows.addAll(maAccCusRepCc);
            }
            moGridCc.populateGrid(vRows);
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void readUsers() {
        try {
            Statement statement = miClient.getSession().getDatabase().getConnection().createStatement();
            String sql = "SELECT id_usr FROM erp.usru_usr WHERE b_act AND NOT b_del AND id_usr <> 1";
            ResultSet resultSet = statement.executeQuery(sql);
            while (resultSet.next()) {
                boolean found = false;
                for (SDbAccountingCustomizableReportUser o : maAccCusRepUsrSelected) {
                    if (resultSet.getInt(1) == o.getPkUserId()) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    SRowAccUser row = new SRowAccUser();
                    row.read(miClient.getSession(), resultSet.getInt(1));
                    maAccUsrAv.add(row);
                }
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
    
    private void populateGridUsr() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maAccUsrAv.size() > 0) {
            vRows.addAll(maAccUsrAv);
        }
        moGridUsrAv.populateGrid(vRows);
    }
    
    private void populateGridUsrSelected() {
        Vector<SGridRow> vRows = new Vector<>();
        if (maAccCusRepUsrSelected.size() > 0) {
            vRows.addAll(maAccCusRepUsrSelected);
        }
        moGridUsrSelected.populateGrid(vRows);
    }
    
    private void actionUsrAdd() {
        try {
            int usrId = ((SRowAccUser) moGridUsrAv.getSelectedGridRow()).mnPkUser;
            if (maAccUsrAv.remove((SRowAccUser) moGridUsrAv.getSelectedGridRow()) ) {
                SDbAccountingCustomizableReportUser o = new SDbAccountingCustomizableReportUser();
                o.setPkUserId(usrId);
                o.readUser(miClient.getSession());
                maAccCusRepUsrSelected.add(o);

                populateGridUsr();
                populateGridUsrSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionUsrAddAll() {
        try {
            for (SRowAccUser row : maAccUsrAv) {
                SDbAccountingCustomizableReportUser o = new SDbAccountingCustomizableReportUser();
                o.setPkUserId(row.mnPkUser);
                o.readUser(miClient.getSession());
                maAccCusRepUsrSelected.add(o);
            }
            maAccUsrAv.clear();
            populateGridUsr();
            populateGridUsrSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionUsrRemove() {
        try {
            int usrId = ((SDbAccountingCustomizableReportUser) moGridUsrSelected.getSelectedGridRow()).getPkUserId();
            if (maAccCusRepUsrSelected.remove((SDbAccountingCustomizableReportUser) moGridUsrSelected.getSelectedGridRow()) ) {
                SRowAccUser o = new SRowAccUser();
                o.read(miClient.getSession(), usrId);
                maAccUsrAv.add(o);

                populateGridUsr();
                populateGridUsrSelected();
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    private void actionUsrRemoveAll() {
        try {
            for (SDbAccountingCustomizableReportUser row : maAccCusRepUsrSelected) {
                SRowAccUser o = new SRowAccUser();
                o.read(miClient.getSession(), row.getPkUserId());
                maAccUsrAv.add(o);
            }
            maAccCusRepUsrSelected.clear();
            populateGridUsr();
            populateGridUsrSelected();
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    @Override
    public void addAllListeners() {
        jbUsrAdd.addActionListener(this);
        jbUsrAddAll.addActionListener(this);
        jbUsrRemove.addActionListener(this);
        jbUsrRemoveAll.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbUsrAdd.removeActionListener(this);
        jbUsrAddAll.removeActionListener(this);
        jbUsrRemove.removeActionListener(this);
        jbUsrRemoveAll.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moTextName.setValue("");
        moTextDescription.setValue("");
        
        maAccCusRepAcc = new ArrayList<>();
        maAccCusRepCc = new ArrayList<>();
        maAccCusRepUsrSelected = new ArrayList<>();
        maAccUsrAv = new ArrayList<>();
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int[] key = null;
        moRegistry = (SDbAccountingCustomizableReport) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        key = moRegistry.getPrimaryKey();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moTextDescription.setValue(moRegistry.getDescription());
        
        maAccCusRepAcc = new ArrayList<>();
        maAccCusRepAcc =  moRegistry.getDbmsAccCusReportAccounts();
        maAccCusRepCc = new ArrayList<>();
        maAccCusRepCc = moRegistry.getDbmsAccCusReportCostCenters();
        maAccCusRepUsrSelected = new ArrayList<>();
        maAccCusRepUsrSelected = moRegistry.getDbmsAccCusReportUsers();
        
        populateAcc();
        populateCc();
        
        readUsers();
        populateGridUsr();
        populateGridUsrSelected();

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAccountingCustomizableReport registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setName(moTextName.getValue());
        registry.setDescription(moTextDescription.getValue());
        
        registry.getDbmsAccCusReportAccounts().clear();
        for (SGridRow row : moGridAcc.getModel().getGridRows()) {
            SDbAccountingCustomizableReportAccount o = (SDbAccountingCustomizableReportAccount) row;
            registry.getDbmsAccCusReportAccounts().add(o);
        }
        
        registry.getDbmsAccCusReportCostCenters().clear();
        for (SGridRow row : moGridCc.getModel().getGridRows()) {
            SDbAccountingCustomizableReportCostCenter o = (SDbAccountingCustomizableReportCostCenter) row;
            registry.getDbmsAccCusReportCostCenters().add(o);
        }
        
        registry.getDbmsAccCusReportUsers().clear();
        for (SGridRow row : moGridUsrSelected.getModel().getGridRows()) {
            SDbAccountingCustomizableReportUser o = (SDbAccountingCustomizableReportUser) row;
            registry.getDbmsAccCusReportUsers().add(o);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (moGridAcc.getModel().getRowCount() <= 0) {
            validation.setMessage("Debe agregar al menos un rango de cuentas contables.");
            validation.setComponent(jpAcc);
        }
        
        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbUsrAdd) {
                actionUsrAdd();
            }
            else if (button == jbUsrAddAll) {
                actionUsrAddAll();
            }
            else if (button == jbUsrRemove) {
                actionUsrRemove();
            }
            else if (button == jbUsrRemoveAll) {
                actionUsrRemoveAll();
            }
        }
    }
}

class SRowAccUser implements SGridRow {
    
    public int mnPkUser = 0;
    public String msUser = "";
    
    public void read(SGuiSession session, int pk) throws Exception {
        String sql = "SELECT id_usr, usr FROM erp.usru_usr WHERE id_usr = " + pk;
        ResultSet resultSet = session.getStatement().executeQuery(sql);
        if (resultSet.next()) {
            mnPkUser = resultSet.getInt(1);
            msUser = resultSet.getString(2);
        }
    }

    @Override
    public int[] getRowPrimaryKey() {
        return new int[] { mnPkUser };
    }

    @Override
    public String getRowCode() {
        return "";
    }

    @Override
    public String getRowName() {
        return "";
    }

    @Override
    public boolean isRowSystem() {
        return false;
    }

    @Override
    public boolean isRowDeletable() {
        return true;
    }

    @Override
    public boolean isRowEdited() {
        return false;
    }

    @Override
    public void setRowEdited(boolean edited) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Object getRowValueAt(int col) {
        Object value = null;
        
        switch (col) {
            case 0: value = msUser; break;
        }
        return value;
    }

    @Override
    public void setRowValueAt(Object value, int col) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
