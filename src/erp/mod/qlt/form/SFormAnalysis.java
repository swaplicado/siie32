/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.qlt.form;

import erp.mod.SModConsts;
import erp.mod.qlt.db.SDbQltyAnalysis;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Edwin Carmona
 */
public class SFormAnalysis extends SBeanForm implements ActionListener, ItemListener {

    private SDbQltyAnalysis moRegistry;

    /**
     * Creates new form SFormAnalysis
     * @param client
     * @param title
     */
    public SFormAnalysis(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.QLT_ANALYSIS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlUnitSymbol = new javax.swing.JLabel();
        moTextUnitSymbol = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlUnitName = new javax.swing.JLabel();
        moTextUnitName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jlAnalysisShortName = new javax.swing.JLabel();
        moTextShortName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jlAnalysisType = new javax.swing.JLabel();
        moKeyAnalysisType = new sa.lib.gui.bean.SBeanFieldKey();
        jbAnalysisType = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitSymbol.setText("Símbolo unidad:*");
        jlUnitSymbol.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlUnitSymbol);
        jPanel4.add(moTextUnitSymbol);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitName.setText("Nombre unidad:*");
        jlUnitName.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlUnitName);

        moTextUnitName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moTextUnitName);

        jPanel2.add(jPanel8);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnalysisShortName.setText("Nombre corto análisis:*");
        jlAnalysisShortName.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlAnalysisShortName);
        jPanel6.add(moTextShortName);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre análisis:*");
        jlName.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlName);

        moTextName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel7.add(moTextName);

        jPanel2.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnalysisType.setText("Tipo análisis:*");
        jlAnalysisType.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlAnalysisType);

        moKeyAnalysisType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(moKeyAnalysisType);

        jbAnalysisType.setText("...");
        jbAnalysisType.setFocusable(false);
        jbAnalysisType.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbAnalysisType);

        jPanel2.add(jPanel9);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAnalysisType;
    private javax.swing.JLabel jlAnalysisShortName;
    private javax.swing.JLabel jlAnalysisType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlUnitName;
    private javax.swing.JLabel jlUnitSymbol;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAnalysisType;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    private sa.lib.gui.bean.SBeanFieldText moTextShortName;
    private sa.lib.gui.bean.SBeanFieldText moTextUnitName;
    private sa.lib.gui.bean.SBeanFieldText moTextUnitSymbol;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moTextUnitSymbol.setTextSettings(jlUnitSymbol.getText(), 15, 1);
        moTextUnitName.setTextSettings(jlName.getText(), 150, 1);
        moTextShortName.setTextSettings(SGuiUtils.getLabelName(jlAnalysisShortName.getText()), 10, 1);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 100, 1);
        moKeyAnalysisType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAnalysisType), true);

        moFields.addField(moTextUnitSymbol);
        moFields.addField(moTextUnitName);
        
        moFields.addField(moTextShortName);
        moFields.addField(moTextName);
        
        moFields.addField(moKeyAnalysisType);

        moFields.setFormButton(jbSave);
    }
    
    private void actionAnalysisType() {
        int[] key = null;
        SGuiOptionPicker picker = null;

        picker = miClient.getSession().getModule(SModConsts.MOD_QLT_N).getOptionPicker(SModConsts.QLT_TP_ANALYSIS, SLibConsts.UNDEFINED, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != SLibConsts.UNDEFINED) {
                    moKeyAnalysisType.setValue(new int[] { key[0] });
                }
            }
        }
    }

    @Override
    public void addAllListeners() {
        moKeyAnalysisType.addItemListener(this);
        moKeyAnalysisType.addActionListener(this);
        jbAnalysisType.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyAnalysisType.removeItemListener(this);
        moKeyAnalysisType.removeActionListener(this);
        jbAnalysisType.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyAnalysisType, SModConsts.QLT_TP_ANALYSIS, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbQltyAnalysis) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
        }

        moTextUnitSymbol.setValue(moRegistry.getUnitSymbol());
        moTextUnitName.setValue(moRegistry.getUnitName());
        moTextShortName.setValue(moRegistry.getAnalysysShortName());
        moTextName.setValue(moRegistry.getAnalysisName());
        
        moKeyAnalysisType.setValue(new int[] { moRegistry.getFkAnalysisTypeId() });

        setFormEditable(true);

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbQltyAnalysis registry = (SDbQltyAnalysis) moRegistry.clone();
        
        registry.setUnitSymbol(moTextUnitSymbol.getValue());
        registry.setUnitName(moTextUnitName.getValue());
        registry.setAnalysysShortName(moTextShortName.getValue());
        registry.setAnalysisName(moTextName.getValue());
        registry.setFkAnalysisTypeId(1);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbAnalysisType) {
                actionAnalysisType();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
