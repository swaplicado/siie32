/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.qlt.form;

import erp.client.SClientInterface;
import erp.lib.SLibConstants;
import erp.mbps.data.SDataBizPartner;
import erp.mod.SModConsts;
import erp.mod.hrs.utils.SDocUtils;
import erp.mod.qlt.utils.SCoAMongoUtils;
import erp.mod.qlt.utils.SCoAUtils;
import erp.mod.qlt.db.SDbCoAResult;
import erp.mod.qlt.db.SMongoDbCoA;
import erp.mod.qlt.utils.SQltUtils;
import erp.mtrn.data.SDataDps;
import erp.mtrn.data.SDataDpsEntry;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.bson.Document;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanDialogReport;

/**
 *
 * @author Edwin Carmona
 */
public class SDialogRepQltCoA extends SBeanDialogReport implements ChangeListener, ItemListener, ActionListener {
    
    protected SDbCoAResult moCoAResult;
    protected SDataDps moDps;
    protected SDataDpsEntry moDpsEntry;
    protected SDataBizPartner moBizPartner;
    protected SMongoDbCoA moMongoCoA;
    protected int mnIdYear;
    protected int mnIdDoc;
    protected int mnIdEty;
    protected boolean mbCanCaptureCoA;
    
    // Formateador con Locale inglés
    java.time.format.DateTimeFormatter englishFormatter = 
        java.time.format.DateTimeFormatter.ofPattern("MMMM dd, yyyy", java.util.Locale.ENGLISH);
    
    /**
     * Creates new form SDialogRepQltCoA
     * @param client
     * @param title
     */
    public SDialogRepQltCoA(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.QLTR_COA_RESULT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jlCustomerName = new javax.swing.JLabel();
        moTextCustomerName = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        jbRefreshData = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCoADate = new javax.swing.JLabel();
        moCoADate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel12 = new javax.swing.JPanel();
        jlLot = new javax.swing.JLabel();
        moTextLot = new sa.lib.gui.bean.SBeanFieldText();
        jPanel13 = new javax.swing.JPanel();
        jlLoadDate = new javax.swing.JLabel();
        moLoadDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel14 = new javax.swing.JPanel();
        jlTankOrigin = new javax.swing.JLabel();
        moTextTankOrigin = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlIdentifier = new javax.swing.JLabel();
        moTextIdentifier = new sa.lib.gui.bean.SBeanFieldText();
        jPanel16 = new javax.swing.JPanel();
        jlContainerIdentifier = new javax.swing.JLabel();
        moTextContainerIdentifier = new sa.lib.gui.bean.SBeanFieldText();
        jPanel17 = new javax.swing.JPanel();
        jlNetWeight = new javax.swing.JLabel();
        moDecNetWeight = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel18 = new javax.swing.JPanel();
        jlUnitWeight = new javax.swing.JLabel();
        moTextUnitWeight = new sa.lib.gui.bean.SBeanFieldText();
        jPanel26 = new javax.swing.JPanel();
        jlVgm = new javax.swing.JLabel();
        moTextVgm = new sa.lib.gui.bean.SBeanFieldText();
        jPanel2 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jlQltSeal = new javax.swing.JLabel();
        moTextQltSeal = new sa.lib.gui.bean.SBeanFieldText();
        jLabel5 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jlSecSeal = new javax.swing.JLabel();
        moTextSecSeal = new sa.lib.gui.bean.SBeanFieldText();
        jLabel6 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();
        jLabel2 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jlSignaturePerson = new javax.swing.JLabel();
        moTextSignaturePerson = new sa.lib.gui.bean.SBeanFieldText();
        jLabel3 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jlSignaturePos = new javax.swing.JLabel();
        moTextSignaturePosition = new sa.lib.gui.bean.SBeanFieldText();
        jLabel4 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros del reporte:"));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCustomerName.setText("Nombre del cliente:");
        jlCustomerName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlCustomerName);

        moTextCustomerName.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel23.add(moTextCustomerName);

        jPanel3.add(jPanel23);

        jLabel1.setPreferredSize(new java.awt.Dimension(190, 23));
        jPanel3.add(jLabel1);

        jbRefreshData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_upd.gif"))); // NOI18N
        jbRefreshData.setToolTipText("Cambiar preferencia de pago de subsidio para el empleo");
        jbRefreshData.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel3.add(jbRefreshData);

        jPanel1.add(jPanel3);

        jPanel7.setPreferredSize(new java.awt.Dimension(700, 230));
        jPanel7.setLayout(new java.awt.GridLayout(8, 2, 5, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCoADate.setText("Fecha certificado:*");
        jlCoADate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlCoADate);
        jPanel11.add(moCoADate);

        jPanel7.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLot.setText("Lote:*");
        jlLot.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlLot);

        moTextLot.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(moTextLot);

        jPanel7.add(jPanel12);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLoadDate.setText("Fecha carga:");
        jlLoadDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlLoadDate);
        jPanel13.add(moLoadDate);

        jPanel7.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTankOrigin.setText("Tanque origen:");
        jlTankOrigin.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlTankOrigin);

        moTextTankOrigin.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(moTextTankOrigin);

        jPanel7.add(jPanel14);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIdentifier.setText("Identificador:");
        jlIdentifier.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlIdentifier);

        moTextIdentifier.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel15.add(moTextIdentifier);

        jPanel7.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlContainerIdentifier.setText("Ident. contenedor:");
        jlContainerIdentifier.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlContainerIdentifier);

        moTextContainerIdentifier.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(moTextContainerIdentifier);

        jPanel7.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNetWeight.setText("Peso neto:");
        jlNetWeight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlNetWeight);
        jPanel17.add(moDecNetWeight);

        jPanel7.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitWeight.setText("Unidad peso:");
        jlUnitWeight.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlUnitWeight);

        moTextUnitWeight.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(moTextUnitWeight);

        jPanel7.add(jPanel18);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVgm.setText("VGM:");
        jlVgm.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlVgm);

        moTextVgm.setText("0.00000000");
        jPanel26.add(moTextVgm);

        jPanel7.add(jPanel26);

        jPanel1.add(jPanel7);

        jPanel2.setPreferredSize(new java.awt.Dimension(700, 150));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlQltSeal.setText("Sellos calidad:");
        jlQltSeal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlQltSeal);

        moTextQltSeal.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel19.add(moTextQltSeal);

        jLabel5.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel19.add(jLabel5);

        jPanel2.add(jPanel19);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSecSeal.setText("Sellos seguridad:");
        jlSecSeal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlSecSeal);

        moTextSecSeal.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel20.add(moTextSecSeal);

        jLabel6.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel20.add(jLabel6);

        jPanel2.add(jPanel20);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlNotes);

        moTextNotes.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel22.add(moTextNotes);

        jLabel2.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel22.add(jLabel2);

        jPanel2.add(jPanel22);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSignaturePerson.setText("Firma:");
        jlSignaturePerson.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlSignaturePerson);

        moTextSignaturePerson.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel24.add(moTextSignaturePerson);

        jLabel3.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel24.add(jLabel3);

        jPanel2.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSignaturePos.setText("Cargo firmante:");
        jlSignaturePos.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlSignaturePos);

        moTextSignaturePosition.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel25.add(moTextSignaturePosition);

        jLabel4.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel25.add(jLabel4);

        jPanel2.add(jPanel25);

        jPanel1.add(jPanel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbRefreshData;
    private javax.swing.JLabel jlCoADate;
    private javax.swing.JLabel jlContainerIdentifier;
    private javax.swing.JLabel jlCustomerName;
    private javax.swing.JLabel jlIdentifier;
    private javax.swing.JLabel jlLoadDate;
    private javax.swing.JLabel jlLot;
    private javax.swing.JLabel jlNetWeight;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlQltSeal;
    private javax.swing.JLabel jlSecSeal;
    private javax.swing.JLabel jlSignaturePerson;
    private javax.swing.JLabel jlSignaturePos;
    private javax.swing.JLabel jlTankOrigin;
    private javax.swing.JLabel jlUnitWeight;
    private javax.swing.JLabel jlVgm;
    private sa.lib.gui.bean.SBeanFieldDate moCoADate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecNetWeight;
    private sa.lib.gui.bean.SBeanFieldDate moLoadDate;
    private sa.lib.gui.bean.SBeanFieldText moTextContainerIdentifier;
    private sa.lib.gui.bean.SBeanFieldText moTextCustomerName;
    private sa.lib.gui.bean.SBeanFieldText moTextIdentifier;
    private sa.lib.gui.bean.SBeanFieldText moTextLot;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextQltSeal;
    private sa.lib.gui.bean.SBeanFieldText moTextSecSeal;
    private sa.lib.gui.bean.SBeanFieldText moTextSignaturePerson;
    private sa.lib.gui.bean.SBeanFieldText moTextSignaturePosition;
    private sa.lib.gui.bean.SBeanFieldText moTextTankOrigin;
    private sa.lib.gui.bean.SBeanFieldText moTextUnitWeight;
    private sa.lib.gui.bean.SBeanFieldText moTextVgm;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 500);
        
        moTextCustomerName.setTextSettings(SGuiUtils.getLabelName(jlCustomerName.getText()), 225, 1);
        moCoADate.setDateSettings(miClient, SGuiUtils.getLabelName(jlCoADate.getText()), true);
        moLoadDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlLoadDate.getText()), false);
        moTextIdentifier.setTextSettings(SGuiUtils.getLabelName(jlIdentifier.getText()), 255, 0);
        moDecNetWeight.setDecimalSettings(SGuiUtils.getLabelName(jlNetWeight.getText()), SGuiConsts.GUI_TYPE_DEC, false);
        moTextVgm.setTextSettings(jlVgm.getText(), 255, 0);
        moTextQltSeal.setTextSettings(SGuiUtils.getLabelName(jlQltSeal.getText()), 255, 0);
        moTextLot.setTextSettings(SGuiUtils.getLabelName(jlLot.getText()), 255, 1);
        moTextTankOrigin.setTextSettings(SGuiUtils.getLabelName(jlTankOrigin.getText()), 255, 0);
        moTextContainerIdentifier.setTextSettings(SGuiUtils.getLabelName(jlContainerIdentifier.getText()), 255, 0);
        moTextUnitWeight.setTextSettings(SGuiUtils.getLabelName(jlUnitWeight.getText()), 255, 0);
        moTextSecSeal.setTextSettings(SGuiUtils.getLabelName(jlSecSeal.getText()), 255, 0);

        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes.getText()), 255, 0);
        moTextSignaturePerson.setTextSettings(SGuiUtils.getLabelName(jlSignaturePerson.getText()), 255, 1);
        moTextSignaturePosition.setTextSettings(SGuiUtils.getLabelName(jlSignaturePos.getText()), 255, 1);

        moFields.addField(moTextCustomerName);
        moFields.addField(moCoADate);
        moFields.addField(moLoadDate);
        moFields.addField(moTextIdentifier);
        moFields.addField(moDecNetWeight);
        moFields.addField(moTextVgm);
        moFields.addField(moTextQltSeal);
        moFields.addField(moTextLot);
        moFields.addField(moTextTankOrigin);
        moFields.addField(moTextContainerIdentifier);
        moFields.addField(moTextUnitWeight);
        moFields.addField(moTextSecSeal);
        moFields.addField(moTextNotes);
        moFields.addField(moTextSignaturePerson);
        moFields.addField(moTextSignaturePosition);

        moFields.setFormButton(jbPrint);
        
        jbRefreshData.addActionListener(this);
    }

    private void resetData(boolean hardReset, boolean fromUser) throws Exception {
        // solicitar confirmación al usuario antes de continuar
        if (moCoAResult != null && !moCoAResult.isClosed() && fromUser) {
            if (miClient.showMsgBoxConfirm("¿Está seguro de que desea reiniciar los datos del certificado de calidad?") != JOptionPane.YES_OPTION) {
                return;
            }
        }
        moDps = new SDataDps();
        moDps.read(new int[] { mnIdYear, mnIdDoc }, miClient.getSession().getStatement());
        if (moDps.getLastDbActionResult() != SLibConstants.DB_ACTION_READ_OK) {
            throw new Exception("No se pudo leer el renglón de la factura seleccionado.");
        }
        moBizPartner = new SDataBizPartner();
        moBizPartner.read(new int[] { moDps.getFkBizPartnerId_r() }, miClient.getSession().getStatement());
        if (moBizPartner.getLastDbActionResult() != SLibConstants.DB_ACTION_READ_OK) {
            throw new Exception("No se pudo leer el cliente de la factura de compra seleccionado.");
        }
        moDpsEntry = null;
        // Find entry in DPS entries:
        for (SDataDpsEntry oEntry : moDps.getDbmsDpsEntries()) {
            if (oEntry.getPkYearId() == mnIdYear && oEntry.getPkDocId() == mnIdDoc && oEntry.getPkEntryId() == mnIdEty) {
                moDpsEntry = oEntry;
                break;
            }
        }
        if (moDpsEntry == null) {
            throw new Exception("No se encontró el renglón de la factura seleccionado.");
        }
        moTextCustomerName.setValue(moBizPartner.getBizPartner());
        moCoADate.setValue(moDps.getDateDoc());
        moTextSecSeal.setValue(moDpsEntry.getSealSecurity());
        moTextQltSeal.setValue(moDpsEntry.getSealQuality());
        moTextContainerIdentifier.setValue(moDpsEntry.getContainerTank());
        moDecNetWeight.setValue(moDpsEntry.getQuantity());
        moTextVgm.setValue(moDpsEntry.getVgm());
        moTextUnitWeight.setValue(moDpsEntry.getDbmsUnitSymbol());

        if (hardReset) {
            moMongoCoA = null;
        }
    }

    private void enableOrDisableFields(boolean enable) {
        moTextCustomerName.setEnabled(enable);
        moCoADate.setEnabled(enable);
        moLoadDate.setEnabled(enable);
        moTextLot.setEnabled(enable);
        moTextTankOrigin.setEnabled(enable);
        moTextIdentifier.setEnabled(enable);
        moTextContainerIdentifier.setEnabled(enable);
        moDecNetWeight.setEnabled(enable);
        moTextVgm.setEnabled(enable);
        moTextUnitWeight.setEnabled(enable);
        moTextQltSeal.setEnabled(enable);
        moTextSecSeal.setEnabled(enable);
        moTextNotes.setEnabled(enable);
        moTextSignaturePerson.setEnabled(enable);
        moTextSignaturePosition.setEnabled(enable);
        jbRefreshData.setEnabled(enable);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void createParamsMap() {
        SDataBizPartner bizPartnerCompany = null;

        bizPartnerCompany = new SDataBizPartner();
        bizPartnerCompany.read(new int[] { ((SClientInterface) miClient).getSessionXXX().getCompany().getPkCompanyId() }, miClient.getSession().getStatement());
        
        try {
            moParamsMap = miClient.createReportParams();
            
            int lan = moCoAResult.getAuxDatasheetTemplate().getFkLogTypeDeliveryId_n() <= 1 ? SLibConstants.LAN_SPANISH : SLibConstants.LAN_ENGLISH;
            String coaDate;
            String loadDate;
            if (lan == SLibConstants.LAN_SPANISH) {
                coaDate = SLibUtils.DateFormatDate.format(moMongoCoA.getCoADate());
                loadDate = SLibUtils.DateFormatDate.format(moMongoCoA.getLoadDate());
            }
            else {
                if (moMongoCoA.getCoADate() != null) {
                    // Convert date to string with English locale
                    coaDate = moMongoCoA.getCoADate().toInstant()
                            .atZone(java.time.ZoneId.systemDefault())
                            .format(englishFormatter);
                }
                else {
                    coaDate = "";
                }
                if (moMongoCoA.getLoadDate() != null) {
                    loadDate = moMongoCoA.getLoadDate().toInstant()
                            .atZone(java.time.ZoneId.systemDefault())
                            .format(englishFormatter);
                }
                else {
                    loadDate = "";
                }
            }
            
            moParamsMap.put("nIdCoAResult", moCoAResult.getPkCoAResultId());
            moParamsMap.put("lan", lan);
            moParamsMap.put("sImageDir", ((SClientInterface) miClient).getSessionXXX().getParamsCompany().getImagesDirectory());
            moParamsMap.put("sCoADate", coaDate.toUpperCase());
            moParamsMap.put("sLoadDate", loadDate.toUpperCase());
            moParamsMap.put("sProduct", moMongoCoA.getProductName());
            moParamsMap.put("sVgm", moMongoCoA.getVgm());
            moParamsMap.put("sCustomer", moMongoCoA.getClientName());
            moParamsMap.put("sIdentifier", moMongoCoA.getIdentification());
            moParamsMap.put("sLoadedFrom", moMongoCoA.getTankOrigin());
            moParamsMap.put("sSealQlt", moMongoCoA.getSeals());
            moParamsMap.put("sSealSec", moMongoCoA.getTopSeals());
            moParamsMap.put("sLot", moMongoCoA.getLotNum());
            moParamsMap.put("sNotes", moMongoCoA.getNotes());
            moParamsMap.put("sSignaturePerson", moMongoCoA.getPersonSignatureName());
            moParamsMap.put("sSignaturePos", moMongoCoA.getPersonSignaturePosition());
            moParamsMap.put("bClosed", moCoAResult.isClosed());
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    public boolean setReportsParams(final int idYear, final int idDoc, final int idEty, boolean canCapture) {
        try {
            mnIdYear = idYear;
            mnIdDoc = idDoc;
            mnIdEty = idEty;
            mbCanCaptureCoA = canCapture;
            boolean canCreate = false;
            moCoAResult = SQltUtils.getCoAResults(miClient.getSession(), idYear, idDoc, idEty, canCreate);
            if (moCoAResult == null) {
                throw new Exception("No se encontró configuración de CoA para el renglón seleccionado. No se han capturado resultados.");
            }
            if (moCoAResult.getExternalDocumentId() == null || moCoAResult.getExternalDocumentId().isEmpty()) {
                boolean hardReset = true;
                boolean fromUser = false;
                this.resetData(hardReset, fromUser);
            }
            else {
                Document oMongoObj = SCoAMongoUtils.findDocumentById(miClient.getSession(), SDocUtils.BUCKET_DOC_QLT_COA, moCoAResult.getExternalDocumentId());
                moMongoCoA = SMongoDbCoA.fromDocument(oMongoObj);
                if (moMongoCoA == null) {
                    throw new Exception("No se encontró el certificado de calidad en la base de datos.");
                }

                moTextCustomerName.setValue(moMongoCoA.getClientName());
                moCoADate.setValue(moMongoCoA.getCoADate());
                moLoadDate.setValue(moMongoCoA.getLoadDate());
                moTextLot.setValue(moMongoCoA.getLotNum());
                moTextTankOrigin.setValue(moMongoCoA.getTankOrigin());
                moTextIdentifier.setValue(moMongoCoA.getIdentification());
                moTextContainerIdentifier.setValue(moMongoCoA.getContainerId());
                moDecNetWeight.setValue(moMongoCoA.getNetWeight());
                moTextUnitWeight.setValue(moMongoCoA.getNetWeightUnit());
                moTextVgm.setValue(moMongoCoA.getVgm());
                moTextQltSeal.setValue(moMongoCoA.getSeals());
                moTextSecSeal.setValue(moMongoCoA.getTopSeals());
                moTextNotes.setValue(moMongoCoA.getNotes());
                moTextSignaturePerson.setValue(moMongoCoA.getPersonSignatureName());
                moTextSignaturePosition.setValue(moMongoCoA.getPersonSignaturePosition());
            }

            this.enableOrDisableFields(! moCoAResult.isClosed() && canCapture);
            
            return true;
        }
        catch (Exception ex) {
            Logger.getLogger(SDialogRepQltCoA.class.getName()).log(Level.SEVERE, null, ex);
            miClient.showMsgBoxError(ex.getMessage());
            moCoAResult = null;
        }
        
        return false;
    }
    
    @Override
    public void stateChanged(ChangeEvent e) {
        
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        
    }
    
    @Override
    public void actionPrint() {
        if (jbPrint.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                try {
                    if (moCoAResult == null) {
                        miClient.showMsgBoxError("No se puede generar el certificado, hubo un error leyendo los resultados de los análisis");
                        return;
                    }

                    if (moMongoCoA == null) {
                        moMongoCoA = new SMongoDbCoA();
                    }
                    
                    moMongoCoA.setCoADate(moCoADate.getValue());
                    moMongoCoA.setLoadDate(moLoadDate.getValue());
                    moMongoCoA.setLotNum(moTextLot.getValue());
                    moMongoCoA.setTankOrigin(moTextTankOrigin.getValue());
                    moMongoCoA.setProductName(moDpsEntry == null ? moMongoCoA.getProductName() : moDpsEntry.getConcept());
                    moMongoCoA.setProductType("");
                    moMongoCoA.setIdentification(moTextIdentifier.getValue());
                    moMongoCoA.setContainerId(moTextContainerIdentifier.getValue());
                    moMongoCoA.setNetWeight(moDecNetWeight.getValue());
                    moMongoCoA.setNetWeightUnit(moTextUnitWeight.getValue());
                    moMongoCoA.setVgm(moTextVgm.getValue());
                    moMongoCoA.setVgmUnit(moTextUnitWeight.getValue());
                    moMongoCoA.setClientName(moTextCustomerName.getValue());
                    moMongoCoA.setSeals(moTextQltSeal.getValue());
                    moMongoCoA.setTopSeals(moTextSecSeal.getValue());
                    moMongoCoA.setNotes(moTextNotes.getValue());
                    moMongoCoA.setPersonSignatureName(moTextSignaturePerson.getValue());
                    moMongoCoA.setPersonSignaturePosition(moTextSignaturePosition.getValue());
                    
                    if (! moCoAResult.isClosed() && mbCanCaptureCoA) {
                        Object[] aResults = SCoAUtils.saveCoAMongoDb(miClient, moCoAResult, moMongoCoA);
                        if (aResults[0] == null) {
                            miClient.showMsgBoxError("No se pudo guardar el certificado en la base de datos.");
                            return;
                        }
                        moCoAResult = (SDbCoAResult) aResults[0];
                        moMongoCoA = (SMongoDbCoA) aResults[1];
                    }
                    
                    if (moMongoCoA.getId() == null) {
                        miClient.showMsgBoxError("No se pudo generar el certificado de calidad, no se han guardado los resultados.");
                        return;
                    }

                    createParamsMap();
                    
                    miClient.getSession().printReport(mnFormType, mnFormSubtype, moParams, moParamsMap);
                    if (mbCloseOnPrint) {
                        dispose();
                    }
                    
//                    SCoAUtils.jbPrintCoA(miClient, moCoAResult, moParamsMap);
//                    dispose();
                }
                catch (Exception ex) {
                    Logger.getLogger(SDialogRepQltCoA.class.getName()).log(Level.SEVERE, null, ex);
                    miClient.showMsgBoxError(ex.getMessage());
                }
            }
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbRefreshData) {
                try {
                    boolean hardReset = false;
                    boolean fromUser = true;
                    this.resetData(hardReset, fromUser);
                } catch (Exception ex) {
                    Logger.getLogger(SDialogRepQltCoA.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
