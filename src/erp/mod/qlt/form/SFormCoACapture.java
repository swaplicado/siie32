/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.qlt.form;

import erp.mod.SModConsts;
import erp.mod.qlt.db.SDbCoAResult;
import erp.mod.qlt.db.SDbCoAResultRow;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Edwin Carmona
 */
public class SFormCoACapture extends sa.lib.gui.bean.SBeanForm implements ListSelectionListener, ItemListener, ActionListener {
    
    protected SDbCoAResult moCoAResult;
    protected List<SDbCoAResultRow> mlCoAResultRows;
    protected SGridPaneForm moGridParameterRows;

    /**
     * Creates new form SDialogMaterialRequestSegregation
     * @param client
     * @param title
     */
    public SFormCoACapture(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.QLT_COA_RESULT, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpHeader = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDtDate = new sa.lib.gui.bean.SBeanFieldDate();
        jlVersion = new javax.swing.JLabel();
        moTextVersion = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlTemplateName = new javax.swing.JLabel();
        moTextTemplateName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlTemplateEstandard = new javax.swing.JLabel();
        moTextTemplateEstandard = new sa.lib.gui.bean.SBeanFieldText();
        moBooleanIsDomestic = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel3 = new javax.swing.JPanel();
        jpSupplyRows = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbEditRow = new javax.swing.JButton();
        jbDeleteRow = new javax.swing.JButton();
        jpParameterRows = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Creación y edición de ficha técnica");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpHeader.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Encabezado de la ficha técnica:"));
        jPanel4.setPreferredSize(new java.awt.Dimension(800, 102));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDate);
        jPanel9.add(moDtDate);

        jlVersion.setText("Versión:");
        jlVersion.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlVersion);
        jPanel9.add(moTextVersion);

        jPanel4.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTemplateName.setText("Nombre de la ficha:");
        jlTemplateName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlTemplateName);

        moTextTemplateName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moTextTemplateName);

        jPanel4.add(jPanel12);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTemplateEstandard.setText("Estandar de la ficha:");
        jlTemplateEstandard.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTemplateEstandard);

        moTextTemplateEstandard.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moTextTemplateEstandard);

        moBooleanIsDomestic.setText("Es nacional");
        jPanel15.add(moBooleanIsDomestic);

        jPanel4.add(jPanel15);

        jpHeader.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel1.add(jpHeader, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpSupplyRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros:"));
        jpSupplyRows.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(735, 23));
        jPanel14.add(jLabel2);

        jbEditRow.setText("Editar parámetro");
        jbEditRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jbEditRow);

        jbDeleteRow.setText("Eliminar parámetro");
        jbDeleteRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jbDeleteRow);

        jpSupplyRows.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpParameterRows.setLayout(new java.awt.BorderLayout());
        jpSupplyRows.add(jpParameterRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpSupplyRows, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionCancel();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbDeleteRow;
    private javax.swing.JButton jbEditRow;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlTemplateEstandard;
    private javax.swing.JLabel jlTemplateName;
    private javax.swing.JLabel jlVersion;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpParameterRows;
    private javax.swing.JPanel jpSupplyRows;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanIsDomestic;
    private sa.lib.gui.bean.SBeanFieldDate moDtDate;
    private sa.lib.gui.bean.SBeanFieldText moTextTemplateEstandard;
    private sa.lib.gui.bean.SBeanFieldText moTextTemplateName;
    private sa.lib.gui.bean.SBeanFieldText moTextVersion;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moTextVersion.setTextSettings(SGuiUtils.getLabelName(jlVersion), 15);
        moTextTemplateName.setTextSettings(SGuiUtils.getLabelName(jlTemplateName), 150);
        moTextTemplateEstandard.setTextSettings(SGuiUtils.getLabelName(jlTemplateEstandard), 150);
        
        moFields.addField(moDtDate);
        moFields.addField(moTextVersion);
        moFields.addField(moTextTemplateName);
        moFields.addField(moTextTemplateEstandard);
        
        moGridParameterRows = new SGridPaneForm(miClient, SModConsts.QLT_DATASHEET_TEMPLATE_ROW, SLibConsts.UNDEFINED, "Parámetros de la ficha") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                DefaultTableCellRenderer cellRend = new DefaultTableCellRenderer();
                cellRend.setHorizontalAlignment(JLabel.RIGHT);
                cellRend.setForeground(Color.BLUE);
                SGridColumnForm column;

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Orden"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Análisis"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Método de análisis"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Especificación"));
                column = new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Resultado", 200);
                column.setEditable(true);
                column.setCellRenderer(cellRend);
                gridColumnsForm.add(column);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Unidad"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Certificado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Contrato"));

                return gridColumnsForm;
            }
        };
        jpParameterRows.add(moGridParameterRows, BorderLayout.CENTER);
        
        try {
            removeAllListeners();
            reloadCatalogues();
            addAllListeners();
        }
        catch (NullPointerException ex) {
            Logger.getLogger(SFormCoACapture.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Mostrar registros en la tabla superior
     */
    private void showDatasheetRows() {
        Vector<SGridRow> rows = new Vector<>();

        try {
            moGridParameterRows.clearGridRows();
            for (SDbCoAResultRow oDatasheetRow : mlCoAResultRows) {
                rows.add(oDatasheetRow);
            }

            moGridParameterRows.populateGrid(rows, this);
            moGridParameterRows.clearSortKeys();
            moGridParameterRows.setSelectedGridRow(0);
            
            if (rows.isEmpty()) {
                moGridParameterRows.clearGridRows();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Liberar
     */
    private void actionDeleteRow() {
        if (moGridParameterRows.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning("No ha seleccionado ningún registro.");
        }
        else {
            moGridParameterRows.removeGridRow(moGridParameterRows.getTable().getSelectedRow());
            // Validar que la tabla no esté vacía:
            if (moGridParameterRows.getTable().getRowCount() > 0) {
                moGridParameterRows.renderGridRows();
                moGridParameterRows.clearSortKeys();
                moGridParameterRows.setSelectedGridRow(0);
            }
            else {
                moGridParameterRows.clearGridRows();
            }
        }
    }
    
    @Override
    public void addAllListeners() {
        jbEditRow.addActionListener(this);
        jbDeleteRow.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbEdit.removeActionListener(this);
        jbDeleteRow.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moCoAResult = (SDbCoAResult) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moCoAResult.isRegistryNew()) {
            moCoAResult.initPrimaryKey();
        }

        moDtDate.setValue(moCoAResult.getDate());
        if (moCoAResult.getAuxDatasheetTemplate() != null) {
            moTextTemplateName.setValue(moCoAResult.getAuxDatasheetTemplate().getTemplateName());
            moTextTemplateEstandard.setValue(moCoAResult.getAuxDatasheetTemplate().getTemplateStandard());
            moBooleanIsDomestic.setValue(moCoAResult.getAuxDatasheetTemplate().getFkLogTypeDeliveryId_n() == 1);
        }
        else {
            moTextTemplateName.setValue("");
            moTextTemplateEstandard.setValue("");
            moBooleanIsDomestic.setValue(false);
        }
        
        mlCoAResultRows = new ArrayList<>();
        for (SDbCoAResultRow oDataRow : moCoAResult.getCoAResultRows()) {
            mlCoAResultRows.add((SDbCoAResultRow) oDataRow.clone());
        }
        
        showDatasheetRows();
        setFormEditable(true);
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        moCoAResult.setDate(moDtDate.getValue());

        List<SDbCoAResultRow> rows = new ArrayList<>();
        for (int i = 0; i < moGridParameterRows.getTable().getRowCount(); i++) {
            SDbCoAResultRow oRow = (SDbCoAResultRow) moGridParameterRows.getGridRow(i);
            rows.add(oRow);
        }

        moCoAResult.getCoAResultRows().clear();
        moCoAResult.getCoAResultRows().addAll(rows);
        
        return moCoAResult;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridParameterRows.getTable().getSelectedRowCount() != -1) {
                
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbEditRow) {
                
            }
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
        }
    }
}
