/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.qlt.form;

import erp.mod.SModConsts;
import erp.mod.qlt.db.SDbDatasheetTemplate;
import erp.mod.qlt.db.SDbDatasheetTemplateRow;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Edwin Carmona
 */
public class SFormDatasheetTemplate extends sa.lib.gui.bean.SBeanForm implements ListSelectionListener, ItemListener, ActionListener {
    
    protected SDbDatasheetTemplate moDatasheetTemplate;
    protected List<SDbDatasheetTemplateRow> mlDatasheetRows;
    protected SGridPaneForm moGridParameterRows;
    protected int mnSegregationId;
    protected int mnParamMaintUserType;
    protected int mnItemDefaultId;
    protected boolean mbAreSigned;
    protected SDbDatasheetTemplateRow moDatasheetRow;
    
    private static final int ACTION_NEW_ROW = 1;
    private static final int ACTION_SAVE_ROW = 2;
    private static final int ACTION_EDIT_ROW = 3;
    private static final int ACTION_DELETE_ROW = 4;

    /**
     * Creates new form SDialogMaterialRequestSegregation
     * @param client
     * @param title
     */
    public SFormDatasheetTemplate(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.QLT_DATASHEET_TEMPLATE, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpHeader = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDtDate = new sa.lib.gui.bean.SBeanFieldDate();
        jlVersion = new javax.swing.JLabel();
        moTextVersion = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlTemplateName = new javax.swing.JLabel();
        moTextTemplateName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel15 = new javax.swing.JPanel();
        jlTemplateEstandard = new javax.swing.JLabel();
        moTextTemplateEstandard = new sa.lib.gui.bean.SBeanFieldText();
        jPanel3 = new javax.swing.JPanel();
        jpTemplateRow = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlAux = new javax.swing.JLabel();
        jbNewRow = new javax.swing.JButton();
        jbSaveRow = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jlAnalysis = new javax.swing.JLabel();
        moKeyAnalysis = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickAnalysis = new javax.swing.JButton();
        jlInfo = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jlSpecification = new javax.swing.JLabel();
        moTextSpecification = new sa.lib.gui.bean.SBeanFieldText();
        moBooleanSpecification = new sa.lib.gui.bean.SBeanFieldBoolean();
        jLSortPos = new javax.swing.JLabel();
        moIntSortPos = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel18 = new javax.swing.JPanel();
        moBooleanMin = new sa.lib.gui.bean.SBeanFieldBoolean();
        moTextMin = new sa.lib.gui.bean.SBeanFieldText();
        moBooleanMax = new sa.lib.gui.bean.SBeanFieldBoolean();
        moTextMax = new sa.lib.gui.bean.SBeanFieldText();
        jPanel19 = new javax.swing.JPanel();
        moBooleanQltyCert = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBooleanDps = new sa.lib.gui.bean.SBeanFieldBoolean();
        jpSupplyRows = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jbEditRow = new javax.swing.JButton();
        jbDeleteRow = new javax.swing.JButton();
        jpParameterRows = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Creación y edición de ficha técnica");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpHeader.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Encabezado de la ficha técnica:"));
        jPanel4.setPreferredSize(new java.awt.Dimension(800, 102));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDate);
        jPanel9.add(moDtDate);

        jlVersion.setText("Versión:");
        jlVersion.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlVersion);
        jPanel9.add(moTextVersion);

        jPanel4.add(jPanel9);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTemplateName.setText("Nombre de la ficha:");
        jlTemplateName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlTemplateName);

        moTextTemplateName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(moTextTemplateName);

        jPanel4.add(jPanel12);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlTemplateEstandard.setText("Estandar de la ficha:");
        jlTemplateEstandard.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlTemplateEstandard);

        moTextTemplateEstandard.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel15.add(moTextTemplateEstandard);

        jPanel4.add(jPanel15);

        jpHeader.add(jPanel4, java.awt.BorderLayout.WEST);

        jPanel1.add(jpHeader, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpTemplateRow.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetro de la ficha técnica:"));
        jpTemplateRow.setPreferredSize(new java.awt.Dimension(100, 200));
        jpTemplateRow.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAux.setPreferredSize(new java.awt.Dimension(715, 23));
        jPanel13.add(jlAux);

        jbNewRow.setText("Nuevo parámetro");
        jbNewRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNewRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jbNewRow);

        jbSaveRow.setText("Guardar parámetro");
        jbSaveRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel13.add(jbSaveRow);

        jpTemplateRow.add(jPanel13);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnalysis.setText("Análisis:*");
        jlAnalysis.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlAnalysis);

        moKeyAnalysis.setPreferredSize(new java.awt.Dimension(430, 23));
        jPanel16.add(moKeyAnalysis);

        jbPickAnalysis.setText("...");
        jbPickAnalysis.setToolTipText("Seleccionar ítem");
        jbPickAnalysis.setFocusable(false);
        jbPickAnalysis.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbPickAnalysis);

        jlInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_info.png"))); // NOI18N
        jlInfo.setToolTipText("Corresponde al concepto o gasto para contabilización");
        jlInfo.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jlInfo);

        jpTemplateRow.add(jPanel16);

        jlSpecification.setText("Especificación:");
        jlSpecification.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlSpecification);

        moTextSpecification.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel17.add(moTextSpecification);

        moBooleanSpecification.setText("Aplica");
        jPanel17.add(moBooleanSpecification);

        jLSortPos.setText("Posición:");
        jLSortPos.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jLSortPos);
        jPanel17.add(moIntSortPos);

        jpTemplateRow.add(jPanel17);

        moBooleanMin.setText("Aplica mínimo");
        jPanel18.add(moBooleanMin);

        moTextMin.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel18.add(moTextMin);

        moBooleanMax.setText("Aplica máximo");
        jPanel18.add(moBooleanMax);

        moTextMax.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel18.add(moTextMax);

        jpTemplateRow.add(jPanel18);

        moBooleanQltyCert.setText("En certificado calidad");
        moBooleanQltyCert.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel19.add(moBooleanQltyCert);

        moBooleanDps.setText("En contrato");
        jPanel19.add(moBooleanDps);

        jpTemplateRow.add(jPanel19);

        jPanel3.add(jpTemplateRow, java.awt.BorderLayout.PAGE_START);

        jpSupplyRows.setBorder(javax.swing.BorderFactory.createTitledBorder("Parámetros:"));
        jpSupplyRows.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jLabel2.setPreferredSize(new java.awt.Dimension(735, 23));
        jPanel14.add(jLabel2);

        jbEditRow.setText("Editar parámetro");
        jbEditRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jbEditRow);

        jbDeleteRow.setText("Eliminar parámetro");
        jbDeleteRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbDeleteRow.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jbDeleteRow);

        jpSupplyRows.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpParameterRows.setLayout(new java.awt.BorderLayout());
        jpSupplyRows.add(jpParameterRows, java.awt.BorderLayout.CENTER);

        jPanel3.add(jpSupplyRows, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionCancel();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLSortPos;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbDeleteRow;
    private javax.swing.JButton jbEditRow;
    private javax.swing.JButton jbNewRow;
    private javax.swing.JButton jbPickAnalysis;
    private javax.swing.JButton jbSaveRow;
    private javax.swing.JLabel jlAnalysis;
    private javax.swing.JLabel jlAux;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlInfo;
    private javax.swing.JLabel jlSpecification;
    private javax.swing.JLabel jlTemplateEstandard;
    private javax.swing.JLabel jlTemplateName;
    private javax.swing.JLabel jlVersion;
    private javax.swing.JPanel jpHeader;
    private javax.swing.JPanel jpParameterRows;
    private javax.swing.JPanel jpSupplyRows;
    private javax.swing.JPanel jpTemplateRow;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanDps;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanMax;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanMin;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanQltyCert;
    private sa.lib.gui.bean.SBeanFieldBoolean moBooleanSpecification;
    private sa.lib.gui.bean.SBeanFieldDate moDtDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSortPos;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAnalysis;
    private sa.lib.gui.bean.SBeanFieldText moTextMax;
    private sa.lib.gui.bean.SBeanFieldText moTextMin;
    private sa.lib.gui.bean.SBeanFieldText moTextSpecification;
    private sa.lib.gui.bean.SBeanFieldText moTextTemplateEstandard;
    private sa.lib.gui.bean.SBeanFieldText moTextTemplateName;
    private sa.lib.gui.bean.SBeanFieldText moTextVersion;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moTextVersion.setTextSettings(SGuiUtils.getLabelName(jlVersion), 15);
        moTextTemplateName.setTextSettings(SGuiUtils.getLabelName(jlTemplateName), 150);
        moTextTemplateEstandard.setTextSettings(SGuiUtils.getLabelName(jlTemplateEstandard), 150);
        
        moKeyAnalysis.setKeySettings(miClient, SGuiUtils.getLabelName(jlAnalysis), false);
        
        moFields.addField(moDtDate);
        moFields.addField(moTextVersion);
        moFields.addField(moTextTemplateName);
        moFields.addField(moTextTemplateEstandard);
        moFields.addField(moKeyAnalysis);
        
        moGridParameterRows = new SGridPaneForm(miClient, SModConsts.QLT_DATASHEET_TEMPLATE_ROW, SLibConsts.UNDEFINED, "Parámetros de la ficha") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Orden"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Análisis"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Especificación"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Valor mínimo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_S, "Valor máximo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Mínimo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Máximo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Certificado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Contrato"));

                return gridColumnsForm;
            }
        };
        jpParameterRows.add(moGridParameterRows, BorderLayout.CENTER);
        
        try {
            removeAllListeners();
            reloadCatalogues();
            addAllListeners();
        }
        catch (NullPointerException ex) {
            Logger.getLogger(SFormDatasheetTemplate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void resetRowHeader() {
        moKeyAnalysis.setSelectedIndex(0);
        moTextSpecification.setValue("");
        moIntSortPos.setValue(0);
        moBooleanSpecification.setValue(false);
        moBooleanQltyCert.setValue(false);
        moBooleanDps.setValue(false);
        moBooleanMin.setValue(false);
        moTextMin.setValue("");
        moBooleanMax.setValue(false);
        moTextMax.setValue("");
        
        enableOrDisableButtons(ACTION_SAVE_ROW);
    }

    private void enableOrDisableFields(boolean bEnable) {
        if (bEnable) {
            // el campo especificación debe estar inhablitado, si está seleccionado aplica especificación debe habilitarse esta
            moTextSpecification.setEnabled(moBooleanSpecification.getValue());
            // si está seleccionado que aplica mínimo el campo de texto debe activarse
            moTextMin.setEnabled(moBooleanMin.getValue());
            // si está seleccionado que aplica máximo el campo de texto debe activarse
            moTextMax.setEnabled(moBooleanMax.getValue());
            moKeyAnalysis.setEnabled(moDatasheetRow.isRegistryNew());
            jbPickAnalysis.setEnabled(moDatasheetRow.isRegistryNew());
        }
        else {
            // inhabilitar todos los campos:
            moKeyAnalysis.setEnabled(bEnable);
            jbPickAnalysis.setEnabled(bEnable);
            moTextSpecification.setEnabled(bEnable);
            moTextMin.setEnabled(bEnable);
            moTextMax.setEnabled(bEnable);
        }
        
        moIntSortPos.setEnabled(bEnable);
        moBooleanSpecification.setEnabled(bEnable);
        moBooleanQltyCert.setEnabled(bEnable);
        moBooleanDps.setEnabled(bEnable);
        moBooleanMin.setEnabled(bEnable);
        moBooleanMax.setEnabled(bEnable);
    }

    private void enableOrDisableButtons(int iAction) {
        switch (iAction) {
            case ACTION_NEW_ROW:
                jbSaveRow.setEnabled(true);
                jbEditRow.setEnabled(false);
                jbDeleteRow.setEnabled(false);
                jbNewRow.setEnabled(false);
                break;
            case ACTION_EDIT_ROW:
                jbSaveRow.setEnabled(true);
                jbEditRow.setEnabled(false);
                jbDeleteRow.setEnabled(false);
                jbNewRow.setEnabled(false);
                break;
            case ACTION_SAVE_ROW:
                jbSaveRow.setEnabled(false);
                jbEditRow.setEnabled(true);
                jbDeleteRow.setEnabled(true);
                jbNewRow.setEnabled(true);
                break;
        
            default:
                break;
        }
    }
    
    private void loadDatasheetRowSelected() {
        SDbDatasheetTemplateRow oDataSheetRow = null;
        
        oDataSheetRow = (SDbDatasheetTemplateRow) moGridParameterRows.getSelectedGridRow();

        if (oDataSheetRow != null) {
            moBooleanSpecification.removeItemListener(this);
            moBooleanQltyCert.removeItemListener(this);
            moBooleanDps.removeItemListener(this);
            moBooleanMin.removeItemListener(this);
            moBooleanMax.removeItemListener(this);

            showDatasheetRow(oDataSheetRow);
            enableOrDisableFields(false);

            moBooleanSpecification.addItemListener(this);
            moBooleanQltyCert.addItemListener(this);
            moBooleanDps.addItemListener(this);
            moBooleanMin.addItemListener(this);
            moBooleanMax.addItemListener(this);
        }
    }

    /**
     * Mostrar registros en la tabla superior
     */
    private void showDatasheetRows() {
        Vector<SGridRow> rows = new Vector<>();

        try {
            moGridParameterRows.clearGridRows();
            for (SDbDatasheetTemplateRow oDatasheetRow : mlDatasheetRows) {
                rows.add(oDatasheetRow);
            }

            moGridParameterRows.populateGrid(rows, this);
            moGridParameterRows.clearSortKeys();
            moGridParameterRows.setSelectedGridRow(0);
            
            if (rows.isEmpty()) {
                moGridParameterRows.clearGridRows();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Mostrar renglones de la tabla
     * @param oDatasheetTemplate 
     */
    private void showDatasheetRow(SDbDatasheetTemplateRow oDatasheetTemplate) {
        /**
         * Cargar la vista previa del renglón
         */
//        resetRowHeader();
        
        moKeyAnalysis.setValue(new int[] { oDatasheetTemplate.getPkAnalysisId() });
        
        moTextSpecification.setValue(oDatasheetTemplate.getSpecification());
        moIntSortPos.setValue(oDatasheetTemplate.getSortPosition());
        moBooleanSpecification.setValue(! oDatasheetTemplate.getSpecification().isEmpty());
        moBooleanQltyCert.setValue(oDatasheetTemplate.isForCoA());
        moBooleanDps.setValue(oDatasheetTemplate.isForDps());
        moBooleanMin.setValue(oDatasheetTemplate.isMin());
        moTextMin.setValue(oDatasheetTemplate.getMinValue());
        moBooleanMax.setValue(oDatasheetTemplate.isMax());
        moTextMax.setValue(oDatasheetTemplate.getMaxValue());
    }
    
    /**
     * Guardar renglón
     */
    private void actionSaveRow() {
        // Validación de los campos antes de guardar:
        if (moKeyAnalysis.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning("No ha seleccionado un análisis.");
            moKeyAnalysis.requestFocus();
            return;
        }
        if (moTextSpecification.getValue().isEmpty()) {
            miClient.showMsgBoxWarning("No ha introducido la especificación.");
            moTextSpecification.requestFocus();
            return;
        }
        if (moIntSortPos.getValue() <= 0) {
            miClient.showMsgBoxWarning("No ha introducido la posición de ordenamiento.");
            moIntSortPos.requestFocus();
            return;
        }
        if (moBooleanMin.getValue() && moTextMin.getValue().isEmpty()) {
            miClient.showMsgBoxWarning("No ha introducido el valor mínimo.");
            moTextMin.requestFocus();
            return;
        }
        if (moBooleanMax.getValue() && moTextMax.getValue().isEmpty()) {
            miClient.showMsgBoxWarning("No ha introducido el valor máximo.");
            moTextMax.requestFocus();
            return;
        }

        boolean bExists = false;
        SDbDatasheetTemplateRow oDatasheetRowAux = null;
        for (SDbDatasheetTemplateRow oDatasheetRow : mlDatasheetRows) {
            if (oDatasheetRow.getPkAnalysisId() == moKeyAnalysis.getValue()[0]) {
                oDatasheetRowAux = oDatasheetRow;
                bExists = true;
                break;
            }
        }

        moDatasheetRow.setPkAnalysisId(moKeyAnalysis.getValue()[0]);
        moDatasheetRow.setSpecification(moTextSpecification.getValue());
        moDatasheetRow.setSortPosition(moIntSortPos.getValue());
        moDatasheetRow.setIsForCoA(moBooleanQltyCert.getValue());
        moDatasheetRow.setIsForDps(moBooleanDps.getValue());
        moDatasheetRow.setMin(moBooleanMin.getValue());
        moDatasheetRow.setMinValue(moTextMin.getValue());
        moDatasheetRow.setMax(moBooleanMax.getValue());
        moDatasheetRow.setMaxValue(moTextMax.getValue());

        if (bExists) {
            // remover anterior del panel:
            mlDatasheetRows.remove(oDatasheetRowAux);
            // obtener el índice del renglón anterior:
            int index = moGridParameterRows.getTable().getSelectedRow();
            moGridParameterRows.removeGridRow(index);
        }

        moDatasheetRow.readAnalysisAuxData(miClient.getSession().getStatement());
        moGridParameterRows.addGridRow(moDatasheetRow);
        moGridParameterRows.renderGridRows();
        moGridParameterRows.clearSortKeys();
        moGridParameterRows.setSelectedGridRow(0);
        resetRowHeader();
        enableOrDisableFields(false);
    }
    
    /**
     * Nuevo renglón
     */
    private void actionNewRow() {
        moDatasheetRow = new SDbDatasheetTemplateRow();
        showDatasheetRow(moDatasheetRow);
        
        enableOrDisableFields(true);
        enableOrDisableButtons(ACTION_NEW_ROW);
    }

    /**
     * Editar renglón
     */
    private void actionEditRow() {
        moDatasheetRow = (SDbDatasheetTemplateRow) moGridParameterRows.getSelectedGridRow();
        
        if (moDatasheetRow != null) {
            showDatasheetRow(moDatasheetRow);
            enableOrDisableFields(true);
            enableOrDisableButtons(ACTION_EDIT_ROW);
        }
    }
    
    /**
     * Liberar
     */
    private void actionDeleteRow() {
        if (moGridParameterRows.getSelectedGridRow() == null) {
            miClient.showMsgBoxWarning("No ha seleccionado ningún registro.");
        }
        else {
            moGridParameterRows.removeGridRow(moGridParameterRows.getTable().getSelectedRow());
            // Validar que la tabla no esté vacía:
            if (moGridParameterRows.getTable().getRowCount() > 0) {
                moGridParameterRows.renderGridRows();
                moGridParameterRows.clearSortKeys();
                moGridParameterRows.setSelectedGridRow(0);
            }
            else {
                moGridParameterRows.clearGridRows();
            }
            
            resetRowHeader();
            enableOrDisableFields(false);
        }
    }
    
    @Override
    public void addAllListeners() {
        jbNewRow.addActionListener(this);
        jbSaveRow.addActionListener(this);
        jbEditRow.addActionListener(this);
        jbDeleteRow.addActionListener(this);
        
        moBooleanSpecification.addItemListener(this);
        moBooleanQltyCert.addItemListener(this);
        moBooleanDps.addItemListener(this);
        moBooleanMin.addItemListener(this);
        moBooleanMax.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbNewRow.removeActionListener(this);
        jbSaveRow.removeActionListener(this);
        jbEdit.removeActionListener(this);
        jbDeleteRow.removeActionListener(this);
        
        moBooleanSpecification.removeItemListener(this);
        moBooleanQltyCert.removeItemListener(this);
        moBooleanDps.removeItemListener(this);
        moBooleanMin.removeItemListener(this);
        moBooleanMax.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyAnalysis, SModConsts.QLT_ANALYSIS, 0, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moDatasheetTemplate = (SDbDatasheetTemplate) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moDatasheetTemplate.isRegistryNew()) {
            moDatasheetTemplate.initPrimaryKey();
        }

        moDtDate.setValue(moDatasheetTemplate.getDate());
        moTextVersion.setValue(moDatasheetTemplate.getTemplateVersion());
        moTextTemplateName.setValue(moDatasheetTemplate.getTemplateName());
        moTextTemplateEstandard.setValue(moDatasheetTemplate.getTemplateStandard());
        
        mlDatasheetRows = new ArrayList<>();
        for (SDbDatasheetTemplateRow oDataRow : moDatasheetTemplate.getDatasheetTemplateRows()) {
            mlDatasheetRows.add((SDbDatasheetTemplateRow) oDataRow.clone());
        }
        
        showDatasheetRows();
        loadDatasheetRowSelected();
        setFormEditable(true);
        enableOrDisableFields(false);
        enableOrDisableButtons(ACTION_SAVE_ROW);
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        moDatasheetTemplate.setDate(moDtDate.getValue());
        moDatasheetTemplate.setTemplateVersion(moTextVersion.getValue());
        moDatasheetTemplate.setTemplateName(moTextTemplateName.getValue());
        moDatasheetTemplate.setTemplateStandard(moTextTemplateEstandard.getValue());

        List<SDbDatasheetTemplateRow> rows = new ArrayList<>();
        for (int i = 0; i < moGridParameterRows.getTable().getRowCount(); i++) {
            SDbDatasheetTemplateRow oRow = (SDbDatasheetTemplateRow) moGridParameterRows.getGridRow(i);
            rows.add(oRow);
        }

        moDatasheetTemplate.getDatasheetTemplateRows().clear();
        moDatasheetTemplate.getDatasheetTemplateRows().addAll(rows);
        
        return moDatasheetTemplate;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridParameterRows.getTable().getSelectedRowCount() != -1) {
                loadDatasheetRowSelected();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof javax.swing.JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox) e.getSource();

            if (comboBox == moKeyAnalysis) {
                loadDatasheetRowSelected();
            }
        }
        else if (e.getSource() instanceof javax.swing.JCheckBox) {
            enableOrDisableFields(true);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbNewRow) {
                actionNewRow();
            }
            else if (button == jbSaveRow) {
                actionSaveRow();
            }
            else if (button == jbEditRow) {
                actionEditRow();
            }
            else if (button == jbDeleteRow) {
                actionDeleteRow();
            }
        }
    }
}
