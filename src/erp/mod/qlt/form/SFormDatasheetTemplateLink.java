/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.qlt.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormUtilities;
import erp.mod.SModConsts;
import erp.mod.qlt.db.SDbDatasheetTemplateLink;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Edwin Carmona
 */
public class SFormDatasheetTemplateLink extends SBeanForm implements ActionListener, ItemListener {

    private SDbDatasheetTemplateLink moRegistry;
    private erp.lib.form.SFormField moFieldPkLinkTypeId;
    private erp.lib.form.SFormField moFieldPkReferenceId;
    private erp.lib.form.SFormComboBoxGroup moComboBoxLinkTypeRef;

    /**
     * Creates new form SFormAbsenceType
     * @param client
     * @param title
     */
    public SFormDatasheetTemplateLink(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.QLT_DATASHEET_TEMPLATE_LINK, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlDatasheetTemplate = new javax.swing.JLabel();
        moKeyDatasheetTemplate = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel3 = new javax.swing.JPanel();
        jlReferenceType = new javax.swing.JLabel();
        jcbPkLinkTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jPanel4 = new javax.swing.JPanel();
        jlPkReferenceId = new javax.swing.JLabel();
        jcbPkReferenceId = new javax.swing.JComboBox<SFormComponentItem>();
        jlDummy1 = new javax.swing.JLabel();
        jbPkReferenceId = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jlAbsenceClass2 = new javax.swing.JLabel();
        moTextConfigName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlAbsenceClass3 = new javax.swing.JLabel();
        moBoolIsValid = new sa.lib.gui.bean.SBeanFieldBoolean();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatasheetTemplate.setForeground(new java.awt.Color(0, 0, 255));
        jlDatasheetTemplate.setText("Ficha técnica:*");
        jlDatasheetTemplate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlDatasheetTemplate);

        moKeyDatasheetTemplate.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(moKeyDatasheetTemplate);

        jPanel2.add(jPanel6);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 1));

        jlReferenceType.setForeground(new java.awt.Color(0, 0, 255));
        jlReferenceType.setText("Tipo referencia:*");
        jlReferenceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlReferenceType);

        jcbPkLinkTypeId.setPreferredSize(new java.awt.Dimension(300, 23));
        jcbPkLinkTypeId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbPkLinkTypeIdItemStateChanged(evt);
            }
        });
        jPanel3.add(jcbPkLinkTypeId);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 1));

        jlPkReferenceId.setForeground(java.awt.Color.blue);
        jlPkReferenceId.setText("Referencia: *");
        jlPkReferenceId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPkReferenceId);

        jcbPkReferenceId.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel4.add(jcbPkReferenceId);

        jlDummy1.setForeground(java.awt.Color.blue);
        jlDummy1.setPreferredSize(new java.awt.Dimension(1, 23));
        jPanel4.add(jlDummy1);

        jbPkReferenceId.setText("jButton1");
        jbPkReferenceId.setToolTipText("Seleccionar referencia");
        jbPkReferenceId.setFocusable(false);
        jbPkReferenceId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel4.add(jbPkReferenceId);

        jPanel2.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass2.setForeground(new java.awt.Color(0, 0, 255));
        jlAbsenceClass2.setText("Identificador:*");
        jlAbsenceClass2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlAbsenceClass2);

        moTextConfigName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moTextConfigName);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass3.setForeground(new java.awt.Color(0, 0, 255));
        jlAbsenceClass3.setText("Válido:");
        jlAbsenceClass3.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlAbsenceClass3);
        jPanel8.add(moBoolIsValid);

        jPanel2.add(jPanel8);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jcbPkLinkTypeIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbPkLinkTypeIdItemStateChanged
        itemStateChangedFkLinkTypeId();
    }//GEN-LAST:event_jcbPkLinkTypeIdItemStateChanged

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        actionCancel();
    }//GEN-LAST:event_closeDialog

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbPkReferenceId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkLinkTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkReferenceId;
    private javax.swing.JLabel jlAbsenceClass2;
    private javax.swing.JLabel jlAbsenceClass3;
    private javax.swing.JLabel jlDatasheetTemplate;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlPkReferenceId;
    private javax.swing.JLabel jlReferenceType;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolIsValid;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDatasheetTemplate;
    private sa.lib.gui.bean.SBeanFieldText moTextConfigName;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);

        moKeyDatasheetTemplate.setKeySettings(miClient, SGuiUtils.getLabelName(jlDatasheetTemplate), true);
        moComboBoxLinkTypeRef = new SFormComboBoxGroup((SClientInterface) miClient);

        moFieldPkLinkTypeId = new erp.lib.form.SFormField((SClientInterface) miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkLinkTypeId, jlReferenceType);
        moFieldPkReferenceId = new erp.lib.form.SFormField((SClientInterface) miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkReferenceId, jlPkReferenceId);

        moFields.addField(moKeyDatasheetTemplate);
        moFields.setFormButton(jbSave);
    }
    
    private void itemStateChangedFkLinkTypeId() {
        if (jcbPkLinkTypeId.getSelectedIndex() > 0) {

            if (jcbPkReferenceId.getSelectedIndex() <= 0) {
                loadReference();
            }
        } else {
            jcbPkReferenceId.setEnabled(false);
            jbPkReferenceId.setEnabled(false);
        }
    }
    
    private void actionFkReferenceId() {
        int nTypeLink = 0;
        int[] anFilterItem = null;

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                nTypeLink = SDataConstants.UNDEFINED;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                nTypeLink = SDataConstants.ITMS_CT_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                nTypeLink = SDataConstants.ITMS_CL_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                nTypeLink = SDataConstants.ITMS_TP_ITEM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                nTypeLink = SDataConstants.ITMU_IFAM;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                nTypeLink = SDataConstants.ITMU_IGRP;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                nTypeLink = SDataConstants.ITMU_IGEN;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                nTypeLink = SDataConstants.ITMU_LINE;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                nTypeLink = SDataConstants.ITMU_BRD;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                nTypeLink = SDataConstants.ITMU_MFR;
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                nTypeLink = SDataConstants.ITMX_ITEM_IOG;
                anFilterItem = SDataConstantsSys.ITMS_CL_ITEM_SAL_PRO;
                break;
        }
        ((SClientInterface) miClient).pickOption(nTypeLink, moFieldPkReferenceId, anFilterItem);
    }
    
    private void loadReference() {
        jcbPkReferenceId.setEnabled(true);
        jbPkReferenceId.setEnabled(true);

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMS_CT_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMS_CL_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMS_TP_ITEM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IFAM:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_IFAM);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGRP:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_IGRP);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_IGEN:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_IGEN);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_LINE:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_LINE);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_BRD:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_BRD);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_MFR:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_MFR);
                break;
            case SDataConstantsSys.TRNS_TP_LINK_ITEM:
                SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkReferenceId, SDataConstants.ITMU_ITEM);
                break;
            default:
                jcbPkReferenceId.setEnabled(false);
                jbPkReferenceId.setEnabled(false);
                break;
        }
    }

    /*
     * Public methods
     */

    @Override
    public void addAllListeners() {
        moKeyDatasheetTemplate.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moKeyDatasheetTemplate.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyDatasheetTemplate, SModConsts.QLT_DATASHEET_TEMPLATE, SLibConsts.UNDEFINED, null);
        SFormUtilities.populateComboBox((SClientInterface) miClient, jcbPkLinkTypeId, SDataConstants.TRNS_TP_LINK);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbDatasheetTemplateLink) registry;
        moTextConfigName.setValue(moRegistry.getConfigurationName());
        moBoolIsValid.setValue(moRegistry.isValid());
        
        moComboBoxLinkTypeRef.reset();
        removeAllListeners();
        reloadCatalogues();
        
        moKeyDatasheetTemplate.setValue(new int[] { moRegistry.getFkDatasheetTemplateId() });
        moFieldPkLinkTypeId.setKey(new int[] { moRegistry.getFkLinkTypeId() });
        loadReference();

        switch (moFieldPkLinkTypeId.getKeyAsIntArray()[0]) {
            case SDataConstantsSys.TRNS_TP_LINK_ALL:
                break;
            case SDataConstantsSys.TRNS_TP_LINK_CT_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_CL_ITEM:
            case SDataConstantsSys.TRNS_TP_LINK_TP_ITEM:
                SFormUtilities.locateComboBoxItemByComplement(jcbPkReferenceId, moRegistry.getFkReferenceId());
                break;
            default:
                moFieldPkReferenceId.setFieldValue(new int[] { moRegistry.getFkReferenceId() });
        }
        
        setFormEditable(true);
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbDatasheetTemplateLink registry = (SDbDatasheetTemplateLink) moRegistry.clone();
        
        registry.setConfigurationName(moTextConfigName.getValue());
        registry.setValid(moBoolIsValid.getValue());
        registry.setFkDatasheetTemplateId(moKeyDatasheetTemplate.getValue()[0]);
        registry.setFkLinkTypeId(moFieldPkLinkTypeId.getKeyAsIntArray()[0]);
        registry.setFkReferenceId(moFieldPkReferenceId.getKeyAsIntArray()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        
    }
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbPkReferenceId) {
                actionFkReferenceId();
            }
        }
    }
}
