/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.itm.form;

import erp.lib.SLibConstants;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.itm.db.SDbItemComposition;
import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mod.trn.form.SDialogItemPicker;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 */
public class SFormItemComposition extends sa.lib.gui.bean.SBeanForm implements ActionListener {

    private SDbItemComposition moRegistry;
    
    private SDialogItemPicker moDialogPickerItem;
    private SDataItem moItem;

    /**
     * Creates new form SFormVehicleType
     * @param client
     * @param title
     */
    public SFormItemComposition(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.ITMU_ITEM_COMP, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moTextItemName = new sa.lib.gui.bean.SBeanFieldText();
        jbPickItem = new javax.swing.JButton();
        jPanel25 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel26 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel27 = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlItem);

        moTextItemName.setEditable(false);
        moTextItemName.setEnabled(false);
        moTextItemName.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel24.add(moTextItemName);

        jbPickItem.setText("...");
        jbPickItem.setToolTipText("Seleccionar ítem");
        jbPickItem.setFocusable(false);
        jbPickItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel24.add(jbPickItem);

        jPanel23.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlDateStart);

        moDateStart.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel25.add(moDateStart);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlDateEnd);

        moDateEnd.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel26.add(moDateEnd);

        jPanel23.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel23.add(jPanel27);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbPickItem;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlItem;
    private sa.lib.gui.bean.SBeanFieldDate moDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateStart;
    private sa.lib.gui.bean.SBeanFieldText moTextItemName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moTextItemName.setTextSettings(SGuiUtils.getLabelName(jlItem), 255);
        moDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart), true);
        moDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd), false);
        
        moFields.addField(moTextItemName);
        moFields.addField(moDateStart);
        moFields.addField(moDateEnd);
        
        moFields.setFormButton(jbSave);
    }

    @Override
    public void addAllListeners() {
        jbPickItem.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickItem.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        moDateEnd.setValue(null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbItemComposition) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moDateStart.setValue(miClient.getSession().getCurrentDate());
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moDateStart.setValue(moRegistry.getDateStart());
            moDateEnd.setValue(moRegistry.getDateEnd_n());
        }

        moItem = moRegistry.getDbmsItem();
        if (moItem == null) {
            moItem = new SDataItem();
        }
        moTextItemName.setValue(moItem.getItem());
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbItemComposition registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setPkItemId(moItem.getPkItemId());
        registry.setDateStart(moDateStart.getValue());
        registry.setDateEnd_n(moDateEnd.getValue());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbPickItem) {
                actionPickItem();
            }
        }
    }
    
    private void actionPickItem() {
        try {
            moDialogPickerItem = SMaterialRequestUtils.getOptionItemPicker(miClient, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);

            moDialogPickerItem.resetPicker();
            moDialogPickerItem.initComponentsCustom();
            moDialogPickerItem.setItemPickerInvDefault(true);
            moDialogPickerItem.setPickerVisible(true);

            if (moDialogPickerItem.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
                int[] itemId = (int[]) moDialogPickerItem.getOption();

                moItem = new SDataItem();
                if (itemId != null) {
                    moItem.read(itemId, miClient.getSession().getStatement());
                }
                moTextItemName.setValue(moItem.getItem());
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
}
