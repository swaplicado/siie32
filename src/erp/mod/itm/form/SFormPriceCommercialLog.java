/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.itm.form;

import erp.lib.SLibConstants;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.itm.db.SDbPriceCommercialLog;
import erp.mod.trn.db.SMaterialRequestUtils;
import erp.mod.trn.form.SDialogItemPicker;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;

/**
 *
 * @author Isabel Servín
 */
public class SFormPriceCommercialLog extends sa.lib.gui.bean.SBeanForm implements ActionListener, ItemListener {

    private SDbPriceCommercialLog moRegistry;
    
    private SDialogItemPicker moDialogPickerItem;
    private SDataItem moItem;

    /**
     * Creates new form SFormVehicleType
     * @param client
     * @param title
     */
    public SFormPriceCommercialLog(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.ITMU_PRICE_COMM_LOG, SLibConstants.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel25 = new javax.swing.JPanel();
        jlItem = new javax.swing.JLabel();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickItem = new javax.swing.JButton();
        jPanel26 = new javax.swing.JPanel();
        jlUnit = new javax.swing.JLabel();
        moKeyUnit = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel27 = new javax.swing.JPanel();
        jlPrice = new javax.swing.JLabel();
        moDecPrice = new sa.lib.gui.bean.SBeanFieldDecimal();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel23.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlDate);

        moDate.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel24.add(moDate);

        jPanel23.add(jPanel24);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlItem.setText("Ítem:*");
        jlItem.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlItem);

        moKeyItem.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel25.add(moKeyItem);

        jbPickItem.setText("...");
        jbPickItem.setToolTipText("Seleccionar ítem");
        jbPickItem.setFocusable(false);
        jbPickItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel25.add(jbPickItem);

        jPanel23.add(jPanel25);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnit.setText("Unidad:*");
        jlUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlUnit);

        moKeyUnit.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel26.add(moKeyUnit);

        jPanel23.add(jPanel26);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPrice.setText("Precio comercial:*");
        jlPrice.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlPrice);

        moDecPrice.setText("0.00");
        jPanel27.add(moDecPrice);

        jPanel23.add(jPanel27);

        jPanel1.add(jPanel23, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbPickItem;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlPrice;
    private javax.swing.JLabel jlUnit;
    private sa.lib.gui.bean.SBeanFieldDate moDate;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPrice;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldKey moKeyUnit;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), true);
        moKeyUnit.setKeySettings(miClient, SGuiUtils.getLabelName(jlUnit), true);
        moDecPrice.setDecimalSettings(SGuiUtils.getLabelName(jlPrice), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        
        moFields.addField(moDate);
        moFields.addField(moKeyItem);
        moFields.addField(moKeyUnit);
        moFields.addField(moDecPrice);
        
        moFields.setFormButton(jbSave);
    }

    @Override
    public void addAllListeners() {
        jbPickItem.addActionListener(this);
        moKeyItem.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickItem.removeActionListener(this);
        moKeyItem.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        SGuiParams params = new SGuiParams();
        params.getParamsMap().put(SModConsts.ITMS_ST_ITEM, SModSysConsts.ITMS_ST_ITEM_ACT); 
        
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, SModSysConsts.ITMU_ITEM_INV, params);
        miClient.getSession().populateCatalogue(moKeyUnit, SModConsts.ITMU_UNIT, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbPriceCommercialLog) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            moDate.setValue(miClient.getSession().getCurrentDate());
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            moDate.setValue(moRegistry.getDate());
        }

        moKeyItem.setValue(new int[] { moRegistry.getPkItemId() });
        moKeyUnit.setValue(new int[] { moRegistry.getPkUnitId() });
        moDecPrice.setValue(moRegistry.getPrice());
        
        setFormEditable(true);

        if (moRegistry.isRegistryNew()) { }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbPriceCommercialLog registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setPkItemId(moKeyItem.getValue()[0]);
        registry.setPkUnitId(moKeyUnit.getValue()[0]);
        registry.setDate(moDate.getValue());
        registry.setPrice(moDecPrice.getValue());
        
        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbPickItem) {
                actionPickItem();
            }
        }
    }
    
    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            if (comboBox == moKeyItem) {
                actionItem();
            }
        }
    }

    private void actionPickItem() {
        moDialogPickerItem = SMaterialRequestUtils.getOptionItemPicker(miClient, SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
        
        moDialogPickerItem.resetPicker();
        moDialogPickerItem.initComponentsCustom();
        moDialogPickerItem.setItemPickerInvDefault(true);
        moDialogPickerItem.setPickerVisible(true);

        if (moDialogPickerItem.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            int[] itemId = (int[]) moDialogPickerItem.getOption();

            if (itemId != null) {
                moKeyItem.setValue(itemId);
            }
        }
    }
    
    private void actionItem() {
        try {
            if (moKeyItem.getSelectedIndex() >= 1) {
                moItem = new SDataItem();
                moItem.read(moKeyItem.getValue(), miClient.getSession().getStatement());
                moKeyUnit.setValue(new int[] { moItem.getFkUnitId() });
            }
        }
        catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }
}
