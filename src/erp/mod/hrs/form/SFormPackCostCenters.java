/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.gui.account.SAccount;
import erp.gui.account.SAccountConsts;
import erp.gui.account.SAccountUtils;
import erp.mcfg.data.SDataParamsCompany;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbPackCostCenters;
import erp.mod.hrs.db.SDbPackCostCentersCostCenter;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 * Configuración de paquetes de centros de costo y sus centros de costo con porcentaje de prorrateo.
 * Aplica para la modalidad de configuración de contabilización 'dinámica'.
 * @author Sergio Flores
 */
public class SFormPackCostCenters extends SBeanForm implements SGridPaneFormOwner, ActionListener {

    private SDbPackCostCenters moRegistry;
    private SGridPaneForm moGridCostCenters;
    private int mnCostCenterMask;

    /**
     * Creates new form SFormPackCostCenters.
     * @param client GUI client.
     * @param title Form title.
     */
    public SFormPackCostCenters(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_PACK_CC, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jlTotalProration = new javax.swing.JLabel();
        jtfTotalProration = new javax.swing.JTextField();
        jpExpenses = new javax.swing.JPanel();
        jpExpensesNorth = new javax.swing.JPanel();
        moPanelCostCenter = new erp.gui.account.SBeanPanelAccount();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlProrationPercentage = new javax.swing.JLabel();
        moDecProrationPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jpExpensesNorth3 = new javax.swing.JPanel();
        jbAddCostCenter = new javax.swing.JButton();
        jbClearCostCenter = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlCode);

        moTextCode.setText("TEXT");
        jPanel4.add(moTextCode);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlName);

        moTextName.setText("TEXT");
        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moTextName);

        jlTotalProration.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTotalProration.setText("% prorrateo:");
        jlTotalProration.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlTotalProration);

        jtfTotalProration.setEditable(false);
        jtfTotalProration.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfTotalProration.setText("0.00%");
        jtfTotalProration.setFocusable(false);
        jtfTotalProration.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfTotalProration);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jpExpenses.setBorder(javax.swing.BorderFactory.createTitledBorder("Gastos:"));
        jpExpenses.setLayout(new java.awt.BorderLayout());

        jpExpensesNorth.setLayout(new java.awt.BorderLayout());
        jpExpensesNorth.add(moPanelCostCenter, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlProrationPercentage.setText("% prorrateo:");
        jlProrationPercentage.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlProrationPercentage);

        moDecProrationPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(moDecProrationPercentage);

        jPanel6.add(jPanel7);

        jpExpensesNorth3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbAddCostCenter.setText("Agregar");
        jbAddCostCenter.setPreferredSize(new java.awt.Dimension(75, 23));
        jpExpensesNorth3.add(jbAddCostCenter);

        jbClearCostCenter.setText("Limpiar");
        jbClearCostCenter.setPreferredSize(new java.awt.Dimension(75, 23));
        jpExpensesNorth3.add(jbClearCostCenter);

        jPanel6.add(jpExpensesNorth3);

        jpExpensesNorth.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jpExpenses.add(jpExpensesNorth, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpExpenses, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbAddCostCenter;
    private javax.swing.JButton jbClearCostCenter;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlProrationPercentage;
    private javax.swing.JLabel jlTotalProration;
    private javax.swing.JPanel jpExpenses;
    private javax.swing.JPanel jpExpensesNorth;
    private javax.swing.JPanel jpExpensesNorth3;
    private javax.swing.JTextField jtfTotalProration;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecProrationPercentage;
    private erp.gui.account.SBeanPanelAccount moPanelCostCenter;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode.getText()), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 50);
        moPanelCostCenter.setPanelSettings((SGuiClient) miClient, SAccountConsts.TYPE_COST_CENTER, true, true, true);
        moDecProrationPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlProrationPercentage), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecProrationPercentage.setMaxDouble(1d);

        moPanelCostCenter.setAccountNameWidth(500);
        moPanelCostCenter.setComponentPrevious(moTextName);
        moPanelCostCenter.setComponentNext(moDecProrationPercentage);
        moPanelCostCenter.initPanel();
        
        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moDecProrationPercentage);
        
        moFields.setFormButton(jbAddCostCenter);
        
        moTextName.setNextField(moPanelCostCenter.getTextNumberFirst());
        
        mnCostCenterMask = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskCostCenter();
        
        moGridCostCenters = new SGridPaneForm(miClient, SModConsts.HRS_PACK_CC_CC, 0, "Centros costos") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ACC, "No. centro costo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_L, "Centro costo"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_DISC, "% prorrateo"));
                
                return columns;
            }
        };
        
        jpExpenses.add(moGridCostCenters, BorderLayout.CENTER);
        moGridCostCenters.setPaneFormOwner(this);
    }
    
    private double sumTotalProration() {
        double sum = 0;
        
        for (SGridRow row : moGridCostCenters.getModel().getGridRows()) {
            sum += ((SDbPackCostCentersCostCenter) row).getProrationPercentage();
        }
        
        return sum;
    }
    
    private void updateTotalProration() {
        double totalProration = sumTotalProration();
        jtfTotalProration.setText(SLibUtils.getDecimalFormatPercentageDiscount().format(totalProration));
        jtfTotalProration.setCaretPosition(0);
        
        moDecProrationPercentage.setValue(totalProration < 1d ? 1d - totalProration : 0d);
    }
    
    private void actionPerformedAddCostCenter() {
        SGuiValidation validation = moPanelCostCenter.validatePanel();
        
        if (SGuiUtils.computeValidation(miClient, validation)) {
            validation = moDecProrationPercentage.validateField();
            
            if (SGuiUtils.computeValidation(miClient, validation)) {
                boolean found = false;
                SAccount costCenter = moPanelCostCenter.getSelectedAccount();

                for (SGridRow row : moGridCostCenters.getModel().getGridRows()) {
                    if (((SDbPackCostCentersCostCenter) row).getPkCostCenterId() == costCenter.getAccountId()) {
                        miClient.showMsgBoxWarning("El " + moPanelCostCenter.getPanelAccountName().toLowerCase() + " '" + SAccountUtils.convertCodeUsr(mnCostCenterMask, costCenter.getCodeStd()) + " - " + costCenter.getName() + "' ya existe en los centros de costos del paquete.");
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    SDbPackCostCentersCostCenter packCostCentersCostCenter = new SDbPackCostCentersCostCenter();

                    //packCostCentersCostCenter.setPkPackCostCentersId(...);
                    packCostCentersCostCenter.setPkCostCenterId(costCenter.getAccountId());
                    packCostCentersCostCenter.setProrationPercentage(moDecProrationPercentage.getValue());

                    packCostCentersCostCenter.setDbmsCostCenterCode(SAccountUtils.convertCodeUsr(mnCostCenterMask, costCenter.getCodeStd()));
                    packCostCentersCostCenter.setDbmsCostCenterName(costCenter.getName());

                    moGridCostCenters.addGridRow(packCostCentersCostCenter);
                    moGridCostCenters.renderGridRows();
                    moGridCostCenters.setSelectedGridRow(moGridCostCenters.getTable().getRowCount() - 1);

                    actionPerformedClearCostCenter();
                    updateTotalProration();
                }
            }
        }
    }

    private void actionPerformedClearCostCenter() {
        moPanelCostCenter.setSelectedAccount(null);
        moDecProrationPercentage.resetField();
        
        moPanelCostCenter.getTextNumberFirst().requestFocusInWindow();
    }

    @Override
    public void addAllListeners() {
        jbAddCostCenter.addActionListener(this);
        jbClearCostCenter.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbAddCostCenter.removeActionListener(this);
        jbClearCostCenter.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbPackCostCenters) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            moRegistry.setSystem(false); // all editable registries are non-system
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moTextCode.setValue(moRegistry.getCode());
        
        moPanelCostCenter.setSelectedAccount(null);
        moDecProrationPercentage.resetField();
        
        moGridCostCenters.populateGrid(new Vector<>(moRegistry.getChildCostCenters()));
        updateTotalProration();

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbPackCostCenters registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setName(moTextName.getValue());
        registry.setCode(moTextCode.getValue());
        
        registry.getChildCostCenters().clear();
        
        for (SGridRow row : moGridCostCenters.getModel().getGridRows()) {
            registry.getChildCostCenters().add((SDbPackCostCentersCostCenter) row);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridCostCenters.getTable().getRowCount() == 0) {
                validation.setMessage("Se deben capturar los centros de costo del paquete.");
                validation.setComponent(moPanelCostCenter.getTextNumberFirst());
            }
            else if (sumTotalProration() != 1d) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlTotalProration) + "'"
                        + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + SLibUtils.getDecimalFormatPercentageDiscount().format(1d) + ".");
            }
        }
        
        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        if (gridType == SModConsts.HRS_PACK_CC_CC) {
            updateTotalProration();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbAddCostCenter) {
                actionPerformedAddCostCenter();
            }
            else if (button == jbClearCostCenter) {
                actionPerformedClearCostCenter();
            }
        }
    }
}
