/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsUtils;
import erp.mod.hrs.db.SRowBenefitCardex;
import erp.mod.hrs.db.SRowBenefitDetailCardex;
import erp.mod.hrs.utils.SAnniversary;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.db.SDbRegistryUser;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogBenefitVacationCardex extends SBeanFormDialog implements ActionListener, ItemListener, ListSelectionListener {
    
    private SDbEmployee moEmployee;
    private Date mtCutOff;
    private SAnniversary moAnniversary;
    private double mdDailyPayment;
    private SGridPaneForm moGridBenefitSummary;
    private SGridPaneForm moGridBenefitDetail;

    /**
     * Creates new form SDialogBenefitVacationCardex
     * @param client GUI client.
     * @param formSubtype Type of benefit. SModSysConsts.HRSS_TP_BEN_...
     * @param title Title of dialog.
     */
    public SDialogBenefitVacationCardex(SGuiClient client, int formSubtype, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_EMP_BEN, formSubtype, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jpBenefit = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlEmployeeName = new javax.swing.JLabel();
        moTextEmployeeName = new sa.lib.gui.bean.SBeanFieldText();
        moTextEmployeeNumber = new sa.lib.gui.bean.SBeanFieldText();
        jLabel1 = new javax.swing.JLabel();
        moKeyCompany = new sa.lib.gui.bean.SBeanFieldKey();
        jbCompany = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        moTextBenefitType = new sa.lib.gui.bean.SBeanFieldText();
        jlDailyPayment = new javax.swing.JLabel();
        moDecDailyPayment = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel10 = new javax.swing.JPanel();
        jlDateCutoff = new javax.swing.JLabel();
        moTextDateCutoff = new sa.lib.gui.bean.SBeanFieldText();
        jlDateBenefits = new javax.swing.JLabel();
        moTextDateBenefits = new sa.lib.gui.bean.SBeanFieldText();
        jlSeniority = new javax.swing.JLabel();
        moIntSeniorityYears = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityYears = new javax.swing.JLabel();
        moIntSeniorityDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityDays = new javax.swing.JLabel();
        jlSeniorityProp = new javax.swing.JLabel();
        moDecSeniorityProp = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel3 = new javax.swing.JPanel();
        jpBenefitSummary = new javax.swing.JPanel();
        jpBenefitDetail = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jpBenefit.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Prestación:"));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeName.setText("Empleado:");
        jlEmployeeName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlEmployeeName);

        moTextEmployeeName.setEditable(false);
        moTextEmployeeName.setText("TEXT");
        moTextEmployeeName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextEmployeeName.setPreferredSize(new java.awt.Dimension(360, 23));
        jPanel7.add(moTextEmployeeName);

        moTextEmployeeNumber.setEditable(false);
        moTextEmployeeNumber.setText("TEXT");
        moTextEmployeeNumber.setToolTipText("Número empleado");
        moTextEmployeeNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextEmployeeNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(moTextEmployeeNumber);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Empresa:");
        jLabel1.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jLabel1);

        moKeyCompany.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel7.add(moKeyCompany);

        jbCompany.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbCompany.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbCompany);

        jPanel4.add(jPanel7);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setText("Tipo prestación:");
        jlBenefitType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlBenefitType);

        moTextBenefitType.setEditable(false);
        moTextBenefitType.setText("TEXT");
        moTextBenefitType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(moTextBenefitType);

        jlDailyPayment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDailyPayment.setText("Pago diario:");
        jlDailyPayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlDailyPayment);

        moDecDailyPayment.setEditable(false);
        jPanel2.add(moDecDailyPayment);

        jPanel4.add(jPanel2);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutoff.setText("Fecha corte:");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDateCutoff);

        moTextDateCutoff.setEditable(false);
        moTextDateCutoff.setText("00/00/0000");
        moTextDateCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(moTextDateCutoff);

        jlDateBenefits.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateBenefits.setText("Inicio prestaciones:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlDateBenefits);

        moTextDateBenefits.setEditable(false);
        moTextDateBenefits.setText("00/00/0000");
        moTextDateBenefits.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(moTextDateBenefits);

        jlSeniority.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel10.add(jlSeniority);

        moIntSeniorityYears.setEditable(false);
        moIntSeniorityYears.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(moIntSeniorityYears);

        jlSeniorityYears.setText("años");
        jlSeniorityYears.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel10.add(jlSeniorityYears);

        moIntSeniorityDays.setEditable(false);
        moIntSeniorityDays.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel10.add(moIntSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel10.add(jlSeniorityDays);

        jlSeniorityProp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSeniorityProp.setText("Proporcional:");
        jlSeniorityProp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlSeniorityProp);

        moDecSeniorityProp.setEditable(false);
        moDecSeniorityProp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(moDecSeniorityProp);

        jPanel4.add(jPanel10);

        jpBenefit.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(jpBenefit, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jpBenefitSummary.setBorder(javax.swing.BorderFactory.createTitledBorder("Prestación por aniversario:"));
        jpBenefitSummary.setPreferredSize(new java.awt.Dimension(100, 200));
        jpBenefitSummary.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpBenefitSummary, java.awt.BorderLayout.NORTH);

        jpBenefitDetail.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle de pagos de la prestación:"));
        jpBenefitDetail.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jpBenefitDetail, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbCompany;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlDailyPayment;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JLabel jlEmployeeName;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityProp;
    private javax.swing.JLabel jlSeniorityYears;
    private javax.swing.JPanel jpBenefit;
    private javax.swing.JPanel jpBenefitDetail;
    private javax.swing.JPanel jpBenefitSummary;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDailyPayment;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSeniorityProp;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityYears;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCompany;
    private sa.lib.gui.bean.SBeanFieldText moTextBenefitType;
    private sa.lib.gui.bean.SBeanFieldText moTextDateBenefits;
    private sa.lib.gui.bean.SBeanFieldText moTextDateCutoff;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeName;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeNumber;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        jbSave.setEnabled(false);
        jbCancel.setText(SUtilConsts.TXT_CLOSE);

        moTextEmployeeName.setTextSettings(SGuiUtils.getLabelName(jlEmployeeName), 202);
        moTextEmployeeNumber.setTextSettings(SGuiUtils.getLabelName(jlEmployeeName), 10);
        moDecDailyPayment.setDecimalSettings(SGuiUtils.getLabelName(jlDailyPayment), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextBenefitType.setTextSettings(SGuiUtils.getLabelName(jlBenefitType), 100);
        moTextDateCutoff.setTextSettings(SGuiUtils.getLabelName(jlDateCutoff.getText()), 25);
        moTextDateBenefits.setTextSettings(SGuiUtils.getLabelName(jlDateBenefits.getText()), 25);
        moIntSeniorityYears.setIntegerSettings(SGuiUtils.getLabelName(jlSeniorityYears), SGuiConsts.GUI_TYPE_INT, false);
        moIntSeniorityDays.setIntegerSettings(SGuiUtils.getLabelName(jlSeniorityDays), SGuiConsts.GUI_TYPE_INT, false);
        moDecSeniorityProp.setDecimalSettings(SGuiUtils.getLabelName(jlSeniorityProp), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false); // 8 decs.
        
        moGridBenefitSummary = new SGridPaneForm(miClient, SModConsts.HRS_EMP_BEN_ANN, SModConsts.HRS_EMP_BEN, "Prestación por aniversario") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Aniversario", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_YEAR, "Año aniversario", 65));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Días prestación", 100));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Días proporcionales"));
                
                if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_VAC) {
                    gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Días programados"));
                    gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Días pagados"));
                    gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Días x pagar"));
                }
                else {
                    if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_ANN_BON) {
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto prestación $"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto proporcional$"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto pagado $"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto x pagar $"));
                    }
                    else if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_PER_2D, "Prima"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto prestación $"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto proporcional $"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto pagado $"));
                        gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto x pagar $"));
                    }
                } 

                return gridColumnsForm;
            }
        };

        jpBenefitSummary.add(moGridBenefitSummary, BorderLayout.CENTER);
        
        moGridBenefitDetail = new SGridPaneForm(miClient, SModConsts.HRS_EMP_BEN_ANN, SModConsts.HRS_PAY_RCP, "Detalle prestación") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_YEAR, "Ejercicio", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_MONTH, "Período", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Tipo nómina", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "No. nómina", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha inicial"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha final"));
                if (mnFormSubtype != SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                    gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Días"));
                }
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr mod"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS mod"));

                return gridColumnsForm;
            }
        };

        jpBenefitDetail.add(moGridBenefitDetail, BorderLayout.CENTER);
        
        reloadCatalogues();
        moKeyCompany.setValue(new int[] { miClient.getSession().getConfigCompany().getCompanyId() });
        moKeyCompany.setEnabled(false);
    }
    
    private String getDbmsSchema() {
        String squema = "";
        
        if (moKeyCompany.getSelectedIndex() > 0) {
            squema = ((String) moKeyCompany.getSelectedItem().getComplement()) + ".";
        }
        
        return squema;
    }
    
    /**
     * Get map of vacation days up to top anniversary.
     * @param statement DBMS statement.
     * @param anniversaryTop top anniversary.
     * @return
     * @throws Exception 
     */
    private HashMap<Integer, Integer> createVacationDaysMap(final Statement statement, final int anniversaryTop) throws Exception {
        String schema = getDbmsSchema();
        HashMap<Integer, Integer> vacationDays = new HashMap<>();
        
        String sql = "SELECT id_ann, ben_day "
                + "FROM " + schema + SModConsts.TablesMap.get(SModConsts.HRS_EMP_BEN_ANN) + " "
                + "WHERE eba.id_tp_ben = " + SModSysConsts.HRSS_TP_BEN_VAC + " "
                + "AND eba.id_emp = " + moEmployee.getPkEmployeeId() + " AND eba.id_ann <= " + anniversaryTop + " "
                + "ORDER BY eba.id_ann";

        try (ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                vacationDays.put(resultSet.getInt("id_ann"), resultSet.getInt("ben_day"));
            }
        }
        
        return vacationDays;
    }

    @SuppressWarnings("unchecked")
    private void showBenefitCardex() {
        try {
            String schema = getDbmsSchema();
            Vector<SGridRow> rows = new Vector<>();
            HashMap<Integer, Integer> vacationDays = null;
            
            try (Statement statement = miClient.getSession().getStatement().getConnection().createStatement()) {
                // proceed adding 1 to show current anniversary, eventhough elapsed partially:
                
                int anniversaryTop = moAnniversary.getElapsedYears() + 1;
                int anniversary = anniversaryTop;
                int benefitsYearStart = moAnniversary.getPeriodStart().getYear();
                
                if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                    vacationDays = createVacationDaysMap(statement, anniversaryTop);
                }
                
                String sql = "SELECT eba.id_ann, eba.ben_day, eba.ben_bon_per, t.* "
                        + "FROM " + schema + SModConsts.TablesMap.get(SModConsts.HRS_EMP_BEN_ANN) + " AS eba "
                        + "LEFT OUTER JOIN ("
                        + SHrsUtils.composeQueryForBenefitPayments(schema, moEmployee.getPkEmployeeId(), moEmployee.getDateBenefits(), mnFormSubtype)
                        + ") AS t ON t.ben_ann = eba.id_ann "
                        + "WHERE eba.id_emp = " + moEmployee.getPkEmployeeId() + " AND eba.id_tp_ben = " + mnFormSubtype + " "
                        + "AND eba.id_ann <= " + anniversaryTop + " "
                        + "ORDER BY eba.id_ann DESC;";
                
                ResultSet resultSet = statement.executeQuery(sql);
                while (resultSet.next()) {
                    int benefitsYear = benefitsYearStart + anniversary - 1;
                    
                    SRowBenefitCardex row = new SRowBenefitCardex(mnFormSubtype);
                    row.setBenefitYear(benefitsYear);
                    row.setBenefitAnniversary(anniversary);
                    row.setProportional(anniversary == anniversaryTop ? moAnniversary.getCurrentAnniversaryPropPartForBenefits() : 1.0);
                    
                    if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        row.setBenefitBonusPct(resultSet.getDouble("eba.ben_bon_per"));
                        row.setBenefitDays(vacationDays.get(anniversary));
                    }
                    else {
                        row.setBenefitBonusPct(1.0);
                        row.setBenefitDays(resultSet.getInt("eba.ben_day"));
                    }

                    row.setBenefitDaysPayed(resultSet.getDouble("t._days"));
                    row.setBenefitAmount(row.getBenefitDays() * row.getBenefitBonusPct() * mdDailyPayment);
                    row.setBenefitAmountPayed(SLibUtils.roundAmount(resultSet.getDouble("t._pymt")));
                    
                    // scheduled days (only for vacations):

                    if (mnFormSubtype == SModSysConsts.HRSS_TP_BEN_VAC) {
                        row.setBenefitDaysScheduled(SHrsUtils.getVacationScheduledDays(miClient.getSession(), moEmployee, anniversary, benefitsYear, 0));
                    }

                    rows.add(row);
                    anniversary--;
                }
            }

            moGridBenefitSummary.populateGrid(rows, this);
            moGridBenefitSummary.clearSortKeys();
            moGridBenefitSummary.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void showBenefitDetail(SRowBenefitCardex rowBenefit) {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "";
        ResultSet resultSet = null;

        try {
            getContentPane().setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            sql = "SELECT IF(p.id_pay = 0, rcp_ear_cmp.dt, p.dt_end) f_dt, p.per_year, p.per AS f_period, IF(p.id_pay = 0, '', tp_pay.name) AS f_tp_pay, p.num AS f_num, IF(p.id_pay = 0, NULL, p.dt_sta) AS f_dt_sta, IF(p.id_pay = 0,NULL, p.dt_end) AS f_dt_end, rcp_ear.id_pay, rcp_ear.id_emp, rcp_ear.id_mov, rcp_ear.unt_all AS f_unt, rcp_ear.amt_r AS f_amt, " +
                    "rcp_ear.ts_usr_ins AS ts_usr_ins, rcp_ear.ts_usr_upd AS ts_usr_upd, ui.usr AS f_usr_ins, uu.usr AS f_usr_upd " +
                    "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " AS p " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP) + " AS rcp ON rcp.id_pay = p.id_pay " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP_EAR) + " AS rcp_ear ON rcp_ear.id_pay = rcp.id_pay AND rcp_ear.id_emp = rcp.id_emp AND rcp_ear.b_del = 0 " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSS_TP_PAY) + " AS tp_pay ON tp_pay.id_tp_pay = p.fk_tp_pay " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.USRU_USR) + " AS ui ON rcp_ear.fk_usr_ins = ui.id_usr " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.USRU_USR) + " AS uu ON rcp_ear.fk_usr_upd = uu.id_usr " +
                    "LEFT OUTER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP_EAR_CMP) + " AS rcp_ear_cmp ON rcp_ear_cmp.id_pay = rcp_ear.id_pay AND rcp_ear_cmp.id_emp = rcp_ear.id_emp AND rcp_ear_cmp.id_mov = rcp_ear.id_mov " +
                    "WHERE (p.id_pay = 0 OR p.b_del = 0) AND rcp_ear.id_emp = " + moEmployee.getPkEmployeeId() + " AND rcp.b_del = 0 AND rcp_ear.fk_tp_ben = " + mnFormSubtype + " AND rcp_ear.ben_ann = " + rowBenefit.getBenefitAnniversary() + " AND " +
                    "rcp_ear.ben_year = " + rowBenefit.getBenefitYear() + " " +
                    "ORDER BY f_dt, per_year, f_period, f_tp_pay, f_num, f_dt_sta, f_dt_end, rcp_ear.id_pay, rcp_ear.id_emp, rcp_ear.id_mov ";

            resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowBenefitDetailCardex row = new SRowBenefitDetailCardex(mnFormSubtype);
                
                row.setDate(resultSet.getDate("f_dt"));
                row.setYear(resultSet.getInt("per_year"));
                row.setPeriod(resultSet.getInt("f_period"));
                row.setPayrollType(resultSet.getString("f_tp_pay"));
                row.setNumber(resultSet.getString("f_num"));
                row.setDateStart(resultSet.getDate("f_dt_sta"));
                row.setDateEnd(resultSet.getDate("f_dt_end"));

                row.setDays(resultSet.getDouble("f_unt"));
                row.setAmount(resultSet.getDouble("f_amt"));
                row.setUserInsert(resultSet.getString("f_usr_ins"));
                row.setDateUserInsert(resultSet.getTimestamp("ts_usr_ins"));
                row.setUserUpdate(resultSet.getString("f_usr_upd"));
                row.setDateUserUpdate(resultSet.getTimestamp("ts_usr_upd"));

                rows.add(row);
            }

            moGridBenefitDetail.populateGrid(rows);
            moGridBenefitDetail.clearSortKeys();
            moGridBenefitDetail.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            getContentPane().setCursor(Cursor.getDefaultCursor());
        }
    }

    /**
     * Show detail of current benefit.
     */
    private void valueChangedBenefitSummary() {
        SRowBenefitCardex benefitCardex = (SRowBenefitCardex) moGridBenefitSummary.getSelectedGridRow();

        if (benefitCardex != null) {
            showBenefitDetail(benefitCardex);
        }
    }
    
    private void actionPerformedCompany() {
        jbCompany.setEnabled(false);
        moKeyCompany.setEnabled(true);
        moKeyCompany.requestFocusInWindow();
    }
    
    private void itemStateChangedCompany() {
        if (moKeyCompany.getSelectedIndex() <= 0) {
            moGridBenefitSummary.clearGridRows();
        }
        else {
            showBenefitCardex();
        }
    }
    
    public void setFormParams(final int employeeId, final Date cutOff) {
        removeAllListeners();
        
        SDbConfig config = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });
        
        moEmployee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { employeeId });
        mtCutOff = cutOff;
        moAnniversary = new SAnniversary(moEmployee.getDateBenefits(), cutOff);
        mdDailyPayment = moEmployee.getEffectiveSalary(config.isFortnightStandard());
        
        moTextEmployeeName.setValue(moEmployee.getXtaEmployeeName());
        moTextEmployeeNumber.setValue(moEmployee.getNumber());
        moDecDailyPayment.setValue(mdDailyPayment);
        moTextBenefitType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_BEN, new int[] { mnFormSubtype }, SDbRegistryUser.FIELD_NAME));
        moTextDateCutoff.setValue(SLibUtils.DateFormatDate.format(mtCutOff));
        moTextDateBenefits.setValue(SLibUtils.DateFormatDate.format(moEmployee.getDateBenefits()));
        moIntSeniorityYears.setValue(moAnniversary.getElapsedYears());
        moIntSeniorityDays.setValue(moAnniversary.getElapsedYearDaysForBenefits());
        moDecSeniorityProp.setValue(moAnniversary.getCurrentAnniversaryPropPartForBenefits());
        
        showBenefitCardex();
        addAllListeners();
    }
    
    @Override
    public void addAllListeners() {
        jbCompany.addActionListener(this);
        moKeyCompany.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbCompany.removeActionListener(this);
        moKeyCompany.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCompany, SModConsts.CFGU_CO, SModConsts.MOD_HRS, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            if (button == jbCompany) {
                actionPerformedCompany();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            if (field == moKeyCompany) {
                itemStateChangedCompany();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (moGridBenefitSummary.getTable().getSelectedRowCount() != -1) {
                valueChangedBenefitSummary();
            }
        }
    }

    @Override
    public void actionCancel() {
        mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
        dispose();
    }
}
