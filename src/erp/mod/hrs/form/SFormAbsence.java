/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbAbsence;
import erp.mod.hrs.db.SDbAbsenceClass;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsBenefitTableAnniversary;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiField;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormAbsence extends SBeanForm implements ActionListener, ItemListener, ChangeListener {
    
    private final static boolean NEXT = true;
    private final static boolean BACK = false;

    private SDbAbsence moRegistry;
    private SDbEmployee moEmployee;
    private SGuiFieldKeyGroup moFieldKeyGroup;

    private int mnVacationsEarningId;
    private int mnDaysEffectiveMax;
    private ArrayList<SHrsBenefitTableAnniversary> maBenefitTableAnniversaries;

    /**
     * Creates new form SFormAbsence
     * @param client
     * @param title
     */
    public SFormAbsence(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_ABS, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlDateBenefits = new javax.swing.JLabel();
        jtfDateBenefits = new javax.swing.JTextField();
        jtfSeniority = new javax.swing.JTextField();
        jlDateLastHire = new javax.swing.JLabel();
        jtfDateLastHire = new javax.swing.JTextField();
        jlDateLastDismiss = new javax.swing.JLabel();
        jtfDateLastDismiss = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jlFkPaymentType = new javax.swing.JLabel();
        jtfPaymentType = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moKeyAbsenceClass = new sa.lib.gui.bean.SBeanFieldKey();
        jlAbsenceClassHelp = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jlAbsenceType = new javax.swing.JLabel();
        moKeyAbsenceType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moDateDateStart = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlDateEnd = new javax.swing.JLabel();
        moDateDateEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jbGoNext = new javax.swing.JButton();
        jbGoBack = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jlBenefitAnniversary = new javax.swing.JLabel();
        jsAnniversary = new javax.swing.JSpinner();
        moIntAnniversaryYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jlBenefitAnniversaryOriginal = new javax.swing.JLabel();
        jtfAnniversaryOriginal = new javax.swing.JTextField();
        jtfAnniversaryYearOriginal = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlDaysBenefit = new javax.swing.JLabel();
        moIntDaysBenefit = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel16 = new javax.swing.JPanel();
        jlDaysScheduled = new javax.swing.JLabel();
        moIntDaysScheduled = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel19 = new javax.swing.JPanel();
        jlDaysPayed = new javax.swing.JLabel();
        moIntDaysPayed = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel10 = new javax.swing.JPanel();
        jlDaysEffective = new javax.swing.JLabel();
        moIntDaysEffective = new sa.lib.gui.bean.SBeanFieldInteger();
        jlDaysEffectiveMax = new javax.swing.JLabel();
        jtfDaysEffectiveMax = new javax.swing.JTextField();
        jlDaysEffectiveOriginal = new javax.swing.JLabel();
        jtfDaysEffectiveOriginal = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jlNotes = new javax.swing.JLabel();
        moTextNotes = new sa.lib.gui.bean.SBeanFieldText();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(15, 1, 0, 5));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployee.setForeground(new java.awt.Color(0, 0, 255));
        jlEmployee.setText("Empleado:*");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(moKeyEmployee);

        jPanel2.add(jPanel14);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBenefits.setText("Inicio prestaciones:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlDateBenefits);

        jtfDateBenefits.setEditable(false);
        jtfDateBenefits.setText("00/00/0000");
        jtfDateBenefits.setFocusable(false);
        jtfDateBenefits.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jtfDateBenefits);

        jtfSeniority.setEditable(false);
        jtfSeniority.setText("99 a, 99 m");
        jtfSeniority.setToolTipText("Antigüedad");
        jtfSeniority.setFocusable(false);
        jtfSeniority.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel17.add(jtfSeniority);

        jlDateLastHire.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlDateLastHire);

        jtfDateLastHire.setEditable(false);
        jtfDateLastHire.setText("00/00/0000");
        jtfDateLastHire.setFocusable(false);
        jtfDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jtfDateLastHire);

        jlDateLastDismiss.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateLastDismiss.setText("Última baja:");
        jlDateLastDismiss.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlDateLastDismiss);

        jtfDateLastDismiss.setEditable(false);
        jtfDateLastDismiss.setText("00/00/0000");
        jtfDateLastDismiss.setFocusable(false);
        jtfDateLastDismiss.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jtfDateLastDismiss);

        jPanel2.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkPaymentType.setText("Período pago:");
        jlFkPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlFkPaymentType);

        jtfPaymentType.setEditable(false);
        jtfPaymentType.setText("TEXT");
        jtfPaymentType.setFocusable(false);
        jtfPaymentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(jtfPaymentType);

        jPanel2.add(jPanel18);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Fecha registro:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDateDate);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setText("Clase incidencia:*");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlAbsenceClass);

        moKeyAbsenceClass.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(moKeyAbsenceClass);

        jlAbsenceClassHelp.setForeground(java.awt.Color.gray);
        jlAbsenceClassHelp.setText("TEXT");
        jlAbsenceClassHelp.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel6.add(jlAbsenceClassHelp);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceType.setText("Tipo incidencia:*");
        jlAbsenceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlAbsenceType);

        moKeyAbsenceType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyAbsenceType);

        jPanel2.add(jPanel7);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Número o folio:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlNumber);

        moTextNumber.setText("TEXT");
        moTextNumber.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel4.add(moTextNumber);

        jPanel2.add(jPanel4);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:*");
        jlDateStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlDateStart);
        jPanel8.add(moDateDateStart);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateEnd.setText("Fecha final:*");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlDateEnd);
        jPanel9.add(moDateDateEnd);

        jbGoNext.setText("Continuar");
        jbGoNext.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbGoNext.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jbGoNext);

        jbGoBack.setText("Regresar");
        jbGoBack.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbGoBack.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jbGoBack);

        jPanel2.add(jPanel9);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitAnniversary.setText("Aniversario/año:*");
        jlBenefitAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlBenefitAnniversary);

        jsAnniversary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jsAnniversary);

        moIntAnniversaryYear.setEditable(false);
        moIntAnniversaryYear.setToolTipText("Año aniversario");
        moIntAnniversaryYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(moIntAnniversaryYear);

        jlBenefitAnniversaryOriginal.setForeground(java.awt.SystemColor.textInactiveText);
        jlBenefitAnniversaryOriginal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlBenefitAnniversaryOriginal.setText("Aniversario/año originales:");
        jlBenefitAnniversaryOriginal.setPreferredSize(new java.awt.Dimension(155, 23));
        jPanel11.add(jlBenefitAnniversaryOriginal);

        jtfAnniversaryOriginal.setEditable(false);
        jtfAnniversaryOriginal.setForeground(java.awt.SystemColor.textInactiveText);
        jtfAnniversaryOriginal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnniversaryOriginal.setText("0");
        jtfAnniversaryOriginal.setToolTipText("Aniversario");
        jtfAnniversaryOriginal.setFocusable(false);
        jtfAnniversaryOriginal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfAnniversaryOriginal);

        jtfAnniversaryYearOriginal.setEditable(false);
        jtfAnniversaryYearOriginal.setForeground(java.awt.SystemColor.textInactiveText);
        jtfAnniversaryYearOriginal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnniversaryYearOriginal.setText("0");
        jtfAnniversaryYearOriginal.setToolTipText("Año aniversario");
        jtfAnniversaryYearOriginal.setFocusable(false);
        jtfAnniversaryYearOriginal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jtfAnniversaryYearOriginal);

        jPanel2.add(jPanel11);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysBenefit.setText("Días prestación:");
        jlDaysBenefit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDaysBenefit);

        moIntDaysBenefit.setEditable(false);
        moIntDaysBenefit.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(moIntDaysBenefit);

        jPanel2.add(jPanel15);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysScheduled.setText("Días programados:");
        jlDaysScheduled.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlDaysScheduled);

        moIntDaysScheduled.setEditable(false);
        moIntDaysScheduled.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(moIntDaysScheduled);

        jPanel2.add(jPanel16);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPayed.setText("Días pagados:");
        jlDaysPayed.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlDaysPayed);

        moIntDaysPayed.setEditable(false);
        moIntDaysPayed.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(moIntDaysPayed);

        jPanel2.add(jPanel19);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysEffective.setForeground(java.awt.Color.red);
        jlDaysEffective.setText("Días efectivos:*");
        jlDaysEffective.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDaysEffective);

        moIntDaysEffective.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(moIntDaysEffective);

        jlDaysEffectiveMax.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDaysEffectiveMax.setText("Valor máximo:");
        jlDaysEffectiveMax.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel10.add(jlDaysEffectiveMax);

        jtfDaysEffectiveMax.setEditable(false);
        jtfDaysEffectiveMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDaysEffectiveMax.setText("0");
        jtfDaysEffectiveMax.setFocusable(false);
        jtfDaysEffectiveMax.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDaysEffectiveMax);

        jlDaysEffectiveOriginal.setForeground(java.awt.SystemColor.textInactiveText);
        jlDaysEffectiveOriginal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlDaysEffectiveOriginal.setText("Días efectivos originales:");
        jlDaysEffectiveOriginal.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlDaysEffectiveOriginal);

        jtfDaysEffectiveOriginal.setEditable(false);
        jtfDaysEffectiveOriginal.setForeground(java.awt.SystemColor.textInactiveText);
        jtfDaysEffectiveOriginal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfDaysEffectiveOriginal.setText("0");
        jtfDaysEffectiveOriginal.setFocusable(false);
        jtfDaysEffectiveOriginal.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jtfDaysEffectiveOriginal);

        jPanel2.add(jPanel10);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNotes.setText("Notas:");
        jlNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlNotes);

        moTextNotes.setText("TEXT");
        moTextNotes.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel12.add(moTextNotes);

        jPanel2.add(jPanel12);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbGoBack;
    private javax.swing.JButton jbGoNext;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlAbsenceClassHelp;
    private javax.swing.JLabel jlAbsenceType;
    private javax.swing.JLabel jlBenefitAnniversary;
    private javax.swing.JLabel jlBenefitAnniversaryOriginal;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateLastDismiss;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDaysBenefit;
    private javax.swing.JLabel jlDaysEffective;
    private javax.swing.JLabel jlDaysEffectiveMax;
    private javax.swing.JLabel jlDaysEffectiveOriginal;
    private javax.swing.JLabel jlDaysPayed;
    private javax.swing.JLabel jlDaysScheduled;
    private javax.swing.JLabel jlEmployee;
    private javax.swing.JLabel jlFkPaymentType;
    private javax.swing.JLabel jlNotes;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JSpinner jsAnniversary;
    private javax.swing.JTextField jtfAnniversaryOriginal;
    private javax.swing.JTextField jtfAnniversaryYearOriginal;
    private javax.swing.JTextField jtfDateBenefits;
    private javax.swing.JTextField jtfDateLastDismiss;
    private javax.swing.JTextField jtfDateLastHire;
    private javax.swing.JTextField jtfDaysEffectiveMax;
    private javax.swing.JTextField jtfDaysEffectiveOriginal;
    private javax.swing.JTextField jtfPaymentType;
    private javax.swing.JTextField jtfSeniority;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDateDateStart;
    private sa.lib.gui.bean.SBeanFieldInteger moIntAnniversaryYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysBenefit;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysEffective;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysPayed;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysScheduled;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    private sa.lib.gui.bean.SBeanFieldText moTextNotes;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);

        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceClass, SModConsts.HRSU_CL_ABS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceType, SModConsts.HRSU_TP_ABS, SLibConsts.UNDEFINED, null);

        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee), true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate), true);
        moKeyAbsenceClass.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceClass), true);
        moKeyAbsenceType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceType), true);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlNumber), 10);
        moDateDateStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateStart), true);
        moDateDateEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateEnd), true);
        jsAnniversary.setModel(new SpinnerNumberModel(1, 1, 100, 1));
        moIntAnniversaryYear.setIntegerSettings("", SGuiConsts.GUI_TYPE_INT_CAL_YEAR, false);
        moIntDaysBenefit.setIntegerSettings(SGuiUtils.getLabelName(jlDaysBenefit), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysScheduled.setIntegerSettings(SGuiUtils.getLabelName(jlDaysScheduled), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysPayed.setIntegerSettings(SGuiUtils.getLabelName(jlDaysPayed), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysEffective.setIntegerSettings(SGuiUtils.getLabelName(jlDaysEffective), SGuiConsts.GUI_TYPE_INT, true);
        moTextNotes.setTextSettings(SGuiUtils.getLabelName(jlNotes), 255, 0);

        moFields.addField(moKeyEmployee);
        moFields.addField(moDateDate);
        moFields.addField(moKeyAbsenceClass);
        moFields.addField(moKeyAbsenceType);
        moFields.addField(moTextNumber);
        moFields.addField(moDateDateStart);
        moFields.addField(moDateDateEnd);
        //moFields.addField(moIntAnniversaryYear);  read-only field
        //moFields.addField(moIntDaysBenefit);      read-only field
        //moFields.addField(moIntDaysScheduled);    read-only field
        //moFields.addField(moIntDaysPayed);        read-only field
        moFields.addField(moIntDaysEffective);
        moFields.addField(moTextNotes);

        moFields.setFormButton(jbSave);
    }
    
    private boolean isVacations() {
        return moKeyAbsenceClass.getSelectedIndex() > 0 && SDbAbsenceClass.isVacations(moKeyAbsenceClass.getValue()[0]);
    }
    
    private void showEmployee() {
        if (moEmployee == null) {
            jtfDateBenefits.setText("");
            jtfSeniority.setText("");
            jtfDateLastHire.setText("");
            jtfDateLastDismiss.setText("");
            jtfPaymentType.setText("");
        }
        else {
            jtfDateBenefits.setText(SLibUtils.DateFormatDate.format(moEmployee.getDateBenefits()));
            jtfSeniority.setText(SLibTimeUtils.formatAge(moEmployee.getDateBenefits(), miClient.getSession().getSystemDate()));
            jtfDateLastHire.setText(SLibUtils.DateFormatDate.format(moEmployee.getDateLastHire()));
            jtfDateLastDismiss.setText(moEmployee.getDateLastDismissal_n() == null ? "" : SLibUtils.DateFormatDate.format(moEmployee.getDateLastDismissal_n()));
            jtfPaymentType.setText(miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { moEmployee.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME).toString());
        }
    }
    
    private void showBenefits() {
        int daysBenefit = 0;
        int daysScheduled = 0;
        int daysPayed = 0;
        
        if (!isVacations()) {
            moIntAnniversaryYear.resetField(); // updating a read-only field!
        }
        else {
            moIntAnniversaryYear.setValue(SLibTimeUtils.digestYear(moEmployee.getDateBenefits())[0] + ((Integer) jsAnniversary.getValue() - 1)); // updating a read-only field!
            
            int seniority = (Integer) jsAnniversary.getValue(); // this is the GUI control that can trigger calls to this method!
            int anniversaryYear = moIntAnniversaryYear.getValue(); // value of a read-only field
            SHrsBenefitTableAnniversary benefitTableAnniversary = null;

            try {
                for (SHrsBenefitTableAnniversary anniversary : maBenefitTableAnniversaries) {
                    if (anniversary.getBenefitAnn() <= seniority) {
                        benefitTableAnniversary = anniversary;
                    }
                    else {
                        break;
                    }
                }

                daysBenefit = benefitTableAnniversary == null ? 0 : (int) benefitTableAnniversary.getValue();
                daysScheduled = SHrsUtils.getScheduledDays(miClient.getSession(), moEmployee, seniority, anniversaryYear, moRegistry.getPkAbsenceId());
                daysPayed = SHrsUtils.getPaymentVacationsByEmployee(miClient.getSession(), moEmployee.getPkEmployeeId(), seniority, anniversaryYear);
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
        
        moIntDaysBenefit.setValue(daysBenefit);
        moIntDaysScheduled.setValue(daysScheduled);
        moIntDaysPayed.setValue(daysPayed);
    }

    private void calculateDaysEffectiveMax() {
        if (moDateDateEnd.getValue() == null || moDateDateStart.getValue() == null) {
            mnDaysEffectiveMax = 0;
        }
        else {
            mnDaysEffectiveMax = SLibTimeUtils.countPeriodDays(moDateDateStart.getValue(), moDateDateEnd.getValue());
        }
        
        jtfDaysEffectiveMax.setText(SLibUtils.DecimalFormatInteger.format(mnDaysEffectiveMax));
    }
    
    /**
     * Prepare anniversaries list for benefit table of vacations.
     * Must be called when employee and date end are already set.
     * @throws Exception 
     */
    private void prepareBenefitTableOfVacations() throws Exception {
        if (!isVacations()) {
            maBenefitTableAnniversaries = null;
        }
        else {
            SDbBenefitTable benefitTable = SHrsUtils.getBenefitTableByEarning(miClient.getSession(), mnVacationsEarningId, moEmployee.getFkPaymentTypeId(), moDateDateEnd.getValue());
            ArrayList<SDbBenefitTable> benefitTables = new ArrayList<>();
            benefitTables.add(benefitTable);
            maBenefitTableAnniversaries = SHrsUtils.createBenefitTablesAnniversaries(benefitTables);
        }
    }
    
    private void enableAbsenceFields(boolean next) {
        jbGoNext.setEnabled(!next);
        jbGoBack.setEnabled(next);
        moKeyAbsenceClass.setEnabled(!next);
        moKeyAbsenceType.setEnabled(!next);
        moDateDateStart.setEditable(!next);
        moDateDateEnd.setEditable(!next);
        jsAnniversary.setEnabled(next ? isVacations() : false);
        moIntDaysEffective.setEditable(next);
    }
    
    private void actionPerformedGoNext() {
        // Validate fields:
        
        ArrayList<SGuiField> fields = new ArrayList<>();
        fields.add(moDateDate);
        fields.add(moKeyAbsenceClass);
        fields.add(moKeyAbsenceType);
        fields.add(moDateDateStart);
        fields.add(moDateDateEnd);
        
        for (SGuiField field : fields) {
            if (!SGuiUtils.computeValidation(miClient, field.validateField())) {
                return;
            }
        }
        
        if (SGuiUtils.computeValidation(miClient, SGuiUtils.validateDateRangeIgnoreYears(moDateDateStart, moDateDateEnd))) {
            // Go next:

            enableAbsenceFields(NEXT);

            calculateDaysEffectiveMax();
            moIntDaysEffective.setValue(mnDaysEffectiveMax);

            if (!isVacations()) {
                // reset spinner:
                jsAnniversary.setValue(1);

                // ease up user input:
                moIntDaysEffective.requestFocusInWindow();
            }
            else {
                // reset spinner:
                try {
                    prepareBenefitTableOfVacations();
                    int seniority = SHrsUtils.getEmployeeSeniority(moEmployee.getDateBenefits(), moDateDateEnd.getValue());
                    jsAnniversary.setValue(seniority == 0 ? 1 : seniority);
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }

                // ease up user input:
                ((JSpinner.DefaultEditor) jsAnniversary.getEditor()).getTextField().requestFocusInWindow();
            }

            showBenefits();
        }
    }
    
    private void actionPerformedGoBack() {
        // Reset:
        
        enableAbsenceFields(BACK);
        
        moIntDaysEffective.resetField();
        jsAnniversary.setValue(1);
        showBenefits();
        
        moKeyAbsenceClass.requestFocusInWindow();
    }

    private void itemStateChangedEmployee() {
        if (moKeyEmployee.getSelectedIndex() <= 0) {
            moEmployee = null;
            moKeyAbsenceClass.setEnabled(false);
            
            moFieldKeyGroup.resetGroup();
        }
        else {
            moEmployee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { moKeyEmployee.getValue()[0] });
            moKeyAbsenceClass.setEnabled(true);
        }
        
        showEmployee();
    }
    
    private void itemStateChangedAbsenceClass() {
        if (moKeyAbsenceClass.getSelectedIndex() <= 0) {
            moKeyEmployee.setEnabled(true);
            moDateDate.setEnabled(true);
            
            moTextNumber.setEditable(false);
            moDateDateStart.setEditable(false);
            moDateDateEnd.setEditable(false);
            moDateDateEnd.setNextButton(null);
            
            moTextNumber.resetField();
            moDateDateStart.resetField();
            moDateDateEnd.resetField();
            
            jbGoNext.setEnabled(false);
            
            jlAbsenceClassHelp.setText("");
        }
        else {
            moKeyEmployee.setEnabled(false);
            moDateDate.setEnabled(false);
            
            moTextNumber.setEditable(true);
            moDateDateStart.setEditable(true);
            moDateDateEnd.setEditable(true);
            moDateDateEnd.setNextButton(jbGoNext);
            
            jbGoNext.setEnabled(true);
            
            jlAbsenceClassHelp.setText("¡Se consume mediante días " + (SDbAbsenceClass.consumesCalendarDays(moKeyAbsenceClass.getValue()[0]) ? SDbAbsenceClass.CALENDAR : SDbAbsenceClass.BUSINESS) + "!");
        }
    }
    
    private void stateChangedAnniversary() {
        showBenefits();
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public void addAllListeners() {
        jbGoNext.addActionListener(this);
        jbGoBack.addActionListener(this);
        moKeyEmployee.addItemListener(this);
        moKeyAbsenceClass.addItemListener(this);
        
        jsAnniversary.getEditor().addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                System.out.println("keyTyped!");
            }

            @Override
            public void keyPressed(KeyEvent e) {
                System.out.println("keyPressed!");
            }

            @Override
            public void keyReleased(KeyEvent e) {
                System.out.println("keyReleaed!");
            }
        });
        jsAnniversary.addChangeListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbGoNext.removeActionListener(this);
        jbGoBack.removeActionListener(this);
        moKeyEmployee.removeItemListener(this);
        moKeyAbsenceClass.removeItemListener(this);
        jsAnniversary.removeChangeListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmployee, SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        SDbConfig config = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });
        
        if (config.getFkEarningVacationId_n() == SLibConsts.UNDEFINED) {
            throw new Exception("La percepción vacaciones no ha sido especificada en la configuración del módulo.");
        }
        else {
            mnVacationsEarningId = config.getFkEarningVacationId_n();
        }
        
        moRegistry = (SDbAbsence) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            int id = moRegistry.getPkEmployeeId();  // preserve
            moRegistry.initPrimaryKey();
            moRegistry.setPkEmployeeId(id);
            moRegistry.setDate(miClient.getSession().getCurrentDate());
            jtfRegistryKey.setText("");
            
            // clear original info:
            jlBenefitAnniversaryOriginal.setEnabled(false);
            jtfAnniversaryOriginal.setText("");
            jtfAnniversaryYearOriginal.setText("");
            jtfDaysEffectiveOriginal.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            
            // preserve original info:
            jlBenefitAnniversaryOriginal.setEnabled(true);
            jtfAnniversaryOriginal.setText("" + moRegistry.getBenefitsAnniversary());
            jtfAnniversaryYearOriginal.setText("" + moRegistry.getBenefitsYear());
            jtfDaysEffectiveOriginal.setText("" + moRegistry.getEffectiveDays());
        }

        if (moRegistry.isRegistryNew()) {
            enableAbsenceFields(BACK);
        }
        
        setFormEditable(true);
        
        moKeyEmployee.setValue(new int[] { moRegistry.getPkEmployeeId() });
        itemStateChangedEmployee();
        moDateDate.setValue(moRegistry.getDate());
        moKeyAbsenceClass.setValue(moRegistry.getAbsenceClassKey());
        itemStateChangedAbsenceClass();
        moKeyAbsenceType.setValue(moRegistry.getAbsenceTypeKey());
        moTextNumber.setValue(moRegistry.getNumber());
        moDateDateStart.setValue(moRegistry.getDateStart());
        moDateDateEnd.setValue(moRegistry.getDateEnd());
        calculateDaysEffectiveMax();

        if (!moRegistry.isRegistryNew()) {
            enableAbsenceFields(NEXT);
        }
        
        prepareBenefitTableOfVacations();
        jsAnniversary.setValue((Integer) moRegistry.getBenefitsAnniversary() == 0 ? (Integer) 1 : (Integer) moRegistry.getBenefitsAnniversary());
        showBenefits();
        moIntDaysEffective.setValue(moRegistry.getEffectiveDays());
        moTextNotes.setValue(moRegistry.getNotes());

        //setFormEditable(true);    // it is a really mess attempting to execute this statement, as usual on all other forms of this framework

        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbAbsence registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkEmployeeId(moKeyEmployee.getValue()[0]);
            registry.setFkUserClosedId(SUtilConsts.USR_NA_ID);
        }

        registry.setNumber(moTextNumber.getValue());
        registry.setDate(moDateDate.getValue());
        registry.setDateStart(moDateDateStart.getValue());
        registry.setDateEnd(moDateDateEnd.getValue());
        registry.setEffectiveDays(moIntDaysEffective.getValue());
        registry.setBenefitsAnniversary(!isVacations() ? 0 : (Integer) jsAnniversary.getValue());
        registry.setBenefitsYear(!isVacations() ? 0 : moIntAnniversaryYear.getValue());
        registry.setNotes(moTextNotes.getValue());
        //registry.setClosed(moBoolClosed.getValue());  // not editable from this context
        registry.setFkAbsenceClassId(moKeyAbsenceType.getValue()[0]);
        registry.setFkAbsenceTypeId(moKeyAbsenceType.getValue()[1]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            validation = SGuiUtils.validateDateRangeIgnoreYears(moDateDateStart, moDateDateEnd);
            
            if (validation.isValid()) {
                if (!moIntDaysEffective.isEditable()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlDaysEffective) + "' no es editable.");
                    validation.setComponent(jbGoNext);
                }
                else if (moIntDaysEffective.getValue() > mnDaysEffectiveMax) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlDaysEffective) + "' (" + moIntDaysEffective.getValue() + ")" + SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "" + mnDaysEffectiveMax + ".");
                    validation.setComponent(moIntDaysEffective);
                }
                else {
                    if (SDbAbsenceClass.consumesCalendarDays(moKeyAbsenceClass.getValue()[0])) {
                        if (moIntDaysEffective.getValue() != mnDaysEffectiveMax) {
                            msg = SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlDaysEffective) + "' (" + moIntDaysEffective.getValue() + ")" + SGuiConsts.ERR_MSG_FIELD_VAL_EQUAL + mnDaysEffectiveMax + ", pero son distintos.";

                            if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + SGuiUtils.getLabelName(jlDaysEffective));
                                validation.setComponent(moIntDaysEffective);
                            }
                        }
                    }
                    else if (isVacations()) {
                        if ((moIntDaysEffective.getValue() + moIntDaysScheduled.getValue()) > moIntDaysBenefit.getValue()) {
                            msg = "La suma de '" + SGuiUtils.getLabelName(jlDaysScheduled) + "' + '" + SGuiUtils.getLabelName(jlDaysEffective) + "' es mayor a '" + SGuiUtils.getLabelName(jlDaysBenefit) + "'.";

                            if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + SGuiUtils.getLabelName(jlDaysEffective));
                                validation.setComponent(moIntDaysEffective);
                            }
                        }

                        if (validation.isValid()) {
                            if ((moIntDaysEffective.getValue() + moIntDaysPayed.getValue()) > moIntDaysBenefit.getValue()) {
                                msg = "La suma de '" + SGuiUtils.getLabelName(jlDaysPayed) + "' + '" + SGuiUtils.getLabelName(jlDaysEffective) + "' es mayor a '" + SGuiUtils.getLabelName(jlDaysBenefit) + "'.";

                                if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + SGuiUtils.getLabelName(jlDaysEffective));
                                    validation.setComponent(moIntDaysEffective);
                                }
                            }
                        }
                    }

                    if (validation.isValid()) {
                        // validate that period of this absence does not overlap with other employee's absences:
                        try {
                            ArrayList<SDbAbsence> absences = SHrsUtils.getEmployeeAbsences(miClient.getSession(), moKeyEmployee.getValue()[0]);
                            for (SDbAbsence absence : absences) {
                                if (!SLibUtils.compareKeys(absence.getPrimaryKey(), moRegistry.getPrimaryKey())) { // skip this absence
                                    if (SLibTimeUtils.isBelongingToPeriod(moDateDateStart.getValue(), moDateDateEnd.getValue(), absence.getDateStart(), absence.getDateEnd())) {
                                        validation.setMessage("El periodo de esta ausencia (" + SLibUtils.DateFormatDate.format(moDateDateStart.getValue()) + " - " + SLibUtils.DateFormatDate.format(moDateDateEnd.getValue()) + ") "
                                                + "se traslapa con el de la ausencia '" + absence.composeAbsenceDescription() + "'.");
                                        validation.setComponent(moDateDateStart); // even though this field is non-editable, set focus on it
                                    }
                                }
                            }
                        }
                        catch (Exception e) {
                            validation.setMessage(e.getMessage());
                        }
                    }
                    
                    if (validation.isValid() && isVacations()) {
                        // validate that absences are all scheduled in chronological order, without gaps between anniversaries:
                        
                        int maxAnniversary = (Integer) jsAnniversary.getValue(); // this is the GUI control that can trigger calls to this method!
                        int anniversaryYear = SLibTimeUtils.digestYear(moEmployee.getDateBenefits())[0];
                        
                        try {
                            for (SHrsBenefitTableAnniversary anniversary : maBenefitTableAnniversaries) {
                                if (anniversary.getBenefitAnn() < maxAnniversary) {
                                    int daysPayed = SHrsUtils.getPaymentVacationsByEmployee(miClient.getSession(), moEmployee.getPkEmployeeId(), anniversary.getBenefitAnn(), anniversaryYear);
                                    int daysToPay = (int) anniversary.getValue() - daysPayed;
                                    int daysScheduled = SHrsUtils.getScheduledDays(miClient.getSession(), moEmployee, anniversary.getBenefitAnn(), anniversaryYear, moRegistry.getPkAbsenceId());
                                    int daysToSchedule = (int) anniversary.getValue() - daysScheduled;
                                    
                                    if (daysToPay > 0) {
                                        String baseMessage = "En el aniversario " + anniversary.getBenefitAnn() + " del empleado " + moEmployee.getXtaEmployeeName() + ",\n"
                                                + "correspondiente al año " + anniversaryYear + ", de un total de " + ((int) anniversary.getValue()) + " días de vacaciones,\n";
                                        if (daysToSchedule > 0) {
                                            if (miClient.showMsgBoxConfirm(baseMessage
                                                    + (daysToPay == 1 ? "queda 1 día" : "quedan " + daysToPay + " días") + " de vacaciones por pagar, y\n"
                                                    + (daysToSchedule == 1 ? "queda 1 día" : "quedan " + daysToSchedule + " días") + " de vacaciones por programar.\n"
                                                    + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                                                throw new Exception("Se debería programar y pagar las vacaciones de aniversarios previos del empleado " + moEmployee.getXtaEmployeeName() + ".");
                                            }
                                        }
                                        else {
                                            if (miClient.showMsgBoxConfirm(baseMessage
                                                    + (daysToPay == 1 ? "queda 1 día" : "quedan " + daysToPay + " días") + " de vacaciones por pagar.\n"
                                                    + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                                                throw new Exception("Se debería pagar las vacaciones de aniversarios previos del empleado " + moEmployee.getXtaEmployeeName() + ".");
                                            }
                                        }
                                    }
                                    
                                    anniversaryYear++;
                                }
                                else {
                                    break;
                                }
                            }
                        }
                        catch (Exception e) {
                            validation.setMessage(e.getMessage());
                        }
                    }
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbGoNext) {
                actionPerformedGoNext();
            }
            else if (button == jbGoBack) {
                actionPerformedGoBack();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyEmployee) {
                itemStateChangedEmployee();
            }
            else if (field == moKeyAbsenceClass) {
                itemStateChangedAbsenceClass();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsAnniversary) {
                stateChangedAnniversary();
            }
        }
    }
}
