/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbAbsence;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SRowAbsenceMovesCardex;
import java.awt.BorderLayout;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Vector;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogAbsenceMovesCardex extends SBeanFormDialog {
    protected SDbAbsence moAbsence;
    private SGridPaneForm moGridAbsenceMoves;
    private int mnEffectiveDays;

    /**
     * Creates new form SDialogAbsenceMovesCardex
     * @param client
     * @param title
     */
    public SDialogAbsenceMovesCardex(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSX_ABS_MOV, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlEmployeeName = new javax.swing.JLabel();
        moTextEmployeeName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel2 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moTextAbsenceClass = new sa.lib.gui.bean.SBeanFieldText();
        jlAbsenceType = new javax.swing.JLabel();
        moTextAbsenceType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel10 = new javax.swing.JPanel();
        jlDateStart = new javax.swing.JLabel();
        moTextDateStart = new sa.lib.gui.bean.SBeanFieldText();
        jlDummy = new javax.swing.JLabel();
        jlDateEnd = new javax.swing.JLabel();
        moTextDateEnd = new sa.lib.gui.bean.SBeanFieldText();
        jPanel6 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlEffectiveDays = new javax.swing.JLabel();
        moIntEffectiveDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel13 = new javax.swing.JPanel();
        jlAppliedDays = new javax.swing.JLabel();
        moIntAppliedDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel14 = new javax.swing.JPanel();
        jlApplyDays = new javax.swing.JLabel();
        moIntApplyDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jpPayments = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Incidencia:"));
        jPanel4.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeName.setText("Empleado:");
        jlEmployeeName.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlEmployeeName);

        moTextEmployeeName.setText("sBeanFieldText2");
        moTextEmployeeName.setPreferredSize(new java.awt.Dimension(385, 23));
        jPanel7.add(moTextEmployeeName);

        jPanel4.add(jPanel7);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setText("Clase incidencia:");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel2.add(jlAbsenceClass);

        moTextAbsenceClass.setText("sBeanFieldText1");
        moTextAbsenceClass.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(moTextAbsenceClass);

        jlAbsenceType.setText("Tipo incidencia:");
        jlAbsenceType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlAbsenceType);

        moTextAbsenceType.setText("sBeanFieldText1");
        moTextAbsenceType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel2.add(moTextAbsenceType);

        jPanel4.add(jPanel2);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateStart.setText("Fecha inicial:");
        jlDateStart.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlDateStart);

        moTextDateStart.setText("sBeanFieldText7");
        moTextDateStart.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel10.add(moTextDateStart);

        jlDummy.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel10.add(jlDummy);

        jlDateEnd.setText("Fecha final:");
        jlDateEnd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel10.add(jlDateEnd);

        moTextDateEnd.setText("sBeanFieldText7");
        moTextDateEnd.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel10.add(moTextDateEnd);

        jPanel4.add(jPanel10);

        jPanel12.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("DÃ­as:"));
        jPanel6.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEffectiveDays.setText("Efectivos:");
        jlEffectiveDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jlEffectiveDays.setRequestFocusEnabled(false);
        jPanel11.add(jlEffectiveDays);
        jPanel11.add(moIntEffectiveDays);

        jPanel6.add(jPanel11);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAppliedDays.setText("Aplicados:");
        jlAppliedDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jlAppliedDays.setRequestFocusEnabled(false);
        jPanel13.add(jlAppliedDays);
        jPanel13.add(moIntAppliedDays);

        jPanel6.add(jPanel13);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlApplyDays.setText("Por aplicar:");
        jlApplyDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jlApplyDays.setRequestFocusEnabled(false);
        jPanel14.add(jlApplyDays);
        jPanel14.add(moIntApplyDays);

        jPanel6.add(jPanel14);

        jPanel12.add(jPanel6, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel12, java.awt.BorderLayout.NORTH);

        jpPayments.setBorder(javax.swing.BorderFactory.createTitledBorder("Movimientos de la incidencia:"));
        jpPayments.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jpPayments, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
       actionSave();
    }//GEN-LAST:event_closeDialog
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlAbsenceType;
    private javax.swing.JLabel jlAppliedDays;
    private javax.swing.JLabel jlApplyDays;
    private javax.swing.JLabel jlDateEnd;
    private javax.swing.JLabel jlDateStart;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlEffectiveDays;
    private javax.swing.JLabel jlEmployeeName;
    private javax.swing.JPanel jpPayments;
    private sa.lib.gui.bean.SBeanFieldInteger moIntAppliedDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntApplyDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntEffectiveDays;
    private sa.lib.gui.bean.SBeanFieldText moTextAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldText moTextAbsenceType;
    private sa.lib.gui.bean.SBeanFieldText moTextDateEnd;
    private sa.lib.gui.bean.SBeanFieldText moTextDateStart;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        jbSave.setText("Cerrar");
        jbCancel.setEnabled(false);

        moTextEmployeeName.setTextSettings(SGuiUtils.getLabelName(jlEmployeeName), 150);
        moTextAbsenceClass.setTextSettings(SGuiUtils.getLabelName(jlAbsenceClass), 150);
        moTextAbsenceType.setTextSettings(SGuiUtils.getLabelName(jlAbsenceType), 150);
        moTextDateStart.setTextSettings(SGuiUtils.getLabelName(jlDateStart.getText()), 25);
        moTextDateEnd.setTextSettings(SGuiUtils.getLabelName(jlDateEnd.getText()), 25);
        moIntEffectiveDays.setIntegerSettings(SGuiUtils.getLabelName(jlEffectiveDays), SGuiConsts.GUI_TYPE_INT, false);
        moIntAppliedDays.setIntegerSettings(SGuiUtils.getLabelName(jlAppliedDays), SGuiConsts.GUI_TYPE_INT, false);
        moIntApplyDays.setIntegerSettings(SGuiUtils.getLabelName(jlApplyDays), SGuiConsts.GUI_TYPE_INT, false);
        
        /*
        moFields.addField(moTextEmployeeName);
        moFields.addField(moTextLoanType);
        moFields.addField(moTextLoanPaymentType);
        moFields.addField(moTextDateStart);
        moFields.addField(moTextDateEnd);
        moFields.addField(moDateDateCutOff);
        moFields.addField(moIntEffectiveDays);
        moFields.addField(moIntAppliedDays);
        moFields.addField(moIntApplyDays);
        */

        moGridAbsenceMoves = new SGridPaneForm(miClient, SModConsts.HRSX_ABS_MOV, SLibConsts.UNDEFINED, "Movimientos incidencia") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_YEAR, "Ejercicio", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_CAL_MONTH, "PerÃ­odo", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Tipo nÃ³mina", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "No. nÃ³mina", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha inicial"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha final"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_4B, "DÃ­as aplicados"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS nvo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usr mod"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Usr TS mod"));

                return gridColumnsForm;
            }
        };

        jpPayments.add(moGridAbsenceMoves, BorderLayout.CENTER);
        
        moTextEmployeeName.setEditable(false);
        moTextAbsenceClass.setEditable(false);
        moTextAbsenceType.setEditable(false);
        moTextDateStart.setEditable(false);
        moTextDateEnd.setEditable(false);
        moIntEffectiveDays.setEditable(false);
        moIntAppliedDays.setEditable(false);
        moIntApplyDays.setEditable(false);
        
        reloadCatalogues();
        addAllListeners();
    }

    @SuppressWarnings("unchecked")
    private void showAbsenceMoves() {
        int in = 0;
        double out = 0;
        int appliedDays = 0;
        Vector<SGridRow> rows = new Vector<>();
        String sql = "";
        ResultSet resultSet = null;

        try {
            sql = "SELECT p.per_year, p.per AS f_period, tp_pay.name AS f_tp_pay, p.num AS f_num, p.dt_sta, p.dt_end, bp.id_bp, bp.bp, rcp_abs.eff_day AS f_in, 0 AS f_out, " +
                    "rcp_abs.ts_usr_ins AS ts_usr_ins, rcp_abs.ts_usr_upd AS ts_usr_upd, ui.usr AS f_usr_ins, uu.usr AS f_usr_upd " +
                    "FROM " + SModConsts.TablesMap.get(SModConsts.HRS_PAY) + " AS p " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSS_TP_PAY) + " AS tp_pay ON tp_pay.id_tp_pay = p.fk_tp_pay " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_PAY_RCP) + " AS rcp ON rcp.id_pay = p.id_pay " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_ABS_CNS) + " AS rcp_abs ON rcp_abs.fk_rcp_pay = rcp.id_pay AND rcp_abs.fk_rcp_emp = rcp.id_emp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_ABS) + " AS abs ON abs.id_emp = rcp_abs.id_emp AND abs.id_abs = rcp_abs.id_abs " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSU_CL_ABS) + " AS cl_abs ON cl_abs.id_cl_abs = abs.fk_cl_abs " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSU_TP_ABS) + " AS tp_abs ON tp_abs.id_cl_abs = abs.fk_cl_abs AND tp_abs.id_tp_abs = abs.fk_tp_abs " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS emp ON emp.id_emp = rcp.id_emp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS bp ON bp.id_bp = emp.id_emp " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.USRU_USR) + " AS ui ON rcp_abs.fk_usr_ins = ui.id_usr " +
                    "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.USRU_USR) + " AS uu ON rcp_abs.fk_usr_upd = uu.id_usr " +
                    "WHERE NOT p.b_del AND NOT rcp.b_del AND NOT rcp_abs.b_del AND " +
                    "abs.id_abs = " + moAbsence.getPkAbsenceId() + " AND abs.id_emp = " + moAbsence.getPkEmployeeId() + " " +
                    "ORDER BY per_year, f_period, f_tp_pay, f_num, dt_sta, dt_end, id_bp, bp ";

            resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowAbsenceMovesCardex row = new SRowAbsenceMovesCardex();
                row.setYear(resultSet.getInt("per_year"));
                row.setPeriod(resultSet.getInt("f_period"));
                row.setPayrollType(resultSet.getString("f_tp_pay"));
                row.setNumber(resultSet.getString("f_num"));
                row.setDateStart(resultSet.getDate("dt_sta"));
                row.setDateEnd(resultSet.getDate("dt_end"));

                appliedDays += in = resultSet.getInt("f_in");

                row.setDays(in);
                row.setPayment(out);
                row.setUserInsert(resultSet.getString("f_usr_ins"));
                row.setDateUserInsert(resultSet.getTimestamp("ts_usr_ins"));
                row.setUserUpdate(resultSet.getString("f_usr_upd"));
                row.setDateUserUpdate(resultSet.getTimestamp("ts_usr_upd"));

                rows.add(row);
            }
            
            moIntAppliedDays.setValue(appliedDays);
            moIntApplyDays.setValue(mnEffectiveDays - appliedDays);

            moGridAbsenceMoves.populateGrid(rows);
            moGridAbsenceMoves.clearSortKeys();
            moGridAbsenceMoves.setSelectedGridRow(0);
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void initAbsence() {
        SDbEmployee employee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { moAbsence.getPkEmployeeId() });
        
        moTextEmployeeName.setValue(employee.getXtaEmployeeName());
        moTextAbsenceClass.setValue(moAbsence.getXtaAbsenceClass());
        moTextAbsenceType.setValue(moAbsence.getXtaAbsenceType());
        moTextDateStart.setValue(SLibUtils.DateFormatDate.format(moAbsence.getDateStart()));
        moTextDateEnd.setValue(moAbsence.getDateEnd() == null ? "" : SLibUtils.DateFormatDate.format(moAbsence.getDateEnd()));
        moIntEffectiveDays.setValue(mnEffectiveDays = moAbsence.getEffectiveDays());
        
        showAbsenceMoves();
    }
    
    @Override
    public void addAllListeners() {
    }

    @Override
    public void removeAllListeners() {
    }

    @Override
    public void reloadCatalogues() {
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SModConsts.HRS_ABS:
                moAbsence = (SDbAbsence) value;
                initAbsence();
                break;
            default:
                break;
        }
    }

    @Override
    public Object getValue(final int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
