/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SDbEmployeeBenefitTables;
import erp.mod.hrs.db.SHrsBenefitUtils;
import erp.mod.hrs.db.SRowBenefitTablesMassiveAssignation;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFieldRadio;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SDialogBenefitTablesMassiveAssignation extends SBeanFormDialog implements ActionListener, ItemListener {
    
    protected static final int MODE_CONFIG = 1;
    protected static final int MODE_ASSIGN = 2;
    
    protected SGridPaneForm moEmployeesGrid;
    protected SGuiFields moUpdateFields;
    
    protected int mnMode;
    protected int mnEmployeesTotal;
    protected int mnEmployeesFiltered;
    protected int mnEmployeesUnset;
    protected int mnEmployeesSet;

    /**
     * Creates new form SDialogBenefitTablesMassiveUpdate.
     */
    public SDialogBenefitTablesMassiveAssignation(SGuiClient client) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, 0, 0, "Actualización masiva de prestaciones");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgStatus = new javax.swing.ButtonGroup();
        bgUnion = new javax.swing.ButtonGroup();
        bgMode = new javax.swing.ButtonGroup();
        bgUpdate = new javax.swing.ButtonGroup();
        jpMain = new javax.swing.JPanel();
        jpSettings = new javax.swing.JPanel();
        jpSettings1 = new javax.swing.JPanel();
        jpSettings11 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        moKeyBenefitType = new sa.lib.gui.bean.SBeanFieldKey();
        jpSettings12 = new javax.swing.JPanel();
        jlBenefitTable = new javax.swing.JLabel();
        moKeyBenefitTable = new sa.lib.gui.bean.SBeanFieldKey();
        jpSettings13 = new javax.swing.JPanel();
        jlBenefitPeriod = new javax.swing.JLabel();
        jtfBenefitPeriod = new javax.swing.JTextField();
        jpSettings14 = new javax.swing.JPanel();
        jlBenefitPaymentType = new javax.swing.JLabel();
        jtfBenefitPaymentType = new javax.swing.JTextField();
        jtfBenefitUnionized = new javax.swing.JTextField();
        jpSettings15 = new javax.swing.JPanel();
        jpSettings2 = new javax.swing.JPanel();
        jpSettings21 = new javax.swing.JPanel();
        jlFilterPaymentType = new javax.swing.JLabel();
        moKeyFilterPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jlFilterPaymentTypeHelp = new javax.swing.JLabel();
        jpSettings22 = new javax.swing.JPanel();
        jlFilterStatus = new javax.swing.JLabel();
        moRadFilterStatusActive = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadFilterStatusInactive = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadFilterStatusAll = new sa.lib.gui.bean.SBeanFieldRadio();
        jlFilterStatusHelp = new javax.swing.JLabel();
        jpSettings23 = new javax.swing.JPanel();
        jlFilterUnion = new javax.swing.JLabel();
        moRadFilterUnionNonUnionized = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadFilterUnionUnionized = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadFilterUnionAll = new sa.lib.gui.bean.SBeanFieldRadio();
        jlFilterUnionHelp = new javax.swing.JLabel();
        jpSettings24 = new javax.swing.JPanel();
        jlUpdateMode = new javax.swing.JLabel();
        moRadModeBenefits = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadModeAssignation = new sa.lib.gui.bean.SBeanFieldRadio();
        moDateAssignation = new sa.lib.gui.bean.SBeanFieldDate();
        jlUpdateModeHelp = new javax.swing.JLabel();
        jpSettings25 = new javax.swing.JPanel();
        jlUpdateModeAssignationRestrict = new javax.swing.JLabel();
        moBoolUpdateModeAssignationRestrict = new sa.lib.gui.bean.SBeanFieldBoolean();
        jpSettings26 = new javax.swing.JPanel();
        jbContinue = new javax.swing.JButton();
        jbRestart = new javax.swing.JButton();
        jlDummy1 = new javax.swing.JLabel();
        jlUpdateModeHelpComp = new javax.swing.JLabel();
        jpEmployees = new javax.swing.JPanel();
        jpEmployeesGrid = new javax.swing.JPanel();
        jpEmployeesStats = new javax.swing.JPanel();
        jpEmployeesStats1 = new javax.swing.JPanel();
        jpEmployeesStats11 = new javax.swing.JPanel();
        jlStatsAssignationYear = new javax.swing.JLabel();
        jtfStatsAssignationYear = new javax.swing.JTextField();
        jpEmployeesStats12 = new javax.swing.JPanel();
        jlStatsEmployeesTotal = new javax.swing.JLabel();
        jtfStatsEmployeesTotal = new javax.swing.JTextField();
        jpEmployeesStats13 = new javax.swing.JPanel();
        jlStatsEmployeesFiltered = new javax.swing.JLabel();
        jtfStatsEmployeesFiltered = new javax.swing.JTextField();
        jpEmployeesStats14 = new javax.swing.JPanel();
        jlStatsEmployeesUnset = new javax.swing.JLabel();
        jtfStatsEmployeesUnset = new javax.swing.JTextField();
        jpEmployeesStats15 = new javax.swing.JPanel();
        jlStatsEmployeesSet = new javax.swing.JLabel();
        jtfStatsEmployeesSet = new javax.swing.JTextField();
        jpUpdateOptions = new javax.swing.JPanel();
        jpUpdateOptions1 = new javax.swing.JPanel();
        moRadUpdateUnset = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadUpdateSet = new sa.lib.gui.bean.SBeanFieldRadio();
        moRadUpdateAll = new sa.lib.gui.bean.SBeanFieldRadio();

        jpMain.setLayout(new java.awt.BorderLayout());

        jpSettings.setLayout(new java.awt.BorderLayout(5, 0));

        jpSettings1.setBorder(javax.swing.BorderFactory.createTitledBorder("Prestación a asignar:"));
        jpSettings1.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jpSettings11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setText("Tipo prestación:*");
        jlBenefitType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings11.add(jlBenefitType);

        moKeyBenefitType.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSettings11.add(moKeyBenefitType);

        jpSettings1.add(jpSettings11);

        jpSettings12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitTable.setText("Prestación:*");
        jlBenefitTable.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings12.add(jlBenefitTable);

        moKeyBenefitTable.setPreferredSize(new java.awt.Dimension(250, 23));
        jpSettings12.add(moKeyBenefitTable);

        jpSettings1.add(jpSettings12);

        jpSettings13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitPeriod.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jlBenefitPeriod.setText("Período vigencia:");
        jlBenefitPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings13.add(jlBenefitPeriod);

        jtfBenefitPeriod.setEditable(false);
        jtfBenefitPeriod.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jtfBenefitPeriod.setText("01/01/2001 - 01/01/2001");
        jtfBenefitPeriod.setFocusable(false);
        jtfBenefitPeriod.setPreferredSize(new java.awt.Dimension(150, 23));
        jpSettings13.add(jtfBenefitPeriod);

        jpSettings1.add(jpSettings13);

        jpSettings14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitPaymentType.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jlBenefitPaymentType.setText("Período pago:");
        jlBenefitPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings14.add(jlBenefitPaymentType);

        jtfBenefitPaymentType.setEditable(false);
        jtfBenefitPaymentType.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jtfBenefitPaymentType.setText("TEXT");
        jtfBenefitPaymentType.setFocusable(false);
        jtfBenefitPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings14.add(jtfBenefitPaymentType);

        jtfBenefitUnionized.setEditable(false);
        jtfBenefitUnionized.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jtfBenefitUnionized.setText("TEXT");
        jtfBenefitUnionized.setToolTipText("Situación sindical");
        jtfBenefitUnionized.setFocusable(false);
        jtfBenefitUnionized.setPreferredSize(new java.awt.Dimension(145, 23));
        jpSettings14.add(jtfBenefitUnionized);

        jpSettings1.add(jpSettings14);

        jpSettings15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jpSettings1.add(jpSettings15);

        jpSettings.add(jpSettings1, java.awt.BorderLayout.WEST);

        jpSettings2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro y modo de asignación:"));
        jpSettings2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jpSettings21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFilterPaymentType.setText("Período pago:");
        jlFilterPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings21.add(jlFilterPaymentType);

        moKeyFilterPaymentType.setPreferredSize(new java.awt.Dimension(255, 23));
        jpSettings21.add(moKeyFilterPaymentType);

        jlFilterPaymentTypeHelp.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jlFilterPaymentTypeHelp.setText("(Ayuda período pago)");
        jlFilterPaymentTypeHelp.setPreferredSize(new java.awt.Dimension(175, 23));
        jpSettings21.add(jlFilterPaymentTypeHelp);

        jpSettings2.add(jpSettings21);

        jpSettings22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFilterStatus.setText("Estatus laboral:*");
        jlFilterStatus.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings22.add(jlFilterStatus);

        bgStatus.add(moRadFilterStatusActive);
        moRadFilterStatusActive.setText("Activo");
        moRadFilterStatusActive.setPreferredSize(new java.awt.Dimension(80, 23));
        jpSettings22.add(moRadFilterStatusActive);

        bgStatus.add(moRadFilterStatusInactive);
        moRadFilterStatusInactive.setText("Inactivo");
        moRadFilterStatusInactive.setPreferredSize(new java.awt.Dimension(90, 23));
        jpSettings22.add(moRadFilterStatusInactive);

        bgStatus.add(moRadFilterStatusAll);
        moRadFilterStatusAll.setText("Indistinto");
        moRadFilterStatusAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jpSettings22.add(moRadFilterStatusAll);

        jlFilterStatusHelp.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jlFilterStatusHelp.setText("(Ayuda estatus laboral)");
        jlFilterStatusHelp.setPreferredSize(new java.awt.Dimension(175, 23));
        jpSettings22.add(jlFilterStatusHelp);

        jpSettings2.add(jpSettings22);

        jpSettings23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFilterUnion.setText("Situación sindical:*");
        jlFilterUnion.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings23.add(jlFilterUnion);

        bgUnion.add(moRadFilterUnionNonUnionized);
        moRadFilterUnionNonUnionized.setText("Confianza");
        moRadFilterUnionNonUnionized.setPreferredSize(new java.awt.Dimension(80, 23));
        jpSettings23.add(moRadFilterUnionNonUnionized);

        bgUnion.add(moRadFilterUnionUnionized);
        moRadFilterUnionUnionized.setText("Sindicalizado");
        moRadFilterUnionUnionized.setPreferredSize(new java.awt.Dimension(90, 23));
        jpSettings23.add(moRadFilterUnionUnionized);

        bgUnion.add(moRadFilterUnionAll);
        moRadFilterUnionAll.setText("Indistinto");
        moRadFilterUnionAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jpSettings23.add(moRadFilterUnionAll);

        jlFilterUnionHelp.setForeground(javax.swing.UIManager.getDefaults().getColor("textInactiveText"));
        jlFilterUnionHelp.setText("(Ayuda situación sindical)");
        jlFilterUnionHelp.setPreferredSize(new java.awt.Dimension(175, 23));
        jpSettings23.add(jlFilterUnionHelp);

        jpSettings2.add(jpSettings23);

        jpSettings24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUpdateMode.setText("Modo asignación:*");
        jlUpdateMode.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings24.add(jlUpdateMode);

        bgMode.add(moRadModeBenefits);
        moRadModeBenefits.setText("Inicio prestaciones");
        moRadModeBenefits.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSettings24.add(moRadModeBenefits);

        bgMode.add(moRadModeAssignation);
        moRadModeAssignation.setText("Fecha asignación");
        moRadModeAssignation.setPreferredSize(new java.awt.Dimension(115, 23));
        jpSettings24.add(moRadModeAssignation);
        jpSettings24.add(moDateAssignation);

        jlUpdateModeHelp.setForeground(java.awt.SystemColor.textInactiveText);
        jlUpdateModeHelp.setText("(¿Desde cuándo?)");
        jlUpdateModeHelp.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings24.add(jlUpdateModeHelp);

        jpSettings2.add(jpSettings24);

        jpSettings25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUpdateModeAssignationRestrict.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings25.add(jlUpdateModeAssignationRestrict);

        moBoolUpdateModeAssignationRestrict.setText("Sólo empleados con inicio de prestaciones hasta la fecha de asignación");
        moBoolUpdateModeAssignationRestrict.setPreferredSize(new java.awt.Dimension(400, 23));
        jpSettings25.add(moBoolUpdateModeAssignationRestrict);

        jpSettings2.add(jpSettings25);

        jpSettings26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jbContinue.setText("Continuar");
        jbContinue.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings26.add(jbContinue);

        jbRestart.setText("Reiniciar");
        jbRestart.setPreferredSize(new java.awt.Dimension(100, 23));
        jpSettings26.add(jbRestart);

        jlDummy1.setPreferredSize(new java.awt.Dimension(10, 23));
        jpSettings26.add(jlDummy1);

        jlUpdateModeHelpComp.setForeground(java.awt.SystemColor.textInactiveText);
        jlUpdateModeHelpComp.setText("(Ayuda modo asignación)");
        jlUpdateModeHelpComp.setPreferredSize(new java.awt.Dimension(300, 23));
        jpSettings26.add(jlUpdateModeHelpComp);

        jpSettings2.add(jpSettings26);

        jpSettings.add(jpSettings2, java.awt.BorderLayout.CENTER);

        jpMain.add(jpSettings, java.awt.BorderLayout.NORTH);

        jpEmployees.setLayout(new java.awt.BorderLayout(5, 0));

        jpEmployeesGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados filtrados:"));
        jpEmployeesGrid.setLayout(new java.awt.BorderLayout());
        jpEmployees.add(jpEmployeesGrid, java.awt.BorderLayout.CENTER);

        jpEmployeesStats.setLayout(new java.awt.BorderLayout());

        jpEmployeesStats1.setBorder(javax.swing.BorderFactory.createTitledBorder("Estadísticas de filtrado:"));
        jpEmployeesStats1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jpEmployeesStats11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatsAssignationYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlStatsAssignationYear.setText("Año asignación:");
        jlStatsAssignationYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesStats11.add(jlStatsAssignationYear);

        jtfStatsAssignationYear.setEditable(false);
        jtfStatsAssignationYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfStatsAssignationYear.setText("2001");
        jtfStatsAssignationYear.setFocusable(false);
        jtfStatsAssignationYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jpEmployeesStats11.add(jtfStatsAssignationYear);

        jpEmployeesStats1.add(jpEmployeesStats11);

        jpEmployeesStats12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatsEmployeesTotal.setText("Empleados totales:");
        jlStatsEmployeesTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesStats12.add(jlStatsEmployeesTotal);

        jtfStatsEmployeesTotal.setEditable(false);
        jtfStatsEmployeesTotal.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStatsEmployeesTotal.setText("000,000");
        jtfStatsEmployeesTotal.setFocusable(false);
        jtfStatsEmployeesTotal.setPreferredSize(new java.awt.Dimension(75, 23));
        jpEmployeesStats12.add(jtfStatsEmployeesTotal);

        jpEmployeesStats1.add(jpEmployeesStats12);

        jpEmployeesStats13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatsEmployeesFiltered.setText("Empleados filtrados:");
        jlStatsEmployeesFiltered.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesStats13.add(jlStatsEmployeesFiltered);

        jtfStatsEmployeesFiltered.setEditable(false);
        jtfStatsEmployeesFiltered.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStatsEmployeesFiltered.setText("000,000");
        jtfStatsEmployeesFiltered.setFocusable(false);
        jtfStatsEmployeesFiltered.setPreferredSize(new java.awt.Dimension(75, 23));
        jpEmployeesStats13.add(jtfStatsEmployeesFiltered);

        jpEmployeesStats1.add(jpEmployeesStats13);

        jpEmployeesStats14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatsEmployeesUnset.setText("Sin asignación:");
        jlStatsEmployeesUnset.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesStats14.add(jlStatsEmployeesUnset);

        jtfStatsEmployeesUnset.setEditable(false);
        jtfStatsEmployeesUnset.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStatsEmployeesUnset.setText("000,000");
        jtfStatsEmployeesUnset.setFocusable(false);
        jtfStatsEmployeesUnset.setPreferredSize(new java.awt.Dimension(75, 23));
        jpEmployeesStats14.add(jtfStatsEmployeesUnset);

        jpEmployeesStats1.add(jpEmployeesStats14);

        jpEmployeesStats15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlStatsEmployeesSet.setText("Con asignación:");
        jlStatsEmployeesSet.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesStats15.add(jlStatsEmployeesSet);

        jtfStatsEmployeesSet.setEditable(false);
        jtfStatsEmployeesSet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfStatsEmployeesSet.setText("000,000");
        jtfStatsEmployeesSet.setFocusable(false);
        jtfStatsEmployeesSet.setPreferredSize(new java.awt.Dimension(75, 23));
        jpEmployeesStats15.add(jtfStatsEmployeesSet);

        jpEmployeesStats1.add(jpEmployeesStats15);

        jpEmployeesStats.add(jpEmployeesStats1, java.awt.BorderLayout.NORTH);

        jpUpdateOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones de actualización:"));
        jpUpdateOptions.setLayout(new java.awt.BorderLayout());

        jpUpdateOptions1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        bgUpdate.add(moRadUpdateUnset);
        moRadUpdateUnset.setText("Sólo empleados sin asignación");
        jpUpdateOptions1.add(moRadUpdateUnset);

        bgUpdate.add(moRadUpdateSet);
        moRadUpdateSet.setText("Sólo empleados con asignación");
        jpUpdateOptions1.add(moRadUpdateSet);

        bgUpdate.add(moRadUpdateAll);
        moRadUpdateAll.setText("Todos los empleados filtrados");
        jpUpdateOptions1.add(moRadUpdateAll);

        jpUpdateOptions.add(jpUpdateOptions1, java.awt.BorderLayout.NORTH);

        jpEmployeesStats.add(jpUpdateOptions, java.awt.BorderLayout.CENTER);

        jpEmployees.add(jpEmployeesStats, java.awt.BorderLayout.LINE_END);

        jpMain.add(jpEmployees, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMode;
    private javax.swing.ButtonGroup bgStatus;
    private javax.swing.ButtonGroup bgUnion;
    private javax.swing.ButtonGroup bgUpdate;
    private javax.swing.JButton jbContinue;
    private javax.swing.JButton jbRestart;
    private javax.swing.JLabel jlBenefitPaymentType;
    private javax.swing.JLabel jlBenefitPeriod;
    private javax.swing.JLabel jlBenefitTable;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlFilterPaymentType;
    private javax.swing.JLabel jlFilterPaymentTypeHelp;
    private javax.swing.JLabel jlFilterStatus;
    private javax.swing.JLabel jlFilterStatusHelp;
    private javax.swing.JLabel jlFilterUnion;
    private javax.swing.JLabel jlFilterUnionHelp;
    private javax.swing.JLabel jlStatsAssignationYear;
    private javax.swing.JLabel jlStatsEmployeesFiltered;
    private javax.swing.JLabel jlStatsEmployeesSet;
    private javax.swing.JLabel jlStatsEmployeesTotal;
    private javax.swing.JLabel jlStatsEmployeesUnset;
    private javax.swing.JLabel jlUpdateMode;
    private javax.swing.JLabel jlUpdateModeAssignationRestrict;
    private javax.swing.JLabel jlUpdateModeHelp;
    private javax.swing.JLabel jlUpdateModeHelpComp;
    private javax.swing.JPanel jpEmployees;
    private javax.swing.JPanel jpEmployeesGrid;
    private javax.swing.JPanel jpEmployeesStats;
    private javax.swing.JPanel jpEmployeesStats1;
    private javax.swing.JPanel jpEmployeesStats11;
    private javax.swing.JPanel jpEmployeesStats12;
    private javax.swing.JPanel jpEmployeesStats13;
    private javax.swing.JPanel jpEmployeesStats14;
    private javax.swing.JPanel jpEmployeesStats15;
    private javax.swing.JPanel jpMain;
    private javax.swing.JPanel jpSettings;
    private javax.swing.JPanel jpSettings1;
    private javax.swing.JPanel jpSettings11;
    private javax.swing.JPanel jpSettings12;
    private javax.swing.JPanel jpSettings13;
    private javax.swing.JPanel jpSettings14;
    private javax.swing.JPanel jpSettings15;
    private javax.swing.JPanel jpSettings2;
    private javax.swing.JPanel jpSettings21;
    private javax.swing.JPanel jpSettings22;
    private javax.swing.JPanel jpSettings23;
    private javax.swing.JPanel jpSettings24;
    private javax.swing.JPanel jpSettings25;
    private javax.swing.JPanel jpSettings26;
    private javax.swing.JPanel jpUpdateOptions;
    private javax.swing.JPanel jpUpdateOptions1;
    private javax.swing.JTextField jtfBenefitPaymentType;
    private javax.swing.JTextField jtfBenefitPeriod;
    private javax.swing.JTextField jtfBenefitUnionized;
    private javax.swing.JTextField jtfStatsAssignationYear;
    private javax.swing.JTextField jtfStatsEmployeesFiltered;
    private javax.swing.JTextField jtfStatsEmployeesSet;
    private javax.swing.JTextField jtfStatsEmployeesTotal;
    private javax.swing.JTextField jtfStatsEmployeesUnset;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolUpdateModeAssignationRestrict;
    private sa.lib.gui.bean.SBeanFieldDate moDateAssignation;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBenefitTable;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBenefitType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyFilterPaymentType;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterStatusActive;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterStatusAll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterStatusInactive;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterUnionAll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterUnionNonUnionized;
    private sa.lib.gui.bean.SBeanFieldRadio moRadFilterUnionUnionized;
    private sa.lib.gui.bean.SBeanFieldRadio moRadModeAssignation;
    private sa.lib.gui.bean.SBeanFieldRadio moRadModeBenefits;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateAll;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateSet;
    private sa.lib.gui.bean.SBeanFieldRadio moRadUpdateUnset;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);
        
        moKeyBenefitType.setKeySettings(miClient, SGuiUtils.getLabelName(jlBenefitType), true);
        moKeyBenefitTable.setKeySettings(miClient, SGuiUtils.getLabelName(jlBenefitTable), true);
        moKeyFilterPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlFilterPaymentType), false);
        moRadFilterStatusActive.setBooleanSettings(moRadFilterStatusActive.getText(), false);
        moRadFilterStatusInactive.setBooleanSettings(moRadFilterStatusInactive.getText(), false);
        moRadFilterStatusAll.setBooleanSettings(moRadFilterStatusAll.getText(), true);
        moRadFilterUnionNonUnionized.setBooleanSettings(moRadFilterUnionNonUnionized.getText(), false);
        moRadFilterUnionUnionized.setBooleanSettings(moRadFilterUnionUnionized.getText(), false);
        moRadFilterUnionAll.setBooleanSettings(moRadFilterUnionAll.getText(), true);
        moRadModeBenefits.setBooleanSettings(moRadModeBenefits.getText(), false);
        moRadModeAssignation.setBooleanSettings(moRadModeAssignation.getText(), true);
        moDateAssignation.setDateSettings(miClient, moRadModeAssignation.getText(), true);
        moBoolUpdateModeAssignationRestrict.setBooleanSettings(moBoolUpdateModeAssignationRestrict.getText(), false);
        
        moFields.addField(moKeyBenefitType);
        moFields.addField(moKeyBenefitTable);
        moFields.addField(moKeyFilterPaymentType);
        moFields.addField(moRadFilterStatusActive);
        moFields.addField(moRadFilterStatusInactive);
        moFields.addField(moRadFilterStatusAll);
        moFields.addField(moRadFilterUnionNonUnionized);
        moFields.addField(moRadFilterUnionUnionized);
        moFields.addField(moRadFilterUnionAll);
        moFields.addField(moRadModeBenefits);
        moFields.addField(moRadModeAssignation);
        moFields.addField(moDateAssignation);
        moFields.addField(moBoolUpdateModeAssignationRestrict);
        moFields.setFormButton(jbContinue);
        
        moRadUpdateUnset.setBooleanSettings(moRadUpdateUnset.getText(), true);
        moRadUpdateSet.setBooleanSettings(moRadUpdateSet.getText(), false);
        moRadUpdateAll.setBooleanSettings(moRadUpdateAll.getText(), false);
        
        moUpdateFields = new SGuiFields();
        moUpdateFields.addField(moRadUpdateUnset);
        moUpdateFields.addField(moRadUpdateSet);
        moUpdateFields.addField(moRadUpdateAll);
        moUpdateFields.setFormButton(jbSave);
        
        moEmployeesGrid = new SGridPaneForm(miClient, 0, 0, "Empleados") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_BPR_S, "Nombre empleado"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_BPR, "Número empleado"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicio prestaciones"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Aniv. actual"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_BOOL_S, "Aniv. actual cumplido"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Años antigüedad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Días antigüedad"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Aniv. actual"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_8D, "Aniv. actual proporcional", 100));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Aniv. inicial asignación"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Prestación actual"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Aniv. inicial prestación actual"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE_DATETIME, "Última actualización"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_USR, "Usuario actualización"));
                
                return columns;
            }
        };
        
        jpEmployeesGrid.add(moEmployeesGrid, BorderLayout.CENTER);
    }
    
    private void renderStats(final String assignationYear, final int employeesTotal, final int employeesFiltered, final int employeesUnset, final int employeesSet) {
        mnEmployeesTotal = employeesTotal;
        mnEmployeesFiltered = employeesFiltered;
        mnEmployeesUnset = employeesUnset;
        mnEmployeesSet = employeesSet;
        
        jtfStatsAssignationYear.setText(assignationYear);
        jtfStatsEmployeesTotal.setText(SLibUtils.DecimalFormatInteger.format(mnEmployeesTotal));
        jtfStatsEmployeesFiltered.setText(SLibUtils.DecimalFormatInteger.format(mnEmployeesFiltered));
        jtfStatsEmployeesUnset.setText(SLibUtils.DecimalFormatInteger.format(mnEmployeesUnset));
        jtfStatsEmployeesSet.setText(SLibUtils.DecimalFormatInteger.format(mnEmployeesSet));
    }
    
    private void populateEmployees() throws Exception {
        String sql = "";
        String query = "";
        String where = "";
        Statement statement = null;
        ResultSet resultSet = null;
        Vector<SGridRow> rows = new Vector<>();
        int benefitType = moKeyBenefitType.getValue()[0];
        int countTotal = 0;
        int countRetrievable = 0;
        int countFiltered = 0;
        int countUnset = 0;
        int countSet = 0;
        
        statement = miClient.getSession().getStatement().getConnection().createStatement();
        System.out.println("RECUPERACIÓN DE EMPLEADOS");
        
        // count of all employees:
        
        sql = "SELECT COUNT(*) "
                + "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EMP_MEMBER) + " em ON em.id_emp = e.id_emp;";
        resultSet = statement.executeQuery(sql);
        if (resultSet.next()) {
            countTotal = resultSet.getInt(1);
        }
        
        // retrieving desired employees:
        
        if (moKeyFilterPaymentType.getSelectedIndex() > 0) {
            where += (where.isEmpty() ? "" : "AND ") + "e.fk_tp_pay = " + moKeyFilterPaymentType.getValue()[0] + " ";
        }
        
        if (moRadFilterStatusActive.isSelected()) {
            where += (where.isEmpty() ? "" : "AND ") + "e.b_act = 1 ";
        }
        else if (moRadFilterStatusInactive.isSelected()) {
            where += (where.isEmpty() ? "" : "AND ") + "e.b_act = 0 ";
        }
        
        if (moRadFilterUnionNonUnionized.isSelected()) {
            where += (where.isEmpty() ? "" : "AND ") + "e.b_uni = 0 ";
        }
        else if (moRadFilterUnionUnionized.isSelected()) {
            where += (where.isEmpty() ? "" : "AND ") + "e.b_uni = 1 ";
        }
        
        if (moRadModeAssignation.isSelected() && moBoolUpdateModeAssignationRestrict.isSelected()) {
            where += (where.isEmpty() ? "" : "AND ") + "e.dt_ben <= '" + SLibUtils.DbmsDateFormatDate.format(moDateAssignation.getValue()) + "' ";
        }
        
        // count of employees to be retrieved:
        
        query = "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EMP_MEMBER) + " em ON em.id_emp = e.id_emp "
                + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " b ON b.id_bp = e.id_emp "
                + (where.isEmpty() ? "" : "WHERE " + where);
        
        sql = "SELECT COUNT(*) "
                + query;
        resultSet = statement.executeQuery(sql);
        if (resultSet.next()) {
            countRetrievable = resultSet.getInt(1);
        }
        
        miClient.showMsgBoxInformation("De un total de " + SLibUtils.DecimalFormatInteger.format(countTotal) + " empleados "
                + "se inicia la lectura de " + SLibUtils.DecimalFormatInteger.format(countRetrievable) + ".\n"
                + "NOTA: El proceso de obtención de información puede demorar algunos minutos, se solicita su paciencia.");
        
        // retrieve employees:
        
        sql = "SELECT e.id_emp, b.bp, e.num "
                + query
                + "ORDER BY b.bp, e.num, e.id_emp;";
        resultSet = statement.executeQuery(sql);
        while (resultSet.next()) {
            SDbEmployee employee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { resultSet.getInt("e.id_emp") });
            System.out.println("Recuperando información de '" + employee.getXtaEmployeeName() + "'... (" + (countFiltered + 1) + " de " + countRetrievable + ")");
            
            SRowBenefitTablesMassiveAssignation row = new SRowBenefitTablesMassiveAssignation(
                    miClient.getSession(),
                    benefitType, 
                    moRadModeBenefits.isSelected() ? SRowBenefitTablesMassiveAssignation.UPDATE_MODE_BENEFITS : SRowBenefitTablesMassiveAssignation.UPDATE_MODE_ASSIGNATION, 
                    employee, 
                    moDateAssignation.getValue());
            rows.add(row);
            
            SDbEmployeeBenefitTables benefitTables = row.getCurrentBenefitTables();
            
            if (benefitTables == null) {
                countUnset++;
            }
            else {
                boolean set = false;
                
                switch (benefitType) {
                    case SModSysConsts.HRSS_TP_BEN_ANN_BON:
                        if (benefitTables.getFkBenefitAnnualBonusId() != SModSysConsts.HRS_BEN_ND) {
                            set = true;
                        }
                        break;
                    case SModSysConsts.HRSS_TP_BEN_VAC:
                        if (benefitTables.getFkBenefitVacationId() != SModSysConsts.HRS_BEN_ND) {
                            set = true;
                        }
                        break;
                    case SModSysConsts.HRSS_TP_BEN_VAC_BON:
                        if (benefitTables.getFkBenefitVacationBonusId() != SModSysConsts.HRS_BEN_ND) {
                            set = true;
                        }
                        break;
                    default:
                        // nothing
                }
                
                if (set) {
                    countSet++;
                }
                else {
                    countUnset++;
                }
            }
            
            countFiltered++;
        }
        
        moEmployeesGrid.populateGrid(rows);
        renderStats(moRadModeAssignation.isSelected() ? SLibUtils.DateFormatDateYear.format(moDateAssignation.getValue()) : "NA", countTotal, countFiltered, countUnset, countSet);
        
        if (countFiltered == 0) {
            miClient.showMsgBoxWarning("No se encontraron empleados con los filtros especificados.");
        }
        else {
            miClient.showMsgBoxInformation("Se " + (countFiltered == 1 ? "encontró 1 empleado" : "encontraron " + SLibUtils.DecimalFormatInteger.format(countFiltered) + " empleados") + " con los filtros especificados.");
        }
    }
    
    private void clearEmployees() {
        moEmployeesGrid.clearGridRows();
        renderStats("", 0, 0, 0, 0);
    }
    
    private void actionPerformedContinue() {
        SGuiValidation validation = validateForm();
        
        if (SGuiUtils.computeValidation(miClient, validation)) {
            if (miClient.showMsgBoxConfirm("IMPORTANTE: ¡TÓMESE EL TIEMPO NECESARIO PARA VALIDAR CUIDADOSAMENTE, UNO A UNO, LOS PARÁMETROS CAPTURADOS!\n"
                    + "\n"
                    + "1) Prestación a asignar:\n"
                    + "- " + SGuiUtils.getLabelName(jlBenefitType) + " = '" + moKeyBenefitType.getSelectedItem().getItem() + "'\n"
                    + "- " + SGuiUtils.getLabelName(jlBenefitTable) + " = '" + moKeyBenefitTable.getSelectedItem().getItem() + "'\n"
                    + "2) Filtro de asignación:\n"
                    + "- " + SGuiUtils.getLabelName(jlFilterPaymentType) + " = " + (moKeyFilterPaymentType.getSelectedIndex() <= 0 ? "no especificado" : 
                            ((String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, moKeyFilterPaymentType.getValue(), SDbRegistry.FIELD_NAME))).toLowerCase() + "\n"
                    + "- " + SGuiUtils.getLabelName(jlFilterStatus) + " = " + (moRadFilterStatusActive.isSelected() ? moRadFilterStatusActive.getText() : 
                            (moRadFilterStatusInactive.isSelected() ? moRadFilterStatusInactive.getText() : 
                                    (moRadFilterStatusAll.isSelected() ? moRadFilterStatusAll.getText() : 
                                            "?"))).toLowerCase() + "\n"
                    + "- " + SGuiUtils.getLabelName(jlFilterUnion) + " = " + (moRadFilterUnionNonUnionized.isSelected() ? moRadFilterUnionNonUnionized.getText() : 
                            (moRadFilterUnionUnionized.isSelected() ? moRadFilterUnionUnionized.getText() : 
                                    (moRadFilterUnionAll.isSelected() ? moRadFilterUnionAll.getText() : 
                                            "?"))).toLowerCase() + "\n"
                    + "3) Modo de asignación:\n"
                    + "- " + (moRadModeBenefits.isSelected() ? moRadModeBenefits.getText().toLowerCase() + " = desde el inicio de la relación laboral" : 
                            (moRadModeAssignation.isSelected() ? moRadModeAssignation.getText().toLowerCase() + " = desde el siguiente aniversario cumplido a partir de la fecha asignación: " + SLibUtils.DateFormatDateLong.format(moDateAssignation.getValue()) + "\n"
                            + "- restricción de asignación: " + (moBoolUpdateModeAssignationRestrict.isSelected() ? "sólo empleados cuya fecha de inicio de prestaciones es anterior o igual a la fecha de asignación" : "ninguna") : 
                                    "?")) + "\n"
                    + "\n"
                    + "Se procederá a mostrar los empleados filtrados y su aniversario inicial de asignación individual.\n"
                    + "NOTA: El proceso de obtención de información puede demorar algunos minutos, se solicita su paciencia.\n"
                    + SGuiConsts.MSG_CNF_CONT) == JOptionPane.YES_OPTION) {
                mnMode = MODE_ASSIGN;
                
                jbContinue.setEnabled(false);
                jbRestart.setEnabled(true);
                
                moFields.setFieldsEnabled(false);
                moUpdateFields.setFieldsEnabled(true);

                try {
                    SGuiUtils.setCursorWait(miClient);
                    
                    populateEmployees();
                    
                    SGuiUtils.setCursorDefault(miClient);
                }
                catch (Exception e) {
                    SGuiUtils.setCursorDefault(miClient);
                    
                    SLibUtils.showException(this, e);
                }
            };
        }
    }
    
    private void actionPerformedRestart(final boolean requestFocus) {
        mnMode = MODE_CONFIG;
        
        jbContinue.setEnabled(true);
        jbRestart.setEnabled(false);
        
        moFields.setFieldsEnabled(true);
        moUpdateFields.setFieldsEnabled(false);
        
        moDateAssignation.setEnabled(moRadModeAssignation.isSelected()); // enable this field only if needed, all fields were just enabled
        moBoolUpdateModeAssignationRestrict.setEnabled(moRadModeAssignation.isSelected()); // enable this field only if needed, all fields were just enabled
        moRadUpdateUnset.setSelected(true); // a preventive approach
        
        clearEmployees();
        
        if (requestFocus) {
            moKeyBenefitType.requestFocusInWindow();
        }
    }
    
    private void itemStateChangedBenefitType() {
        if (moKeyBenefitType.getSelectedIndex() <= 0) {
            moKeyBenefitTable.setEnabled(false);
            moKeyBenefitTable.removeAllItems();
        }
        else {
            moKeyBenefitTable.setEnabled(true);
            miClient.getSession().populateCatalogue(moKeyBenefitTable, SModConsts.HRS_BEN, moKeyBenefitType.getValue()[0], null);
        }
        
        itemStateChangedBenefitTable();
    }
    
    private void itemStateChangedBenefitTable() {
        if (moKeyBenefitTable.getSelectedIndex() <= 0) {
            jtfBenefitPeriod.setText("");
            jtfBenefitPaymentType.setText("");
            jtfBenefitUnionized.setText("");
        }
        else {
            SDbBenefitTable benefitTable = (SDbBenefitTable) miClient.getSession().readRegistry(SModConsts.HRS_BEN, moKeyBenefitTable.getValue());
            
            jtfBenefitPeriod.setText(SLibTimeUtils.dateFormatDatePeriod(benefitTable.getDateStart(), benefitTable.getDateEnd_n()));
            jtfBenefitPaymentType.setText(benefitTable.getFkPaymentTypeId_n() == 0 ? "" : (String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { benefitTable.getFkPaymentTypeId_n() }, SDbRegistry.FIELD_NAME));
            jtfBenefitUnionized.setText(benefitTable.composeUnionizedDescription());
            
            jtfBenefitPeriod.setCaretPosition(0);
            jtfBenefitPaymentType.setCaretPosition(0);
            jtfBenefitUnionized.setCaretPosition(0);
        }
    }
    
    private void itemStateChangedFilterPaymetType() {
        if (moKeyFilterPaymentType.getSelectedIndex() <= 0) {
            jlFilterPaymentTypeHelp.setText("(Mostrar a todos)");
        }
        else {
            jlFilterPaymentTypeHelp.setText("(Mostrar sólo a " + ((String) miClient.getSession().readField(SModConsts.HRSS_TP_PAY, moKeyFilterPaymentType.getValue(), SDbRegistry.FIELD_NAME)).toLowerCase() + ")");
        }
    }
    
    private void itemStateChangedFilterStatus() {
        if (moRadFilterStatusActive.isSelected()) {
            jlFilterStatusHelp.setText("(Sólo empleados activos)");
        }
        else if (moRadFilterStatusInactive.isSelected()) {
            jlFilterStatusHelp.setText("(Sólo empleados inactivos)");
        }
        else if (moRadFilterStatusAll.isSelected()) {
            jlFilterStatusHelp.setText("(Todos los empleados)");
        }
        else {
            jlFilterStatusHelp.setText("(Elegir una opción)");
        }
    }
    
    private void itemStateChangedFilterUnion() {
        if (moRadFilterUnionNonUnionized.isSelected()) {
            jlFilterUnionHelp.setText("(Sólo empleados de confianza)");
        }
        else if (moRadFilterUnionUnionized.isSelected()) {
            jlFilterUnionHelp.setText("(Sólo empleados sindicalizados)");
        }
        else if (moRadFilterUnionAll.isSelected()) {
            jlFilterUnionHelp.setText("(Todos los empleados)");
        }
        else {
            jlFilterUnionHelp.setText("(Elegir una opción)");
        }
    }
    
    private void itemStateChangedUpdateMode() {
        if (moRadModeAssignation.isSelected()) {
            moDateAssignation.setEnabled(true);
            moDateAssignation.setValue(miClient.getSession().getCurrentDate());
            
            moBoolUpdateModeAssignationRestrict.setEnabled(true);
            moBoolUpdateModeAssignationRestrict.setSelected(false);
        }
        else {
            moDateAssignation.setEnabled(false);
            moDateAssignation.setValue(null);
            
            moBoolUpdateModeAssignationRestrict.setEnabled(false);
            moBoolUpdateModeAssignationRestrict.setSelected(false);
        }
        
        if (moRadModeBenefits.isSelected()) {
            jlUpdateModeHelpComp.setText("(Asignación: desde el inicio de la relación laboral.)");
        }
        else if (moRadModeAssignation.isSelected()) {
            jlUpdateModeHelpComp.setText("(Asignación: siguiente aniversario desde fecha asignación.)");
        }
        else {
            jlUpdateModeHelpComp.setText("(Asignación: seleccionar una opción.)");
        }
    }
    
    /*
     * Overriden methods
     */
    
    @Override
    public void actionSave() {
        if (SGuiUtils.computeValidation(miClient, validateForm())) {
            // get list of employees for massive asignation of benefits acording to user-defined settings:
            
            int benefitType = moKeyBenefitType.getValue()[0];
            ArrayList<SRowBenefitTablesMassiveAssignation> rows = new ArrayList<>();
            
            for (SGridRow row : moEmployeesGrid.getModel().getGridRows()) {
                SRowBenefitTablesMassiveAssignation rowMassiveAssignation = (SRowBenefitTablesMassiveAssignation) row;
                SDbEmployeeBenefitTables currentBenefitTables = rowMassiveAssignation.getCurrentBenefitTables();
                
                if (moRadUpdateUnset.isSelected() && (currentBenefitTables == null || !currentBenefitTables.isBenefitSet(benefitType))) {
                    rows.add(rowMassiveAssignation); // only unset employees
                }
                else if (moRadUpdateSet.isSelected() && (currentBenefitTables != null && currentBenefitTables.isBenefitSet(benefitType))) {
                    rows.add(rowMassiveAssignation); // only already set employees
                }
                else {
                    rows.add(rowMassiveAssignation); // all employees
                }
            }
            
            // compute massive assignation of benefits:
            
            try {
                SGuiUtils.setCursorWait(miClient);
                
                if (SHrsBenefitUtils.computeMassiveAssignation(miClient.getSession(), benefitType, moKeyBenefitTable.getValue()[0], rows)) {
                    SGuiUtils.setCursorDefault(miClient);
                    
                    miClient.showMsgBoxInformation(SLibConsts.MSG_PROCESS_FINISHED);
                    miClient.getSession().notifySuscriptors(SModConsts.HRS_EMP_BEN);
                    
                    mnFormResult = SGuiConsts.FORM_RESULT_OK;
                    setVisible(false);
                }
            }
            catch (Exception e) {
                SGuiUtils.setCursorDefault(miClient);
                
                SLibUtils.showException(this, e);
            }
        }
    }
    
    @Override
    public void initForm() {
        removeAllListeners();
        
        reloadCatalogues();
        
        moFields.resetFields();
        moRadFilterStatusAll.setSelected(true);
        moRadFilterUnionAll.setSelected(true);
        moRadModeAssignation.setSelected(true);
        
        actionPerformedRestart(false);
        itemStateChangedBenefitType();
        itemStateChangedFilterPaymetType();
        itemStateChangedFilterStatus();
        itemStateChangedFilterUnion();
        itemStateChangedUpdateMode();
        
        moEmployeesGrid.populateGrid(new Vector<>());
        
        addAllListeners();
    }
    
    @Override
    public void addAllListeners() {
        jbContinue.addActionListener(this);
        jbRestart.addActionListener(this);
        
        moKeyBenefitType.addItemListener(this);
        moKeyBenefitTable.addItemListener(this);
        moKeyFilterPaymentType.addItemListener(this);
        moRadFilterStatusActive.addItemListener(this);
        moRadFilterStatusInactive.addItemListener(this);
        moRadFilterStatusAll.addItemListener(this);
        moRadFilterUnionNonUnionized.addItemListener(this);
        moRadFilterUnionUnionized.addItemListener(this);
        moRadFilterUnionAll.addItemListener(this);
        moRadModeBenefits.addItemListener(this);
        moRadModeAssignation.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbContinue.removeActionListener(this);
        jbRestart.removeActionListener(this);
        
        moKeyBenefitType.removeItemListener(this);
        moKeyBenefitTable.removeItemListener(this);
        moKeyFilterPaymentType.removeItemListener(this);
        moRadFilterStatusActive.removeItemListener(this);
        moRadFilterStatusInactive.removeItemListener(this);
        moRadFilterStatusAll.removeItemListener(this);
        moRadFilterUnionNonUnionized.removeItemListener(this);
        moRadFilterUnionUnionized.removeItemListener(this);
        moRadFilterUnionAll.removeItemListener(this);
        moRadModeBenefits.removeItemListener(this);
        moRadModeAssignation.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyBenefitType, SModConsts.HRSS_TP_BEN, SModConsts.HRS_BEN, null);
        miClient.getSession().populateCatalogue(moKeyFilterPaymentType, SModConsts.HRSS_TP_PAY, 0, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid() && mnMode == MODE_ASSIGN) {
            String message = "No es posible realizar la actualización:\n";
            
            if (mnEmployeesTotal == 0) {
                validation.setMessage(message + "No hay empleados.");
                validation.setComponent(jbRestart);
            }
            else if (mnEmployeesFiltered == 0) {
                validation.setMessage(message + "No se encontraron empleados con los filtros especificados.");
                validation.setComponent(jbRestart);
            }
            else if (moRadUpdateUnset.isSelected() && mnEmployeesUnset == 0) {
                validation.setMessage(message + "No hay empleados filtrados sin asignación de prestaciones.");
                validation.setComponent(jbRestart);
            }
            else if (moRadUpdateSet.isSelected() && mnEmployeesSet == 0) {
                validation.setMessage(message + "No hay empleados filtrados con asignación de prestaciones.");
                validation.setComponent(jbRestart);
            }
            else if (bgUpdate.getSelection() == null) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + ((TitledBorder) jpUpdateOptions.getBorder()).getTitle() + "'.");
                validation.setComponent(moRadUpdateUnset);
            }
            else {
                String confirm = "¿Está seguro que desea asignar la prestación '" + moKeyBenefitTable.getSelectedItem().getItem() + "', tipo '" + moKeyBenefitType.getSelectedItem().getItem() + "', ";
                
                if (moRadUpdateUnset.isSelected()) {
                    confirm += "sólo " + (mnEmployeesUnset == 1 ? "al empleado" : "a los " + SLibUtils.DecimalFormatInteger.format(mnEmployeesUnset) + " empleados") + " sin asignación?";
                }
                else if (moRadUpdateSet.isSelected()) {
                    confirm += "sólo " + (mnEmployeesSet == 1 ? "al empleado" : "a los " + SLibUtils.DecimalFormatInteger.format(mnEmployeesSet) + " empleados") + " con asignación?";
                }
                else if (moRadUpdateAll.isSelected()) {
                    confirm += (mnEmployeesFiltered == 1 ? "al único empleado filtrado" : "a todos los " + SLibUtils.DecimalFormatInteger.format(mnEmployeesFiltered) + " empleados filtrados") + "?";
                }
                
                confirm += "\nEl modo de asignación es: ";
                
                if (moRadModeBenefits.isSelected()) {
                    confirm += "desde el inicio de la relación laboral.";
                }
                else if (moRadModeAssignation.isSelected()) {
                    confirm += "desde el siguiente aniversario cumplido a partir de la fecha asignación: " + SLibUtils.DateFormatDateLong.format(moDateAssignation.getValue())
                            + (moBoolUpdateModeAssignationRestrict.isSelected() ? "\n(aplica sólo a empleados cuya fecha de inicio de prestaciones es anterior o igual a la fecha de asignación.)" : ".");
                }
                
                if (miClient.showMsgBoxConfirm(confirm) != JOptionPane.YES_OPTION) {
                    validation.setMessage("Favor de revisar las opciones de asignación y los empleados susceptibles de ser actualizados.");
                    validation.setComponent(jbRestart);
                }
            }
        }
        
        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbContinue) {
                actionPerformedContinue();
            }
            else if (button == jbRestart) {
                actionPerformedRestart(true);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            
            if (field == moKeyBenefitType) {
                itemStateChangedBenefitType();
            }
            else if (field == moKeyBenefitTable) {
                itemStateChangedBenefitTable();
            }
            else if (field == moKeyFilterPaymentType) {
                itemStateChangedFilterPaymetType();
            }
        }
        else if (e.getSource() instanceof SBeanFieldRadio && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldRadio field = (SBeanFieldRadio) e.getSource();
            
            if (field == moRadFilterStatusActive || field == moRadFilterStatusInactive || field == moRadFilterStatusAll) {
                itemStateChangedFilterStatus();
            }
            else if (field == moRadFilterUnionNonUnionized || field == moRadFilterUnionUnionized || field == moRadFilterUnionAll) {
                itemStateChangedFilterUnion();
            }
            else if (field == moRadModeBenefits|| field == moRadModeAssignation) {
                itemStateChangedUpdateMode();
            }
        }
    }
}
