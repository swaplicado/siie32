/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.db.SDbPayrollReceiptEarning;
import erp.mod.hrs.db.SHrsReceiptEarning;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollReceiptEarningEdition extends SBeanFormDialog implements ActionListener, ItemListener, FocusListener {
    
    private final SHrsReceiptEarning moHrsReceiptEarning;
    private double mdOriginalUnitsAlleged;
    private double mdOriginalAmount_r;
    private double mdOriginalAuxiliarValue;
    private double mdOriginalAuxiliarAmount1;
    private double mdOriginalAuxiliarAmount2;
    private int mnOriginalOtherPaymentTypeId;

    /**
     * Creates new form SDialogPayrollReceiptEarningEdition.
     * Note that every time an earning is about to be edited, a dialog of this class is instantiated!
     * @param client
     * @param hrsReceiptEarning
     * @param title
     */
    public SDialogPayrollReceiptEarningEdition(SGuiClient client, SHrsReceiptEarning hrsReceiptEarning, String title) {
        setFormSettings(client, SModConsts.HRS_PAY_RCP_EAR, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        moHrsReceiptEarning = hrsReceiptEarning;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlEarning = new javax.swing.JLabel();
        jtfEarningCode = new javax.swing.JTextField();
        jtfEarningName = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlOtherPaymentType = new javax.swing.JLabel();
        moKeyOtherPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel13 = new javax.swing.JPanel();
        jlUnitsAlleged = new javax.swing.JLabel();
        moCompUnitsAlleged = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel4 = new javax.swing.JPanel();
        jlUnits = new javax.swing.JLabel();
        moCompUnits = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel15 = new javax.swing.JPanel();
        jlAmountUnit = new javax.swing.JLabel();
        moCurAmountUnit = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlFactorAmount = new javax.swing.JLabel();
        moDecFactorAmount = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel14 = new javax.swing.JPanel();
        jlAmount = new javax.swing.JLabel();
        moCurAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlAmountOriginal = new javax.swing.JLabel();
        moCurAmountOriginal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbCopyAmountOriginal = new javax.swing.JButton();
        jPanel18 = new javax.swing.JPanel();
        jlAuxValue = new javax.swing.JLabel();
        moCompAuxValue = new sa.lib.gui.bean.SBeanCompoundField();
        jlAuxValueHint = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jlAuxAmount1 = new javax.swing.JLabel();
        moCurAuxAmount1 = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlAuxAmount1Hint = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jlAuxAmount2 = new javax.swing.JLabel();
        moCurAuxAmount2 = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlAuxAmount2Hint = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jckUserEdited = new javax.swing.JCheckBox();
        jckAutomatic = new javax.swing.JCheckBox();

        setTitle("Percepción");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(11, 1, 0, 5));

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarning.setText("Percepción:");
        jlEarning.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlEarning);

        jtfEarningCode.setEditable(false);
        jtfEarningCode.setFocusable(false);
        jtfEarningCode.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jtfEarningCode);

        jtfEarningName.setEditable(false);
        jtfEarningName.setFocusable(false);
        jtfEarningName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel7.add(jtfEarningName);

        jPanel2.add(jPanel7);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOtherPaymentType.setText("Tipo otro pago:*");
        jlOtherPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlOtherPaymentType);

        moKeyOtherPaymentType.setPreferredSize(new java.awt.Dimension(575, 23));
        jPanel16.add(moKeyOtherPaymentType);

        jPanel2.add(jPanel16);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitsAlleged.setText("Valor:*");
        jlUnitsAlleged.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlUnitsAlleged);
        jPanel13.add(moCompUnitsAlleged);

        jPanel2.add(jPanel13);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnits.setText("Valor ajustado:*");
        jlUnits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlUnits);
        jPanel4.add(moCompUnits);

        jPanel2.add(jPanel4);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmountUnit.setText("Monto unitario:");
        jlAmountUnit.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlAmountUnit);

        moCurAmountUnit.setEditable(false);
        jPanel15.add(moCurAmountUnit);

        jPanel2.add(jPanel15);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFactorAmount.setText("Factor ajuste:");
        jlFactorAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlFactorAmount);

        moDecFactorAmount.setEditable(false);
        jPanel5.add(moDecFactorAmount);

        jPanel2.add(jPanel5);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAmount.setText("Monto:");
        jlAmount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAmount);
        jPanel14.add(moCurAmount);

        jlAmountOriginal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlAmountOriginal.setText("Monto original:");
        jlAmountOriginal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel14.add(jlAmountOriginal);

        moCurAmountOriginal.setEditable(false);
        jPanel14.add(moCurAmountOriginal);

        jbCopyAmountOriginal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_copy.gif"))); // NOI18N
        jbCopyAmountOriginal.setToolTipText("Copiar monto original");
        jbCopyAmountOriginal.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbCopyAmountOriginal);

        jPanel2.add(jPanel14);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAuxValue.setText("Valor auxiliar:");
        jlAuxValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel18.add(jlAuxValue);
        jPanel18.add(moCompAuxValue);

        jlAuxValueHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlAuxValueHint.setToolTipText("Valor auxiliar");
        jlAuxValueHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel18.add(jlAuxValueHint);

        jPanel2.add(jPanel18);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAuxAmount1.setText("Monto auxiliar:");
        jlAuxAmount1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel17.add(jlAuxAmount1);
        jPanel17.add(moCurAuxAmount1);

        jlAuxAmount1Hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlAuxAmount1Hint.setToolTipText("Monto auxiliar");
        jlAuxAmount1Hint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel17.add(jlAuxAmount1Hint);

        jPanel2.add(jPanel17);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAuxAmount2.setText("Monto auxiliar:");
        jlAuxAmount2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlAuxAmount2);
        jPanel19.add(moCurAuxAmount2);

        jlAuxAmount2Hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlAuxAmount2Hint.setToolTipText("Monto auxiliar");
        jlAuxAmount2Hint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel19.add(jlAuxAmount2Hint);

        jPanel2.add(jPanel19);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckUserEdited.setText("Registro modificado por el usuario");
        jckUserEdited.setEnabled(false);
        jckUserEdited.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(jckUserEdited);

        jckAutomatic.setText("Registro creado automáticamente");
        jckAutomatic.setEnabled(false);
        jckAutomatic.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel3.add(jckAutomatic);

        jPanel2.add(jPanel3);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JButton jbCopyAmountOriginal;
    private javax.swing.JCheckBox jckAutomatic;
    private javax.swing.JCheckBox jckUserEdited;
    private javax.swing.JLabel jlAmount;
    private javax.swing.JLabel jlAmountOriginal;
    private javax.swing.JLabel jlAmountUnit;
    private javax.swing.JLabel jlAuxAmount1;
    private javax.swing.JLabel jlAuxAmount1Hint;
    private javax.swing.JLabel jlAuxAmount2;
    private javax.swing.JLabel jlAuxAmount2Hint;
    private javax.swing.JLabel jlAuxValue;
    private javax.swing.JLabel jlAuxValueHint;
    private javax.swing.JLabel jlEarning;
    private javax.swing.JLabel jlFactorAmount;
    private javax.swing.JLabel jlOtherPaymentType;
    private javax.swing.JLabel jlUnits;
    private javax.swing.JLabel jlUnitsAlleged;
    private javax.swing.JTextField jtfEarningCode;
    private javax.swing.JTextField jtfEarningName;
    private sa.lib.gui.bean.SBeanCompoundField moCompAuxValue;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnits;
    private sa.lib.gui.bean.SBeanCompoundField moCompUnitsAlleged;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountOriginal;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountUnit;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAuxAmount1;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAuxAmount2;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecFactorAmount;
    private sa.lib.gui.bean.SBeanFieldKey moKeyOtherPaymentType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 720, 450);

        jbSave.setText("Aceptar");

        moKeyOtherPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlOtherPaymentType), true);
        moCompUnitsAlleged.setCompoundFieldSettings(miClient);
        moCompUnitsAlleged.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnitsAlleged.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, true);
        moCompUnitsAlleged.getField().setValue(0d);
        moCompUnitsAlleged.setCompoundText("");
        moCompUnits.setCompoundFieldSettings(miClient);
        moCompUnits.getField().setDecimalSettings(SGuiUtils.getLabelName(jlUnits.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true);
        moCompUnits.getField().setValue(0d);
        moCompUnits.setCompoundText("");
        moCurAmountUnit.setCompoundFieldSettings(miClient); // read only
        moCurAmountUnit.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmountUnit.getText()), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false); // read only
        moDecFactorAmount.setDecimalSettings(SGuiUtils.getLabelName(jlFactorAmount.getText()), SGuiConsts.GUI_TYPE_DEC, false); // read only
        moCurAmount.setCompoundFieldSettings(miClient);
        moCurAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmount.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false); // yes!, is NOT mandatory!
        moCurAmountOriginal.setCompoundFieldSettings(miClient);
        moCurAmountOriginal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAmountOriginal.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false); // read-only field
        moCompAuxValue.setCompoundFieldSettings(miClient);
        moCompAuxValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAuxValue.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurAuxAmount1.setCompoundFieldSettings(miClient);
        moCurAuxAmount1.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAuxAmount1.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurAuxAmount2.setCompoundFieldSettings(miClient);
        moCurAuxAmount2.getField().setDecimalSettings(SGuiUtils.getLabelName(jlAuxAmount2.getText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);

        moFields.addField(moKeyOtherPaymentType);
        moFields.addField(moCompUnitsAlleged.getField());
        moFields.addField(moCompUnits.getField());
        moFields.addField(moCurAmountUnit.getField());
        moFields.addField(moDecFactorAmount);
        moFields.addField(moCurAmount.getField());
        //moFields.addField(moCurAmountOriginal.getField()); // read-only field
        moFields.addField(moCompAuxValue.getField());
        moFields.addField(moCurAuxAmount1.getField());
        moFields.addField(moCurAuxAmount2.getField());

        moFields.setFormButton(jbSave);

        /* PLEASE KEEP THE CALLING ORDER OF THE FOLLOWING METHODS! */
        removeAllListeners();
        reloadCatalogues();
        
        renderEarning();
        
        addAllListeners();
        /* PLEASE KEEP THE CALLING ORDER OF THE PREVIOUS METHODS! */
    }
    
    private void resetFieldsAux() {
        jlAuxValue.setText(SDialogPayrollReceipt.LABEL_AUX_VAL + ":");
        jlAuxValue.setEnabled(false);
        jlAuxValueHint.setToolTipText(null);
        jlAuxValueHint.setEnabled(false);
        moCompAuxValue.setEnabled(false);
        moCompAuxValue.getField().setMandatory(false);
        moCompAuxValue.setCompoundText("");
        moCompAuxValue.getField().setDecimalFormat(SLibUtils.DecimalFormatInteger);
        moCompAuxValue.getField().setMinDouble(0);
        moCompAuxValue.getField().setMaxDouble(Double.MAX_VALUE);
        moCompAuxValue.getField().resetField();
        
        jlAuxAmount1.setText(SDialogPayrollReceipt.LABEL_AUX_AMT + ":");
        jlAuxAmount1.setEnabled(false);
        jlAuxAmount1Hint.setToolTipText(null);
        jlAuxAmount1Hint.setEnabled(false);
        moCurAuxAmount1.setEnabled(false);
        moCurAuxAmount1.getField().setMandatory(false);
        moCurAuxAmount1.getField().resetField();
        
        jlAuxAmount2.setText(SDialogPayrollReceipt.LABEL_AUX_AMT + ":");
        jlAuxAmount2.setEnabled(false);
        jlAuxAmount2Hint.setToolTipText(null);
        jlAuxAmount2Hint.setEnabled(false);
        moCurAuxAmount2.setEnabled(false);
        moCurAuxAmount2.getField().setMandatory(false);
        moCurAuxAmount2.getField().resetField();
    }
    
    private void renderEarning() {
        SDbEarning earning = moHrsReceiptEarning.getEarning(); // convenience variable
        SDbPayrollReceiptEarning payrollReceiptEarning = moHrsReceiptEarning.getPayrollReceiptEarning(); // convenience variable
        
        // preserve original values:
        
        mdOriginalUnitsAlleged = payrollReceiptEarning.getUnitsAlleged();
        mdOriginalAmount_r = payrollReceiptEarning.getAmount_r();
        mdOriginalAuxiliarValue = payrollReceiptEarning.getAuxiliarValue();
        mdOriginalAuxiliarAmount1 = payrollReceiptEarning.getAuxiliarAmount1();
        mdOriginalAuxiliarAmount2 = payrollReceiptEarning.getAuxiliarAmount2();
        mnOriginalOtherPaymentTypeId = payrollReceiptEarning.getFkOtherPaymentTypeId();
        
        // render earning:
        
        jtfEarningCode.setText(earning.getCode());
        jtfEarningName.setText(earning.getName());
        
        jtfEarningCode.setCaretPosition(0);
        jtfEarningName.setCaretPosition(0);
        
        boolean unitsEditable = moHrsReceiptEarning.getEarning().areUnitsModifiable();
        String earningUnit = moHrsReceiptEarning.getHrsReceipt().getHrsPayroll().getEarningComputationTypesMap().get(earning.getFkEarningComputationTypeId());
        
        moCompUnitsAlleged.getField().setValue(payrollReceiptEarning.getUnitsAlleged());
        moCompUnitsAlleged.getField().setEditable(unitsEditable);
        moCompUnitsAlleged.setCompoundText(earningUnit);
        
        moCompUnits.getField().setValue(payrollReceiptEarning.getUnits());
        moCompUnits.getField().setEditable(unitsEditable);
        moCompUnits.setCompoundText(earningUnit);
        
        moCurAmountUnit.getField().setValue(payrollReceiptEarning.getAmountUnitary()); // read only
        moDecFactorAmount.setValue(payrollReceiptEarning.getFactorAmount()); // read only
        
        moCurAmount.getField().setValue(payrollReceiptEarning.getAmount_r());
        moCurAmountOriginal.getField().setValue(payrollReceiptEarning.getAmount_r()); // read only

        // resetting of specialized fields:
        moKeyOtherPaymentType.setEnabled(earning.getFkOtherPaymentTypeId() == SModSysConsts.HRSS_TP_EAR_OTH);
        moKeyOtherPaymentType.removeItemListener(this);
        moKeyOtherPaymentType.setValue(new int[] { payrollReceiptEarning.getFkOtherPaymentTypeId() }); // may trigger an item-state-changed event
        itemStateChangedKeyOtherPayment(); // force triggering an item-state-changed event
        moKeyOtherPaymentType.addItemListener(this);
        
        moCompAuxValue.getField().setValue(payrollReceiptEarning.getAuxiliarValue());
        moCurAuxAmount1.getField().setValue(payrollReceiptEarning.getAuxiliarAmount1());
        moCurAuxAmount2.getField().setValue(payrollReceiptEarning.getAuxiliarAmount2());
        
        jckUserEdited.setSelected(payrollReceiptEarning.isUserEdited());
        jckAutomatic.setSelected(payrollReceiptEarning.isAutomatic());
    }
    
    private void calculateUnits() {
        double units = moHrsReceiptEarning.getEarning().computeEarningUnits(moCompUnitsAlleged.getField().getValue(), moHrsReceiptEarning.getHrsReceipt().getHrsPayroll().getPayroll());
        moCompUnits.getField().setValue(units);
        
        calculateAmount();
    }
    
    private void calculateAmount() {
        double amount = moHrsReceiptEarning.getEarning().computeEarningAmount(moCompUnits.getField().getValue(), moCurAmountUnit.getField().getValue());
        moCurAmount.getField().setValue(amount);
    }
    
    private void actionPerformedCopyAmountOriginal() {
        moCurAmount.getField().setValue(mdOriginalAmount_r);
        moCurAmount.getField().getComponent().requestFocusInWindow();
    }
    
    private void itemStateChangedKeyOtherPayment() {
        resetFieldsAux();
        
        if (moKeyOtherPaymentType.getSelectedIndex() > 0) {
            switch (moKeyOtherPaymentType.getValue()[0]) {
                case SModSysConsts.HRSS_TP_OTH_PAY_TAX_SUB:
                    jlAuxAmount1.setText(SDbEarning.TAX_SUB_LABEL + ":");
                    jlAuxAmount1.setEnabled(true);
                    jlAuxAmount1Hint.setToolTipText(SDbEarning.TAX_SUB_HINT);
                    jlAuxAmount1Hint.setEnabled(true);
                    moCurAuxAmount1.setEnabled(true);
                    moCurAuxAmount1.getField().setMandatory(false); // non-mandatory!
                    break;
                    
                case SModSysConsts.HRSS_TP_OTH_PAY_TAX_BAL:
                    int year = SLibTimeUtils.digestYear(moHrsReceiptEarning.getHrsReceipt().getHrsPayroll().getPayroll().getDateEnd())[0];
                    jlAuxValue.setText(SDbEarning.OTH_TAX_BAL_LABEL_YEAR + ":*");
                    jlAuxValue.setEnabled(true);
                    jlAuxValueHint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_YEAR);
                    jlAuxValueHint.setEnabled(true);
                    moCompAuxValue.setEnabled(true);
                    moCompAuxValue.getField().setMandatory(true); // mandatory!
                    moCompAuxValue.setCompoundText("");
                    moCompAuxValue.getField().setDecimalFormat(SLibUtils.DecimalFormatCalendarYear);
                    moCompAuxValue.getField().setMinDouble(year - 1);
                    moCompAuxValue.getField().setMaxDouble(year);
                    moCompAuxValue.getField().setValue((double) year);
                    
                    jlAuxAmount1.setText(SDbEarning.OTH_TAX_BAL_LABEL_BAL + ":*");
                    jlAuxAmount1.setEnabled(true);
                    jlAuxAmount1Hint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_BAL);
                    jlAuxAmount1Hint.setEnabled(true);
                    moCurAuxAmount1.setEnabled(true);
                    moCurAuxAmount1.getField().setMandatory(true); // mandatory!

                    jlAuxAmount2.setText(SDbEarning.OTH_TAX_BAL_LABEL_REM_BAL + ":");
                    jlAuxAmount2.setEnabled(true);
                    jlAuxAmount2Hint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_REM_BAL);
                    jlAuxAmount2Hint.setEnabled(true);
                    moCurAuxAmount2.setEnabled(true); // field rarely used; preferable disabling it when used
                    moCurAuxAmount2.getField().setMandatory(false); // non-mandatory!
                    break;
                    
                default:
            }
        }
    }
    
    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyOtherPaymentType, SModConsts.HRSS_TP_OTH_PAY, 0, null);
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moCompUnits.getField().getValue() < moCompUnitsAlleged.getField().getValue()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlUnits) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "'" + SGuiUtils.getLabelName(jlUnitsAlleged) + "'.");
                validation.setComponent(moCompUnits.getField().getComponent());
            }
            else if (moKeyOtherPaymentType.isEnabled() && moKeyOtherPaymentType.getValue()[0] == SModSysConsts.HRSS_TP_OTH_PAY_NA) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlOtherPaymentType) + "'.");
                validation.setComponent(moKeyOtherPaymentType);
            }
        }
        
        return validation;
    }
    
    @Override
    public void actionSave() {
        if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                // special-case validations:
                
                if (moCurAmount.getField().getValue() == 0 && miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + moCurAmount.getField().getFieldName() + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_UNDEF) != JOptionPane.YES_OPTION) {
                    miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moCurAmount.getField().getFieldName() + "'. ");
                    moCurAmount.getField().getComponent().requestFocus();
                    return;
                }
                
                // save:
                
                SDbEarning earning = moHrsReceiptEarning.getEarning(); // convenience variable
                SDbPayrollReceiptEarning payrollReceiptEarning = moHrsReceiptEarning.getPayrollReceiptEarning(); // convenience variable
                
                if (!earning.isBasedOnUnits()) {
                    if (earning.getFkBenefitTypeId() != SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                        payrollReceiptEarning.setAmountUnitary(moCurAmount.getField().getValue());
                    }
                }
                else {
                    payrollReceiptEarning.setUnitsAlleged(moCompUnitsAlleged.getField().getValue());
                    payrollReceiptEarning.setUnits(moCompUnits.getField().getValue());
                }

                payrollReceiptEarning.setAmount_r(moCurAmount.getField().getValue());
                
                payrollReceiptEarning.setFkOtherPaymentTypeId(moKeyOtherPaymentType.getValue()[0]);
                payrollReceiptEarning.setAuxiliarValue(!moCompAuxValue.isEnabled() ? 0 : moCompAuxValue.getField().getValue());
                payrollReceiptEarning.setAuxiliarAmount1(!moCurAuxAmount1.isEnabled() ? 0 : moCurAuxAmount1.getField().getValue());
                payrollReceiptEarning.setAuxiliarAmount2(!moCurAuxAmount2.isEnabled() ? 0 : moCurAuxAmount2.getField().getValue());
                
                if (!payrollReceiptEarning.isUserEdited()) {
                    payrollReceiptEarning.setUserEdited(
                            mdOriginalUnitsAlleged != payrollReceiptEarning.getUnitsAlleged() ||
                            mdOriginalAmount_r != payrollReceiptEarning.getAmount_r() ||
                            mnOriginalOtherPaymentTypeId != payrollReceiptEarning.getFkOtherPaymentTypeId() ||
                            mdOriginalAuxiliarValue != payrollReceiptEarning.getAuxiliarValue() ||
                            mdOriginalAuxiliarAmount1 != payrollReceiptEarning.getAuxiliarAmount1() ||
                            mdOriginalAuxiliarAmount2 != payrollReceiptEarning.getAuxiliarAmount2()
                    );
                }
                
                moHrsReceiptEarning.getHrsReceipt().replaceHrsReceiptEarning(payrollReceiptEarning.getPkMoveId(), moHrsReceiptEarning);

                if (!payrollReceiptEarning.isAutomatic() && payrollReceiptEarning.getUnits()== 0) { 
                    moHrsReceiptEarning.getHrsReceipt().removeHrsReceiptEarning(payrollReceiptEarning.getPkMoveId());
                }
                
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
        jbCopyAmountOriginal.addActionListener(this);
        moKeyOtherPaymentType.addItemListener(this);
        moCompUnitsAlleged.getField().getComponent().addFocusListener(this);
        moCompUnits.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbCopyAmountOriginal.removeActionListener(this);
        moKeyOtherPaymentType.removeItemListener(this);
        moCompUnitsAlleged.getField().getComponent().removeFocusListener(this);
        moCompUnits.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbCopyAmountOriginal) {
                actionPerformedCopyAmountOriginal();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            
            if (field == moKeyOtherPaymentType) {
                itemStateChangedKeyOtherPayment();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {

    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldDecimal) {
            SBeanFieldDecimal decimalField = (SBeanFieldDecimal) e.getSource();

            if (decimalField == moCompUnits.getField().getComponent()) {
                calculateAmount();
            }
            else if (decimalField == moCompUnitsAlleged.getField().getComponent()) {
                calculateUnits();
            }
        }
    }
}
