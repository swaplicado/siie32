/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsBenefit;
import erp.mod.hrs.db.SHrsBenefitParams;
import erp.mod.hrs.db.SHrsBenefitTableAnniversary;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsEmployeeDays;
import erp.mod.hrs.db.SHrsReceipt;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollBenefit extends SBeanFormDialog implements ActionListener, ChangeListener, FocusListener {

    protected SHrsReceipt moHrsReceipt;
    protected SHrsEmployeeDays moHrsEmployeeDays;
    protected SDbEarning moEarning;
    protected SDbEmployee moEmployee;
    protected SDbBenefitTable moBenefitTable;
    protected SDbBenefitTable moBenefitTableAux;
    protected Date mtDateCutoff;
    protected ArrayList<SHrsBenefitTableAnniversary> maBenefitTableAnniversarys;
    protected ArrayList<SHrsBenefitTableAnniversary> maBenefitTableAnniversarysAux;
    protected SHrsBenefit moHrsBenefit;
    protected ArrayList<SHrsBenefit> maHrsBenefits;
    
    protected int mnBenefitAnnivLimit;
    protected int mnBenefitDaysAnniv;
    protected int mnBenefitYear;

    /**
     * Creates new form SDialogHrsBenefit
     * @param client
     * @param formType
     * @param title
     */
    public SDialogPayrollBenefit(SGuiClient client, int formType, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, formType, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlBenefit = new javax.swing.JLabel();
        moTextBenefit = new sa.lib.gui.bean.SBeanFieldText();
        jPanel12 = new javax.swing.JPanel();
        jlDateBenefit = new javax.swing.JLabel();
        moDateBenefitDate = new sa.lib.gui.bean.SBeanFieldDate();
        jlDateLastDismissal_n = new javax.swing.JLabel();
        moDateLastDismissal_n = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel11 = new javax.swing.JPanel();
        jlDateBase = new javax.swing.JLabel();
        moDateBaseDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel14 = new javax.swing.JPanel();
        jlDateCutoff = new javax.swing.JLabel();
        moDateCutoff = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlSeniority = new javax.swing.JLabel();
        moIntSeniority = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityYear = new javax.swing.JLabel();
        moIntSeniorityDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityDays = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlDaysElapsed = new javax.swing.JLabel();
        moIntDaysElapsed = new sa.lib.gui.bean.SBeanFieldInteger();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jlAnniversary = new javax.swing.JLabel();
        jsAnniversary = new javax.swing.JSpinner();
        moIntBenefitYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel4 = new javax.swing.JPanel();
        jlBenefitTableDaysToPay = new javax.swing.JLabel();
        moIntBenefitTableDaysToPay = new sa.lib.gui.bean.SBeanFieldInteger();
        moCurAmountPayable = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlBenefitTableBonusPercentage = new javax.swing.JLabel();
        moDecBenefitTableBonusPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel10 = new javax.swing.JPanel();
        jlDaysPayed = new javax.swing.JLabel();
        moDecDaysPayed = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurAmountPayed = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jlDaysToPay = new javax.swing.JLabel();
        moDecDaysToPay = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurAmountToPay = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jbPayProportional = new javax.swing.JButton();
        jbPayPending = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jlDaysPending = new javax.swing.JLabel();
        moDecDaysPending = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurAmountPending = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setTitle("Agregar prestación");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(11, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefit.setText("Prestación:");
        jlBenefit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel13.add(jlBenefit);

        moTextBenefit.setText("sBeanFieldText1");
        moTextBenefit.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel13.add(moTextBenefit);

        jPanel2.add(jPanel13);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBenefit.setText("Inicio prestaciones:");
        jlDateBenefit.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlDateBenefit);
        jPanel12.add(moDateBenefitDate);

        jlDateLastDismissal_n.setText("Fecha última baja:");
        jlDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateLastDismissal_n);
        jPanel12.add(moDateLastDismissal_n);

        jPanel2.add(jPanel12);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBase.setText("Fecha base:");
        jlDateBase.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlDateBase);
        jPanel11.add(moDateBaseDate);

        jPanel2.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutoff.setText("Fecha corte:");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel14.add(jlDateCutoff);
        jPanel14.add(moDateCutoff);

        jPanel2.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlSeniority);
        jPanel9.add(moIntSeniority);

        jlSeniorityYear.setText("años");
        jlSeniorityYear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jlSeniorityYear);

        moIntSeniorityDays.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(moIntSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jlSeniorityDays);

        jPanel2.add(jPanel9);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysElapsed.setText("Días transcurridos:");
        jlDaysElapsed.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlDaysElapsed);
        jPanel8.add(moIntDaysElapsed);

        jLabel1.setForeground(java.awt.Color.gray);
        jLabel1.setText("(desde la 'fecha base' hasta la 'fecha corte')");
        jLabel1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jLabel1);

        jPanel2.add(jPanel8);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnniversary.setText("Aniversario:");
        jlAnniversary.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(jlAnniversary);

        jsAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jsAnniversary);

        moIntBenefitYear.setText("");
        moIntBenefitYear.setToolTipText("Año aniversario");
        moIntBenefitYear.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(moIntBenefitYear);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitTableDaysToPay.setText("Días y monto:");
        jlBenefitTableDaysToPay.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlBenefitTableDaysToPay);
        jPanel4.add(moIntBenefitTableDaysToPay);

        moCurAmountPayable.setToolTipText("Monto pagable");
        jPanel4.add(moCurAmountPayable);

        jlBenefitTableBonusPercentage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlBenefitTableBonusPercentage.setText("Prima:");
        jlBenefitTableBonusPercentage.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(jlBenefitTableBonusPercentage);

        moDecBenefitTableBonusPercentage.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel4.add(moDecBenefitTableBonusPercentage);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPayed.setText("Días y monto pagados:");
        jlDaysPayed.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel10.add(jlDaysPayed);
        jPanel10.add(moDecDaysPayed);

        moCurAmountPayed.setToolTipText("Monto pagado");
        jPanel10.add(moCurAmountPayed);

        jLabel2.setForeground(java.awt.Color.gray);
        jLabel2.setText("(correspondientes a la antigüedad elegida)");
        jLabel2.setPreferredSize(new java.awt.Dimension(235, 23));
        jPanel10.add(jLabel2);

        jPanel2.add(jPanel10);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysToPay.setText("Días y monto por pagar:");
        jlDaysToPay.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jlDaysToPay);
        jPanel5.add(moDecDaysToPay);

        moCurAmountToPay.setToolTipText("Monto por pagar");
        jPanel5.add(moCurAmountToPay);

        jbPayProportional.setText("Pagar proporcional");
        jbPayProportional.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPayProportional.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel5.add(jbPayProportional);

        jbPayPending.setText("Pagar remanente");
        jbPayPending.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPayPending.setPreferredSize(new java.awt.Dimension(110, 23));
        jPanel5.add(jbPayPending);

        jPanel2.add(jPanel5);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDaysPending.setText("Días y monto remanente:");
        jlDaysPending.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel15.add(jlDaysPending);
        jPanel15.add(moDecDaysPending);

        moCurAmountPending.setToolTipText("Monto remanente");
        jPanel15.add(moCurAmountPending);

        jPanel2.add(jPanel15);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPayPending;
    private javax.swing.JButton jbPayProportional;
    private javax.swing.JLabel jlAnniversary;
    private javax.swing.JLabel jlBenefit;
    private javax.swing.JLabel jlBenefitTableBonusPercentage;
    private javax.swing.JLabel jlBenefitTableDaysToPay;
    private javax.swing.JLabel jlDateBase;
    private javax.swing.JLabel jlDateBenefit;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JLabel jlDateLastDismissal_n;
    private javax.swing.JLabel jlDaysElapsed;
    private javax.swing.JLabel jlDaysPayed;
    private javax.swing.JLabel jlDaysPending;
    private javax.swing.JLabel jlDaysToPay;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityYear;
    private javax.swing.JSpinner jsAnniversary;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountPayable;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountPayed;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountPending;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurAmountToPay;
    private sa.lib.gui.bean.SBeanFieldDate moDateBaseDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateBenefitDate;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutoff;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastDismissal_n;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitTableBonusPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDaysPayed;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDaysPending;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecDaysToPay;
    private sa.lib.gui.bean.SBeanFieldInteger moIntBenefitTableDaysToPay;
    private sa.lib.gui.bean.SBeanFieldInteger moIntBenefitYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntDaysElapsed;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniority;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityDays;
    private sa.lib.gui.bean.SBeanFieldText moTextBenefit;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);
        
        mbFirstActivation = true;

        jbSave.setText("Aceptar");

        moTextBenefit.setTextSettings(SGuiUtils.getLabelName(jlDateBase.getText()), 150);
        moDateBenefitDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBenefit.getText()), true);
        moDateLastDismissal_n.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateLastDismissal_n.getText()), false);
        moDateBaseDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBase.getText()), true);
        moDateCutoff.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateCutoff.getText()), true);
        moIntSeniority.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority), SGuiConsts.GUI_TYPE_INT, false);
        moIntSeniorityDays.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority), SGuiConsts.GUI_TYPE_INT, false);
        moIntDaysElapsed.setIntegerSettings(SGuiUtils.getLabelName(jlAnniversary.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moIntBenefitYear.setIntegerSettings(SGuiUtils.getLabelName(jlAnniversary.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moIntBenefitTableDaysToPay.setIntegerSettings(SGuiUtils.getLabelName(jlBenefitTableDaysToPay.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moCurAmountPayable.setCompoundFieldSettings(miClient);
        moCurAmountPayable.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmountPayable.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecBenefitTableBonusPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitTableBonusPercentage), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecDaysPayed.setDecimalSettings(SGuiUtils.getLabelName(jlDaysPayed.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurAmountPayed.setCompoundFieldSettings(miClient);
        moCurAmountPayed.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmountPayed.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDaysToPay.setDecimalSettings(SGuiUtils.getLabelName(jlDaysToPay.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurAmountToPay.setCompoundFieldSettings(miClient);
        moCurAmountToPay.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmountToPay.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecDaysPending.setDecimalSettings(SGuiUtils.getLabelName(jlDaysPending.getText()), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurAmountPending.setCompoundFieldSettings(miClient);
        moCurAmountPending.getField().setDecimalSettings(SGuiUtils.getLabelName(moCurAmountPending.getToolTipText()), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moFields.addField(moTextBenefit);
        moFields.addField(moDateBenefitDate);
        moFields.addField(moDateLastDismissal_n);
        moFields.addField(moDateBaseDate);
        moFields.addField(moDateCutoff);
        moFields.addField(moIntSeniority);
        moFields.addField(moIntSeniorityDays);
        moFields.addField(moIntDaysElapsed);
        moFields.addField(moIntBenefitYear);
        moFields.addField(moIntBenefitTableDaysToPay);
        moFields.addField(moCurAmountPayable.getField());
        moFields.addField(moDecBenefitTableBonusPercentage);
        moFields.addField(moDecDaysPayed);
        moFields.addField(moCurAmountPayed.getField());
        moFields.addField(moDecDaysToPay);
        moFields.addField(moCurAmountToPay.getField());
        moFields.addField(moDecDaysPending);
        moFields.addField(moCurAmountPending.getField());

        moFields.setFormButton(jbSave);

        moDateBaseDate.setValue(miClient.getSession().getCurrentDate());
        
        moTextBenefit.setEditable(false);
        moDateBenefitDate.setEditable(false);
        moDateLastDismissal_n.setEditable(false);
        moDateBaseDate.setEditable(false);
        moIntSeniority.setEditable(false);
        moIntSeniorityDays.setEditable(false);
        moIntDaysElapsed.setEditable(false);
        moIntBenefitYear.setEditable(false);
        moIntBenefitTableDaysToPay.setEditable(false);
        moCurAmountPayable.getField().setEditable(false);
        moDecBenefitTableBonusPercentage.setEditable(false);
        moDecDaysPayed.setEditable(false);
        moCurAmountPayed.getField().setEditable(false);
        moDecDaysPending.setEditable(false);
        moCurAmountPending.getField().setEditable(false);

        reloadCatalogues();
        addAllListeners();
    }
    
    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            ((JSpinner.NumberEditor) jsAnniversary.getEditor()).getTextField().requestFocus();
        }
    }
    
    private void enableFields() {
        jbPayProportional.setEnabled((Integer) jsAnniversary.getValue() > moIntSeniority.getValue());
    }
    
    private void setDateBaseDate(final Date dateCutOff, final int benefitAnn) {
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_ANN_BON) {
            if (moEmployee.getDateBenefits().compareTo(SLibTimeUtils.getBeginOfYear(dateCutOff)) >= 0) {
                moDateBaseDate.setValue(moEmployee.getDateBenefits());
            }
            else {
                moDateBaseDate.setValue(SLibTimeUtils.getBeginOfYear(dateCutOff));
            }
        }
        else {
            moDateBaseDate.setValue(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnn, 0, 0));
        }
    }
    
    private void setBenefitAnniv(final int benefitAnniv) {
        moIntSeniority.setValue(benefitAnniv);
        moIntSeniorityDays.setValue(SLibTimeUtils.countPeriodDays(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnniv, 0, 0), mtDateCutoff));
        moIntDaysElapsed.setValue(SLibTimeUtils.countPeriodDays(moDateBaseDate.getValue(), mtDateCutoff));
    }
    
    private void loadBenefitTables(SDbBenefitTable benefitTable, SDbBenefitTable benefitTableAux) throws Exception {
        if (benefitTable == null) {
            moBenefitTable = SHrsUtils.getBenefitTableByEarning(miClient.getSession(), 
                    moEarning.getPkEarningId(), 
                    moHrsReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                    mtDateCutoff);
        }
        else {
            moBenefitTable = benefitTable;
            if (moBenefitTable == null) {
                throw new Exception("No existe tabla de prestaciones adecuada para la fecha de corte.");
            }
        }
        
        if (benefitTableAux == null && mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            int tableAuxId = SHrsUtils.getRecentBenefitTable(miClient.getSession(), 
                    SModSysConsts.HRSS_TP_BEN_VAC, 
                    moHrsReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                    mtDateCutoff);
            moBenefitTableAux = moHrsReceipt.getHrsPayroll().getBenefitTable(tableAuxId);
        }
        else {
            moBenefitTableAux = benefitTableAux;
        }
        
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON && moBenefitTableAux == null) {
            throw new Exception("No existe tabla de prestaciones adecuada para la fecha de corte.");
        }
        
        maBenefitTableAnniversarys = moHrsReceipt.getHrsPayroll().getBenefitTableAnniversary(moBenefitTable.getPkBenefitId());
        
        if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            maBenefitTableAnniversarysAux = moHrsReceipt.getHrsPayroll().getBenefitTableAnniversary(moBenefitTableAux.getPkBenefitId());
        }
    }
    
    private void actionPerformedPayProportional() {
        boolean isLeapYear = SLibTimeUtils.isLeapYear(SLibTimeUtils.digestYear(mtDateCutoff)[0]);

        moDecDaysToPay.setValue((moIntBenefitTableDaysToPay.getValue() - moDecDaysPayed.getValue()) * ((double) moIntDaysElapsed.getValue() / (double) (SHrsConsts.YEAR_DAYS + (isLeapYear ? 1 : 0))));
        computeBenefitToPay();

        moDecDaysToPay.requestFocusInWindow();
    }
    
    private void actionPerformedPayPending() {
        computeBenefitToPayWithPending();

        moDecDaysToPay.requestFocusInWindow();
    }
    
    private void focusLostDateCutOff() throws Exception {
        mtDateCutoff = moDateCutoff.getValue();
        
        if (mtDateCutoff == null) {
            moDateCutoff.requestFocus();
            throw new Exception(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "'.");
        }
        else {
            int benefitAnniv = SHrsUtils.getEmployeeSeniority(moEmployee.getDateBenefits(), mtDateCutoff);

            setDateBaseDate(mtDateCutoff, benefitAnniv);

            if (mtDateCutoff.compareTo(moDateBaseDate.getValue()) < 0) {
                moDateCutoff.requestFocus();
                throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateBase) + "'.");
            }
            else if (!moEmployee.isActive() && mtDateCutoff.compareTo(moDateLastDismissal_n.getValue()) > 0) {
                moDateCutoff.requestFocus();
                throw new Exception(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateLastDismissal_n) + "'.");
            }
            else {
                setBenefitAnniv(benefitAnniv);

                try {
                    loadBenefitTables(null, null);
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                jsAnniversary.setValue(benefitAnniv == 0 ? 1 : (Integer) benefitAnniv);
                enableFields();
            }
        }
    }
    
    private void focusLostDaysToPay() {
        computeBenefitToPay();
    }
    
    private void focusLostAmountToPay() {
        computeBenefitPending();
    }
    
    private double getCalculatedBenefit() {
        return moHrsReceipt.calculateBenefit(moEarning, moHrsEmployeeDays, moDecDaysToPay.getValue(), moDecBenefitTableBonusPercentage.getValue());
    }
    
    private void computeBenefitPayable() {
        moCurAmountPayable.getField().setValue(moHrsReceipt.calculateBenefit(moEarning, moHrsEmployeeDays, moIntBenefitTableDaysToPay.getValue(), moDecBenefitTableBonusPercentage.getValue()));
        
        computeBenefitPending();
    }
    
    private void computeBenefitToPay() {
        moCurAmountToPay.getField().setValue(getCalculatedBenefit());
        
        computeBenefitPending();
    }
    
    private void computeBenefitToPayWithPending() {
        double daysPending = moIntBenefitTableDaysToPay.getValue() <= moDecDaysPayed.getValue() ? 0d : moIntBenefitTableDaysToPay.getValue() - moDecDaysPayed.getValue();
        double benefitPending = moCurAmountPayable.getField().getValue() <= moCurAmountPayed.getField().getValue() ? 0d : moCurAmountPayable.getField().getValue() - moCurAmountPayed.getField().getValue();
        
        moDecDaysToPay.setValue(daysPending);
        moCurAmountToPay.getField().setValue(benefitPending);
        
        computeBenefitPending();
    }
    
    private void computeBenefitPending() {
        double daysPending = SLibUtils.round(moIntBenefitTableDaysToPay.getValue() - moDecDaysPayed.getValue() - moDecDaysToPay.getValue(), SLibUtils.getDecimalFormatQuantity().getMaximumFractionDigits());
        moDecDaysPending.setValue(daysPending == -0 ? 0 : daysPending); // sometimes, when there is not remnants, pending days is -0 (negative zero)!
        moCurAmountPending.getField().setValue(SLibUtils.roundAmount(moCurAmountPayable.getField().getValue() - moCurAmountPayed.getField().getValue() - moCurAmountToPay.getField().getValue()));
    }
    
    private void actionStateChangeAnniversary() {
        moIntBenefitYear.setValue(SLibTimeUtils.digestYear(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), (Integer) jsAnniversary.getValue() - 1, 0, 0))[0]);
        readHrsBenefitAcummulate((Integer) jsAnniversary.getValue());
        enableFields();
    }
    
    private void readHrsBenefit() {
        int benefitAnniv = SHrsUtils.getEmployeeSeniority(moEmployee.getDateBenefits(), mtDateCutoff);

        if (!moEmployee.isActive()) {
            if (mtDateCutoff.compareTo(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), benefitAnniv, 0, 0)) > 0) {
                mnBenefitAnnivLimit = benefitAnniv + 1;
            }
            else {
                mnBenefitAnnivLimit = benefitAnniv;
            }
            moDateLastDismissal_n.setValue(moEmployee.getDateLastDismissal_n());
        }
        else {
            mnBenefitAnnivLimit = 100;
        }

        moTextBenefit.setText(moBenefitTable.getName());
        moDateBenefitDate.setValue(moEmployee.getDateBenefits());

        moDateCutoff.setValue(mtDateCutoff);
        setDateBaseDate(mtDateCutoff, benefitAnniv);

        setBenefitAnniv(benefitAnniv);

        jsAnniversary.setModel(new SpinnerNumberModel(1, 1, mnBenefitAnnivLimit, 1));
        jsAnniversary.setValue(benefitAnniv == 0 ? 1 : (Integer) benefitAnniv);

        if (benefitAnniv == 0) {
            actionStateChangeAnniversary();
            actionPerformedPayProportional();
        }
        else {
            actionStateChangeAnniversary();
        }
    }
    
    private void readHrsBenefitAcummulate(int seniority) {
        boolean found = false;
        SHrsBenefitTableAnniversary benefitTableAnniversary = null;
        SHrsBenefitTableAnniversary benefitTableAnniversaryAux = null;
        
        try {
            mnBenefitYear = SLibTimeUtils.digestYear(SLibTimeUtils.addDate(moEmployee.getDateBenefits(), seniority - 1, 0, 0))[0];
            
            // Read benefits accumulated by benefit type:
            
            maHrsBenefits = SHrsUtils.readHrsBenefits(miClient.getSession(), moEmployee, mnFormType, seniority, mnBenefitYear, moHrsReceipt.getHrsPayroll().getPayroll().getPkPayrollId(), maBenefitTableAnniversarys, maBenefitTableAnniversarysAux, moHrsReceipt.getPayrollReceipt().getPaymentDaily());
            
            // Obtain benefit table row more appropiate for seniority:
            if (moBenefitTable != null) {
                for (SHrsBenefitTableAnniversary anniversary : maBenefitTableAnniversarys) {
                    if (anniversary.getBenefitAnn() <= seniority) {
                        benefitTableAnniversary = anniversary;
                    }
                }
            }
            
            // Obtain benefit table row more appropiate for seniority, it's for vacation bonus:
            
            if (moBenefitTableAux != null) {
                if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                    for (SHrsBenefitTableAnniversary anniversary : maBenefitTableAnniversarysAux) {
                        if (anniversary.getBenefitAnn() <= seniority) {
                            benefitTableAnniversaryAux = anniversary;
                        }
                    }
                }
            }
            
            for (SHrsBenefit hrsBenefit : maHrsBenefits) {  // XXX Sergio Flores, 2018-07-11: It is not necessary to iterate this array, allways has only one element, if any!
                hrsBenefit.setValuePayedReceipt(moHrsReceipt.getBenefitValue(mnFormType, hrsBenefit.getBenefitAnn(), hrsBenefit.getBenefitYear()));
                hrsBenefit.setAmountPayedReceipt(moHrsReceipt.getBenefitAmount(mnFormType, hrsBenefit.getBenefitAnn(), hrsBenefit.getBenefitYear()));
            }
            
            if (mnFormType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
                moIntBenefitTableDaysToPay.setValue(benefitTableAnniversaryAux == null ? 0 : (int) benefitTableAnniversaryAux.getValue());
                moDecBenefitTableBonusPercentage.setValue(benefitTableAnniversary == null ? 0d : benefitTableAnniversary.getValue());
            }
            else {
                moIntBenefitTableDaysToPay.setValue(benefitTableAnniversary == null ? 0 : (int) benefitTableAnniversary.getValue());
                moDecBenefitTableBonusPercentage.setValue(benefitTableAnniversary == null ? 0d : 1d);
            }
            
            for (SHrsBenefit hrsBenefit : maHrsBenefits) {  // XXX Sergio Flores, 2018-07-11: It is not necessary to iterate this array, allways has only one element, if any!
                if (SLibUtils.compareKeys(hrsBenefit.getBenefitKey(), new int[] { mnFormType, seniority, mnBenefitYear })) {
                    moDecDaysPayed.setValue(hrsBenefit.getValuePayed() + hrsBenefit.getValuePayedReceipt());
                    moCurAmountPayed.getField().setValue(hrsBenefit.getAmountPayed() + hrsBenefit.getAmountPayedReceipt());
                    moDecDaysToPay.setValue(hrsBenefit.getValuePending() <= 0 ? 0 : hrsBenefit.getValuePending());
                    computeBenefitToPay();
                    found = true;
                    break;
                }
            }
            
            if (!found) {
                moDecDaysPayed.setValue(0d);
                moDecDaysToPay.setValue(moIntBenefitTableDaysToPay.getValue());
                computeBenefitToPay();
            }
            
            computeBenefitPayable();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void createHrsBenefit() {
        moHrsBenefit = new SHrsBenefit(mnFormType, (Integer) jsAnniversary.getValue(), mnBenefitYear, moDecBenefitTableBonusPercentage.getValue());
        
        for (SHrsBenefit hrsBenefit : maHrsBenefits) {
            if (SLibUtils.compareKeys(hrsBenefit.getBenefitKey(), new int[] { mnFormType, (Integer) jsAnniversary.getValue(), mnBenefitYear })) {
                moHrsBenefit.setValue(hrsBenefit.getValue());
                moHrsBenefit.setValuePayed(hrsBenefit.getValuePayed());
                moHrsBenefit.setAmount(hrsBenefit.getAmount());
                moHrsBenefit.setAmountPayed(hrsBenefit.getAmountPayed());
                break;
            }
        }
        
        moHrsBenefit.setValuePayedReceipt(moDecDaysToPay.getValue());
        moHrsBenefit.setAmountPayedReceipt(moCurAmountToPay.getField().getValue());
        moHrsBenefit.setAmountPayedReceiptSys(getCalculatedBenefit());
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();

        try {
            if (validation.isValid()) {
                createHrsBenefit();
                
                if (mtDateCutoff.compareTo(moDateBaseDate.getValue()) < 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateBase) + "'.");
                    validation.setComponent(moDateCutoff);
                }
                else if (!moEmployee.isActive() && mtDateCutoff.compareTo(moDateLastDismissal_n.getValue()) > 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "'" + SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + "la '" + SGuiUtils.getLabelName(jlDateLastDismissal_n) + "'.");
                    validation.setComponent(moDateCutoff);
                }
                else if ((Integer) jsAnniversary.getValue() == 0) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAnniversary) + "'.");
                    validation.setComponent(((JSpinner.NumberEditor) jsAnniversary.getEditor()).getTextField());
                }
                
                if (validation.isValid() && moEarning.isBasedOnUnits()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TO_PAY, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        validation.setMessage(msg);
                        validation.setComponent(moDecDaysToPay);
                    }
                }
                
                if (validation.isValid()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TO_PAY_TOTAL, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moDecDaysToPay);
                        }
                    }
                }
                
                if (validation.isValid()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_DAYS_TABLE, SHrsBenefit.VALIDATION_BENEFIT_TYPE);
                    
                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moDecDaysToPay);
                        }
                    }
                }

                if (validation.isValid() && (!moEarning.isBasedOnUnits() || moDecDaysToPay.getValue() != 0)) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_AMOUNT_TO_PAY, 0);
                    
                    if (!msg.isEmpty()) {
                        validation.setMessage(msg);
                        validation.setComponent(moCurAmountToPay.getField().getComponent());
                    }
                }
                
                if (validation.isValid() && (!moEarning.isBasedOnUnits() || moDecDaysToPay.getValue() != 0)) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_AMOUNT_TO_PAY_TOTAL, 0);
                    
                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moCurAmountToPay.getField().getComponent());
                        }
                    }
                }
                
                if (validation.isValid()) {
                    msg = moHrsBenefit.validate(SHrsBenefit.VALID_AMOUNT_TO_PAID_AMOUNT_SYS, 0);

                    if (!msg.isEmpty()) {
                        if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                            validation.setMessage(msg);
                            validation.setComponent(moCurAmountToPay.getField().getComponent());
                        }
                    }
                }
            }
            
            if (validation.isValid()) {
                createHrsBenefit();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
        return validation;
    }

    @Override
    public void addAllListeners() {
        jsAnniversary.addChangeListener(this);
        moDateCutoff.getComponent().addFocusListener(this);
        moDecDaysToPay.addFocusListener(this);
        moCurAmountToPay.getField().getComponent().addFocusListener(this);
        jbPayProportional.addActionListener(this);
        jbPayPending.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jsAnniversary.removeChangeListener(this);
        moDateCutoff.getComponent().removeFocusListener(this);
        moDecDaysToPay.removeFocusListener(this);
        moCurAmountToPay.getField().getComponent().removeFocusListener(this);
        jbPayProportional.removeActionListener(this);
        jbPayPending.removeActionListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case SGuiConsts.PARAM_ROWS:
                SHrsBenefitParams params = (SHrsBenefitParams) value;
                moHrsReceipt = params.getHrsReceipt();
                moHrsEmployeeDays = moHrsReceipt.getHrsEmployee().createEmployeeDays();
                moEarning = params.getEarning();
                moEmployee = params.getHrsReceipt().getHrsEmployee().getEmployee();
                moBenefitTable = params.getBenefitTable();
                moBenefitTableAux = params.getBenefitTableAux();
                mtDateCutoff = params.getDateCutOff();
                
                try {
                    loadBenefitTables(params.getBenefitTable(), params.getBenefitTableAux());
                    readHrsBenefit();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
                break;
                
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SGuiConsts.PARAM_ROWS:
                value = moHrsBenefit;
                break;
            default:
        }
        
        return value;        
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbPayProportional) {
                actionPerformedPayProportional();
            }
            else if (button == jbPayPending) {
                actionPerformedPayPending();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsAnniversary) {
                actionStateChangeAnniversary();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
    }

    @Override
    public void focusLost(FocusEvent evt) {
        if (evt.getSource() instanceof JFormattedTextField) {
            JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();

            if (formattedTextField == moDateCutoff.getComponent()) {
                try {
                    focusLostDateCutOff();
                }
                catch (Exception e) {
                    SLibUtils.showException(this, e);
                }
            }
        }
        else if (evt.getSource() instanceof JTextField) {
            JTextField textField = (JTextField) evt.getSource();

            if (textField == moDecDaysToPay) {
                focusLostDaysToPay();
            }
            else if (textField == moCurAmountToPay.getField()) {
                focusLostAmountToPay();
            }
        }
    }
}
