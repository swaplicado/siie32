/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SDbEmployeeBenefitTables;
import erp.mod.hrs.db.SDbEmployeeBenefitTablesAnnum;
import erp.mod.hrs.db.SDbPayroll;
import erp.mod.hrs.db.SDbPayrollReceipt;
import erp.mod.hrs.db.SHrsBenefit;
import erp.mod.hrs.db.SHrsBenefitUtils;
import erp.mod.hrs.db.SHrsBenefitsManager;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsEmployeeDays;
import erp.mod.hrs.db.SHrsReceipt;
import erp.mod.hrs.utils.SAnniversary;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldDecimal;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollBenefit extends SBeanFormDialog implements ActionListener, ChangeListener, FocusListener {
    
    public static final int PARAMS = 1;

    protected SHrsReceipt moHrsReceipt;
    protected SHrsBenefitsManager moHrsBenefitsManager;
    protected SDbPayrollReceipt moPayrollReceipt;
    protected SDbPayroll moPayroll;
    
    protected SHrsEmployeeDays moHrsEmployeeDays;
    protected SDbEmployee moEmployee;
    protected SDbEarning moEarning;
    protected boolean mbIsBenefitCompByCalendarYear;
    protected boolean mbIsBenefitVacationBonus;
    
    protected SAnniversary moAnniversaryReceipt;
    
    /**
     * Creates new form SDialogPayrollBenefit
     * @param client
     * @param formType
     * @param title
     */
    public SDialogPayrollBenefit(SGuiClient client, int formType, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, formType, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        moTextBenefitType = new sa.lib.gui.bean.SBeanFieldText();
        jlPaymentDaily = new javax.swing.JLabel();
        moCurPaymentDaily = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel12 = new javax.swing.JPanel();
        jlDateBenefits = new javax.swing.JLabel();
        moDateBenefits = new sa.lib.gui.bean.SBeanFieldDate();
        jlDateLastHire = new javax.swing.JLabel();
        moDateLastHire = new sa.lib.gui.bean.SBeanFieldDate();
        jlDateLastDismissal_n = new javax.swing.JLabel();
        moDateLastDismissal_n = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlBenefitsComp = new javax.swing.JLabel();
        jtfBenefitsComp = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlAnniversary = new javax.swing.JLabel();
        jsAnniversary = new javax.swing.JSpinner();
        jtfAnniversaryYear = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        moDatePeriodStart = new sa.lib.gui.bean.SBeanFieldDate();
        jlPeriodSep = new javax.swing.JLabel();
        moDatePeriodEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jlPayroll = new javax.swing.JLabel();
        moDatePayrollStart = new sa.lib.gui.bean.SBeanFieldDate();
        jlPayrollSep = new javax.swing.JLabel();
        moDatePayrollEnd = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel14 = new javax.swing.JPanel();
        jlDateCutoff = new javax.swing.JLabel();
        moDateCutoff = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel9 = new javax.swing.JPanel();
        jlSeniority = new javax.swing.JLabel();
        moIntSeniorityYears = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityYears = new javax.swing.JLabel();
        moIntSeniorityDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jlSeniorityDays = new javax.swing.JLabel();
        jlSeniorityHelp = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jlElapsedDays = new javax.swing.JLabel();
        moIntElapsedDays = new sa.lib.gui.bean.SBeanFieldInteger();
        jlElapsedDays2 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jlBenefitProp = new javax.swing.JLabel();
        moDecBenefitProp = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlBenefitProp1 = new javax.swing.JLabel();
        jlVacationBonusPct = new javax.swing.JLabel();
        moDecVacationBonusPct = new sa.lib.gui.bean.SBeanFieldDecimal();
        jPanel4 = new javax.swing.JPanel();
        jlBenefitGained = new javax.swing.JLabel();
        moDecBenefitGainedDays = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurBenefitGainedAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlBenefitGained1 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jlBenefitPaid = new javax.swing.JLabel();
        moDecBenefitPaidDays = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurBenefitPaidAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlBenefitPayed1 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jlBenefitPending = new javax.swing.JLabel();
        moDecBenefitPendingDays = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurBenefitPendingAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel5 = new javax.swing.JPanel();
        jlBenefitToPay = new javax.swing.JLabel();
        moDecBenefitToPayDays = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurBenefitToPayAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlPay = new javax.swing.JLabel();
        jbPayProp = new javax.swing.JButton();
        jbPayPend = new javax.swing.JButton();
        jbPayAll = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jlBenefitResidue = new javax.swing.JLabel();
        moDecBenefitResidueDays = new sa.lib.gui.bean.SBeanFieldDecimal();
        moCurBenefitResidueAmount = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setTitle("Agregar prestación");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlBenefitType.setText("Tipo prestación:");
        jlBenefitType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlBenefitType);

        moTextBenefitType.setEditable(false);
        moTextBenefitType.setText("TEXT");
        moTextBenefitType.setPreferredSize(new java.awt.Dimension(315, 23));
        jPanel13.add(moTextBenefitType);

        jlPaymentDaily.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPaymentDaily.setText("Pago diario:");
        jlPaymentDaily.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel13.add(jlPaymentDaily);

        moCurPaymentDaily.setToolTipText("Monto pagado");
        moCurPaymentDaily.setEditable(false);
        jPanel13.add(moCurPaymentDaily);

        jPanel2.add(jPanel13);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBenefits.setText("Inicio prestaciones:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlDateBenefits);

        moDateBenefits.setEditable(false);
        jPanel12.add(moDateBenefits);

        jlDateLastHire.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateLastHire);

        moDateLastHire.setEditable(false);
        jPanel12.add(moDateLastHire);

        jlDateLastDismissal_n.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlDateLastDismissal_n.setText("Última baja:");
        jlDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel12.add(jlDateLastDismissal_n);

        moDateLastDismissal_n.setEditable(false);
        jPanel12.add(moDateLastDismissal_n);

        jPanel2.add(jPanel12);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitsComp.setText("Tipo cálculo prestación:");
        jlBenefitsComp.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlBenefitsComp);

        jtfBenefitsComp.setEditable(false);
        jtfBenefitsComp.setText("TEXT");
        jtfBenefitsComp.setFocusable(false);
        jtfBenefitsComp.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel6.add(jtfBenefitsComp);

        jPanel2.add(jPanel6);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnniversary.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlAnniversary.setText("Aniversario:*");
        jlAnniversary.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel3.add(jlAnniversary);

        jsAnniversary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jsAnniversary);

        jtfAnniversaryYear.setEditable(false);
        jtfAnniversaryYear.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnniversaryYear.setText("2000");
        jtfAnniversaryYear.setFocusable(false);
        jtfAnniversaryYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel3.add(jtfAnniversaryYear);

        jPanel2.add(jPanel3);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPeriod.setText("Período prestación:");
        jlPeriod.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlPeriod);

        moDatePeriodStart.setEditable(false);
        jPanel11.add(moDatePeriodStart);

        jlPeriodSep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPeriodSep.setText("-");
        jlPeriodSep.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel11.add(jlPeriodSep);

        moDatePeriodEnd.setToolTipText("Fecha corte predeterminada");
        moDatePeriodEnd.setEditable(false);
        jPanel11.add(moDatePeriodEnd);

        jlPayroll.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPayroll.setText("Período nómina:");
        jlPayroll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel11.add(jlPayroll);

        moDatePayrollStart.setEditable(false);
        jPanel11.add(moDatePayrollStart);

        jlPayrollSep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPayrollSep.setText("-");
        jlPayrollSep.setPreferredSize(new java.awt.Dimension(10, 23));
        jPanel11.add(jlPayrollSep);

        moDatePayrollEnd.setToolTipText("Fecha corte predeterminada");
        moDatePayrollEnd.setEditable(false);
        jPanel11.add(moDatePayrollEnd);

        jPanel2.add(jPanel11);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateCutoff.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlDateCutoff.setText("Fecha corte:*");
        jlDateCutoff.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel14.add(jlDateCutoff);
        jPanel14.add(moDateCutoff);

        jPanel2.add(jPanel14);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlSeniority);

        moIntSeniorityYears.setEditable(false);
        moIntSeniorityYears.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(moIntSeniorityYears);

        jlSeniorityYears.setText("años");
        jlSeniorityYears.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel9.add(jlSeniorityYears);

        moIntSeniorityDays.setEditable(false);
        moIntSeniorityDays.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(moIntSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel9.add(jlSeniorityDays);

        jlSeniorityHelp.setForeground(java.awt.Color.gray);
        jlSeniorityHelp.setText("(Del inicio de prestaciones a la fecha de corte)");
        jlSeniorityHelp.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel9.add(jlSeniorityHelp);

        jPanel2.add(jPanel9);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlElapsedDays.setText("Días transcurridos:");
        jlElapsedDays.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlElapsedDays);

        moIntElapsedDays.setEditable(false);
        jPanel8.add(moIntElapsedDays);

        jlElapsedDays2.setForeground(java.awt.Color.gray);
        jlElapsedDays2.setText("(Del inicio del período a la fecha de corte)");
        jlElapsedDays2.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(jlElapsedDays2);

        jPanel2.add(jPanel8);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitProp.setText("Parte proporcional:*");
        jlBenefitProp.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlBenefitProp);
        jPanel16.add(moDecBenefitProp);

        jlBenefitProp1.setForeground(java.awt.Color.gray);
        jlBenefitProp1.setText("(Del inicio del período a la fecha de corte)");
        jlBenefitProp1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel16.add(jlBenefitProp1);

        jlVacationBonusPct.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlVacationBonusPct.setText("Prima vacacional:");
        jlVacationBonusPct.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel16.add(jlVacationBonusPct);

        moDecVacationBonusPct.setEditable(false);
        jPanel16.add(moDecVacationBonusPct);

        jPanel2.add(jPanel16);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitGained.setText("Días y monto ganados:");
        jlBenefitGained.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlBenefitGained);

        moDecBenefitGainedDays.setEditable(false);
        jPanel4.add(moDecBenefitGainedDays);

        moCurBenefitGainedAmount.setEditable(false);
        jPanel4.add(moCurBenefitGainedAmount);

        jlBenefitGained1.setForeground(java.awt.Color.gray);
        jlBenefitGained1.setText("(Del aniversario especificado)");
        jlBenefitGained1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel4.add(jlBenefitGained1);

        jPanel2.add(jPanel4);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitPaid.setText("Días y monto gozados:");
        jlBenefitPaid.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlBenefitPaid);

        moDecBenefitPaidDays.setEditable(false);
        jPanel10.add(moDecBenefitPaidDays);

        moCurBenefitPaidAmount.setEditable(false);
        jPanel10.add(moCurBenefitPaidAmount);

        jlBenefitPayed1.setForeground(java.awt.Color.gray);
        jlBenefitPayed1.setText("(Del aniversario especificado)");
        jlBenefitPayed1.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel10.add(jlBenefitPayed1);

        jPanel2.add(jPanel10);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitPending.setText("Días y monto pendientes:");
        jlBenefitPending.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlBenefitPending);

        moDecBenefitPendingDays.setEditable(false);
        jPanel17.add(moDecBenefitPendingDays);

        moCurBenefitPendingAmount.setEditable(false);
        jPanel17.add(moCurBenefitPendingAmount);

        jPanel2.add(jPanel17);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitToPay.setText("Días y monto a pagar:*");
        jlBenefitToPay.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlBenefitToPay);
        jPanel5.add(moDecBenefitToPayDays);
        jPanel5.add(moCurBenefitToPayAmount);

        jlPay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPay.setText("Pagar:");
        jlPay.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel5.add(jlPay);

        jbPayProp.setText("Lo proporcional");
        jbPayProp.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPayProp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jbPayProp);

        jbPayPend.setText("Lo pendiente");
        jbPayPend.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPayPend.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jbPayPend);

        jbPayAll.setText("Lo ganado");
        jbPayAll.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbPayAll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jbPayAll);

        jPanel2.add(jPanel5);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitResidue.setText("Días y monto remanente:");
        jlBenefitResidue.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlBenefitResidue);

        moDecBenefitResidueDays.setEditable(false);
        jPanel15.add(moDecBenefitResidueDays);

        moCurBenefitResidueAmount.setEditable(false);
        jPanel15.add(moCurBenefitResidueAmount);

        jPanel2.add(jPanel15);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPayAll;
    private javax.swing.JButton jbPayPend;
    private javax.swing.JButton jbPayProp;
    private javax.swing.JLabel jlAnniversary;
    private javax.swing.JLabel jlBenefitGained;
    private javax.swing.JLabel jlBenefitGained1;
    private javax.swing.JLabel jlBenefitPaid;
    private javax.swing.JLabel jlBenefitPayed1;
    private javax.swing.JLabel jlBenefitPending;
    private javax.swing.JLabel jlBenefitProp;
    private javax.swing.JLabel jlBenefitProp1;
    private javax.swing.JLabel jlBenefitResidue;
    private javax.swing.JLabel jlBenefitToPay;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlBenefitsComp;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateCutoff;
    private javax.swing.JLabel jlDateLastDismissal_n;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlElapsedDays;
    private javax.swing.JLabel jlElapsedDays2;
    private javax.swing.JLabel jlPay;
    private javax.swing.JLabel jlPaymentDaily;
    private javax.swing.JLabel jlPayroll;
    private javax.swing.JLabel jlPayrollSep;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlPeriodSep;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityHelp;
    private javax.swing.JLabel jlSeniorityYears;
    private javax.swing.JLabel jlVacationBonusPct;
    private javax.swing.JSpinner jsAnniversary;
    private javax.swing.JTextField jtfAnniversaryYear;
    private javax.swing.JTextField jtfBenefitsComp;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBenefitGainedAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBenefitPaidAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBenefitPendingAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBenefitResidueAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurBenefitToPayAmount;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurPaymentDaily;
    private sa.lib.gui.bean.SBeanFieldDate moDateBenefits;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutoff;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastDismissal_n;
    private sa.lib.gui.bean.SBeanFieldDate moDateLastHire;
    private sa.lib.gui.bean.SBeanFieldDate moDatePayrollEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDatePayrollStart;
    private sa.lib.gui.bean.SBeanFieldDate moDatePeriodEnd;
    private sa.lib.gui.bean.SBeanFieldDate moDatePeriodStart;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitGainedDays;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitPaidDays;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitPendingDays;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitProp;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitResidueDays;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecBenefitToPayDays;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecVacationBonusPct;
    private sa.lib.gui.bean.SBeanFieldInteger moIntElapsedDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityDays;
    private sa.lib.gui.bean.SBeanFieldInteger moIntSeniorityYears;
    private sa.lib.gui.bean.SBeanFieldText moTextBenefitType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 800, 500);
        
        mbFirstActivation = true;

        jbSave.setText("Aceptar");

        moTextBenefitType.setTextSettings(SGuiUtils.getLabelName(jlPeriod.getText()), 250);
        moCurPaymentDaily.setCompoundFieldSettings(miClient);
        moCurPaymentDaily.getField().setDecimalSettings(SGuiUtils.getLabelName(jlPaymentDaily), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDateBenefits.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateBenefits), false);
        moDateLastHire.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateLastHire), false);
        moDateLastDismissal_n.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateLastDismissal_n), false);
        moDatePeriodStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlPeriod), false);
        moDatePeriodEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlPeriod), false);
        moDatePayrollStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlPayroll), false);
        moDatePayrollEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlPayroll), false);
        
        moDateCutoff.setDateSettings(miClient, SGuiUtils.getLabelName(jlDateCutoff), true); // editable
        moIntSeniorityYears.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority) + " " + jlSeniorityYears.getText(), SGuiConsts.GUI_TYPE_INT, false);
        moIntSeniorityDays.setIntegerSettings(SGuiUtils.getLabelName(jlSeniority) + " " + jlSeniorityDays.getText(), SGuiConsts.GUI_TYPE_INT, false);
        moIntElapsedDays.setIntegerSettings(SGuiUtils.getLabelName(jlElapsedDays.getText()), SGuiConsts.GUI_TYPE_INT, false);
        moDecBenefitProp.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitProp), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, true); // editable
        moDecVacationBonusPct.setDecimalSettings(SGuiUtils.getLabelName(jlVacationBonusPct), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        
        moDecBenefitGainedDays.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitGained), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurBenefitGainedAmount.setCompoundFieldSettings(miClient);
        moCurBenefitGainedAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBenefitGained), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecBenefitPaidDays.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitPaid), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurBenefitPaidAmount.setCompoundFieldSettings(miClient);
        moCurBenefitPaidAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBenefitPaid), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecBenefitPendingDays.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitPending), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurBenefitPendingAmount.setCompoundFieldSettings(miClient);
        moCurBenefitPendingAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBenefitPending), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecBenefitToPayDays.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitToPay), SGuiConsts.GUI_TYPE_DEC_QTY, true); // editable
        moCurBenefitToPayAmount.setCompoundFieldSettings(miClient);
        moCurBenefitToPayAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBenefitToPay), SGuiConsts.GUI_TYPE_DEC_AMT, true); // editable
        moDecBenefitResidueDays.setDecimalSettings(SGuiUtils.getLabelName(jlBenefitResidue), SGuiConsts.GUI_TYPE_DEC_QTY, false);
        moCurBenefitResidueAmount.setCompoundFieldSettings(miClient);
        moCurBenefitResidueAmount.getField().setDecimalSettings(SGuiUtils.getLabelName(jlBenefitResidue), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        //moFields.addField(moTextBenefitType);
        //moFields.addField(moCurPaymentDaily.getField());
        //moFields.addField(moDateBenefits);
        //moFields.addField(moDateLastHire);
        //moFields.addField(moDateLastDismissal_n);
        //moFields.addField(moDatePeriodStart);
        //moFields.addField(moDatePeriodEnd);
        //moFields.addField(moDatePayrollStart);
        //moFields.addField(moDatePayrollEnd);
        
        moFields.addField(moDateCutoff);
        //moFields.addField(moIntSeniorityYears);
        //moFields.addField(moIntSeniorityDays);
        //moFields.addField(moIntElapsedDays);
        //moFields.addField(moDecBenefitProp);
        //moFields.addField(moDecVacationBonusPct);
        
        //moFields.addField(moDecBenefitGainedDays);
        //moFields.addField(moCurBenefitGainedAmount.getField());
        //moFields.addField(moDecBenefitPaidDays);
        //moFields.addField(moCurBenefitPaidAmount.getField());
        //moFields.addField(moDecBenefitPendingDays);
        //moFields.addField(moCurBenefitPendingAmount.getField());
        moFields.addField(moDecBenefitToPayDays);
        moFields.addField(moCurBenefitToPayAmount.getField());
        //moFields.addField(moDecBenefitResidueDays);
        //moFields.addField(moCurBenefitResidueAmount.getField());

        moFields.setFormButton(jbSave);

        moTextBenefitType.setEditable(false);
        moCurPaymentDaily.setEditable(false);
        moDateBenefits.setEditable(false);
        moDateLastHire.setEditable(false);
        moDateLastDismissal_n.setEditable(false);
        moDatePeriodStart.setEditable(false);
        moDatePeriodEnd.setEditable(false);
        moDatePayrollStart.setEditable(false);
        moDatePayrollEnd.setEditable(false);
        
        moIntSeniorityYears.setEditable(false);
        moIntSeniorityDays.setEditable(false);
        moIntElapsedDays.setEditable(false);
        moDecBenefitProp.setEditable(false);
        moDecVacationBonusPct.setEditable(false);
        
        moDecBenefitGainedDays.setEditable(false);
        moCurBenefitGainedAmount.setEditable(false);
        moDecBenefitPaidDays.setEditable(false);
        moCurBenefitPaidAmount.setEditable(false);
        moDecBenefitPendingDays.setEditable(false);
        moCurBenefitPendingAmount.setEditable(false);
        moDecBenefitResidueDays.setEditable(false);
        moCurBenefitResidueAmount.setEditable(false);
        
        jsAnniversary.setModel(new SpinnerNumberModel(1, 1, SDbEmployeeBenefitTables.MAX_ANNUMS, 1));

        addAllListeners();
    }
    
    @Override
    protected void windowActivated() {
        if (mbFirstActivation) {
            mbFirstActivation = false;
            ((JSpinner.NumberEditor) jsAnniversary.getEditor()).getTextField().requestFocus();
        }
    }
    
    /**
     * Show information of payroll, receipt and employee:
     */
    private void showPayrollReceiptAndEmployee() {
        moTextBenefitType.setValue((String) miClient.getSession().readField(SModConsts.HRSS_TP_BEN, new int[] { moEarning.getFkBenefitTypeId() }, SDbRegistry.FIELD_NAME));
        jtfBenefitsComp.setText(SHrsBenefitUtils.getBenefitCompDescription(SHrsBenefitUtils.getBenefitCompFromBenefitType(moEarning.getFkBenefitTypeId())));
        
        moCurPaymentDaily.getField().setValue(moPayrollReceipt.getPaymentDaily());
        moDateBenefits.setValue(moPayrollReceipt.getDateBenefits());
        moDateLastHire.setValue(moPayrollReceipt.getDateLastHire());
        moDateLastDismissal_n.setValue(moPayrollReceipt.isActive() ? null : moPayrollReceipt.getDateLastDismissal_n());
        
        moDatePayrollStart.setValue(moPayroll.getDateStart());
        moDatePayrollEnd.setValue(moPayroll.getDateEnd());
        
        if (mbIsBenefitVacationBonus) {
            jlVacationBonusPct.setEnabled(true);
        }
        else {
            jlVacationBonusPct.setEnabled(false);
        }
    }
    
    /**
     * Initialize default Anniversary from payroll receipt.
     */
    private void initAnniversaryFromReceipt() {
        Date cutoff = null;
        
        if (moPayrollReceipt.isActive()) { // is employee active in receipt?
            cutoff = moPayroll.getDateEnd();
        }
        else {
            cutoff = moPayrollReceipt.getDateLastDismissal_n();
        }
        
        moAnniversaryReceipt = new SAnniversary(moPayrollReceipt.getDateBenefits(), cutoff);
        
        jsAnniversary.setValue(moAnniversaryReceipt.getCurrentAnniversary());
        
        computeAnniversary();
    }
    
    /**
     * Compute anniversary from user input.
     */
    private void computeAnniversary() {
        // render benefit period and set corresponding cutoff:
        
        int anniversary = (Integer) jsAnniversary.getValue();
        int anniversaryYear = moEmployee.getAnniversaryYear(anniversary);
        Date periodStart = null;
        Date periodEnd = null;
        
        jtfAnniversaryYear.setText("" + anniversaryYear);
        
        if (mbIsBenefitCompByCalendarYear) {
            periodStart = SLibTimeUtils.createDate(anniversaryYear, 1, 1); // start from corresponding calendar year
            
            if (anniversary == moAnniversaryReceipt.getCurrentAnniversary()) {
                periodEnd = moAnniversaryReceipt.getPeriodCutoff().toDate(); // end limited to receipt cutoff
            }
            else {
                periodEnd = SLibTimeUtils.createDate(anniversaryYear, 12, 31); // end from corresponding calendar year
            }
        }
        else {
            periodStart = moEmployee.getAnniversaryDate(anniversary); // start from corresponding anniversary
            
            if (anniversary == moAnniversaryReceipt.getCurrentAnniversary()) {
                periodEnd = moAnniversaryReceipt.getPeriodCutoff().toDate(); // end limited to receipt cutoff
            }
            else {
                periodEnd = SLibTimeUtils.addDate(moEmployee.getAnniversaryDate(anniversary + 1), 0, 0, -1); // end from corresponding anniversary
            }
        }
        
        if (periodStart.before(moPayrollReceipt.getDateBenefits())) {
            periodStart = moPayrollReceipt.getDateBenefits();
        }
        
        if (!moPayrollReceipt.isActive() && moPayrollReceipt.getDateLastDismissal_n() != null && periodEnd.after(moPayrollReceipt.getDateLastDismissal_n())) {
            periodEnd = moPayrollReceipt.getDateLastDismissal_n();
        }
        
        moDatePeriodStart.setValue(periodStart);
        moDatePeriodEnd.setValue(periodEnd);
        moDateCutoff.setValue(periodEnd);
        
        computeCutoff();
        
        // render information of benefit:
        
        try {
            SDbEmployeeBenefitTablesAnnum annumBenefitVac = null; // if current benefit type is vacation bonus
            SDbEmployeeBenefitTablesAnnum annumBenefit = moHrsBenefitsManager.getBenefitAnnum(moEarning.getFkBenefitTypeId(), anniversary);
            SHrsBenefit hrsBenefitPaid = moHrsBenefitsManager.getBenefitPaid(moEarning.getFkBenefitTypeId(), anniversaryYear, anniversary);
            
            if (mbIsBenefitVacationBonus) {
                annumBenefitVac = moHrsBenefitsManager.getBenefitAnnum(SModSysConsts.HRSS_TP_BEN_VAC, anniversary);
                moDecVacationBonusPct.setValue(annumBenefit.getBenefitBonusPct());
                
                moDecBenefitGainedDays.setValue((double) annumBenefitVac.getBenefitDays());
                moCurBenefitGainedAmount.getField().setValue(moHrsReceipt.calculateBenefit(moEarning, moHrsEmployeeDays, annumBenefitVac.getBenefitDays(), annumBenefit.getBenefitBonusPct()));
            }
            else {
                annumBenefitVac = null;
                moDecVacationBonusPct.setValue(1d);
                
                moDecBenefitGainedDays.setValue((double) annumBenefit.getBenefitDays());
                moCurBenefitGainedAmount.getField().setValue(moHrsReceipt.calculateBenefit(moEarning, moHrsEmployeeDays, annumBenefit.getBenefitDays(), 1d));
            }
            
            if (hrsBenefitPaid == null) {
                moDecBenefitPaidDays.setValue(0d);
                moCurBenefitPaidAmount.getField().setValue(0d);
            }
            else {
                moDecBenefitPaidDays.setValue(hrsBenefitPaid.getPaidDays());
                moCurBenefitPaidAmount.getField().setValue(hrsBenefitPaid.getPaidAmount());
            }
            
            moDecBenefitPendingDays.setValue(moDecBenefitGainedDays.getValue() - moDecBenefitPaidDays.getValue());
            moCurBenefitPendingAmount.getField().setValue(moCurBenefitGainedAmount.getField().getValue() - moCurBenefitPaidAmount.getField().getValue());
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    /**
     * Compute cutoff from user input.
     */
    private void computeCutoff() {
        SAnniversary anniversaryCutoff;
        SAnniversary anniversaryBenefit;
    
        if (moDateCutoff.getValue() == null) {
            anniversaryCutoff = null;
            moIntSeniorityYears.setValue(0);
            moIntSeniorityDays.setValue(0);
            
            anniversaryBenefit = null;
            moIntElapsedDays.setValue(0);
            moDecBenefitProp.setValue(0d);
        }
        else {
            anniversaryCutoff = moEmployee.createAnniversary(moDateCutoff.getValue());
            moIntSeniorityYears.setValue(anniversaryCutoff.getElapsedYears());
            moIntSeniorityDays.setValue(anniversaryCutoff.getElapsedYearDaysForBenefits());
            
            anniversaryBenefit = new SAnniversary(moDatePeriodStart.getValue(), moDateCutoff.getValue());
            moIntElapsedDays.setValue(anniversaryBenefit.getElapsedYearDaysForBenefits());
            moDecBenefitProp.setValue(anniversaryBenefit.getCurrentAnniversaryPropPartForBenefits());
        }
    }
    
    private double calculateBenefitToBePayedAmount() {
        double bonusPct = mbIsBenefitVacationBonus ? moDecVacationBonusPct.getValue() : 1d;
        return moHrsReceipt.calculateBenefit(moEarning, moHrsEmployeeDays, moDecBenefitToPayDays.getValue(), bonusPct);
    }
    
    private void computeBenefitToBePayedAmount() {
        moCurBenefitToPayAmount.getField().setValue(calculateBenefitToBePayedAmount());
        
        computeBenefitResidue();
    }
    
    private void computeBenefitResidue() {
        double days = moDecBenefitPendingDays.getValue() - moDecBenefitToPayDays.getValue();
        double amount = moCurBenefitPendingAmount.getField().getValue() - moCurBenefitToPayAmount.getField().getValue();
        moDecBenefitResidueDays.setValue(days > 0d ? days : 0d);
        moCurBenefitResidueAmount.getField().setValue(amount > 0 ? amount : 0d);
    }
    
    private SHrsBenefit createHrsBenefit() {
        int benefitAnniversary = (Integer) jsAnniversary.getValue();
        int benefitYear = moEmployee.getAnniversaryYear(benefitAnniversary);
        
        SHrsBenefit hrsBenefit = new SHrsBenefit(moEarning.getFkBenefitTypeId(), benefitAnniversary, benefitYear);
        
        hrsBenefit.setBenefitBonusPct(moDecVacationBonusPct.getValue());
        
        hrsBenefit.setReceiptDays(moDecBenefitToPayDays.getValue());
        hrsBenefit.setReceiptAmount(moCurBenefitToPayAmount.getField().getValue());
        
        return hrsBenefit;
    }
    
    /*
     * Methods for listeners:
     */

    private void actionPerformedPayProp() {
        moDecBenefitToPayDays.setValue(moDecBenefitPendingDays.getValue() * moDecBenefitProp.getValue());
        computeBenefitToBePayedAmount();
        
        moDecBenefitToPayDays.requestFocusInWindow();
    }
    
    private void actionPerformedPayPend() {
        moDecBenefitToPayDays.setValue(moDecBenefitPendingDays.getValue());
        computeBenefitToBePayedAmount();
        
        moDecBenefitToPayDays.requestFocusInWindow();
    }
    
    private void actionPerformedPayAll() {
        moDecBenefitToPayDays.setValue(moDecBenefitGainedDays.getValue());
        computeBenefitToBePayedAmount();
        
        moDecBenefitToPayDays.requestFocusInWindow();
    }
    
    private void stateChangedAnniversary() {
        computeAnniversary();
    }
    
    private void focusLostCutoff() {
        computeCutoff();
    }
    
    private void focusLostBenefitToBePayedDays() {
        computeBenefitToBePayedAmount();
    }
    
    private void focusLostBenefitToBePayedAmount() {
        computeBenefitResidue();
    }
    
    /*
     * Overriden listeners:
     */

    @Override
    public void reloadCatalogues() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        DecimalFormat formatDays = SLibUtils.getDecimalFormatQuantity();

        if (validation.isValid()) {
            if (moDateCutoff.getValue().before(moEmployee.getDateBenefits())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "', " + SLibUtils.DateFormatDate.format(moDateCutoff.getValue()) + "," + 
                        SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + " '" + SLibUtils.DateFormatDate.format(moEmployee.getDateBenefits()) + "'.");
                validation.setComponent(moDateCutoff);
            }
            else if (!moEmployee.isActive() && moEmployee.getDateLastDismissal_n() != null && moDateCutoff.getValue().after(moEmployee.getDateLastDismissal_n())) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDateCutoff) + "', " + SLibUtils.DateFormatDate.format(moDateCutoff.getValue()) + "," + 
                        SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + " '" + SLibUtils.DateFormatDate.format(moEmployee.getDateLastDismissal_n()) + "'.");
                validation.setComponent(moDateCutoff);
            }
            else if (moDecBenefitToPayDays.getValue() > moDecBenefitPendingDays.getValue() && miClient.showMsgBoxConfirm(
                    "Los días a pagar (" + formatDays.format(moDecBenefitToPayDays.getValue()) + ") "
                            + "son mayores a los días pendientes (" + formatDays.format(moDecBenefitPendingDays.getValue()) + ").\n"
                            + "Debería corregir los días a pagar u optar por continuar y transgredir la prestación.\n"
                            + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + moDecBenefitToPayDays.getFieldName() + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + " " + formatDays.format(moDecBenefitPendingDays.getValue()) + ".");
                validation.setComponent(moDecBenefitToPayDays);
            }
        }
        
        return validation;
    }

    @Override
    public void addAllListeners() {
        jbPayProp.addActionListener(this);
        jbPayPend.addActionListener(this);
        jbPayAll.addActionListener(this);
        
        jsAnniversary.addChangeListener(this);
        
        moDateCutoff.getComponent().addFocusListener(this);
        moDecBenefitToPayDays.addFocusListener(this);
        moCurBenefitToPayAmount.getField().getComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPayProp.removeActionListener(this);
        jbPayPend.removeActionListener(this);
        jbPayAll.removeActionListener(this);
        
        jsAnniversary.removeChangeListener(this);
        
        moDateCutoff.getComponent().removeFocusListener(this);
        moDecBenefitToPayDays.removeFocusListener(this);
        moCurBenefitToPayAmount.getField().getComponent().removeFocusListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case PARAMS:
                moFields.resetFields();
                
                Params params = (Params) value;
                moHrsReceipt = params.HrsReceipt;
                moHrsBenefitsManager = params.HrsReceipt.getHrsBenefitsManager();
                moPayrollReceipt = moHrsReceipt.getPayrollReceipt();
                moPayroll = moHrsReceipt.getHrsPayroll().getPayroll();
                
                moHrsEmployeeDays = moHrsReceipt.getHrsEmployee().createEmployeeDays();
                moEmployee = params.HrsReceipt.getHrsEmployee().getEmployee();
                moEarning = params.Earning;
                mbIsBenefitCompByCalendarYear = SHrsBenefitUtils.getBenefitCompFromBenefitType(moEarning.getFkBenefitTypeId()) == SHrsConsts.BEN_COMP_CALENDAR_YEAR;
                mbIsBenefitVacationBonus = moEarning.getFkBenefitTypeId() == SModSysConsts.HRSS_TP_BEN_VAC_BON;
                
                showPayrollReceiptAndEmployee();
                initAnniversaryFromReceipt();
                break;
                
            default:
                miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.HRS_BEN:
                value = createHrsBenefit();
                break;
            default:
                miClient.showMsgBoxWarning(SLibConsts.ERR_MSG_OPTION_UNKNOWN);
        }
        
        return value;        
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbPayProp) {
                actionPerformedPayProp();
            }
            else if (button == jbPayPend) {
                actionPerformedPayPend();
            }
            else if (button == jbPayAll) {
                actionPerformedPayAll();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();

            if (spinner == jsAnniversary) {
                stateChangedAnniversary();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        
    }

    @Override
    public void focusLost(FocusEvent evt) {
        if (evt.getSource() instanceof JFormattedTextField) {
            JFormattedTextField field = (JFormattedTextField) evt.getSource();
            
            if (field == moDateCutoff.getComponent()) {
                focusLostCutoff();
            }
        }
        else if (evt.getSource() instanceof SBeanFieldDecimal) {
            JTextField textField = (JTextField) evt.getSource();

            if (textField == moDecBenefitToPayDays) {
                focusLostBenefitToBePayedDays();
            }
            else if (textField == moCurBenefitToPayAmount.getField()) {
                focusLostBenefitToBePayedAmount();
            }
        }
    }
    
    public class Params {
        
        public SHrsReceipt HrsReceipt;
        public SDbEarning Earning;
        
        public Params(final SHrsReceipt hrsReceipt, final SDbEarning earning) {
            HrsReceipt = hrsReceipt;
            Earning = earning;
        }
    }
}
