/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.client.SClientInterface;
import erp.mfin.data.SFinUtilities;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbHoliday;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Claudio Peña
 */
public class SFormCopyHolidays extends SBeanForm {

    private SDbHoliday moRegistry;

    /**
     * Creates new form SFormCopyHolidays
     * @param client
     * @param title
     */
    public SFormCopyHolidays(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_HOL, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldInteger();

        setPreferredSize(new java.awt.Dimension(120, 49));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del año a copiar: "));
        jPanel1.setPreferredSize(new java.awt.Dimension(80, 49));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setAlignmentX(1.5F);
        jPanel2.setAlignmentY(1.5F);
        jPanel2.setLayout(new java.awt.GridLayout(4, 2, 0, 1));
        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setForeground(new java.awt.Color(0, 0, 255));
        jlYear.setText("Año a copiar:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlYear);

        moIntYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(moIntYear);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jlYear;
    private sa.lib.gui.bean.SBeanFieldInteger moIntYear;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
    
        moFields.addField(moIntYear);

        moFields.setFormButton(jbSave);
        jbEdit.setEnabled(false);
        jbReadInfo.setEnabled(false);
        jtfRegistryKey.setEnabled(false);
        
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int year = SLibConsts.UNDEFINED;
        
        moRegistry = (SDbHoliday) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        moIntYear.setValue(year);

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moIntYear.setEditable(true);
        }
        else {
            moIntYear.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbHoliday registry = new SDbHoliday();

        if(SFinUtilities.finYearExists((SClientInterface) miClient, miClient.getSession().getCurrentYear())) {
            if(!SDbHoliday.existHolidaysInCurrentYear(miClient.getSession(), miClient.getSession().getCurrentYear())) {
                if(SDbHoliday.existHolidaysToCopy(miClient.getSession(), moIntYear.getValue())) {
                    String mySql = "SELECT id_hdy, id_hol, code, name, dt FROM hrs_hol WHERE id_hdy = " + moIntYear.getValue() + " AND NOT b_del;";
                    Statement statement = miClient.getSession().getStatement().getConnection().createStatement();
                    ResultSet resultSet = statement.executeQuery(mySql);

                    while (resultSet.next()) {
                        registry.initRegistry();
                        registry.setPkHolidayYearId(miClient.getSession().getCurrentYear());
                        registry.setPkHolidayId(resultSet.getInt("id_hol"));
                        registry.setCode(resultSet.getString("code"));
                        registry.setName(resultSet.getString("name"));
                        registry.setDate(SDbHoliday.validateDate(miClient.getSession().getCurrentYear(), resultSet.getDate("dt")));
                        registry.setDeleted(false);
                        registry.setFkUserInsertId(miClient.getSession().getUser().getPkUserId());
                        registry.setFkUserUpdateId(miClient.getSession().getUser().getPkUserId());
                        registry.setTsUserInsert(miClient.getSession().getCurrentDate());
                        registry.setTsUserUpdate(miClient.getSession().getCurrentDate());

                        registry.save(miClient.getSession());

                    }
                    miClient.showMsgBoxInformation("Días feriados copiados al año " + miClient.getSession().getCurrentYear() + ".\nFavor de revisar nombre y fecha.");
                    return registry;
                }
                miClient.showMsgBoxInformation("No existen días feriados a copiar en el año " + moIntYear.getValue() + ".\nFavor de revisar el año a copiar.");
                return registry;
            }
            else {
                miClient.showMsgBoxInformation("No se pueden copiar los días feriados.\nYa existen días feriados registrados en el año " + miClient.getSession().getCurrentYear() + ".");
                return registry;
            }
        }
        else {
            miClient.showMsgBoxInformation("No se pueden copiar los días feriados.\nSe debe primero crear el ejercicio contable correspondiente al año " + miClient.getSession().getCurrentYear() + ".");
            return registry;
        }

    }

    @Override
    public SGuiValidation validateForm() {
        Date min = null;
        Date max = null;
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moIntYear.getValue() < 2000 || moIntYear.getValue() > 2100) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlYear) + "'" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "2001 y" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "2100.");
                validation.setComponent(moIntYear);
            }
            else {
                min = SLibTimeUtils.createDate(moIntYear.getValue(), 1, 1);
                max = SLibTimeUtils.createDate(moIntYear.getValue(), 12, 31);

            }
        }

        return validation;
    }
}
