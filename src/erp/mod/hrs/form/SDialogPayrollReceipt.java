/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbAbsence;
import erp.mod.hrs.db.SDbAbsenceConsumption;
import erp.mod.hrs.db.SDbBenefitTable;
import erp.mod.hrs.db.SDbDeduction;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SDbLoan;
import erp.mod.hrs.db.SDbPayrollReceiptDeduction;
import erp.mod.hrs.db.SDbPayrollReceiptEarning;
import erp.mod.hrs.db.SHrsBenefit;
import erp.mod.hrs.db.SHrsBenefitParams;
import erp.mod.hrs.db.SHrsEmployeeDays;
import erp.mod.hrs.db.SHrsReceipt;
import erp.mod.hrs.db.SHrsReceiptDeduction;
import erp.mod.hrs.db.SHrsReceiptEarning;
import erp.mod.hrs.db.SHrsUtils;
import erp.mod.hrs.utils.SPayrollBonusUtils;
import erp.mtrn.data.SDataCfd;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFieldText;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SDialogPayrollReceipt extends SBeanFormDialog implements SGridPaneFormOwner, ActionListener, ItemListener, FocusListener, CellEditorListener {

    private static final int COL_VAL = 2;
    private static final int COL_AMT_UNT = 4;

    public final static int PARAM_IS_EDITABLE = 1001; // arbitrary constant to avoid collisions
    public static final String LABEL_AUX_AMT = "Monto auxiliar";
    public static final String LABEL_AUX_VAL = "Valor auxiliar";

    protected SHrsReceipt moHrsReceipt;
    protected SHrsBenefit moHrsBenefit;
    /** Key: ID of earning. */
    protected HashMap<Integer, SDbEarning> moEarnigsMap;
    /** Key: ID of deduction. */
    protected HashMap<Integer, SDbDeduction> moDeductionsMap;
    protected SDbEarning moEarning;
    protected SDbDeduction moDeduction;
    protected String msOriginalEarningCode;
    protected String msOriginalDeductionCode;
    protected SGridPaneForm moGridReceiptEarnings;
    protected SGridPaneForm moGridReceiptDeductions;
    protected SGridPaneForm moGridAbsenceConsumptions;
    protected boolean mbEditable;

    /**
     * Creates new form SDialogPayrollReceipt
     * @param client
     * @param title
     */
    public SDialogPayrollReceipt(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_PAY_RCP, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        moTextNumber = new sa.lib.gui.bean.SBeanFieldText();
        moTextId = new sa.lib.gui.bean.SBeanFieldText();
        jbUpdateEmployeeData = new javax.swing.JButton();
        jtfCfdiNumber = new javax.swing.JTextField();
        jtfCfdiDate = new javax.swing.JTextField();
        jtfCfdiUuid = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moTextPaymentType = new sa.lib.gui.bean.SBeanFieldText();
        jlDateBirth = new javax.swing.JLabel();
        moTextDateBirth = new sa.lib.gui.bean.SBeanFieldText();
        jlAlternativeId = new javax.swing.JLabel();
        moTextAlternativeId = new sa.lib.gui.bean.SBeanFieldText();
        jlFiscalId = new javax.swing.JLabel();
        moTextFiscalId = new sa.lib.gui.bean.SBeanFieldText();
        jlSocialSecurityNumber = new javax.swing.JLabel();
        moTextSocialSecurityNumber = new sa.lib.gui.bean.SBeanFieldText();
        jlSalaryType = new javax.swing.JLabel();
        moTextSalaryType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel29 = new javax.swing.JPanel();
        jlSalary = new javax.swing.JLabel();
        moDecSalary = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateBenefits = new javax.swing.JLabel();
        moTextDateBenefits = new sa.lib.gui.bean.SBeanFieldText();
        jlDepartament = new javax.swing.JLabel();
        moTextDepartament = new sa.lib.gui.bean.SBeanFieldText();
        jlEmployeeType = new javax.swing.JLabel();
        moTextEmployeeType = new sa.lib.gui.bean.SBeanFieldText();
        jlWorkerType = new javax.swing.JLabel();
        moTextWorkerType = new sa.lib.gui.bean.SBeanFieldText();
        jPanel18 = new javax.swing.JPanel();
        jlWage = new javax.swing.JLabel();
        moDecWage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateLastHire = new javax.swing.JLabel();
        moTextDateLastHire = new sa.lib.gui.bean.SBeanFieldText();
        jlPosition = new javax.swing.JLabel();
        moTextPosition = new sa.lib.gui.bean.SBeanFieldText();
        jlRecruitmentSchemaType = new javax.swing.JLabel();
        moTextRecruitmentSchemaType = new sa.lib.gui.bean.SBeanFieldText();
        jlRecruitmentSchemaTypeHelp = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jlSalarySscBase = new javax.swing.JLabel();
        moDecSalarySscBase = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlDateLastDismissal_n = new javax.swing.JLabel();
        moTextDateLastDismissal_n = new sa.lib.gui.bean.SBeanFieldText();
        jlShift = new javax.swing.JLabel();
        moTextShift = new sa.lib.gui.bean.SBeanFieldText();
        jlRecruitmentSchemaTypeReceipt = new javax.swing.JLabel();
        moTextRecruitmentSchemaTypeReceipt = new sa.lib.gui.bean.SBeanFieldText();
        jlRecruitmentSchemaTypeReceiptHelp = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jpEarnings = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        moTextEarningCode = new sa.lib.gui.bean.SBeanFieldText();
        jbPickEarning = new javax.swing.JButton();
        moTextEarningName = new sa.lib.gui.bean.SBeanFieldText();
        jlBonus = new javax.swing.JLabel();
        moKeyBonusType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel28 = new javax.swing.JPanel();
        jlEarningLoan_n1 = new javax.swing.JLabel();
        moKeyEarningOtherPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel2 = new javax.swing.JPanel();
        jlEarningLoan_n = new javax.swing.JLabel();
        moKeyEarningLoan_n = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel25 = new javax.swing.JPanel();
        jlEarningValue = new javax.swing.JLabel();
        moCompEarningValue = new sa.lib.gui.bean.SBeanCompoundField();
        jlEarningValueGap = new javax.swing.JLabel();
        jlEarningAuxAmount1 = new javax.swing.JLabel();
        moCurEarningAuxAmount1 = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlEarningAuxAmount1Hint = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jbAddEarning = new javax.swing.JButton();
        jPanel27 = new javax.swing.JPanel();
        jlEarningAuxValue = new javax.swing.JLabel();
        moCompEarningAuxValue = new sa.lib.gui.bean.SBeanCompoundField();
        jlEarningAuxValueHint = new javax.swing.JLabel();
        jlEarningAuxAmount2 = new javax.swing.JLabel();
        moCurEarningAuxAmount2 = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jlEarningAuxAmount2Hint = new javax.swing.JLabel();
        jpDeductions = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        moTextDeductionCode = new sa.lib.gui.bean.SBeanFieldText();
        jbPickDeduction = new javax.swing.JButton();
        moTextDeductionName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel30 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlDeductionLoan_n = new javax.swing.JLabel();
        moKeyDeductionLoan_n = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel26 = new javax.swing.JPanel();
        jlDeductionValue = new javax.swing.JLabel();
        moCompDeductionValue = new sa.lib.gui.bean.SBeanCompoundField();
        jPanel11 = new javax.swing.JPanel();
        jbAddDeduction = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jpAbsenceConsumption = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlEarningsTotal = new javax.swing.JLabel();
        moCurEarningsTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel23 = new javax.swing.JPanel();
        jlDeductionsTotal = new javax.swing.JLabel();
        moCurDeductionsTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();
        jPanel24 = new javax.swing.JPanel();
        jlNetTotal = new javax.swing.JLabel();
        moCurNetTotal = new sa.lib.gui.bean.SBeanCompoundFieldCurrency();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Recibo de nómina");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del empleado:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel15.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlName.setText("Nombre:");
        jlName.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel16.add(jlName);

        moTextName.setEditable(false);
        moTextName.setText("TEXT");
        moTextName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextName.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel16.add(moTextName);

        moTextNumber.setEditable(false);
        moTextNumber.setText("TEXT");
        moTextNumber.setToolTipText("Clave empleado");
        moTextNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        moTextNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(moTextNumber);

        moTextId.setEditable(false);
        moTextId.setForeground(java.awt.Color.gray);
        moTextId.setText("TEXT");
        moTextId.setToolTipText("ID empleado");
        moTextId.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(moTextId);

        jbUpdateEmployeeData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_wizard.gif"))); // NOI18N
        jbUpdateEmployeeData.setToolTipText("Modificar");
        jbUpdateEmployeeData.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel16.add(jbUpdateEmployeeData);

        jtfCfdiNumber.setEditable(false);
        jtfCfdiNumber.setText("A-000001");
        jtfCfdiNumber.setToolTipText("Serie y folio CFDI");
        jtfCfdiNumber.setFocusable(false);
        jtfCfdiNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jtfCfdiNumber);

        jtfCfdiDate.setEditable(false);
        jtfCfdiDate.setText("01/01/2000");
        jtfCfdiDate.setToolTipText("Serie y folio CFDI");
        jtfCfdiDate.setFocusable(false);
        jtfCfdiDate.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel16.add(jtfCfdiDate);

        jtfCfdiUuid.setEditable(false);
        jtfCfdiUuid.setText("D65AA99D-6BC7-4002-8087-B6EE81ED516C");
        jtfCfdiUuid.setToolTipText("UUID CFDI");
        jtfCfdiUuid.setFocusable(false);
        jtfCfdiUuid.setPreferredSize(new java.awt.Dimension(232, 23));
        jPanel16.add(jtfCfdiUuid);

        jPanel15.add(jPanel16);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlPaymentType.setText("Período pago:");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel17.add(jlPaymentType);

        moTextPaymentType.setEditable(false);
        moTextPaymentType.setText("TEXT");
        moTextPaymentType.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel17.add(moTextPaymentType);

        jlDateBirth.setText("Nacimiento:");
        jlDateBirth.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel17.add(jlDateBirth);

        moTextDateBirth.setEditable(false);
        moTextDateBirth.setText("01/01/2000");
        moTextDateBirth.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel17.add(moTextDateBirth);

        jlAlternativeId.setText("CURP:");
        jlAlternativeId.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel17.add(jlAlternativeId);

        moTextAlternativeId.setEditable(false);
        moTextAlternativeId.setText("XAXX010101XXXXXX00");
        moTextAlternativeId.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel17.add(moTextAlternativeId);

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel17.add(jlFiscalId);

        moTextFiscalId.setEditable(false);
        moTextFiscalId.setText("XAXX010101000");
        moTextFiscalId.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel17.add(moTextFiscalId);

        jlSocialSecurityNumber.setText("NSS:");
        jlSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel17.add(jlSocialSecurityNumber);

        moTextSocialSecurityNumber.setEditable(false);
        moTextSocialSecurityNumber.setText("00000000000");
        moTextSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel17.add(moTextSocialSecurityNumber);

        jlSalaryType.setText("Tipo salario:");
        jlSalaryType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel17.add(jlSalaryType);

        moTextSalaryType.setEditable(false);
        moTextSalaryType.setText("TEXT");
        jPanel17.add(moTextSalaryType);

        jPanel15.add(jPanel17);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalary.setText("Salario diario:");
        jlSalary.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel29.add(jlSalary);

        moDecSalary.setEditable(false);
        moDecSalary.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel29.add(moDecSalary);

        jlDateBenefits.setText("Inicio beneficios:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel29.add(jlDateBenefits);

        moTextDateBenefits.setEditable(false);
        moTextDateBenefits.setText("01/01/2000");
        moTextDateBenefits.setToolTipText("");
        moTextDateBenefits.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel29.add(moTextDateBenefits);

        jlDepartament.setText("Depto.:");
        jlDepartament.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel29.add(jlDepartament);

        moTextDepartament.setEditable(false);
        moTextDepartament.setText("TEXT");
        moTextDepartament.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel29.add(moTextDepartament);

        jlEmployeeType.setText("Tipo empleado:");
        jlEmployeeType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel29.add(jlEmployeeType);

        moTextEmployeeType.setEditable(false);
        moTextEmployeeType.setText("TEXT");
        moTextEmployeeType.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel29.add(moTextEmployeeType);

        jlWorkerType.setText("Tipo obrero:");
        jlWorkerType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlWorkerType);

        moTextWorkerType.setEditable(false);
        moTextWorkerType.setText("TEXT");
        jPanel29.add(moTextWorkerType);

        jPanel15.add(jPanel29);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlWage.setText("Sueldo mensual:");
        jlWage.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel18.add(jlWage);

        moDecWage.setEditable(false);
        moDecWage.setText("0");
        moDecWage.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel18.add(moDecWage);

        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel18.add(jlDateLastHire);

        moTextDateLastHire.setEditable(false);
        moTextDateLastHire.setText("01/01/2000");
        moTextDateLastHire.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel18.add(moTextDateLastHire);

        jlPosition.setText("Puesto:");
        jlPosition.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel18.add(jlPosition);

        moTextPosition.setEditable(false);
        moTextPosition.setText("TEXT");
        moTextPosition.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel18.add(moTextPosition);

        jlRecruitmentSchemaType.setText("Tipo régimen:");
        jlRecruitmentSchemaType.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel18.add(jlRecruitmentSchemaType);

        moTextRecruitmentSchemaType.setEditable(false);
        moTextRecruitmentSchemaType.setText("TEXT");
        moTextRecruitmentSchemaType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel18.add(moTextRecruitmentSchemaType);

        jlRecruitmentSchemaTypeHelp.setForeground(java.awt.Color.gray);
        jlRecruitmentSchemaTypeHelp.setText("(empleado)");
        jlRecruitmentSchemaTypeHelp.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel18.add(jlRecruitmentSchemaTypeHelp);

        jPanel15.add(jPanel18);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlSalarySscBase.setText("SBC:");
        jlSalarySscBase.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel19.add(jlSalarySscBase);

        moDecSalarySscBase.setEditable(false);
        moDecSalarySscBase.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel19.add(moDecSalarySscBase);

        jlDateLastDismissal_n.setText("Última baja:");
        jlDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel19.add(jlDateLastDismissal_n);

        moTextDateLastDismissal_n.setEditable(false);
        moTextDateLastDismissal_n.setText("01/01/2000");
        moTextDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel19.add(moTextDateLastDismissal_n);

        jlShift.setText("Turno:");
        jlShift.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel19.add(jlShift);

        moTextShift.setEditable(false);
        moTextShift.setText("TEXT");
        moTextShift.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel19.add(moTextShift);

        jlRecruitmentSchemaTypeReceipt.setText("Tipo régimen:");
        jlRecruitmentSchemaTypeReceipt.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel19.add(jlRecruitmentSchemaTypeReceipt);

        moTextRecruitmentSchemaTypeReceipt.setEditable(false);
        moTextRecruitmentSchemaTypeReceipt.setText("TEXT");
        moTextRecruitmentSchemaTypeReceipt.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel19.add(moTextRecruitmentSchemaTypeReceipt);

        jlRecruitmentSchemaTypeReceiptHelp.setForeground(java.awt.Color.gray);
        jlRecruitmentSchemaTypeReceiptHelp.setText("(recibo)");
        jlRecruitmentSchemaTypeReceiptHelp.setPreferredSize(new java.awt.Dimension(60, 23));
        jPanel19.add(jlRecruitmentSchemaTypeReceiptHelp);

        jPanel15.add(jPanel19);

        jPanel12.add(jPanel15, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(100, 325));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jpEarnings.setBorder(javax.swing.BorderFactory.createTitledBorder("Percepciones:"));
        jpEarnings.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moTextEarningCode.setText("TEXT");
        moTextEarningCode.setToolTipText("Código percepción");
        moTextEarningCode.setPreferredSize(new java.awt.Dimension(72, 23));
        jPanel8.add(moTextEarningCode);

        jbPickEarning.setText("...");
        jbPickEarning.setToolTipText("Seleccionar percepción");
        jbPickEarning.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbPickEarning);

        moTextEarningName.setEditable(false);
        moTextEarningName.setText("TEXT");
        moTextEarningName.setToolTipText("Nombre percepción");
        moTextEarningName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel8.add(moTextEarningName);

        jlBonus.setText("Bono:");
        jlBonus.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel8.add(jlBonus);

        moKeyBonusType.setToolTipText("Pago de bono");
        moKeyBonusType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(moKeyBonusType);

        jPanel6.add(jPanel8);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningLoan_n1.setText("Tipo otro pago:*");
        jlEarningLoan_n1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel28.add(jlEarningLoan_n1);

        moKeyEarningOtherPaymentType.setToolTipText("Tipo otro pago");
        moKeyEarningOtherPaymentType.setPreferredSize(new java.awt.Dimension(450, 23));
        jPanel28.add(moKeyEarningOtherPaymentType);

        jPanel6.add(jPanel28);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlEarningLoan_n.setText("Crédito/préstamo:*");
        jlEarningLoan_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlEarningLoan_n);

        moKeyEarningLoan_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel2.add(moKeyEarningLoan_n);

        jPanel6.add(jPanel2);

        jPanel25.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlEarningValue.setText("Cantidad/monto:");
        jlEarningValue.setToolTipText("");
        jlEarningValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlEarningValue);

        moCompEarningValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel25.add(moCompEarningValue);

        jlEarningValueGap.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel25.add(jlEarningValueGap);

        jlEarningAuxAmount1.setText("Monto auxiliar:");
        jlEarningAuxAmount1.setToolTipText("");
        jlEarningAuxAmount1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel25.add(jlEarningAuxAmount1);

        moCurEarningAuxAmount1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel25.add(moCurEarningAuxAmount1);

        jlEarningAuxAmount1Hint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlEarningAuxAmount1Hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlEarningAuxAmount1Hint.setToolTipText("Monto auxiliar");
        jlEarningAuxAmount1Hint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel25.add(jlEarningAuxAmount1Hint);

        jPanel6.add(jPanel25);

        jPanel10.setLayout(new java.awt.BorderLayout());

        jbAddEarning.setText("Agregar");
        jbAddEarning.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbAddEarning.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel10.add(jbAddEarning, java.awt.BorderLayout.EAST);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningAuxValue.setText("Valor auxiliar:");
        jlEarningAuxValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlEarningAuxValue);

        moCompEarningAuxValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel27.add(moCompEarningAuxValue);

        jlEarningAuxValueHint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlEarningAuxValueHint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlEarningAuxValueHint.setToolTipText("Monto auxiliar");
        jlEarningAuxValueHint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel27.add(jlEarningAuxValueHint);

        jlEarningAuxAmount2.setText("Monto auxiliar:");
        jlEarningAuxAmount2.setToolTipText("");
        jlEarningAuxAmount2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel27.add(jlEarningAuxAmount2);

        moCurEarningAuxAmount2.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel27.add(moCurEarningAuxAmount2);

        jlEarningAuxAmount2Hint.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlEarningAuxAmount2Hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_view_help.png"))); // NOI18N
        jlEarningAuxAmount2Hint.setToolTipText("Monto auxiliar");
        jlEarningAuxAmount2Hint.setPreferredSize(new java.awt.Dimension(15, 23));
        jPanel27.add(jlEarningAuxAmount2Hint);

        jPanel10.add(jPanel27, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel10);

        jpEarnings.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel4.add(jpEarnings, java.awt.BorderLayout.CENTER);

        jpDeductions.setBorder(javax.swing.BorderFactory.createTitledBorder("Deducciones:"));
        jpDeductions.setPreferredSize(new java.awt.Dimension(425, 1));
        jpDeductions.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moTextDeductionCode.setText("TEXT");
        moTextDeductionCode.setToolTipText("Código deducción");
        moTextDeductionCode.setPreferredSize(new java.awt.Dimension(72, 23));
        jPanel9.add(moTextDeductionCode);

        jbPickDeduction.setText("...");
        jbPickDeduction.setToolTipText("Seleccionar deducción");
        jbPickDeduction.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPickDeduction);

        moTextDeductionName.setEditable(false);
        moTextDeductionName.setText("TEXT");
        moTextDeductionName.setToolTipText("Nombre deducción");
        moTextDeductionName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel9.add(moTextDeductionName);

        jPanel7.add(jPanel9);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel7.add(jPanel30);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlDeductionLoan_n.setText("Crédito/préstamo:*");
        jlDeductionLoan_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlDeductionLoan_n);

        moKeyDeductionLoan_n.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel3.add(moKeyDeductionLoan_n);

        jPanel7.add(jPanel3);

        jPanel26.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlDeductionValue.setText("Cantidad/monto:");
        jlDeductionValue.setToolTipText("");
        jlDeductionValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel26.add(jlDeductionValue);

        moCompDeductionValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel26.add(moCompDeductionValue);

        jPanel7.add(jPanel26);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jbAddDeduction.setText("Agregar");
        jbAddDeduction.setMargin(new java.awt.Insets(2, 0, 2, 0));
        jbAddDeduction.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel11.add(jbAddDeduction, java.awt.BorderLayout.EAST);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel11.add(jPanel21, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel11);

        jpDeductions.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel4.add(jpDeductions, java.awt.BorderLayout.EAST);

        jPanel14.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel20.setLayout(new java.awt.BorderLayout());

        jpAbsenceConsumption.setBorder(javax.swing.BorderFactory.createTitledBorder("Consumo incidencias:"));
        jpAbsenceConsumption.setLayout(new java.awt.BorderLayout());
        jPanel20.add(jpAbsenceConsumption, java.awt.BorderLayout.CENTER);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales:"));
        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel22.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlEarningsTotal.setText("Percepciones:");
        jlEarningsTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlEarningsTotal);

        moCurEarningsTotal.setEditable(false);
        jPanel5.add(moCurEarningsTotal);

        jPanel22.add(jPanel5);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlDeductionsTotal.setText("Deducciones:");
        jlDeductionsTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel23.add(jlDeductionsTotal);

        moCurDeductionsTotal.setEditable(false);
        jPanel23.add(moCurDeductionsTotal);

        jPanel22.add(jPanel23);

        jPanel24.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING, 5, 0));

        jlNetTotal.setText("Total neto:");
        jlNetTotal.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel24.add(jlNetTotal);

        moCurNetTotal.setEditable(false);
        jPanel24.add(moCurNetTotal);

        jPanel22.add(jPanel24);

        jPanel13.add(jPanel22, java.awt.BorderLayout.SOUTH);

        jPanel20.add(jPanel13, java.awt.BorderLayout.EAST);

        jPanel14.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel14, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAddDeduction;
    private javax.swing.JButton jbAddEarning;
    private javax.swing.JButton jbPickDeduction;
    private javax.swing.JButton jbPickEarning;
    private javax.swing.JButton jbUpdateEmployeeData;
    private javax.swing.JLabel jlAlternativeId;
    private javax.swing.JLabel jlBonus;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateBirth;
    private javax.swing.JLabel jlDateLastDismissal_n;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDeductionLoan_n;
    private javax.swing.JLabel jlDeductionValue;
    private javax.swing.JLabel jlDeductionsTotal;
    private javax.swing.JLabel jlDepartament;
    private javax.swing.JLabel jlEarningAuxAmount1;
    private javax.swing.JLabel jlEarningAuxAmount1Hint;
    private javax.swing.JLabel jlEarningAuxAmount2;
    private javax.swing.JLabel jlEarningAuxAmount2Hint;
    private javax.swing.JLabel jlEarningAuxValue;
    private javax.swing.JLabel jlEarningAuxValueHint;
    private javax.swing.JLabel jlEarningLoan_n;
    private javax.swing.JLabel jlEarningLoan_n1;
    private javax.swing.JLabel jlEarningValue;
    private javax.swing.JLabel jlEarningValueGap;
    private javax.swing.JLabel jlEarningsTotal;
    private javax.swing.JLabel jlEmployeeType;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNetTotal;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlPosition;
    private javax.swing.JLabel jlRecruitmentSchemaType;
    private javax.swing.JLabel jlRecruitmentSchemaTypeHelp;
    private javax.swing.JLabel jlRecruitmentSchemaTypeReceipt;
    private javax.swing.JLabel jlRecruitmentSchemaTypeReceiptHelp;
    private javax.swing.JLabel jlSalary;
    private javax.swing.JLabel jlSalarySscBase;
    private javax.swing.JLabel jlSalaryType;
    private javax.swing.JLabel jlShift;
    private javax.swing.JLabel jlSocialSecurityNumber;
    private javax.swing.JLabel jlWage;
    private javax.swing.JLabel jlWorkerType;
    private javax.swing.JPanel jpAbsenceConsumption;
    private javax.swing.JPanel jpDeductions;
    private javax.swing.JPanel jpEarnings;
    private javax.swing.JTextField jtfCfdiDate;
    private javax.swing.JTextField jtfCfdiNumber;
    private javax.swing.JTextField jtfCfdiUuid;
    private sa.lib.gui.bean.SBeanCompoundField moCompDeductionValue;
    private sa.lib.gui.bean.SBeanCompoundField moCompEarningAuxValue;
    private sa.lib.gui.bean.SBeanCompoundField moCompEarningValue;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurDeductionsTotal;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurEarningAuxAmount1;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurEarningAuxAmount2;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurEarningsTotal;
    private sa.lib.gui.bean.SBeanCompoundFieldCurrency moCurNetTotal;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSalary;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecSalarySscBase;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecWage;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBonusType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDeductionLoan_n;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningLoan_n;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningOtherPaymentType;
    private sa.lib.gui.bean.SBeanFieldText moTextAlternativeId;
    private sa.lib.gui.bean.SBeanFieldText moTextDateBenefits;
    private sa.lib.gui.bean.SBeanFieldText moTextDateBirth;
    private sa.lib.gui.bean.SBeanFieldText moTextDateLastDismissal_n;
    private sa.lib.gui.bean.SBeanFieldText moTextDateLastHire;
    private sa.lib.gui.bean.SBeanFieldText moTextDeductionCode;
    private sa.lib.gui.bean.SBeanFieldText moTextDeductionName;
    private sa.lib.gui.bean.SBeanFieldText moTextDepartament;
    private sa.lib.gui.bean.SBeanFieldText moTextEarningCode;
    private sa.lib.gui.bean.SBeanFieldText moTextEarningName;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeType;
    private sa.lib.gui.bean.SBeanFieldText moTextFiscalId;
    private sa.lib.gui.bean.SBeanFieldText moTextId;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    private sa.lib.gui.bean.SBeanFieldText moTextNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextPaymentType;
    private sa.lib.gui.bean.SBeanFieldText moTextPosition;
    private sa.lib.gui.bean.SBeanFieldText moTextRecruitmentSchemaType;
    private sa.lib.gui.bean.SBeanFieldText moTextRecruitmentSchemaTypeReceipt;
    private sa.lib.gui.bean.SBeanFieldText moTextSalaryType;
    private sa.lib.gui.bean.SBeanFieldText moTextShift;
    private sa.lib.gui.bean.SBeanFieldText moTextSocialSecurityNumber;
    private sa.lib.gui.bean.SBeanFieldText moTextWorkerType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 672); // aspect ratio: 0.65625 instead of standard 0.625

        jbSave.setText("Aceptar");

        // read-only up section:
        
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 202);
        moTextNumber.setTextSettings(SGuiUtils.getLabelName(jlName), 10);
        moTextId.setTextSettings(SGuiUtils.getLabelName(jlName), 10);
        moTextPaymentType.setTextSettings(SGuiUtils.getLabelName(jlPaymentType), 50);
        moDecSalary.setDecimalSettings(SGuiUtils.getLabelName(jlSalary), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecWage.setDecimalSettings(SGuiUtils.getLabelName(jlWage), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moDecSalarySscBase.setDecimalSettings(SGuiUtils.getLabelName(jlSalarySscBase), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moTextDateBirth.setTextSettings(SGuiUtils.getLabelName(jlDateBirth), 50);
        moTextDateBenefits.setTextSettings(SGuiUtils.getLabelName(jlDateBenefits), 50);
        moTextDateLastHire.setTextSettings(SGuiUtils.getLabelName(jlDateLastHire), 50);
        moTextDateLastDismissal_n.setTextSettings(SGuiUtils.getLabelName(jlDateLastDismissal_n), 50);
        moTextAlternativeId.setTextSettings(SGuiUtils.getLabelName(jlAlternativeId), 25);
        moTextFiscalId.setTextSettings(SGuiUtils.getLabelName(jlFiscalId), 25);
        moTextSocialSecurityNumber.setTextSettings(SGuiUtils.getLabelName(jlSocialSecurityNumber), 15);
        moTextDepartament.setTextSettings(SGuiUtils.getLabelName(jlDepartament), 50);
        moTextPosition.setTextSettings(SGuiUtils.getLabelName(jlPosition), 50);
        moTextShift.setTextSettings(SGuiUtils.getLabelName(jlShift), 50);
        moTextEmployeeType.setTextSettings(SGuiUtils.getLabelName(jlEmployeeType), 50);
        moTextWorkerType.setTextSettings(SGuiUtils.getLabelName(jlWorkerType), 50);
        moTextRecruitmentSchemaType.setTextSettings(SGuiUtils.getLabelName(jlRecruitmentSchemaType), 100);
        moTextRecruitmentSchemaTypeReceipt.setTextSettings(SGuiUtils.getLabelName(jlRecruitmentSchemaTypeReceipt), 100);
        moTextSalaryType.setTextSettings(SGuiUtils.getLabelName(jlSalaryType), 50);
        
        // editable section:

        moTextEarningCode.setTextSettings(SGuiUtils.getLabelName(moTextEarningCode.getToolTipText()), 10, 0);
        moTextEarningCode.setFieldButton(jbPickEarning);
        moTextEarningName.setTextSettings(SGuiUtils.getLabelName(moTextEarningName.getToolTipText()), 100, 0);
        moKeyEarningOtherPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(moKeyEarningOtherPaymentType.getToolTipText()), true);
        moKeyBonusType.setKeySettings(miClient, SGuiUtils.getLabelName(moKeyBonusType.getToolTipText()), true);
        moKeyEarningLoan_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningLoan_n), true);
        moCompEarningValue.setCompoundFieldSettings(miClient);
        moCompEarningValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningValue), SGuiConsts.GUI_TYPE_DEC_QTY, false); // yes!, is NOT mandatory!
        moCompEarningAuxValue.setCompoundFieldSettings(miClient);
        moCompEarningAuxValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningAuxValue), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurEarningAuxAmount1.setCompoundFieldSettings(miClient);
        moCurEarningAuxAmount1.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningAuxAmount1), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurEarningAuxAmount2.setCompoundFieldSettings(miClient);
        moCurEarningAuxAmount2.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningAuxAmount2), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moTextDeductionCode.setTextSettings(SGuiUtils.getLabelName(moTextDeductionCode.getToolTipText()), 10, 0);
        moTextDeductionCode.setFieldButton(jbPickDeduction);
        moTextDeductionName.setTextSettings(SGuiUtils.getLabelName(moTextDeductionName.getToolTipText()), 100, 0);
        moKeyDeductionLoan_n.setKeySettings(miClient, SGuiUtils.getLabelName(jlDeductionLoan_n), true);
        moCompDeductionValue.setCompoundFieldSettings(miClient);
        moCompDeductionValue.getField().setDecimalSettings(SGuiUtils.getLabelName(jlDeductionValue), SGuiConsts.GUI_TYPE_DEC_QTY, false); // yes!, is NOT mandatory!

        // read-only bottom section:
        
        moCurEarningsTotal.setCompoundFieldSettings(miClient);
        moCurEarningsTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlEarningsTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurDeductionsTotal.setCompoundFieldSettings(miClient);
        moCurDeductionsTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlDeductionsTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        moCurNetTotal.setCompoundFieldSettings(miClient);
        moCurNetTotal.getField().setDecimalSettings(SGuiUtils.getLabelName(jlNetTotal), SGuiConsts.GUI_TYPE_DEC_AMT, false);
        
        moFields.addField(moTextEarningCode);
        moFields.addField(moTextEarningName);
        moFields.addField(moKeyEarningOtherPaymentType);
        moFields.addField(moKeyBonusType);
        moFields.addField(moKeyEarningLoan_n);
        moFields.addField(moCompEarningValue.getField());
        moFields.addField(moCompEarningAuxValue.getField());
        moFields.addField(moCurEarningAuxAmount1.getField());
        moFields.addField(moCurEarningAuxAmount2.getField());
        moFields.addField(moTextDeductionCode);
        moFields.addField(moTextDeductionName);
        moFields.addField(moKeyDeductionLoan_n);
        moFields.addField(moCompDeductionValue.getField());
        
        moFields.setFormButton(jbSave);
        
        // prevent from sending focus to next field when key 'enter' pressed:
        moTextEarningCode.setNextField(null);
        moTextDeductionCode.setNextField(null); 

        resetFieldsEarning();
        resetFieldsDeduction();
        mbEditable = true;
        setEnableFields(mbEditable);

        moGridReceiptEarnings = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_EAR, SLibConsts.UNDEFINED, "Percepciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, true, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm;
                
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#", 20));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Percepción", 125));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant.", 55);
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unid.", 35));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto unit. $", 80);
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant. ajustada", 55));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unid.", 35));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Exento $", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Gravado $", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/préstamo"));
                
                return gridColumnsForm;
            }
            
            @Override
            public void actionRowEdit() {
                if (jbRowEdit.isEnabled()) {
                    try {
                        SHrsReceiptEarning hrsReceiptEarning = (SHrsReceiptEarning) moGridReceiptEarnings.getSelectedGridRow();

                        SDialogPayrollEarning dlgPayrollEarning = new SDialogPayrollEarning(miClient, hrsReceiptEarning.clone(), "Percepción");
                        dlgPayrollEarning.setVisible(true);

                        if (dlgPayrollEarning.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                            refreshReceiptMovements();
                        }
                    }
                    catch (Exception e) {
                        SLibUtils.printException(this, e);
                    }
                }
            }
            
            @Override
            public void actionRowDelete() {
                if (jbRowDelete.isEnabled()) {
                    if (jtTable.getSelectedRowCount() != 1) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                    }
                    else {
                        int moveId = 0;
                        boolean remove = false;
                        SHrsReceiptEarning hrsReceiptEarning = (SHrsReceiptEarning) moGridReceiptEarnings.getSelectedGridRow();

                        if (hrsReceiptEarning.getPayrollReceiptEarning().isSystem()) {
                            miClient.showMsgBoxInformation(SDbConsts.MSG_REG_ + hrsReceiptEarning.getEarning().getName() + SDbConsts.MSG_REG_IS_SYSTEM + "\n" +
                            "Se debe eliminar mediante la eliminación del consumo de incidencia respectivo.");
                        }
                        else {

                            for (SHrsReceiptEarning hrsReceiptEarningToRemove : moHrsReceipt.getHrsReceiptEarnings()) {
                                if (SLibUtils.compareKeys(hrsReceiptEarningToRemove.getRowPrimaryKey(), hrsReceiptEarning.getRowPrimaryKey())) {
                                    remove = true;
                                    moveId = hrsReceiptEarningToRemove.getPayrollReceiptEarning().getPkMoveId();
                                    break;
                                }
                            }

                            if (remove) {
                                moHrsReceipt.removeHrsReceiptEarning(moveId);
                                refreshReceiptMovements();
                            }
                        }
                    }
                }
            }
        };

        moGridReceiptEarnings.setForm(null);
        moGridReceiptEarnings.setPaneFormOwner(this);
        jpEarnings.add(moGridReceiptEarnings, BorderLayout.CENTER);

        moGridReceiptDeductions = new SGridPaneForm(miClient, SModConsts.HRSX_PAY_REC_DED, SLibConsts.UNDEFINED, "Deducciones") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                SGridColumnForm columnForm;
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "#", 20));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_S, "Deducción", 125));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Cant.", 55);
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_UNT, "Unid.", 35));
                columnForm = new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto unit. $", 80);
                columnForm.setEditable(mbEditable);
                gridColumnsForm.add(columnForm);
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_AMT, "Monto $", 80));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Crédito/préstamo"));

                moGridReceiptDeductions.getTable().getDefaultEditor(Double.class).addCellEditorListener(SDialogPayrollReceipt.this);

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowDelete() {
                if (jbRowDelete.isEnabled()) {
                    if (jtTable.getSelectedRowCount() != 1) {
                        miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
                    }
                    else {
                        int moveId = 0;
                        boolean remove = false;
                        SHrsReceiptDeduction hrsReceiptDeduction = (SHrsReceiptDeduction) moGridReceiptDeductions.getSelectedGridRow();

                        for (SHrsReceiptDeduction hrsReceiptDeductionToRemove : moHrsReceipt.getHrsReceiptDeductions()) {
                            if (SLibUtils.compareKeys(hrsReceiptDeductionToRemove.getRowPrimaryKey(), hrsReceiptDeduction.getRowPrimaryKey())) {
                                remove = true;
                                moveId = hrsReceiptDeductionToRemove.getPayrollReceiptDeduction().getPkMoveId();
                                break;
                            }
                        }

                        if (remove) {
                            moHrsReceipt.removeHrsReceiptDeduction(moveId);
                            refreshReceiptMovements();
                        }
                    }
                }
            }
        };

        moGridReceiptDeductions.setForm(null);
        moGridReceiptDeductions.setPaneFormOwner(this);
        jpDeductions.add(moGridReceiptDeductions, BorderLayout.CENTER);
        
        moGridAbsenceConsumptions = new SGridPaneForm(miClient, SModConsts.HRS_ABS_CNS, SLibConsts.UNDEFINED, "Consumo incidencias") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(true, false, true);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Clase incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Tipo incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Folio"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicial incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Final incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Días efectivos incidencia"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicial consumo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Final consumo"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_QTY, "Días efectivos consumo"));

                return gridColumnsForm;
            }
            
            @Override
            public void actionRowNew() {
                SDialogPayrollReceiptAbsence dlgAbsence = new SDialogPayrollReceiptAbsence(miClient, "Consumo de incidencias");
                dlgAbsence.setValue(SModConsts.HRS_PAY_RCP, moHrsReceipt);
                dlgAbsence.setFormVisible(true);

                if (dlgAbsence.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
                    populateAbsenceConsumption();
                    refreshReceiptMovements();
                }
            }
            
            @Override
            public void actionRowDelete() {
                if (jbRowDelete.isEnabled()) {
                    try {
                        if (jtTable.getSelectedRowCount() == 0) {
                            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROWS);
                        }
                        else if (miClient.showMsgBoxConfirm(SGridConsts.MSG_CONFIRM_REG_DEL) == JOptionPane.YES_OPTION) {
                            SGridRow[] gridRows = getSelectedGridRows();

                            for (int i = 0; i < gridRows.length; i++) {
                                SGridRow gridRow = gridRows[i];
                                SDbAbsenceConsumption absenceConsumption = (SDbAbsenceConsumption) gridRow;

                                moHrsReceipt.updateHrsReceiptEarningAbsence(absenceConsumption, false);

                                moModel.getGridRows().remove(moModel.getGridRows().indexOf(gridRow));

                                populateAbsenceConsumption();
                                refreshReceiptMovements();
                            }
                        }
                    }
                    catch (Exception e) {
                        SLibUtils.showException(this, e);
                    }
                }
            }
        };

        moGridAbsenceConsumptions.setForm(null);
        moGridAbsenceConsumptions.setPaneFormOwner(null);
        jpAbsenceConsumption.add(moGridAbsenceConsumptions, BorderLayout.CENTER);
        
        reloadCatalogues();
        addAllListeners();
    }
    
    private void renderReceipt() {
        SDataCfd cfd = null;
        
        if (moHrsReceipt.getPayrollReceipt().getChildPayrollReceiptIssue() != null &&
                moHrsReceipt.getPayrollReceipt().getChildPayrollReceiptIssue().getDbmsDataCfd() != null &&
                moHrsReceipt.getPayrollReceipt().getChildPayrollReceiptIssue().getDbmsDataCfd().isStamped()) {
            cfd = moHrsReceipt.getPayrollReceipt().getChildPayrollReceiptIssue().getDbmsDataCfd();
        }
        
        if (cfd == null) {
            jtfCfdiNumber.setText("");
            jtfCfdiDate.setText("");
            jtfCfdiUuid.setText("");
        }
        else {
            jtfCfdiNumber.setText(cfd.getCfdNumber());
            jtfCfdiDate.setText(SLibUtils.DateFormatDate.format(cfd.getTimestamp()));
            jtfCfdiUuid.setText(cfd.getUuid());
        }
        
        moTextRecruitmentSchemaTypeReceipt.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsReceipt.getPayrollReceipt().getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME));
    }
    
    private void renderEmployee() {
        SDbEmployee employee = moHrsReceipt.getHrsEmployee().getEmployee(); // convenience variable
        
        moTextName.setValue(employee.getXtaEmployeeName());
        moTextNumber.setValue(employee.getNumber());
        moTextId.setValue("" + employee.getPkEmployeeId());
        moTextPaymentType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_PAY, new int[] { employee.getFkPaymentTypeId() }, SDbRegistry.FIELD_NAME));
        moDecSalary.setValue(employee.getSalary());
        moDecWage.setValue(employee.getWage());
        moDecSalarySscBase.setValue(employee.getSalarySscBase());
        moTextDateBirth.setValue(SLibUtils.DateFormatDate.format(employee.getDateBirth()));
        moTextDateBenefits.setValue(SLibUtils.DateFormatDate.format(employee.getDateBenefits()));
        moTextDateLastHire.setValue(SLibUtils.DateFormatDate.format(employee.getDateLastHire()));
        moTextDateLastDismissal_n.setValue(employee.getDateLastDismissal_n() != null ? SLibUtils.DateFormatDate.format(employee.getDateLastDismissal_n()) : "");
        moTextAlternativeId.setValue(employee.getXtaEmployeeCurp());
        moTextFiscalId.setValue(employee.getXtaEmployeeRfc());
        moTextSocialSecurityNumber.setValue(employee.getSocialSecurityNumber());
        moTextDepartament.setValue(miClient.getSession().readField(SModConsts.HRSU_DEP, new int[] { employee.getFkDepartmentId() }, SDbRegistry.FIELD_NAME));
        moTextPosition.setValue(miClient.getSession().readField(SModConsts.HRSU_POS, new int[] { employee.getFkPositionId() }, SDbRegistry.FIELD_NAME));
        moTextShift.setValue(miClient.getSession().readField(SModConsts.HRSU_SHT, new int[] { employee.getFkShiftId() }, SDbRegistry.FIELD_NAME));
        moTextEmployeeType.setValue(miClient.getSession().readField(SModConsts.HRSU_TP_EMP, new int[] { employee.getFkEmployeeTypeId() }, SDbRegistry.FIELD_NAME));
        moTextWorkerType.setValue(miClient.getSession().readField(SModConsts.HRSU_TP_WRK, new int[] { employee.getFkWorkerTypeId() }, SDbRegistry.FIELD_NAME));
        moTextRecruitmentSchemaType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { employee.getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME));
        moTextSalaryType.setValue(miClient.getSession().readField(SModConsts.HRSS_TP_SAL, new int[] { employee.getFkSalaryTypeId() }, SDbRegistry.FIELD_NAME));
    }

    private SDbPayrollReceiptEarning createPayrollReceipEarning(SHrsReceipt hrsReceipt, SHrsEmployeeDays hrsEmployeeDays) {
        double unitsAlleged;
        double amountUnitAlleged;
        int[] loanKey = moKeyEarningLoan_n.getSelectedIndex() <= 0 ? new int[] { 0, 0 } : moKeyEarningLoan_n.getValue();
        
        if (moHrsBenefit == null) {
            if (moEarning.isBasedOnUnits()) {
                unitsAlleged = moCompEarningValue.getField().getValue();
                amountUnitAlleged = 0;
            }
            else {
                unitsAlleged = 1;
                amountUnitAlleged = moCompEarningValue.getField().getValue();
            }
        }
        else {
            if (moEarning.isBasedOnUnits()) {
                unitsAlleged = moHrsBenefit.getValuePayedReceipt();
                amountUnitAlleged = 0;
            }
            else {
                unitsAlleged = 1;
                amountUnitAlleged = moHrsBenefit.getAmountPayedReceipt();
            }
        }
        
        SDbPayrollReceiptEarning earning = hrsReceipt.getHrsPayroll().createPayrollReceiptEarning(
                hrsReceipt, moEarning, hrsEmployeeDays, moHrsBenefit, 
                unitsAlleged, amountUnitAlleged, false, 
                loanKey[0], loanKey[1], moGridReceiptEarnings.getTable().getRowCount() + 1);
        
        // consider specialized inputs:
        
        earning.setFkOtherPaymentTypeId(moKeyEarningOtherPaymentType.getValue()[0]);
        earning.setFkBonusId(!moKeyBonusType.isEnabled() ? 1 : moKeyBonusType.getValue()[0]);
        earning.setAuxiliarValue(!moCompEarningAuxValue.isEnabled() ? 0 : moCompEarningAuxValue.getField().getValue());
        earning.setAuxiliarAmount1(!moCurEarningAuxAmount1.isEnabled() ? 0 : moCurEarningAuxAmount1.getField().getValue());
        earning.setAuxiliarAmount2(!moCurEarningAuxAmount2.isEnabled() ? 0 : moCurEarningAuxAmount2.getField().getValue());
        
        return earning;
    }

    private SDbPayrollReceiptDeduction createPayrollReceipDeduction(SHrsReceipt hrsReceipt) {
        double unitsAlleged;
        double amountUnitAlleged;
        int[] loanKey = moKeyDeductionLoan_n.getSelectedIndex() <= 0 ? new int[] { 0, 0 } : moKeyDeductionLoan_n.getValue();
        
        if (moDeduction.isBasedOnUnits()) {
            unitsAlleged = moCompDeductionValue.getField().getValue();
            amountUnitAlleged = 0;
        }
        else {
            unitsAlleged = 1;
            amountUnitAlleged = moCompDeductionValue.getField().getValue();
        }
        
        SDbPayrollReceiptDeduction deduction = hrsReceipt.getHrsPayroll().createPayrollReceiptDeduction(
                hrsReceipt, moDeduction, 
                unitsAlleged, amountUnitAlleged, false, 
                loanKey[0], loanKey[1], moGridReceiptDeductions.getTable().getRowCount() + 1);
        
        return deduction;
    }
    
    private void createBenefit(final SDbEarning earning) throws Exception {
        int benefitType = 0;
        Date dateCutOff = null;
        SDbBenefitTable benefitTable = null;
        SDbBenefitTable benefitTableAux = null;
        SHrsBenefitParams benefitParams = null;
        
        benefitTable = SHrsUtils.getBenefitTableByEarning(miClient.getSession(), 
                earning.getPkEarningId(), 
                moHrsReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd());
        
        benefitType = benefitTable.getFkBenefitTypeId();
        
        if (benefitType == SLibConsts.UNDEFINED) {
            throw new Exception("No se encontró ninguna prestación para el tipo de prestación definido en la percepción '" + earning.getName() + "'.");
        }
        else if (earning.getFkBenefitTypeId() != benefitType) {
            throw new Exception("El tipo de prestación de la percepción '" + earning.getName() + "', es diferente al tipo de prestación de la prestación '" + benefitTable.getName() + "'.");
        }
        
        // check if benefit is vacation bonus:
        if (benefitType == SModSysConsts.HRSS_TP_BEN_VAC_BON) {
            int tableAuxId = SHrsUtils.getRecentBenefitTable(miClient.getSession(), 
                    SModSysConsts.HRSS_TP_BEN_VAC, 
                    moHrsReceipt.getHrsPayroll().getPayroll().getFkPaymentTypeId(), 
                    moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd());
            benefitTableAux = moHrsReceipt.getHrsPayroll().getBenefitTable(tableAuxId);
            
            if (benefitTableAux == null) {
                throw new Exception("No se encontró ninguna tabla para la prestación 'Vacaciones' que es requerida para el pago de la prestación 'Prima Vacacional'.");
            }
        }
        
        if (!moHrsReceipt.getHrsEmployee().getEmployee().isActive()) {
            dateCutOff = moHrsReceipt.getHrsEmployee().getEmployee().getDateLastDismissal_n();
            
            if (benefitType != SModSysConsts.HRSS_TP_BEN_ANN_BON && !SLibTimeUtils.isBelongingToPeriod(dateCutOff, moHrsReceipt.getHrsPayroll().getPayroll().getDateStart(), moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd())) {
                dateCutOff = moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd();
            }
        }
        else if (benefitType == SModSysConsts.HRSS_TP_BEN_ANN_BON) {
            dateCutOff = SLibTimeUtils.getEndOfYear(moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd());
        }
        else {
            dateCutOff = moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd();
        }
        
        // Create benefit params:
        benefitParams = new SHrsBenefitParams(earning, benefitTable, benefitTableAux, moHrsReceipt, dateCutOff);
        
        SDialogPayrollBenefit dlgBenefit = new SDialogPayrollBenefit(miClient, benefitType, "Agregar prestación");
        dlgBenefit.setValue(SGuiConsts.PARAM_ROWS, benefitParams);
        dlgBenefit.setVisible(true);
        
        if (dlgBenefit.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            moHrsBenefit = (SHrsBenefit) dlgBenefit.getValue(SGuiConsts.PARAM_ROWS);
            if (moEarning.isBasedOnUnits()) {
                moCompEarningValue.getField().setValue(moHrsBenefit.getValuePayedReceipt());
            }
            else {
                moCompEarningValue.getField().setValue(moHrsBenefit.getAmountPayedReceipt());
            }
            
            actionAddEarning();
        }
    }

    private void computeTotal() {
        double earningTotal = 0;
        double deductionTotal = 0;

        for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
            earningTotal += hrsReceiptEarning.getPayrollReceiptEarning().getAmount_r();
        }
        
        for (SHrsReceiptDeduction hrsReceiptDeduction : moHrsReceipt.getHrsReceiptDeductions()) {
            deductionTotal += hrsReceiptDeduction.getPayrollReceiptDeduction().getAmount_r();
        }

        moCurEarningsTotal.getField().setValue(earningTotal);
        moCurDeductionsTotal.getField().setValue(deductionTotal);
        moCurNetTotal.getField().setValue(earningTotal - deductionTotal);
    }

    private void setEnableFields(boolean enable) {
        jbUpdateEmployeeData.setEnabled(false);
        
        moTextEarningCode.setEnabled(enable);
        jbPickEarning.setEnabled(enable);
        moCompEarningValue.setEditable(enable);
        jbAddEarning.setEnabled(enable);
        moKeyEarningLoan_n.setEnabled(enable && moKeyEarningLoan_n.getItemCount() > 0);
        
        if (!enable) {
            moKeyEarningOtherPaymentType.setEnabled(false);
            moKeyBonusType.setEnabled(false);
            
            jlEarningAuxValue.setEnabled(false);
            moCompEarningAuxValue.setEnabled(false);
            jlEarningAuxAmount1.setEnabled(false);
            jlEarningAuxAmount1Hint.setEnabled(false);
            moCurEarningAuxAmount1.setEnabled(false);
            jlEarningAuxAmount2.setEnabled(false);
            jlEarningAuxAmount2Hint.setEnabled(false);
            moCurEarningAuxAmount2.setEnabled(false);
        }
        
        moTextDeductionCode.setEnabled(enable);
        jbPickDeduction.setEnabled(enable);
        moCompDeductionValue.setEditable(enable);
        jbAddDeduction.setEnabled(enable);
        moKeyDeductionLoan_n.setEnabled(enable && moKeyDeductionLoan_n.getItemCount() > 0);
        
        jbSave.setEnabled(enable);
    }

    private void resetFieldsEarningAux() {
        jlEarningAuxValue.setText(LABEL_AUX_VAL + ":");
        jlEarningAuxValue.setEnabled(false);
        jlEarningAuxValueHint.setToolTipText(null);
        jlEarningAuxValueHint.setEnabled(false);
        moCompEarningAuxValue.setEnabled(false);
        moCompEarningAuxValue.getField().setMandatory(false);
        moCompEarningAuxValue.setCompoundText("");
        moCompEarningAuxValue.getField().setDecimalFormat(SLibUtils.DecimalFormatInteger);
        moCompEarningAuxValue.getField().setMinDouble(0);
        moCompEarningAuxValue.getField().setMaxDouble(Double.MAX_VALUE);
        moCompEarningAuxValue.getField().resetField();
        
        jlEarningAuxAmount1.setText(LABEL_AUX_AMT + ":");
        jlEarningAuxAmount1.setEnabled(false);
        jlEarningAuxAmount1Hint.setToolTipText(null);
        jlEarningAuxAmount1Hint.setEnabled(false);
        moCurEarningAuxAmount1.setEnabled(false);
        moCurEarningAuxAmount1.getField().setMandatory(false);
        moCurEarningAuxAmount1.getField().resetField();
        
        jlEarningAuxAmount2.setText(LABEL_AUX_AMT + ":");
        jlEarningAuxAmount2.setEnabled(false);
        jlEarningAuxAmount2Hint.setToolTipText(null);
        jlEarningAuxAmount2Hint.setEnabled(false);
        moCurEarningAuxAmount2.setEnabled(false);
        moCurEarningAuxAmount2.getField().setMandatory(false);
        moCurEarningAuxAmount2.getField().resetField();
    }
    
    private void resetFieldsEarning() {
        moEarning = null;
        msOriginalEarningCode = "";
        
        moTextEarningCode.resetField();
        moTextEarningName.resetField();
        moCompEarningValue.getField().resetField();
        moCompEarningValue.setCompoundText("");
        
        moKeyEarningLoan_n.setEnabled(false);
        moKeyEarningLoan_n.removeAllItems();

        // resetting of specialized fields related to other payments:
        moKeyEarningOtherPaymentType.setEnabled(false);
        moKeyEarningOtherPaymentType.removeItemListener(this); // prevent from triggering unwished item-state-changed event
        moKeyEarningOtherPaymentType.resetField(); // will not trigger an item-state-changed event
        itemStateChangedKeyEarningOtherPayment(); // force triggering an item-state-changed event
        moKeyEarningOtherPaymentType.addItemListener(this);
        
        // resetting of specialized fields related to other payments:
        moKeyBonusType.setEnabled(false);
        moKeyBonusType.removeItemListener(this); // prevent from triggering unwished item-state-changed event
        moKeyBonusType.resetField(); // will not trigger an item-state-changed event        
        moKeyBonusType.addItemListener(this);
    }

    private void resetFieldsDeduction() {
        moDeduction = null;
        msOriginalDeductionCode = "";
        
        moTextDeductionCode.resetField();
        moTextDeductionName.resetField();
        moCompDeductionValue.getField().resetField();
        moCompDeductionValue.setCompoundText("");
        
        moKeyDeductionLoan_n.setEnabled(false);
        moKeyDeductionLoan_n.removeAllItems();
    }
    
    private void prepareFocusFieldsEarning() {
        moCompEarningValue.getField().setNextButton(null);
        moCompEarningAuxValue.getField().setNextButton(null);
        moCurEarningAuxAmount1.getField().setNextButton(null);
        moCurEarningAuxAmount2.getField().setNextButton(null);

        if (moCurEarningAuxAmount2.isEnabled()) { // field rarely used; preferable disabling it when not used
            moCurEarningAuxAmount2.getField().setNextButton(jbAddEarning);
        }
        else if (moCurEarningAuxAmount1.isEnabled()) { // field rarely used; preferable disabling it when not used
            moCurEarningAuxAmount1.getField().setNextButton(jbAddEarning);
        }
        else if (moCompEarningAuxValue.isEnabled()) { // field rarely used; preferable disabling it when not used
            moCompEarningAuxValue.getField().setNextButton(jbAddEarning);
        }
        else {
            moCompEarningValue.getField().setNextButton(jbAddEarning);
        }
    }
    
    private void prepareFocusFieldsDeduction() {
        moCompDeductionValue.getField().setNextButton(jbAddDeduction);
    }

    private void addHrsReceiptEarning() {
        if (moEarning != null) {
            SHrsEmployeeDays hrsEmployeeDays = moHrsReceipt.getHrsEmployee().createEmployeeDays();
            
            SHrsReceiptEarning hrsReceiptEarning = new SHrsReceiptEarning();
            hrsReceiptEarning.setHrsReceipt(moHrsReceipt);
            hrsReceiptEarning.setEarning(moEarning);
            hrsReceiptEarning.setPayrollReceiptEarning(createPayrollReceipEarning(moHrsReceipt, hrsEmployeeDays));

            try {
                if (moKeyEarningLoan_n.isEnabled() && moKeyEarningLoan_n.getSelectedIndex() > 0) {
                    SDbLoan loan = moHrsReceipt.getHrsEmployee().getLoan(moKeyEarningLoan_n.getValue()[1]);
                    hrsReceiptEarning.getPayrollReceiptEarning().setUserEdited(true);
                    hrsReceiptEarning.getPayrollReceiptEarning().setFkLoanEmployeeId_n(moKeyEarningLoan_n.getValue()[0]);
                    hrsReceiptEarning.getPayrollReceiptEarning().setFkLoanLoanId_n(moKeyEarningLoan_n.getValue()[1]);
                    hrsReceiptEarning.getPayrollReceiptEarning().setFkLoanTypeId_n(loan.getFkLoanTypeId());
                }
                
                moHrsReceipt.addHrsReceiptEarning(hrsReceiptEarning);
                populateEarnings();
                
                populateDeductions();
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }

    private void addHrsReceiptDeduction() {
        if (moDeduction != null) {
            SHrsReceiptDeduction hrsReceiptDeduction = new SHrsReceiptDeduction();
            hrsReceiptDeduction.setHrsReceipt(moHrsReceipt);
            hrsReceiptDeduction.setDeduction(moDeduction);
            hrsReceiptDeduction.setPayrollReceiptDeduction(createPayrollReceipDeduction(moHrsReceipt));

            try {
                if (moKeyDeductionLoan_n.isEnabled() && moKeyDeductionLoan_n.getSelectedIndex() > 0) {
                    SDbLoan loan = moHrsReceipt.getHrsEmployee().getLoan(moKeyDeductionLoan_n.getValue()[1]);
                    hrsReceiptDeduction.getPayrollReceiptDeduction().setUserEdited(true);
                    hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanEmployeeId_n(moKeyDeductionLoan_n.getValue()[0]);
                    hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanLoanId_n(moKeyDeductionLoan_n.getValue()[1]);
                    hrsReceiptDeduction.getPayrollReceiptDeduction().setFkLoanTypeId_n(loan.getFkLoanTypeId());
                }
                
                moHrsReceipt.addHrsReceiptDeduction(hrsReceiptDeduction);
                populateDeductions();
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }

    private void refreshReceiptMovements() {
        populateEarnings();
        populateDeductions();
    }

    private void populateEarnings() {
        Vector<SGridRow> rows = new Vector<>();

        moGridReceiptEarnings.setRowButtonsEnabled(false, mbEditable, mbEditable);
        for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
            SHrsReceiptEarning hrsReceiptEarningNew = new SHrsReceiptEarning();
            hrsReceiptEarningNew.setHrsReceipt(moHrsReceipt);
            hrsReceiptEarningNew.setEarning(hrsReceiptEarning.getEarning());
            hrsReceiptEarningNew.setPayrollReceiptEarning(hrsReceiptEarning.getPayrollReceiptEarning());

            rows.add(hrsReceiptEarningNew);
        }

        moGridReceiptEarnings.populateGrid(rows);
        moGridReceiptEarnings.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);

        computeTotal();
    }

    private void populateDeductions() {
        Vector<SGridRow> rows = new Vector<>();

        moGridReceiptDeductions.setRowButtonsEnabled(false, false, mbEditable);
        for (SHrsReceiptDeduction hrsReceiptDeduction : moHrsReceipt.getHrsReceiptDeductions()) {
            SHrsReceiptDeduction hrsReceiptDeductionNew = new SHrsReceiptDeduction();
            hrsReceiptDeductionNew.setHrsReceipt(moHrsReceipt);
            hrsReceiptDeductionNew.setDeduction(hrsReceiptDeduction.getDeduction());
            hrsReceiptDeductionNew.setPayrollReceiptDeduction(hrsReceiptDeduction.getPayrollReceiptDeduction());
            
            rows.add(hrsReceiptDeductionNew);
        }

        moGridReceiptDeductions.populateGrid(rows);
        moGridReceiptDeductions.getTable().getDefaultEditor(Double.class).addCellEditorListener(this);
        
        computeTotal();
    }
    
    private void populateAbsenceConsumption() {
        Vector<SGridRow> rows = new Vector<>();

        moGridAbsenceConsumptions.setRowButtonsEnabled(mbEditable, false, mbEditable);
        for (SDbAbsenceConsumption absenceConsumption : moHrsReceipt.getAbsenceConsumptions()) {
            SDbAbsence absence = (SDbAbsence) miClient.getSession().readRegistry(SModConsts.HRS_ABS, new int[] { absenceConsumption.getPkEmployeeId(), absenceConsumption.getPkAbsenceId() });
            
            absenceConsumption.setAuxNumber(absence.getNumber());
            absenceConsumption.setAuxDateStart(absence.getDateStart());
            absenceConsumption.setAuxDateEnd(absence.getDateEnd());
            absenceConsumption.setAuxEffectiveDays(absence.getEffectiveDays());
            
            rows.add(absenceConsumption);
        }
        
        moGridAbsenceConsumptions.populateGrid(rows);
        moGridAbsenceConsumptions.setSelectedGridRow(0);
    }
    
    private void updateReceipt() {
        for (SGridRow row : moGridReceiptEarnings.getModel().getGridRows()) {
            SHrsReceiptEarning hrsReceiptEarningRow = (SHrsReceiptEarning) row;

            for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
                if (SLibUtils.compareKeys(hrsReceiptEarning.getRowPrimaryKey(), hrsReceiptEarningRow.getRowPrimaryKey())) {
                    if (!hrsReceiptEarning.getPayrollReceiptEarning().isAutomatic() && hrsReceiptEarningRow.getPayrollReceiptEarning().getUnits() == 0) {
                        moHrsReceipt.removeHrsReceiptEarning(hrsReceiptEarning.getPayrollReceiptEarning().getPkMoveId());
                        break;
                    }
                }
            }
        }

        for (SGridRow row : moGridReceiptDeductions.getModel().getGridRows()) {
            SHrsReceiptDeduction hrsReceiptDeductionRow = (SHrsReceiptDeduction) row;

            for (SHrsReceiptDeduction hrsReceiptDeduction : moHrsReceipt.getHrsReceiptDeductions()) {
                if (SLibUtils.compareKeys(hrsReceiptDeduction.getRowPrimaryKey(), hrsReceiptDeductionRow.getRowPrimaryKey())) {
                    if (!hrsReceiptDeduction.getPayrollReceiptDeduction().isAutomatic() && hrsReceiptDeductionRow.getPayrollReceiptDeduction().getAmountUnitary() == 0) {
                        moHrsReceipt.removeHrsReceiptDeduction(hrsReceiptDeduction.getPayrollReceiptDeduction().getPkMoveId());
                        break;
                    }
                }
            }
        }
    }

    private void actionLoadEarning(final boolean focusEventRaised, final boolean actionEventRaised) {
        try {
            if (moTextEarningCode.getValue().isEmpty()) {
                if (focusEventRaised || actionEventRaised) {
                    resetFieldsEarning();
                }
                if (actionEventRaised) {
                    moCompEarningValue.getField().getComponent().requestFocusInWindow();
                }
            }
            else if (moEarning == null || !moEarning.getCode().equals(moTextEarningCode.getValue())) {
                // identify earning:
                
                moEarning = null;
                msOriginalEarningCode = moTextEarningCode.getValue();
                
                for (SDbEarning earning : moEarnigsMap.values()) {
                    if (earning.getCode().equals(moTextEarningCode.getValue())) {
                        moEarning = earning;
                        break;
                    }
                }
                
                // process earning, if any:

                if (moEarning == null) {
                    String code = moTextEarningCode.getValue();
                    miClient.showMsgBoxWarning("No se encontró ninguna percepción con el código '" + code + "'.");
                    resetFieldsEarning();
                    moTextEarningCode.setValue(code);
                    moTextEarningCode.requestFocusInWindow();
                }
                else if (moEarning.isAbsence()) {
                    miClient.showMsgBoxWarning("No se puede agregar la percepción '" + moEarning.getName() + " (" + moEarning.getCode() + ")' de forma directa, se debe agregar mediante una incidencia.");
                    moTextEarningCode.requestFocusInWindow();
                }
                else {
                    moTextEarningName.setValue(moEarning.getName());
                    moCompEarningValue.setCompoundText(moHrsReceipt.getHrsPayroll().getEarningComputationTypesMap().get(moEarning.getFkEarningComputationTypeId()));
                    moCompEarningValue.getField().setEditable(moEarning.areUnitsModifiable() || !moEarning.isBasedOnUnits());

                    // enable/disable specialized fields:

                    if (moEarning.isLoan()) {
                        miClient.getSession().populateCatalogue(moKeyEarningLoan_n, SModConsts.HRS_LOAN, SLibConsts.UNDEFINED, new SGuiParams(new int[] { moHrsReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), moEarning.getFkLoanTypeId()}));
                        moKeyEarningLoan_n.setEnabled(true);
                    }
                    else {
                        moKeyEarningLoan_n.setEnabled(false);
                        moKeyEarningLoan_n.removeAllItems();
                    }

                    // resetting of specialized fields related to other payments:
                    
                    moKeyEarningOtherPaymentType.setEnabled(moEarning.getFkOtherPaymentTypeId() == SModSysConsts.HRSS_TP_OTH_PAY_OTH);
                    moKeyEarningOtherPaymentType.removeItemListener(this); // prevent from triggering unwished item-state-changed event
                    moKeyEarningOtherPaymentType.setValue(new int[] { moEarning.getFkOtherPaymentTypeId() }); // will not trigger an item-state-changed event
                    itemStateChangedKeyEarningOtherPayment(); // force triggering an item-state-changed event
                    moKeyEarningOtherPaymentType.addItemListener(this);
                    
                    // resetting of specialized fields related bonus payments:
                    
                    moKeyBonusType.setEnabled(moEarning.isPayBonus()); // XXX Percepción DESPENSA
                    moKeyBonusType.removeItemListener(this); // prevent from triggering unwished item-state-changed event
                    if (moEarning.isPayBonus()) { // XXX Percepción DESPENSA
                        moKeyBonusType.setValue(new int[] { SPayrollBonusUtils.BONUS }); // will not trigger an item-state-changed event
                    }
                    else {
                        moKeyBonusType.setValue(new int[] { moEarning.getFkBonusId_n() });
                    }
                    // itemStateChangedKeyEarningOtherPayment(); // force triggering an item-state-changed event
                    moKeyBonusType.addItemListener(this);
                    
                    prepareFocusFieldsEarning();

                    // set focus on next editable field:

                    if (moKeyEarningOtherPaymentType.isEnabled()) {
                        moKeyEarningOtherPaymentType.requestFocusInWindow();
                    }
                    else if (moKeyEarningLoan_n.isEnabled()) {
                        moKeyEarningLoan_n.requestFocusInWindow();
                    }
                    else if (moCompEarningValue.getField().isEditable()) {
                        moCompEarningValue.getField().getComponent().requestFocusInWindow();
                    }
                    else {
                        jbAddEarning.requestFocusInWindow();
                    }

                    // create benefit, if it is necessary:
                    
                    moHrsBenefit = null;
                    
                    if (moEarning.isBenefit()) {
                        createBenefit(moEarning);
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionLoadDeduction(boolean focusEventRaised, final boolean actionEventRaised) {
        try {
            if (moTextDeductionCode.getValue().isEmpty()) {
                if (focusEventRaised || actionEventRaised) {
                    resetFieldsDeduction();
                }
                if (actionEventRaised) {
                    moCompDeductionValue.getField().getComponent().requestFocusInWindow();
                }
            }
            else if (moDeduction == null || !moDeduction.getCode().equals(moTextDeductionCode.getValue())) {
                // identify deduction:
                
                moDeduction = null;
                msOriginalDeductionCode = moTextDeductionCode.getValue();
                
                for (SDbDeduction deduction : moDeductionsMap.values()) {
                    if (deduction.getCode().equals(moTextDeductionCode.getValue())) {
                        moDeduction = deduction;
                        break;
                    }
                }
                
                // process deduction, if any:

                if (moDeduction == null) {
                    String code = moTextDeductionCode.getValue();
                    miClient.showMsgBoxWarning("No se encontró ninguna deducción con el código '" + code + "'.");
                    resetFieldsDeduction();
                    moTextDeductionCode.setValue(code);
                    moTextDeductionCode.requestFocusInWindow();
                }
                else if (moDeduction.isAbsence()) {
                    miClient.showMsgBoxWarning("No se puede agregar la deducción '" + moDeduction.getName() + " (" + moDeduction.getCode() + ")' de forma directa, se debe agregar mediante una incidencia.");
                    moTextDeductionCode.requestFocusInWindow();
                }
                else {
                    moTextDeductionName.setValue(moDeduction.getName());
                    moCompDeductionValue.setCompoundText(moHrsReceipt.getHrsPayroll().getDeductionComputationTypesMap().get(moDeduction.getFkDeductionComputationTypeId()));
                    moCompDeductionValue.getField().setEditable(moDeduction.areUnitsModifiable() || !moDeduction.isBasedOnUnits());
                    
                    // enable/disable specialized fields:

                    if (moDeduction.isLoan()) {
                        miClient.getSession().populateCatalogue(moKeyDeductionLoan_n, SModConsts.HRS_LOAN, SLibConsts.UNDEFINED, new SGuiParams(new int[] { moHrsReceipt.getHrsEmployee().getEmployee().getPkEmployeeId(), moDeduction.getFkLoanTypeId()}));
                        moKeyDeductionLoan_n.setEnabled(true);
                    }
                    else {
                        moKeyDeductionLoan_n.setEnabled(false);
                        moKeyDeductionLoan_n.removeAllItems();
                    }
                    
                    prepareFocusFieldsDeduction();
                    
                    // set focus on next editable field:

                    if (moKeyDeductionLoan_n.isEnabled()) {
                        moKeyDeductionLoan_n.requestFocusInWindow();
                    }
                    else if (moCompDeductionValue.getField().isEditable()) {
                        moCompDeductionValue.getField().getComponent().requestFocusInWindow();
                    }
                    else {
                        jbAddEarning.requestFocusInWindow();
                    }
                }
            }
        }
        catch (Exception e) {
            SLibUtils.printException(this, e);
        }
    }

    private void actionPickEarning() {
        miClient.getSession().showOptionPicker(SModConsts.HRS_EAR, SLibConsts.UNDEFINED, null, moTextEarningCode);
        
        if (!moTextEarningCode.getValue().isEmpty()) {
            actionLoadEarning(false, false);
        }
    }
    
    private void actionPickDeduction() {
        miClient.getSession().showOptionPicker(SModConsts.HRS_DED, SLibConsts.UNDEFINED, null, moTextDeductionCode);
        
        if (!moTextDeductionCode.getValue().isEmpty()) {
            actionLoadDeduction(false, false);
        }
    }

    private void actionAddEarning() {
        try {
            if (moEarning == null) {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(moTextEarningCode.getToolTipText()) + "'.");
                moTextEarningCode.requestFocusInWindow();
            }
            else {
                SGuiValidation validation = moFields.validateFields();

                if (SGuiUtils.computeValidation(miClient, validation)) {
                    // special-case validations:
                    
                    if (moCompEarningValue.getField().getValue() == 0 && 
                            miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + moCompEarningValue.getField().getFieldName() + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_UNDEF) != JOptionPane.YES_OPTION) {
                        miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moCompEarningValue.getField().getFieldName() + "'. ");
                        moCompEarningValue.getField().getComponent().requestFocusInWindow();
                        return;
                    }

                    if (moKeyEarningOtherPaymentType.isEnabled() && moKeyEarningOtherPaymentType.getValue()[0] == SModSysConsts.HRSS_TP_OTH_PAY_NA) {
                        miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(moKeyEarningOtherPaymentType.getToolTipText()) + "'. ");
                        moKeyEarningOtherPaymentType.requestFocusInWindow();
                        return;
                    }

                    if (moEarning.isLoan()) {
                        if (moKeyEarningLoan_n.getSelectedIndex() <= 0) {
                            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEarningLoan_n.getText()) + "'. ");
                            moKeyEarningLoan_n.requestFocusInWindow();
                            return;
                        }
                    }

                    if (moEarning.isBenefit() && moHrsBenefit == null) {
                        miClient.showMsgBoxWarning("Se debe capturar la cantidad o monto de la prestación '" + moEarning.getName() + "'.");
                        moTextEarningCode.requestFocusInWindow();
                        return;
                    }

                    // validate assimilable receipts:
                    if (moHrsReceipt.getPayrollReceipt().isAssimilable()) {
                        if (moEarning.getFkEarningTypeId() != SModSysConsts.HRSS_TP_EAR_ASS_INC) {
                            // SOURCE CODE WARNING: this code snipet is duplicated as is in method validateForm(), please synchronize any change!
                            miClient.showMsgBoxWarning("El tipo de régimen de contratación de este recibo, "
                                    + "'" + miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsReceipt.getPayrollReceipt().getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME) + "',\n"
                                    + "no admite percepciones distintas a '" + miClient.getSession().readField(SModConsts.HRSS_TP_EAR, new int[] { SModSysConsts.HRSS_TP_EAR_ASS_INC }, SDbRegistry.FIELD_NAME) + "'.");
                            moTextEarningCode.requestFocusInWindow();
                            return;
                        }
                    }

                    // confirm multiple earnings of the same type:
                    for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
                        if (hrsReceiptEarning.getEarning().getPkEarningId() == moEarning.getPkEarningId() && !moEarning.isLoan() && 
                                miClient.showMsgBoxConfirm("La percepción '" + moEarning.getName() + "' ya existe en el recibo.\n"
                                        + "¿Está seguro que desea agregarla otra vez?") != JOptionPane.YES_OPTION) {
                            moTextEarningCode.requestFocusInWindow();
                            return;
                        }
                    }

                    // add earning:
                    addHrsReceiptEarning();
                    resetFieldsEarning();
                    moTextEarningCode.requestFocusInWindow();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void actionAddDeduction() {
        try {
            if (moDeduction == null) {
                miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(moTextDeductionCode.getToolTipText()) + "'.");
                moTextDeductionCode.requestFocusInWindow();
            }
            else {
                SGuiValidation validation = moFields.validateFields();
                
                if (SGuiUtils.computeValidation(miClient, validation)) {
                    // special-case validations:
                
                    if (moCompDeductionValue.getField().getValue() == 0 && 
                            miClient.showMsgBoxConfirm(SGuiConsts.MSG_CNF_FIELD_VAL_ + "'" + moCompDeductionValue.getField().getFieldName() + "'" + SGuiConsts.MSG_CNF_FIELD_VAL_UNDEF) != JOptionPane.YES_OPTION) {
                        miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moCompDeductionValue.getField().getFieldName() + "'. ");
                        moCompDeductionValue.getField().getComponent().requestFocusInWindow();
                        return;
                    }

                    if (moDeduction.isLoan()) {
                        if (moKeyDeductionLoan_n.getSelectedIndex() <= 0) {
                            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlDeductionLoan_n.getText()) + "'. ");
                            moKeyDeductionLoan_n.requestFocusInWindow();
                            return;
                        }
                        else {
                            SDbLoan loan = moHrsReceipt.getHrsEmployee().getLoan(moKeyDeductionLoan_n.getValue()[1]);

                            if (loan.isPlainLoan()) {
                                double loanBalance = SHrsUtils.getLoanBalance(loan, moHrsReceipt, null, null);

                                if (loanBalance <= 0) {
                                    miClient.showMsgBoxWarning("El préstamo '" + loan.composeLoanDescription() + "' " + (loanBalance == 0 ? "está saldado" : "tiene un saldo negativo de $" + SLibUtils.getDecimalFormatAmount().format(loanBalance)) + ".");
                                    moCompDeductionValue.getField().getComponent().requestFocusInWindow();
                                    return;
                                }
                                else if (moCompDeductionValue.getField().getValue() > loanBalance) {
                                    miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlDeductionValue.getText()) + "'" + SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "$" + SLibUtils.getDecimalFormatAmount().format(loanBalance) + ".");
                                    moCompDeductionValue.getField().getComponent().requestFocusInWindow();
                                    return;
                                }
                            }
                        }
                    }

                    // validate assimilable receipts:
                    if (moHrsReceipt.getPayrollReceipt().isAssimilable()) {
                        if (moDeduction.getFkDeductionTypeId() != SModSysConsts.HRSS_TP_DED_TAX) {
                            // SOURCE CODE WARNING: this code snipet is duplicated as is in method validateForm(), please synchronize any change!
                            miClient.showMsgBoxWarning("El tipo de régimen de contratación de este recibo, "
                                    + "'" + miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsReceipt.getPayrollReceipt().getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME) + "',\n"
                                    + "no admite deducciones distintas a '" + miClient.getSession().readField(SModConsts.HRSS_TP_DED, new int[] { SModSysConsts.HRSS_TP_DED_TAX }, SDbRegistry.FIELD_NAME) + "'.");
                            moTextDeductionCode.requestFocusInWindow();
                            return;
                        }
                    }

                    // confirm multiple deductions of the same type:
                    for (SHrsReceiptDeduction hrsReceiptDeduction : moHrsReceipt.getHrsReceiptDeductions()) {
                        if (hrsReceiptDeduction.getDeduction().getPkDeductionId() == moDeduction.getPkDeductionId() && !moDeduction.isLoan() && 
                                miClient.showMsgBoxConfirm("La deducción '" + moDeduction.getName() + "' ya existe en el recibo.\n"
                                        + "¿Está seguro que desea agregarla otra vez?") != JOptionPane.YES_OPTION) {
                            moTextDeductionCode.requestFocusInWindow();
                            return;
                        }
                    }

                    // add deduction:
                    addHrsReceiptDeduction();
                    resetFieldsDeduction();
                    moTextDeductionCode.requestFocusInWindow();
                }
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void itemStateChangedEarningLoan_n() {
        if (moKeyEarningLoan_n.getSelectedIndex() <= 0) {
            moCompEarningValue.getField().resetField();
        }
    }

    private void itemStateChangedDeductionLoan_n() {
        if (moKeyDeductionLoan_n.getSelectedIndex() <= 0) {
            moCompDeductionValue.getField().resetField();
        }
        else {
            try {
                SDbLoan loan = moHrsReceipt.getHrsEmployee().getLoan(moKeyDeductionLoan_n.getValue()[1]);
                moCompDeductionValue.getField().setValue(SHrsUtils.computeLoanAmount(loan, moHrsReceipt, null, null));
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }
    
    private void itemStateChangedKeyEarningOtherPayment() {
        resetFieldsEarningAux();
        
        if (moKeyEarningOtherPaymentType.getSelectedIndex() > 0) {
            switch (moKeyEarningOtherPaymentType.getValue()[0]) {
                case SModSysConsts.HRSS_TP_OTH_PAY_TAX_SUB:
                    jlEarningAuxAmount1.setText(SDbEarning.TAX_SUB_LABEL + ":");
                    jlEarningAuxAmount1.setEnabled(true);
                    jlEarningAuxAmount1Hint.setToolTipText(SDbEarning.TAX_SUB_HINT);
                    jlEarningAuxAmount1Hint.setEnabled(true);
                    moCurEarningAuxAmount1.setEnabled(true);
                    moCurEarningAuxAmount1.getField().setMandatory(false); // non-mandatory!
                    break;
                    
                case SModSysConsts.HRSS_TP_OTH_PAY_TAX_BAL:
                    int year = SLibTimeUtils.digestYear(moHrsReceipt.getHrsPayroll().getPayroll().getDateEnd())[0];
                    jlEarningAuxValue.setText(SDbEarning.OTH_TAX_BAL_LABEL_YEAR + ":*");
                    jlEarningAuxValue.setEnabled(true);
                    jlEarningAuxValueHint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_YEAR);
                    jlEarningAuxValueHint.setEnabled(true);
                    moCompEarningAuxValue.setEnabled(true);
                    moCompEarningAuxValue.getField().setMandatory(true); // mandatory!
                    moCompEarningAuxValue.setCompoundText("");
                    moCompEarningAuxValue.getField().setDecimalFormat(SLibUtils.DecimalFormatCalendarYear);
                    moCompEarningAuxValue.getField().setMinDouble(year - 1);
                    moCompEarningAuxValue.getField().setMaxDouble(year);
                    moCompEarningAuxValue.getField().setValue((double) year);
                    
                    jlEarningAuxAmount1.setText(SDbEarning.OTH_TAX_BAL_LABEL_BAL + ":*");
                    jlEarningAuxAmount1.setEnabled(true);
                    jlEarningAuxAmount1Hint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_BAL);
                    jlEarningAuxAmount1Hint.setEnabled(true);
                    moCurEarningAuxAmount1.setEnabled(true);
                    moCurEarningAuxAmount1.getField().setMandatory(true); // mandatory!

                    jlEarningAuxAmount2.setText(SDbEarning.OTH_TAX_BAL_LABEL_REM_BAL + ":");
                    jlEarningAuxAmount2.setEnabled(true);
                    jlEarningAuxAmount2Hint.setToolTipText(SDbEarning.OTH_TAX_BAL_HINT_REM_BAL);
                    jlEarningAuxAmount2Hint.setEnabled(true);
                    moCurEarningAuxAmount2.setEnabled(true);
                    moCurEarningAuxAmount2.getField().setMandatory(false); // non-mandatory!
                    break;
                    
                default:
            }
        }
        
        prepareFocusFieldsEarning();
    }
    
    private void processCellEditionEarning() {
        boolean refresh = false;
        SHrsReceiptEarning hrsReceiptEarning = (SHrsReceiptEarning) moGridReceiptEarnings.getSelectedGridRow();
        
        if (hrsReceiptEarning != null) {
            switch (moGridReceiptEarnings.getTable().getSelectedColumn()) {
                case COL_VAL:
                    if (hrsReceiptEarning.isEditableValueAlleged()) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar la 'Cantidad' de la percepción '" + hrsReceiptEarning.getEarning().getName() + "'.");
                    }
                    break;
                case COL_AMT_UNT:
                    if (hrsReceiptEarning.isEditableAmountUnitary(hrsReceiptEarning.getAmountBeingEdited())) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar el 'Monto unitario' de la percepción '" + hrsReceiptEarning.getEarning().getName() + "'."
                                + (!hrsReceiptEarning.getEarning().isBenefit() ? "" : "El monto capturado no puede ser menor que " + SLibUtils.getDecimalFormatAmount().format(hrsReceiptEarning.getAmountOriginal()) + "."));
                    }
                    break;
                default:
            }
        }
        
        if (refresh) {
            try {
                moHrsReceipt.computeReceipt();
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
            
            int row = moGridReceiptEarnings.getTable().getSelectedRow();
            refreshReceiptMovements();
            moGridReceiptEarnings.setSelectedGridRow(row);
        }
    }

    private void processCellEditionDeduction() {
        boolean refresh = false;
        SHrsReceiptDeduction hrsReceiptDeduction = (SHrsReceiptDeduction) moGridReceiptDeductions.getSelectedGridRow();
        
        if (hrsReceiptDeduction != null) {
            switch (moGridReceiptDeductions.getTable().getSelectedColumn()) {
                case COL_VAL:
                    if (hrsReceiptDeduction.isEditableValueAlleged()) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar la 'Cantidad' de la deducción '" + hrsReceiptDeduction.getDeduction().getName() + "'.");
                    }
                    break;
                case COL_AMT_UNT:
                    if (hrsReceiptDeduction.isEditableAmountUnitary(hrsReceiptDeduction.getAmountBeingEdited())) {
                        refresh = true;
                    }
                    else {
                        miClient.showMsgBoxWarning("No se puede modificar el 'Monto unitario' de la deducción '" + hrsReceiptDeduction.getDeduction().getName() + "'."
                                + (!hrsReceiptDeduction.getDeduction().isBenefit() ? "" : "El monto capturado no puede ser menor que " + SLibUtils.getDecimalFormatAmount().format(hrsReceiptDeduction.getAmountOriginal()) + "."));
                    }
                    break;
                default:
            }
        }
        
        if (refresh) {
            try {
                moHrsReceipt.computeReceipt();
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
            
            int row = moGridReceiptDeductions.getTable().getSelectedRow();
            refreshReceiptMovements();
            moGridReceiptDeductions.setSelectedGridRow(row);
        }
    }

    @Override
    public void addAllListeners() {
        jbPickEarning.addActionListener(this);
        jbAddEarning.addActionListener(this);
        jbPickDeduction.addActionListener(this);
        jbAddDeduction.addActionListener(this);
        moTextEarningCode.addActionListener(this);
        moTextDeductionCode.addActionListener(this);
        moKeyEarningLoan_n.addItemListener(this);
        moKeyDeductionLoan_n.addItemListener(this);
        moKeyEarningOtherPaymentType.addItemListener(this);
        moKeyBonusType.addItemListener(this);
        moTextEarningCode.addFocusListener(this);
        moTextDeductionCode.addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickEarning.removeActionListener(this);
        jbAddEarning.removeActionListener(this);
        jbPickDeduction.removeActionListener(this);
        jbAddDeduction.removeActionListener(this);
        moTextEarningCode.removeActionListener(this);
        moTextDeductionCode.removeActionListener(this);
        moKeyEarningLoan_n.removeItemListener(this);
        moKeyDeductionLoan_n.removeItemListener(this);
        moKeyEarningOtherPaymentType.removeItemListener(this);
        moKeyBonusType.removeItemListener(this);
        moTextEarningCode.removeFocusListener(this);
        moTextDeductionCode.removeFocusListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEarningOtherPaymentType, SModConsts.HRSS_TP_OTH_PAY, 0, null);
        miClient.getSession().populateCatalogue(moKeyBonusType, SModConsts.HRSS_BONUS, 0, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (moHrsReceipt.getHrsPayroll().getPayroll().isPayrollNormal()) {
            double daysWorked = 0;
            for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
                if (hrsReceiptEarning.getEarning().isDaysWorked() && !hrsReceiptEarning.getEarning().isAbsence()) {
                    daysWorked += hrsReceiptEarning.getPayrollReceiptEarning().getUnitsAlleged();
                }
            }
            
            double daysAbsence = 0;
            for (SDbAbsenceConsumption absenceConsumption : moHrsReceipt.getAbsenceConsumptions()) {
                daysAbsence += absenceConsumption.getEffectiveDays();
            }
            
            SHrsEmployeeDays hrsEmployeeDays = moHrsReceipt.getHrsEmployee().createEmployeeDays();
            double maxWorkingDays = hrsEmployeeDays.getWorkingDays();
            double daysCovered = daysWorked + daysAbsence;
            double daysDiff = maxWorkingDays - daysCovered;
            
            if (Math.abs(daysDiff) > 0.0001) {
                String msg = "¡ADVERTENCIA!\n"
                        + "Los días laborables del empleado (" + maxWorkingDays + " " + (maxWorkingDays == 1 ? "día" : "días") + ") no son consistentes con\n"
                        + "los días a pagar (" + daysWorked + " " + (daysWorked == 1 ? "día" : "días") + ")"
                        + (daysAbsence == 0 ? "" : " más los días de incidencias (" + daysAbsence + " " + (daysAbsence == 1 ? "día" : "días") + ")" + "; esto es: "
                        + maxWorkingDays + " " + (maxWorkingDays == 1 ? "día" : "días") + " vs. " + daysCovered + " " + (daysCovered == 1 ? "día" : "días")) + ".\n"
                        + "¡SE PAGARÁ " + Math.abs(daysDiff) + " " + (Math.abs(daysDiff) == 1 ? "DÍA" : "DÍAS") + " DE " + (daysDiff > 0 ? "MENOS" : "MÁS") + " AL EMPLEADO!";
                if (miClient.showMsgBoxConfirm(msg + "\n" + SGuiConsts.MSG_CNF_CONT) == JOptionPane.NO_OPTION) {
                    validation.setMessage("Ajustarse a los días laborables del empleado (" + maxWorkingDays + " " + (maxWorkingDays == 1 ? "día" : "días") + ").");
                    validation.setComponent(moTextEarningCode);
                }
            }
        }
        
        // validate assimilable receipts:
        if (moHrsReceipt.getPayrollReceipt().isAssimilable()) {
            for (SHrsReceiptEarning hrsReceiptEarning : moHrsReceipt.getHrsReceiptEarnings()) {
                if (hrsReceiptEarning.getEarning().getFkEarningTypeId() != SModSysConsts.HRSS_TP_EAR_ASS_INC) {
                    // SOURCE CODE WARNING: this code snippet is duplicated as is in method actionAddEarning(), please synchronize any change!
                    validation.setMessage("El tipo de régimen de contratación de este recibo, "
                            + "'" + miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsReceipt.getPayrollReceipt().getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME) + "',\n"
                            + "no admite percepciones distintas a '" + miClient.getSession().readField(SModConsts.HRSS_TP_EAR, new int[] { SModSysConsts.HRSS_TP_EAR_ASS_INC }, SDbRegistry.FIELD_NAME) + "'.");
                    validation.setComponent(moTextEarningCode);
                    break;
                }
            }
            
            if (validation.isValid()) {
                for (SHrsReceiptDeduction hrsReceiptDeduction : moHrsReceipt.getHrsReceiptDeductions()) {
                    if (hrsReceiptDeduction.getDeduction().getFkDeductionTypeId() != SModSysConsts.HRSS_TP_DED_TAX) {
                        // SOURCE CODE WARNING: this code snippet is duplicated as is in method actionAddDeduction(), please synchronize any change!
                        validation.setMessage("El tipo de régimen de contratación de este recibo, "
                                + "'" + miClient.getSession().readField(SModConsts.HRSS_TP_REC_SCHE, new int[] { moHrsReceipt.getPayrollReceipt().getFkRecruitmentSchemaTypeId() }, SDbRegistry.FIELD_NAME) + "',\n"
                                + "no admite deducciones distintas a '" + miClient.getSession().readField(SModConsts.HRSS_TP_DED, new int[] { SModSysConsts.HRSS_TP_DED_TAX }, SDbRegistry.FIELD_NAME) + "'.");
                        validation.setComponent(moTextEarningCode);
                        break;
                    }
                }
            }
        }
        
        return validation;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case PARAM_IS_EDITABLE:
                mbEditable = (boolean) value;
                setEnableFields(mbEditable);
                break;
                
            case SModConsts.HRS_PAY_RCP:
                moHrsReceipt = (SHrsReceipt) value;
                renderReceipt();
                renderEmployee();
                refreshReceiptMovements();
                populateAbsenceConsumption();
                break;
                
            case SModConsts.HRS_EAR:
                moEarnigsMap = new HashMap<>();
                for (SDbEarning earning : (ArrayList<SDbEarning>) value) {
                    moEarnigsMap.put(earning.getPkEarningId(), earning);
                }
                break;
                
            case SModConsts.HRS_DED:
                moDeductionsMap = new HashMap<>();
                for (SDbDeduction deduction : (ArrayList<SDbDeduction>) value) {
                    moDeductionsMap.put(deduction.getPkDeductionId(), deduction);
                }
                break;
                
            default:
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;

        switch (type) {
            case SModConsts.HRS_PAY_RCP:
                updateReceipt();
                value = moHrsReceipt;
                break;
                
            default:
                break;
        }

        return value;
    }

    @Override
    public void actionSave() {
        try {
            if (!mbEditable) {
                mnFormResult = SGuiConsts.FORM_RESULT_CANCEL;
                dispose();
            }
            else {
                updateReceipt();
                super.actionSave();
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        computeTotal();
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        computeTotal();
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickEarning) {
                actionPickEarning();
            }
            else if (button == jbAddEarning) {
                actionAddEarning();
            }
            else if (button == jbPickDeduction) {
                actionPickDeduction();
            }
            else if (button == jbAddDeduction) {
                actionAddDeduction();
            }
        }
        else if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextEarningCode) {
                actionLoadEarning(false, true);
            }
            else if (field == moTextDeductionCode) {
                actionLoadDeduction(false, true);
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextEarningCode) {
                msOriginalEarningCode = moTextEarningCode.getValue();
            }
            else if (field == moTextDeductionCode) {
                msOriginalDeductionCode = moTextDeductionCode.getValue();
            }
        }
    }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextEarningCode) {
                if (!msOriginalEarningCode.equals(moTextEarningCode.getValue())) {
                    actionLoadEarning(true, false);
                }
            }
            else if (field == moTextDeductionCode) {
                if (!msOriginalDeductionCode.equals(moTextDeductionCode.getValue())) {
                    actionLoadDeduction(true, false);
                }
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();

            if (field == moKeyEarningLoan_n) {
                itemStateChangedEarningLoan_n();
            }
            else if (field == moKeyDeductionLoan_n) {
                itemStateChangedDeductionLoan_n();
            }
            else if (field == moKeyEarningOtherPaymentType) {
                itemStateChangedKeyEarningOtherPayment();
            }
        }
    }

    @Override
    public void editingStopped(ChangeEvent e) {
        if (moGridReceiptEarnings.getTable().getDefaultEditor(Double.class).equals(e.getSource())) {
            processCellEditionEarning();
        }
        else if (moGridReceiptDeductions.getTable().getDefaultEditor(Double.class).equals(e.getSource())) {
            processCellEditionDeduction();
        }
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        
    }
}
