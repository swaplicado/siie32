/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormTaxBasic.java
 *
 * Created on 19/10/2009, 03:37:43 PM
 */

package erp.mod.hrs.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mfin.data.SDataTaxRow;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SRowEmployeeSBC;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.AbstractAction;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;


/**
 *
 * @author Claudio Peña
 */
public class SFormEmployeeSBC extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;
    
    protected SGridPaneForm moGridEmployeeSBC;
    protected erp.lib.table.STablePane moTablePane;

    public SFormEmployeeSBC(erp.client.SClientInterface client,  Date dateLayoutStart, Date dateLayoutEnd) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.FINU_TAX_BAS;
        SimpleDateFormat formatDateData = new SimpleDateFormat("ddMMyyyy");
        SimpleDateFormat formatDateTitle = new SimpleDateFormat("yyyyMMdd HHmm");
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        String dateIni = formatter.format(dateLayoutStart);
        String dateEnd = formatter.format(dateLayoutEnd);

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jpEmployeeSBC = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jbAdd = new javax.swing.JButton();
        jbModify = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Impuesto básico");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(392, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jpEmployeeSBC.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados SBC:"));
        jpEmployeeSBC.setLayout(new java.awt.BorderLayout());

        jPanel5.setPreferredSize(new java.awt.Dimension(476, 23));
        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbAdd.setToolTipText("Crear");
        jbAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbAdd);

        jbModify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModify.setToolTipText("Modificar");
        jbModify.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbModify);

        jpEmployeeSBC.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel2.add(jpEmployeeSBC, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(900, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();
        
        moGridEmployeeSBC = new SGridPaneForm((SGuiClient) miClient, SModConsts.HRSX_BEN_DET, SLibConsts.UNDEFINED, "Tabla de empleados") {
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }

            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> gridColumnsForm = new ArrayList<>();

                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_2B, "Clave empleado"));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Empleado", 250));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Inicio beneficios", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Antigüedad", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ACC, "Periodo de pago", 60));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Días vacaciones", 50));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Prima vacacional", 50)); //*
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_1B, "Días aguinaldo", 50)); //*
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Factor de integración", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Ingreso diario", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "SBC actual", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DATE, "Fecha SBC", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "SBC con factor", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "Ingresos extra", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_DEC_4D, "SBC sugerido", 75));
                gridColumnsForm.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT, "Seleccionar", 75));

                return gridColumnsForm;
            }
        };
        dataEmployeeDetail();
        jpEmployeeSBC.add(moGridEmployeeSBC, BorderLayout.CENTER);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbAdd.addActionListener(this);
        jbModify.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void dataEmployeeDetail() {
        Vector<SGridRow> rows = new Vector<>();
        String sql = "";
        ResultSet resultSet = null; 
     
        try {

            sql = "SELECT bp.id_bp AS _emp_id, bp.bp AS _emp_name, e.num AS _emp_num, tp.name AS _pay_tp_name, " +
                "e.dt_ben AS _emp_dt_ben, e.dt_ben AS inicio_beneficios, " +
                "va.dt AS UltFec_SBC , va.sal_ssc as SBC_Actual, '2019-11-04' AS _p_dt_cutoff, " +
                "@sen_raw:=ROUND(DATEDIFF('2019-11-04', e.dt_ben) / 365, 4) AS _sen_raw, " +
                "@sen_as_years:=TIMESTAMPDIFF(YEAR, e.dt_ben, '2019-11-04') AS _sen_as_years, " +
                "@sen_as_months:=TIMESTAMPDIFF(MONTH, e.dt_ben, '2019-11-04') AS _sen_as_months, " +
                "@curr_sal_day:=ROUND(IF(e.fk_tp_pay = 1, e.sal, e.wage * 12 / 365), 2) AS _curr_sal_day, " +
                "@curr_sal_day2:=ROUND(IF(e.fk_tp_pay = 1, e.sal, e.wage * 12 / 365), 2) AS INGRESO_DIARIO, " +
                "@curr_ben_anniv:=@sen_as_years + 1 AS _curr_ben_anniv, " +
                "@curr_ben_year:=YEAR(ADDDATE(e.dt_ben, " +
                "INTERVAL @sen_as_years YEAR)) AS _curr_ben_year, " +
                "@prev_ben_anniv:=IF(@sen_as_years = 0, NULL, " +
                "@sen_as_years) AS _prev_ben_anniv, " +
                "@prev_ben_year:=IF(@sen_as_years = 0, NULL, " +
                "@curr_ben_year - 1) AS _prev_ben_year, " +
                "@curr_dt_base:=IF(21 = 11, " +
                "IF(e.dt_ben < '2019-01-01', '2019-01- 5', e.dt_ben), " +
                "ADDDATE(e.dt_ben, INTERVAL @sen_as_years YEAR)) AS _curr_dt_base, " +
                "@curr_days_elapsed:=DATEDIFF('2019-11-04', @curr_dt_base) AS _curr_days_elapsed, " +
                "@curr_prop:=@curr_days_elapsed / 365 AS _curr_prop, " +
                "@prev_dt_base:=IF(@sen_as_years = 0, NULL, IF(21 = 11, IF(e.dt_ben < '2018-01-01', '2018-01-01', e.dt_ben), ADDDATE(e.dt_ben, INTERVAL @sen_as_years - 1 YEAR))) AS _prev_dt_base, " +
                "@prev_days_elapsed:=IF(@sen_as_years = 0, NULL, " +
                "DATEDIFF('2019-11-04', @prev_dt_base) - @curr_days_elapsed) AS _prev_days_elapsed, " +
                "@prev_prop:=IF(@sen_as_years = 0, NULL, @prev_days_elapsed / 365) AS _prev_prop, " +
                "@id_ben_day_pay:=(SELECT b.id_ben FROM hrs_ben AS b " +
                "WHERE NOT b.b_del AND b.fk_tp_ben = IF(21 = 22, 21, 21) AND b.dt_sta <= '2019-11-04' AND b.fk_tp_pay_n = e.fk_tp_pay ORDER BY b.dt_sta DESC , b.id_ben " +
                "LIMIT 1) AS _id_ben_day_pay, " +
                "@id_ben_day_all:=(SELECT b.id_ben FROM hrs_ben AS b WHERE NOT b.b_del AND b.fk_tp_ben = IF(21 = 22, 21, 21) AND b.dt_sta <= '2019-11-04' AND b.fk_tp_pay_n IS NULL " +
                "ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1) AS _id_ben_day_all, " +
                "@id_ben_day:=COALESCE(@id_ben_day_pay, @id_ben_day_all) AS _id_ben_day, " +
                "@ben_day_name:=(SELECT b.name FROM hrs_ben AS b WHERE b.id_ben = @id_ben_day) AS _ben_day_name, " +
                "@id_ben_bon_pay:=IF(21 <> 22, 0, (SELECT b.id_ben FROM hrs_ben AS b WHERE NOT b.b_del AND b.fk_tp_ben = 22 AND b.dt_sta <= '2019-11-04' AND b.fk_tp_pay_n = e.fk_tp_pay " +
                "ORDER BY b.dt_sta DESC , b.id_ben " +
                "LIMIT 1)) AS _id_ben_bon_pay, " +
                "@id_ben_bon_all:=IF(21 <> 22, 0, " +
                "(SELECT b.id_ben FROM hrs_ben AS b " +
                "WHERE NOT b.b_del AND b.fk_tp_ben = 22 AND b.dt_sta <= '2019-11-04' AND b.fk_tp_pay_n IS NULL " +
                "ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1)) AS _id_ben_bon_all, " +
                "@id_ben_bon:=COALESCE(@id_ben_bon_pay, @id_ben_bon_all) AS _id_ben_bon, " +
                "@ben_bon_name:=(SELECT b.name FROM hrs_ben AS b WHERE b.id_ben = @id_ben_bon) AS _ben_bon_name, " +
                "@curr_ben_days:=COALESCE((SELECT br.ben_day " +
                "FROM hrs_ben_row AS br WHERE br.id_ben = @id_ben_day AND @sen_raw <= (br.mon / 12) ORDER BY br.id_row LIMIT 1), 0) AS _DiasAguinaldo, " +
                "@curr_ben_days_prop:=@curr_ben_days * @curr_prop AS _curr_ben_days_prop, " +
                "@curr_ben_amt_prop:=ROUND(@curr_sal_day * @curr_ben_days_prop, 2) AS _curr_ben_amt_prop, " +
                "@curr_ben_bon_perc:=COALESCE((SELECT  " +
                "br.ben_bon_per " +
                "FROM hrs_ben_row AS br WHERE br.id_ben = @id_ben_bon AND @sen_raw <= (br.mon / 12) " +
                "ORDER BY br.id_row " +
                "LIMIT 1), 0) AS _curr_ben_bon_perc, " +
                "@curr_ben_bon_amt_prop:=ROUND(@curr_ben_amt_prop * @curr_ben_bon_perc, 2) AS _curr_ben_bon_amt_prop, " +
                "@prev_ben_days:=IF(@sen_as_years < 1, 0, " +
                "COALESCE((SELECT br.ben_day " +
                "FROM hrs_ben_row AS br " +
                "WHERE br.id_ben = @id_ben_day AND (@sen_raw - 1) <= (br.mon / 12) ORDER BY br.id_row LIMIT 1), 0)) AS _prev_ben_days, " +
                "@prev_ben_days_prop:=@prev_ben_days * @prev_prop AS _prev_ben_days_prop, " +
                "@prev_ben_amt_prop:=ROUND(@curr_sal_day * @prev_ben_days_prop, 2) AS _prev_ben_amt_prop, " +
                "@prev_ben_bon_perc:=IF(@sen_as_years < 1, 0, " +
                "COALESCE((SELECT br.ben_bon_per " +
                "FROM hrs_ben_row AS br " +
                "WHERE br.id_ben = @id_ben_bon AND (@sen_raw - 1) <= (br.mon / 12) " +
                "ORDER BY br.id_row " +
                "LIMIT 1), 0)) AS _prev_ben_bon_perc, " +
                "@prev_ben_bon_amt_prop:=ROUND(@prev_ben_amt_prop * @prev_ben_bon_perc, 2) AS _prev_ben_bon_amt_prop, " +
                "@curr_pay_days:=COALESCE(tcur.ben_unt, 0.0) AS _curr_pay_days, " +
                "@curr_pay_amt:=COALESCE(tcur.ben_amt, 0.0) AS _curr_pay_amt, " +
                "@prev_pay_days:=COALESCE(tprev.ben_unt, 0.0) AS _prev_pay_days, " +
                "@prev_pay_amt:=COALESCE(tprev.ben_amt, 0.0) AS _prev_pay_amt, " +
                "COALESCE(@curr_ben_days_prop, 0.0) - @curr_pay_days AS _diff_curr_pay_days, " +
                "COALESCE(IF(21 = 22, @curr_ben_bon_amt_prop, @curr_ben_amt_prop), 0.0) - @curr_pay_amt AS _diff_curr_pay_amt, " +
                "COALESCE(@prev_ben_days_prop, 0.0) - @prev_pay_days AS _diff_prev_pay_days, " +
                "COALESCE(IF(21 = 22, @prev_ben_bon_amt_prop, @prev_ben_amt_prop), 0.0) - @prev_pay_amt AS _diff_prev_pay_amt, bp.id_bp AS f_id_1, " +
                "@sen_as_years AS f_id_2, " +
                "@curr_days_elapsed AS f_id_3, " +
                "IF(21 = 22, @id_ben_bon, @id_ben_day) AS f_id_4, bp.bp AS f_name, e.num AS f_code, " +
                "@id_ben_bon_all:=IF(22 <> 22, 0, " +
                "(SELECT b.id_ben FROM hrs_ben AS b " +
                "WHERE " +
                "NOT b.b_del AND b.fk_tp_ben = 22 AND b.dt_sta <= '2019-11-25' AND b.fk_tp_pay_n IS NULL " +
                "ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1)) AS _id_ben_bon_all, " +
                "@id_ben_bon_pay:=IF(22 <> 22, 0, " +
                "(SELECT b.id_ben FROM hrs_ben AS b " +
                "WHERE NOT b.b_del AND b.fk_tp_ben = 22 AND b.dt_sta <= '2019-11-25' AND b.fk_tp_pay_n = e.fk_tp_pay " +
                "ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1)) AS _id_ben_bon_pay, " +
                "@id_ben_bon:=COALESCE(@id_ben_bon_pay, @id_ben_bon_all) AS _id_ben_bon, " +
                "@curr_ben_bon_perc:=COALESCE((SELECT br.ben_bon_per " +
                "FROM hrs_ben_row AS br WHERE br.id_ben = @id_ben_bon AND @sen_raw <= (br.mon / 12) ORDER BY br.id_row LIMIT 1), 0) AS Prima_Vacacional1, " +
                "@id_ben_day:=COALESCE(@id_ben_day_pay, @id_ben_day_all) AS _id_ben_day, " +
                "@curr_ben_days:=COALESCE((SELECT br.ben_day " +
                "FROM hrs_ben_row AS br " +
                "WHERE br.id_ben = @id_ben_day AND @sen_raw <= (br.mon / 12) ORDER BY br.id_row LIMIT 1), 0) AS Dias_Vacaciones, " +
                "@id_ben_day_pay1:=(SELECT b.id_ben " +
                "FROM hrs_ben AS b " +
                "WHERE NOT b.b_del AND b.fk_tp_ben = IF(11 = 22, 21, 11) AND b.dt_sta <= '2019-12-31' AND b.fk_tp_pay_n = e.fk_tp_pay " +
                "ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1) AS _id_ben_day_pay, " +
                "@id_ben_day_all1:=(SELECT b.id_ben " +
                "FROM hrs_ben AS b " +
                "WHERE NOT b.b_del AND b.fk_tp_ben = IF(11 = 22, 21, 11) AND b.dt_sta <= '2019-12-31' AND b.fk_tp_pay_n IS NULL ORDER BY b.dt_sta DESC , b.id_ben LIMIT 1) AS _id_ben_day_all, " +
                "@id_ben_day1:=COALESCE(@id_ben_day_pay1, @id_ben_day_all1) AS _id_ben_day, " +
                "@curr_ben_days:=COALESCE((SELECT br.ben_day " +
                "FROM hrs_ben_row AS br " +
                "WHERE br.id_ben = @id_ben_day1 " +
                "AND @sen_raw <= (br.mon / 12) ORDER BY br.id_row LIMIT 1), 0) AS Dias_Aguinaldo, " + 
                "@factorI:=((@curr_ben_days * @curr_ben_bon_perc) + @curr_ben_days )/365 as Factori " +
                "FROM erp.bpsu_bp AS bp " +
                "INNER JOIN erp.hrsu_emp AS e ON e.id_emp = bp.id_bp " +
                "INNER JOIN erp.hrss_tp_pay AS tp ON e.fk_tp_pay = tp.id_tp_pay " +
                "LEFT OUTER JOIN (SELECT t.id_emp, t.ben_year, t.ben_ann, " +
                "SUM(t.ben_unt) AS ben_unt, " +
                "SUM(t.ben_amt) AS ben_amt " +
                "FROM (SELECT pre.id_emp, pre.ben_year, pre.ben_ann, " +
                "SUM(pre.unt) AS ben_unt, " +
                "SUM(pre.amt_r) AS ben_amt " +
                "FROM hrs_pay AS p " +
                "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                "INNER JOIN erp.hrsu_emp AS e ON pr.id_emp = e.id_emp " +
                "WHERE pre.fk_tp_ben = 21 AND e.b_act AND NOT p.b_del AND NOT pr.b_del AND NOT pre.b_del AND pre.ben_year = YEAR('2019-11-04') " +
                "GROUP BY pre.id_emp , pre.ben_year , pre.ben_ann UNION SELECT prd.id_emp, prd.ben_year, prd.ben_ann, " +
                "- SUM(prd.unt) AS ben_unt, " +
                "- SUM(prd.amt_r) AS ben_amt " +
                "FROM hrs_pay AS p " +
                "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                "INNER JOIN erp.hrsu_emp AS e ON pr.id_emp = e.id_emp " +
                "WHERE prd.fk_tp_ben = 21 AND e.b_act AND NOT p.b_del " + 
                "AND NOT pr.b_del AND NOT prd.b_del AND prd.ben_year = YEAR('2019-11-04') " +
                "GROUP BY prd.id_emp , prd.ben_year , prd.ben_ann " +
                "ORDER BY id_emp , ben_year , ben_ann) AS t " +
                "GROUP BY id_emp , ben_year , ben_ann " +
                "ORDER BY id_emp , ben_year , ben_ann) AS tcur ON tcur.id_emp = bp.id_bp " +
                "LEFT OUTER JOIN (SELECT t.id_emp, t.ben_year, t.ben_ann, " +
                "SUM(t.ben_unt) AS ben_unt, " +
                "SUM(t.ben_amt) AS ben_amt " +
                "FROM (SELECT pre.id_emp, pre.ben_year, pre.ben_ann, SUM(pre.unt) AS ben_unt, SUM(pre.amt_r) AS ben_amt " +
                "FROM hrs_pay AS p " +
                "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                "INNER JOIN erp.hrsu_emp AS e ON pr.id_emp = e.id_emp " +
                "WHERE pre.fk_tp_ben = 21 AND e.b_act AND NOT p.b_del AND NOT pr.b_del AND NOT pre.b_del " +
                "AND pre.ben_year = YEAR('2019-11-04') - 1 " +
                "GROUP BY pre.id_emp , pre.ben_year , pre.ben_ann UNION SELECT prd.id_emp, prd.ben_year, prd.ben_ann, " +
                "- SUM(prd.unt) AS ben_unt, " +
                "- SUM(prd.amt_r) AS ben_amt " +
                "FROM hrs_pay AS p " +
                "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                "INNER JOIN erp.hrsu_emp AS e ON pr.id_emp = e.id_emp " +
                "INNER JOIN hrs_emp_log_sal_ssc AS va ON va.id_emp = e.id_emp " +
                "INNER JOIN erp.bpsu_bp AS bp ON va.id_emp = bp.id_bp " +
                "INNER JOIN erp.usru_usr AS ui ON va.fk_usr_ins = ui.id_usr " +
                "INNER JOIN erp.usru_usr AS uu ON va.fk_usr_upd = uu.id_usr " +
                "WHERE prd.fk_tp_ben = 21 AND e.b_act AND NOT p.b_del AND NOT pr.b_del AND NOT prd.b_del  AND prd.ben_year = YEAR('2019-11-04') - 1 " +
                "GROUP BY prd.id_emp , prd.ben_year , prd.ben_ann " +
                "ORDER BY id_emp , ben_year , ben_ann) AS t " +
                "GROUP BY id_emp , ben_year , ben_ann " +
                "ORDER BY id_emp , ben_year , ben_ann) AS tprev ON tprev.id_emp = bp.id_bp " +
                "INNER JOIN hrs_emp_log_sal_ssc AS va ON va.id_emp = e.id_emp AND va.dt = (SELECT dt FROM hrs_emp_log_sal_ssc WHERE id_emp = e.id_emp ORDER BY dt DESC LIMIT 1) " +
                "INNER JOIN erp.hrsu_emp AS emp ON va.id_emp = emp.id_emp " +
                "WHERE e.b_act AND e.dt_ben <= '2019-11-04' AND NOT e.b_del AND e.b_act "
                    + "and bp.id_bp  = 3830 " +
                "ORDER BY bp.bp , bp.id_bp ; " ;                

            resultSet = miClient.getSession().getStatement().executeQuery(sql);

            while (resultSet.next()) {
                SRowEmployeeSBC row = new SRowEmployeeSBC(15);
                row.setKeyEmpl(resultSet.getInt("_emp_num"));
                row.setEmployee(resultSet.getString("_emp_name"));
                row.setInitBen(resultSet.getDate("inicio_beneficios"));
                row.setAnti(resultSet.getDouble("_sen_as_years"));
                row.setPeriod(resultSet.getString("_pay_tp_name"));
                row.setDaysVac(resultSet.getInt("Dias_Vacaciones"));
                row.setPrimVac(resultSet.getDouble("Prima_Vacacional1"));
                row.setDaysBen(resultSet.getDouble("Dias_Aguinaldo"));
                row.setFactor(resultSet.getDouble("Factori"));//_curr_ben_bon_perc FACTOR INTEGRACION+
                row.setIngrDi(resultSet.getDouble("Ingreso_diario")); // INGRESO DIARIO+
                row.setSbcA(resultSet.getDouble("SBC_Actual"));//* // SBC ACTUAL+
                row.setLastDate(resultSet.getDate("UltFec_SBC"));//* FECHA DEL SALARIO+
                row.setSbcFactor(resultSet.getDouble("Ingreso_diario"));//* SBC FACTOR+
                row.setExtraIncome(resultSet.getDouble("Ingreso_diario"));//* INGRESOS EXTRA++++++++++++
                row.setSbcSug(resultSet.getDouble("Ingreso_diario"));//* SBC SUGERIDO++++++++++++
                row.setCheck(resultSet.getString("_emp_name"));//*+++++++++++

                rows.add(row);
            }
 
            moGridEmployeeSBC.populateGrid(rows);
//            moGridEmployeeSBC.clearSortKeys();
            moGridEmployeeSBC.setSelectedGridRow(0);

        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbModify;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpEmployeeSBC;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
       
    }

    @Override
    public void formRefreshCatalogues() {
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataTaxRow taxesRow = null;

    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        return null;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
        }
    }

    void resetForm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
