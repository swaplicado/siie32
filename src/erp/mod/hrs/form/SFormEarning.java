/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbEarning;
import erp.mod.hrs.utils.SPayrollBonusUtils;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFieldKeyGroup;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SFormEarning extends SBeanForm implements ItemListener {

    private SDbEarning moRegistry;
    private SGuiFieldKeyGroup moFieldKeyGroup;

    /**
     * Creates new form SFormEarning.
     * @param client
     * @param title 
     */
    public SFormEarning(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_EAR, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel4 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel22 = new javax.swing.JPanel();
        jlNameAbbreviated = new javax.swing.JLabel();
        moTextNameAbbreviated = new sa.lib.gui.bean.SBeanFieldText();
        jlNameAbbreviatedHelp = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jlEarningComputationType = new javax.swing.JLabel();
        moKeyEarningComputationType = new sa.lib.gui.bean.SBeanFieldKey();
        jlEarningComputationTypeHelp = new javax.swing.JLabel();
        jlUnitsFactor = new javax.swing.JLabel();
        moDecUnitsFactor = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitsFactor1 = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jlDummy1 = new javax.swing.JLabel();
        jlSettingsBase = new javax.swing.JLabel();
        jlSettingsAditional = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jlEarningExemptionType = new javax.swing.JLabel();
        moKeyEarningExemptionType = new sa.lib.gui.bean.SBeanFieldKey();
        moKeyEarningExemptionTypeYear = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlExemptionMwz = new javax.swing.JLabel();
        moDecExemptionMwz = new sa.lib.gui.bean.SBeanFieldDecimal();
        moDecExemptionMwzHint = new javax.swing.JLabel();
        moDecExemptionMwzYear = new sa.lib.gui.bean.SBeanFieldDecimal();
        moDecExemptionMwzYearHint = new javax.swing.JLabel();
        jlExemptionMwzHelp = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jlExemptionSalaryEqualsMwzPercentage = new javax.swing.JLabel();
        moDecExemptionSalaryEqualsMwzPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryEqualsMwzPercentageHelp = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jlExemptionSalaryEqualsMwzLimit = new javax.swing.JLabel();
        moDecExemptionSalaryEqualsMwzLimit = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryEqualsMwzLimitHelp = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlExemptionSalaryGreaterMwzPercentage = new javax.swing.JLabel();
        moDecExemptionSalaryGreaterMwzPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryGreaterMwzPercentageHelp = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jlExemptionSalaryGreaterMwzLimit = new javax.swing.JLabel();
        moDecExemptionSalaryGreaterMwzLimit = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlExemptionSalaryGreaterMwzLimitHelp = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jlPayPercentage = new javax.swing.JLabel();
        moDecPayPercentage = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlPayPercentageHelp = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jlUnitsMaximumWeek = new javax.swing.JLabel();
        moDecUnitsMaximumWeek = new sa.lib.gui.bean.SBeanFieldDecimal();
        jlUnitsMaximumWeekHelp = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        moBoolDaysAdjustment = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysAbsence = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysWorked = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolDaysWorkedBased = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolLoan = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolWelfare = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolPayBonus = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel24 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlEarningType = new javax.swing.JLabel();
        moKeyEarningType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel33 = new javax.swing.JPanel();
        jlOtherPaymentType = new javax.swing.JLabel();
        moKeyOtherPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel15 = new javax.swing.JPanel();
        jlLoanType = new javax.swing.JLabel();
        moKeyLoanType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel19 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        moKeyBenefitType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel17 = new javax.swing.JPanel();
        jlAccountingConfigurationType = new javax.swing.JLabel();
        moKeyAccountingConfigurationType = new sa.lib.gui.bean.SBeanFieldKey();
        jlAccountingConfigurationTypeHelp = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jlAccountingRecordType = new javax.swing.JLabel();
        moKeyAccountingRecordType = new sa.lib.gui.bean.SBeanFieldKey();
        jlAccountingRecordTypeHelp = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jlAbsenceClass = new javax.swing.JLabel();
        moKeyAbsenceClass = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel20 = new javax.swing.JPanel();
        jlAbsenceType = new javax.swing.JLabel();
        moKeyAbsenceType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel34 = new javax.swing.JPanel();
        jlPayBonus = new javax.swing.JLabel();
        moKeyBonus = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel30 = new javax.swing.JPanel();
        moBoolWithholding = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel31 = new javax.swing.JPanel();
        moBoolPayrollTax = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanel32 = new javax.swing.JPanel();
        moBoolAlternativeTaxCalculation = new sa.lib.gui.bean.SBeanFieldBoolean();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel25.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(14, 1, 0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel6.add(jlCode);

        moTextCode.setText("sBeanFieldText2");
        jPanel6.add(moTextCode);

        jPanel2.add(jPanel6);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel4.add(jlName);

        moTextName.setText("sBeanFieldText1");
        moTextName.setPreferredSize(new java.awt.Dimension(405, 23));
        jPanel4.add(moTextName);

        jPanel2.add(jPanel4);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNameAbbreviated.setText("Nombre corto:*");
        jlNameAbbreviated.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel22.add(jlNameAbbreviated);

        moTextNameAbbreviated.setText("sBeanFieldText1");
        moTextNameAbbreviated.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel22.add(moTextNameAbbreviated);

        jlNameAbbreviatedHelp.setForeground(java.awt.Color.gray);
        jlNameAbbreviatedHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlNameAbbreviatedHelp.setText("aplica para contabilización, emisión del recibo de nómina y CFDI");
        jlNameAbbreviatedHelp.setToolTipText("");
        jlNameAbbreviatedHelp.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel22.add(jlNameAbbreviatedHelp);

        jPanel2.add(jPanel22);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningComputationType.setText("Tipo cálculo percepción:*");
        jlEarningComputationType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel7.add(jlEarningComputationType);

        moKeyEarningComputationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyEarningComputationType);

        jlEarningComputationTypeHelp.setForeground(java.awt.Color.gray);
        jlEarningComputationTypeHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlEarningComputationTypeHelp.setText("ayuda...");
        jlEarningComputationTypeHelp.setToolTipText("");
        jlEarningComputationTypeHelp.setPreferredSize(new java.awt.Dimension(325, 23));
        jPanel7.add(jlEarningComputationTypeHelp);

        jlUnitsFactor.setText("Factor cálculo:*");
        jlUnitsFactor.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlUnitsFactor);
        jPanel7.add(moDecUnitsFactor);

        jlUnitsFactor1.setForeground(java.awt.Color.gray);
        jlUnitsFactor1.setText("1x, 2x, ...");
        jlUnitsFactor1.setPreferredSize(new java.awt.Dimension(65, 23));
        jPanel7.add(jlUnitsFactor1);

        jPanel2.add(jPanel7);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDummy1.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel29.add(jlDummy1);

        jlSettingsBase.setText("Exención base:");
        jlSettingsBase.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel29.add(jlSettingsBase);

        jlSettingsAditional.setText("Exención adicional:");
        jlSettingsAditional.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanel29.add(jlSettingsAditional);

        jPanel2.add(jPanel29);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningExemptionType.setText("Tipo exención percepción:*");
        jlEarningExemptionType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel16.add(jlEarningExemptionType);

        moKeyEarningExemptionType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyEarningExemptionType);

        moKeyEarningExemptionTypeYear.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel16.add(moKeyEarningExemptionTypeYear);

        jPanel2.add(jPanel16);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionMwz.setText("UMA exentas:");
        jlExemptionMwz.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel8.add(jlExemptionMwz);
        jPanel8.add(moDecExemptionMwz);

        moDecExemptionMwzHint.setForeground(java.awt.Color.gray);
        moDecExemptionMwzHint.setText("exención base");
        moDecExemptionMwzHint.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel8.add(moDecExemptionMwzHint);
        jPanel8.add(moDecExemptionMwzYear);

        moDecExemptionMwzYearHint.setForeground(java.awt.Color.gray);
        moDecExemptionMwzYearHint.setText("exención adicional");
        moDecExemptionMwzYearHint.setPreferredSize(new java.awt.Dimension(95, 23));
        jPanel8.add(moDecExemptionMwzYearHint);

        jlExemptionMwzHelp.setForeground(java.awt.Color.gray);
        jlExemptionMwzHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionMwzHelp.setText("Exenciones en número de UMA (antes en salarios mínimos del área geográfica)");
        jlExemptionMwzHelp.setToolTipText("");
        jlExemptionMwzHelp.setPreferredSize(new java.awt.Dimension(395, 23));
        jPanel8.add(jlExemptionMwzHelp);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryEqualsMwzPercentage.setText("% exención si SB = SMA:");
        jlExemptionSalaryEqualsMwzPercentage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel9.add(jlExemptionSalaryEqualsMwzPercentage);
        jPanel9.add(moDecExemptionSalaryEqualsMwzPercentage);

        jlExemptionSalaryEqualsMwzPercentageHelp.setForeground(java.awt.Color.gray);
        jlExemptionSalaryEqualsMwzPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryEqualsMwzPercentageHelp.setText("Porcentaje de exención si el empleado gana IGUAL al salario mínimo aplicable");
        jlExemptionSalaryEqualsMwzPercentageHelp.setToolTipText("");
        jlExemptionSalaryEqualsMwzPercentageHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel9.add(jlExemptionSalaryEqualsMwzPercentageHelp);

        jPanel2.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryEqualsMwzLimit.setText("Tope exención si SB = SMA:");
        jlExemptionSalaryEqualsMwzLimit.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel10.add(jlExemptionSalaryEqualsMwzLimit);
        jPanel10.add(moDecExemptionSalaryEqualsMwzLimit);

        jlExemptionSalaryEqualsMwzLimitHelp.setForeground(java.awt.Color.gray);
        jlExemptionSalaryEqualsMwzLimitHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryEqualsMwzLimitHelp.setText("Tope exención en número de UMA (antes en salarios mínimos del área geográfica) si el empleado gana IGUAL al salario mínimo aplicable");
        jlExemptionSalaryEqualsMwzLimitHelp.setToolTipText("");
        jlExemptionSalaryEqualsMwzLimitHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel10.add(jlExemptionSalaryEqualsMwzLimitHelp);

        jPanel2.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryGreaterMwzPercentage.setText("% exención si SB > SMA:");
        jlExemptionSalaryGreaterMwzPercentage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel11.add(jlExemptionSalaryGreaterMwzPercentage);
        jPanel11.add(moDecExemptionSalaryGreaterMwzPercentage);

        jlExemptionSalaryGreaterMwzPercentageHelp.setForeground(java.awt.Color.gray);
        jlExemptionSalaryGreaterMwzPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryGreaterMwzPercentageHelp.setText("Porcentaje de exención si el empleado gana MÁS del salario mínimo aplicable");
        jlExemptionSalaryGreaterMwzPercentageHelp.setToolTipText("");
        jlExemptionSalaryGreaterMwzPercentageHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel11.add(jlExemptionSalaryGreaterMwzPercentageHelp);

        jPanel2.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExemptionSalaryGreaterMwzLimit.setText("Tope exención si SB > SMA:");
        jlExemptionSalaryGreaterMwzLimit.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel12.add(jlExemptionSalaryGreaterMwzLimit);
        jPanel12.add(moDecExemptionSalaryGreaterMwzLimit);

        jlExemptionSalaryGreaterMwzLimitHelp.setForeground(java.awt.Color.gray);
        jlExemptionSalaryGreaterMwzLimitHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlExemptionSalaryGreaterMwzLimitHelp.setText("Tope exención en número de UMA (antes en salarios mínimos del área geográfica) si el empleado gana MÁS del salario mínimo aplicable");
        jlExemptionSalaryGreaterMwzLimitHelp.setToolTipText("Exención límite expresado en número de salarios mínimos del área geográfica, cuando el empleado gana más del salario mínimo");
        jlExemptionSalaryGreaterMwzLimitHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel12.add(jlExemptionSalaryGreaterMwzLimitHelp);

        jPanel2.add(jPanel12);

        jPanel23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayPercentage.setText("Porcentaje percepción:");
        jlPayPercentage.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel23.add(jlPayPercentage);
        jPanel23.add(moDecPayPercentage);

        jlPayPercentageHelp.setForeground(java.awt.Color.gray);
        jlPayPercentageHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlPayPercentageHelp.setText("Porcentaje para determinar el monto de la percepción en base al tipo de cálculo de percepción elegido");
        jlPayPercentageHelp.setToolTipText("");
        jlPayPercentageHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel23.add(jlPayPercentageHelp);

        jPanel2.add(jPanel23);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlUnitsMaximumWeek.setText("Unidades máximas semana:");
        jlUnitsMaximumWeek.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel13.add(jlUnitsMaximumWeek);
        jPanel13.add(moDecUnitsMaximumWeek);

        jlUnitsMaximumWeekHelp.setForeground(java.awt.Color.gray);
        jlUnitsMaximumWeekHelp.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jlUnitsMaximumWeekHelp.setText("Número máximo de unidades permitido por semana (en quincena aplica 2x)");
        jlUnitsMaximumWeekHelp.setToolTipText("");
        jlUnitsMaximumWeekHelp.setPreferredSize(new java.awt.Dimension(700, 23));
        jPanel13.add(jlUnitsMaximumWeekHelp);

        jPanel2.add(jPanel13);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        moBoolDaysAdjustment.setText("Aplica ajuste días");
        moBoolDaysAdjustment.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(moBoolDaysAdjustment);

        moBoolDaysAbsence.setText("Aplica días incidencia");
        moBoolDaysAbsence.setPreferredSize(new java.awt.Dimension(140, 23));
        jPanel3.add(moBoolDaysAbsence);

        moBoolDaysWorked.setText("Cuenta como días trabajados");
        moBoolDaysWorked.setPreferredSize(new java.awt.Dimension(180, 23));
        jPanel3.add(moBoolDaysWorked);

        moBoolDaysWorkedBased.setText("En base a días trabajados");
        moBoolDaysWorkedBased.setPreferredSize(new java.awt.Dimension(165, 23));
        jPanel3.add(moBoolDaysWorkedBased);

        moBoolLoan.setText("Es crédito/préstamo");
        moBoolLoan.setPreferredSize(new java.awt.Dimension(135, 23));
        jPanel3.add(moBoolLoan);

        moBoolWelfare.setText("Es previsión social");
        moBoolWelfare.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel3.add(moBoolWelfare);

        moBoolPayBonus.setText("Paga bono");
        moBoolPayBonus.setPreferredSize(new java.awt.Dimension(90, 23));
        jPanel3.add(moBoolPayBonus);

        jPanel2.add(jPanel3);

        jPanel25.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel25, java.awt.BorderLayout.NORTH);

        jPanel24.setLayout(new java.awt.BorderLayout());

        jPanel26.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel27.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarningType.setText("Tipo percepción:*");
        jlEarningType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jlEarningType);

        moKeyEarningType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel5.add(moKeyEarningType);

        jPanel27.add(jPanel5);

        jPanel33.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOtherPaymentType.setText("Tipo otro pago:*");
        jlOtherPaymentType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel33.add(jlOtherPaymentType);

        moKeyOtherPaymentType.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel33.add(moKeyOtherPaymentType);

        jPanel27.add(jPanel33);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlLoanType.setText("Tipo crédito/préstamo:*");
        jlLoanType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel15.add(jlLoanType);

        moKeyLoanType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel15.add(moKeyLoanType);

        jPanel27.add(jPanel15);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setText("Tipo prestación:*");
        jlBenefitType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel19.add(jlBenefitType);

        moKeyBenefitType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel19.add(moKeyBenefitType);

        jPanel27.add(jPanel19);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingConfigurationType.setText("Tipo configuración contable:*");
        jlAccountingConfigurationType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel17.add(jlAccountingConfigurationType);

        moKeyAccountingConfigurationType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(moKeyAccountingConfigurationType);

        jlAccountingConfigurationTypeHelp.setForeground(java.awt.Color.gray);
        jlAccountingConfigurationTypeHelp.setText("para configurar cuentas contables");
        jlAccountingConfigurationTypeHelp.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel17.add(jlAccountingConfigurationTypeHelp);

        jPanel27.add(jPanel17);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingRecordType.setText("Tipo registro contable:*");
        jlAccountingRecordType.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel18.add(jlAccountingRecordType);

        moKeyAccountingRecordType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(moKeyAccountingRecordType);

        jlAccountingRecordTypeHelp.setForeground(java.awt.Color.gray);
        jlAccountingRecordTypeHelp.setText("para agrupar asientos contables");
        jlAccountingRecordTypeHelp.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel18.add(jlAccountingRecordTypeHelp);

        jPanel27.add(jPanel18);

        jPanel26.add(jPanel27, java.awt.BorderLayout.WEST);

        jPanel28.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceClass.setText("Clase incidencia:");
        jlAbsenceClass.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jlAbsenceClass);

        moKeyAbsenceClass.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel21.add(moKeyAbsenceClass);

        jPanel28.add(jPanel21);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAbsenceType.setText("Tipo incidencia:");
        jlAbsenceType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel20.add(jlAbsenceType);

        moKeyAbsenceType.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel20.add(moKeyAbsenceType);

        jPanel28.add(jPanel20);

        jPanel34.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayBonus.setText("Bono:");
        jlPayBonus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel34.add(jlPayBonus);

        moKeyBonus.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel34.add(moKeyBonus);

        jPanel28.add(jPanel34);

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolWithholding.setText("Es retención de ley");
        moBoolWithholding.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel30.add(moBoolWithholding);

        jPanel28.add(jPanel30);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolPayrollTax.setText("Aplica para impuesto sobre nóminas");
        moBoolPayrollTax.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel31.add(moBoolPayrollTax);

        jPanel28.add(jPanel31);

        jPanel32.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moBoolAlternativeTaxCalculation.setText("Aplica cálculo alterno Art. 174 RLISR");
        moBoolAlternativeTaxCalculation.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel32.add(moBoolAlternativeTaxCalculation);

        jPanel28.add(jPanel32);

        jPanel26.add(jPanel28, java.awt.BorderLayout.CENTER);

        jPanel24.add(jPanel26, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel24, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlAbsenceClass;
    private javax.swing.JLabel jlAbsenceType;
    private javax.swing.JLabel jlAccountingConfigurationType;
    private javax.swing.JLabel jlAccountingConfigurationTypeHelp;
    private javax.swing.JLabel jlAccountingRecordType;
    private javax.swing.JLabel jlAccountingRecordTypeHelp;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlEarningComputationType;
    private javax.swing.JLabel jlEarningComputationTypeHelp;
    private javax.swing.JLabel jlEarningExemptionType;
    private javax.swing.JLabel jlEarningType;
    private javax.swing.JLabel jlExemptionMwz;
    private javax.swing.JLabel jlExemptionMwzHelp;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzLimit;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzLimitHelp;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzPercentage;
    private javax.swing.JLabel jlExemptionSalaryEqualsMwzPercentageHelp;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzLimit;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzLimitHelp;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzPercentage;
    private javax.swing.JLabel jlExemptionSalaryGreaterMwzPercentageHelp;
    private javax.swing.JLabel jlLoanType;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNameAbbreviated;
    private javax.swing.JLabel jlNameAbbreviatedHelp;
    private javax.swing.JLabel jlOtherPaymentType;
    private javax.swing.JLabel jlPayBonus;
    private javax.swing.JLabel jlPayPercentage;
    private javax.swing.JLabel jlPayPercentageHelp;
    private javax.swing.JLabel jlSettingsAditional;
    private javax.swing.JLabel jlSettingsBase;
    private javax.swing.JLabel jlUnitsFactor;
    private javax.swing.JLabel jlUnitsFactor1;
    private javax.swing.JLabel jlUnitsMaximumWeek;
    private javax.swing.JLabel jlUnitsMaximumWeekHelp;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolAlternativeTaxCalculation;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysAbsence;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysAdjustment;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysWorked;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolDaysWorkedBased;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolLoan;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPayBonus;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolPayrollTax;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWelfare;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolWithholding;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionMwz;
    private javax.swing.JLabel moDecExemptionMwzHint;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionMwzYear;
    private javax.swing.JLabel moDecExemptionMwzYearHint;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryEqualsMwzLimit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryEqualsMwzPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryGreaterMwzLimit;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecExemptionSalaryGreaterMwzPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecPayPercentage;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUnitsFactor;
    private sa.lib.gui.bean.SBeanFieldDecimal moDecUnitsMaximumWeek;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceClass;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAbsenceType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAccountingConfigurationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyAccountingRecordType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBenefitType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBonus;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningComputationType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningExemptionType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningExemptionTypeYear;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarningType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyLoanType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyOtherPaymentType;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    private sa.lib.gui.bean.SBeanFieldText moTextNameAbbreviated;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 1024, 640);

        moFieldKeyGroup = new SGuiFieldKeyGroup(miClient);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceClass, SModConsts.HRSU_CL_ABS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.addFieldKey(moKeyAbsenceType, SModConsts.HRSU_TP_ABS, SLibConsts.UNDEFINED, null);        

        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 100);
        moTextNameAbbreviated.setTextSettings(SGuiUtils.getLabelName(jlNameAbbreviated), 25);
        moKeyEarningComputationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningComputationType), true);
        moDecUnitsFactor.setDecimalSettings(SGuiUtils.getLabelName(jlUnitsFactor), SGuiConsts.GUI_TYPE_DEC_AMT, true);
        moKeyEarningExemptionType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningExemptionType), true);
        moKeyEarningExemptionTypeYear.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningExemptionType), true);
        moDecExemptionMwz.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionMwz), SGuiConsts.GUI_TYPE_DEC, false);
        moDecExemptionMwzYear.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionMwz), SGuiConsts.GUI_TYPE_DEC, false);
        moDecExemptionSalaryEqualsMwzPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzPercentage), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecExemptionSalaryEqualsMwzLimit.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzLimit), SGuiConsts.GUI_TYPE_DEC, false);
        moDecExemptionSalaryGreaterMwzPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzPercentage), SGuiConsts.GUI_TYPE_DEC_PER_DISC, false);
        moDecExemptionSalaryGreaterMwzLimit.setDecimalSettings(SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzLimit), SGuiConsts.GUI_TYPE_DEC, false);
        moDecPayPercentage.setDecimalSettings(SGuiUtils.getLabelName(jlPayPercentage), SGuiConsts.GUI_TYPE_DEC_PER_DISC, true);
        moDecUnitsMaximumWeek.setDecimalSettings(SGuiUtils.getLabelName(jlUnitsMaximumWeek), SGuiConsts.GUI_TYPE_DEC_AMT_UNIT, false);
        moBoolDaysAdjustment.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysAdjustment.getText()), false);
        moBoolDaysAbsence.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysAbsence.getText()), false);
        moBoolDaysWorked.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysWorked.getText()), false);
        moBoolDaysWorkedBased.setBooleanSettings(SGuiUtils.getLabelName(moBoolDaysWorkedBased.getText()), false);
        moBoolLoan.setBooleanSettings(SGuiUtils.getLabelName(moBoolLoan.getText()), false);
        moBoolWelfare.setBooleanSettings(SGuiUtils.getLabelName(moBoolWelfare.getText()), false);
        moBoolPayBonus.setBooleanSettings(SGuiUtils.getLabelName(moBoolPayBonus.getText()), false);
        moKeyEarningType.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarningType), true);
        moKeyOtherPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlOtherPaymentType), true);
        moKeyLoanType.setKeySettings(miClient, SGuiUtils.getLabelName(jlLoanType), true);
        moKeyBenefitType.setKeySettings(miClient, SGuiUtils.getLabelName(jlBenefitType), true);
        moKeyAccountingConfigurationType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAccountingConfigurationType), true);
        moKeyAccountingRecordType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAccountingRecordType), true);
        moKeyAbsenceClass.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceClass), false);
        moKeyAbsenceType.setKeySettings(miClient, SGuiUtils.getLabelName(jlAbsenceType), false);
        moKeyBonus.setKeySettings(miClient, SGuiUtils.getLabelName(jlPayBonus), false);
        moBoolWithholding.setBooleanSettings(SGuiUtils.getLabelName(moBoolWithholding.getText()), false);
        moBoolPayrollTax.setBooleanSettings(SGuiUtils.getLabelName(moBoolPayrollTax.getText()), false);
        moBoolAlternativeTaxCalculation.setBooleanSettings(SGuiUtils.getLabelName(moBoolAlternativeTaxCalculation.getText()), false);

        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moTextNameAbbreviated);
        moFields.addField(moKeyEarningComputationType);
        moFields.addField(moDecUnitsFactor);
        moFields.addField(moKeyEarningExemptionType);
        moFields.addField(moKeyEarningExemptionTypeYear);
        moFields.addField(moDecExemptionMwz);
        moFields.addField(moDecExemptionMwzYear);
        moFields.addField(moDecExemptionSalaryEqualsMwzPercentage);
        moFields.addField(moDecExemptionSalaryEqualsMwzLimit);
        moFields.addField(moDecExemptionSalaryGreaterMwzPercentage);
        moFields.addField(moDecExemptionSalaryGreaterMwzLimit);
        moFields.addField(moDecPayPercentage);
        moFields.addField(moDecUnitsMaximumWeek);
        moFields.addField(moBoolDaysAdjustment);
        moFields.addField(moBoolDaysAbsence);
        moFields.addField(moBoolDaysWorked);
        moFields.addField(moBoolDaysWorkedBased);
        moFields.addField(moBoolLoan);
        moFields.addField(moBoolWelfare);
        moFields.addField(moBoolPayBonus);
        moFields.addField(moKeyEarningType);
        moFields.addField(moKeyOtherPaymentType);
        moFields.addField(moKeyLoanType);
        moFields.addField(moKeyBenefitType);
        moFields.addField(moKeyAccountingConfigurationType);
        moFields.addField(moKeyAccountingRecordType);
        moFields.addField(moKeyAbsenceClass);
        moFields.addField(moKeyAbsenceType);
        moFields.addField(moKeyBonus);
        moFields.addField(moBoolWithholding);
        moFields.addField(moBoolPayrollTax);
        moFields.addField(moBoolAlternativeTaxCalculation);

        moFields.setFormButton(jbSave);
    }

    private void showEarningComputationTypeHelp() {
        if (moKeyEarningComputationType.getSelectedIndex() <= 0) {
            jlEarningComputationTypeHelp.setText(SGuiConsts.TXT_BTN_SELECT + " " + SGuiUtils.getLabelName(jlEarningComputationType).toLowerCase() + "...");
        }
        else {
            switch (moKeyEarningComputationType.getValue()[0]) {
                case SModSysConsts.HRSS_TP_EAR_COMP_AMT:
                    jlEarningComputationTypeHelp.setText("Percepción = Monto directo.");
                    break;
                case SModSysConsts.HRSS_TP_EAR_COMP_DAYS:
                    jlEarningComputationTypeHelp.setText("Percepción = número de días de salario base.");
                    break;
                case SModSysConsts.HRSS_TP_EAR_COMP_HRS:
                    jlEarningComputationTypeHelp.setText("Percepción = número de horas de hora de salario base.");
                    break;
                case SModSysConsts.HRSS_TP_EAR_COMP_PCT_DAY:
                    jlEarningComputationTypeHelp.setText("Percepción = porcentaje de un salario base.");
                    break;
                case SModSysConsts.HRSS_TP_EAR_COMP_PCT_HR:
                    jlEarningComputationTypeHelp.setText("Percepción = porcentaje de una hora de salario base.");
                    break;
                case SModSysConsts.HRSS_TP_EAR_COMP_PCT_INCOME:
                    jlEarningComputationTypeHelp.setText("Percepción = porcentaje del total de sueldos y salarios.");
                    break;
                default:
                    jlEarningComputationTypeHelp.setText("?");
            }
        }
    }

    private void itemStateChangedEarningComputationType() {
        if (moKeyEarningComputationType.getSelectedIndex() > 0) {
            if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                moDecPayPercentage.setEnabled(false);
                moDecPayPercentage.resetField();
                moDecUnitsMaximumWeek.setEnabled(false);
                moDecUnitsMaximumWeek.resetField();
                moBoolDaysWorked.setSelected(false);
                moBoolDaysWorked.setEnabled(false);
                moBoolDaysWorkedBased.setSelected(false);
                moBoolDaysWorkedBased.setEnabled(false);
            }
            else {
                moDecUnitsMaximumWeek.setEnabled(true);
                
                if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_DAYS) {
                    moBoolDaysWorked.setEnabled(true);
                }
                else if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_PCT_INCOME) {
                    moBoolDaysWorkedBased.setEnabled(true);
                }
                else {
                    moBoolDaysWorked.setSelected(false);
                    moBoolDaysWorked.setEnabled(false);
                    moBoolDaysWorkedBased.setSelected(false);
                    moBoolDaysWorkedBased.setEnabled(false);
                }
                
                if (SLibUtils.belongsTo(moKeyEarningComputationType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_EAR_COMP_PCT_DAY, SModSysConsts.HRSS_TP_EAR_COMP_PCT_HR, SModSysConsts.HRSS_TP_EAR_COMP_PCT_INCOME })) {
                    moDecPayPercentage.setEnabled(true);
                }
                else {
                    moDecPayPercentage.setEnabled(false);
                    moDecPayPercentage.resetField();
                }
            }
        }
        
        showEarningComputationTypeHelp();
    }
    
    private void itemStateChangedEarningExemptionType() {
        if (moKeyEarningExemptionType.getSelectedIndex() > 0) {
            if (moKeyEarningExemptionType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_EXEM_PER) {
                moDecExemptionMwz.setEnabled(true);
                
                moDecExemptionSalaryEqualsMwzPercentage.setEnabled(false);
                moDecExemptionSalaryEqualsMwzLimit.setEnabled(false);
                moDecExemptionSalaryGreaterMwzPercentage.setEnabled(false);
                moDecExemptionSalaryGreaterMwzLimit.setEnabled(false);
                moDecExemptionSalaryEqualsMwzPercentage.setValue(0d);
                moDecExemptionSalaryEqualsMwzLimit.setValue(0d);
                moDecExemptionSalaryGreaterMwzPercentage.setValue(0d);
                moDecExemptionSalaryGreaterMwzLimit.setValue(0d);
            }
            else {
                moDecExemptionMwz.setEnabled(false);
                moDecExemptionMwz.setValue(0d);
                
                moDecExemptionSalaryEqualsMwzPercentage.setEnabled(true);
                moDecExemptionSalaryEqualsMwzLimit.setEnabled(true);
                moDecExemptionSalaryGreaterMwzPercentage.setEnabled(true);
                moDecExemptionSalaryGreaterMwzLimit.setEnabled(true);
            }
        }
    }
    
    private void itemStateChangedEarningExemptionTypeYear() {
        if (moKeyEarningExemptionTypeYear.getSelectedIndex() > 0) {
            if (moKeyEarningExemptionTypeYear.getValue()[0] != SModSysConsts.HRSS_TP_EAR_EXEM_PER) {
                moDecExemptionMwzYear.setEnabled(true);
            }
            else {
                moDecExemptionMwzYear.setEnabled(false);
                moDecExemptionMwzYear.setValue(0d);
            }
        }
    }
    
    private void itemStateChangedEarningType(final boolean resetDefaultOtherPaymentType) {
        moKeyOtherPaymentType.setEnabled(false);
        
        if (moKeyEarningType.getSelectedIndex() <= 0) {
            moKeyOtherPaymentType.setValue(new int[] { SModSysConsts.HRSS_TP_OTH_PAY_NA });
        }
        else {
            switch (moKeyEarningType.getValue()[0]) {
                case SModSysConsts.HRSS_TP_EAR_TAX_SUB:
                    moKeyOtherPaymentType.setValue(new int[] { SModSysConsts.HRSS_TP_OTH_PAY_TAX_SUB }); // the very single available option
                    break;
                case SModSysConsts.HRSS_TP_EAR_OTH:
                    moKeyOtherPaymentType.setEnabled(true);
                    if (resetDefaultOtherPaymentType) {
                        moKeyOtherPaymentType.setValue(new int[] { SModSysConsts.HRSS_TP_OTH_PAY_OTH }); // the default option
                    }
                    break;
                default:
                    moKeyOtherPaymentType.setValue(new int[] { SModSysConsts.HRSS_TP_OTH_PAY_NA });
            }
        }
    }

    private void itemStateChangedLoan() {
        boolean enable = moBoolLoan.getValue();
        moKeyLoanType.setEnabled(enable);
        
        if (!enable) {
            moKeyLoanType.setValue(new int[] { SModSysConsts.HRSS_TP_LOAN_NA });
        }
    }
    
    private void itemStateChangedPayBonus() {
        boolean enable = moBoolPayBonus.getValue();
        moKeyBonus.setEnabled(! enable);
        
        if (! enable) {
            moKeyBonus.setValue(new int[] { 0 });
        }
        else {
            moKeyBonus.setValue(new int[] { SPayrollBonusUtils.BONUS_NA });
        }
    }

    @Override
    public void addAllListeners() {
        moBoolLoan.addItemListener(this);
        moBoolPayBonus.addItemListener(this);
        moKeyEarningComputationType.addItemListener(this);
        moKeyEarningExemptionType.addItemListener(this);
        moKeyEarningExemptionTypeYear.addItemListener(this);
        moKeyEarningType.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        moBoolLoan.removeItemListener(this);
        moBoolPayBonus.removeItemListener(this);
        moKeyEarningComputationType.removeItemListener(this);
        moKeyEarningExemptionType.removeItemListener(this);
        moKeyEarningExemptionTypeYear.removeItemListener(this);
        moKeyEarningType.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEarningComputationType, SModConsts.HRSS_TP_EAR_COMP, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarningExemptionType, SModConsts.HRSS_TP_EAR_EXEM, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyEarningExemptionTypeYear, SModConsts.HRSS_TP_EAR_EXEM, SLibConsts.UNDEFINED, new SGuiParams(new int[] { SModSysConsts.HRSS_TP_EAR_EXEM_MWZ_GBL }));
        miClient.getSession().populateCatalogue(moKeyEarningType, SModConsts.HRSS_TP_EAR, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyOtherPaymentType, SModConsts.HRSS_TP_OTH_PAY, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyLoanType, SModConsts.HRSS_TP_LOAN, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBenefitType, SModConsts.HRSS_TP_BEN, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAccountingConfigurationType, SModConsts.HRSS_TP_ACC, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyAccountingRecordType, SModConsts.HRSS_TP_ACC, SLibConsts.UNDEFINED, null);
        miClient.getSession().populateCatalogue(moKeyBonus, SModConsts.HRSS_BONUS, SLibConsts.UNDEFINED, null);
        moFieldKeyGroup.populateCatalogues();
    }

    @Override
    @SuppressWarnings("deprecation")
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbEarning) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            boolean isBeingCopied = moRegistry.getPkEarningId() != 0;
            
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            
            if (isBeingCopied) {
                moRegistry.setOldAccountingConfigurationTypeId(0); // to trigger creation of proper accounting settings on save
            }
            else {
                moRegistry.setFkLoanTypeId(SModSysConsts.HRSS_TP_LOAN_NA);
                moRegistry.setFkBenefitTypeId(SModSysConsts.HRSS_TP_BEN_NA);
                
                moRegistry.setUnitsFactor(1);
            }
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextCode.setValue(moRegistry.getCode());
        moTextName.setValue(moRegistry.getName());
        moTextNameAbbreviated.setValue(moRegistry.getNameAbbreviated());
        moDecExemptionMwz.setValue(moRegistry.getExemptionMwz());
        moDecExemptionMwzYear.setValue(moRegistry.getExemptionMwzYear());
        moDecExemptionSalaryEqualsMwzPercentage.setValue(moRegistry.getExemptionSalaryEqualsMwzPercentage());
        moDecExemptionSalaryEqualsMwzLimit.setValue(moRegistry.getExemptionSalaryEqualsMwzLimit());
        moDecExemptionSalaryGreaterMwzPercentage.setValue(moRegistry.getExemptionSalaryGreaterMwzPercentage());
        moDecExemptionSalaryGreaterMwzLimit.setValue(moRegistry.getExemptionSalaryGreaterMwzLimit());
        moDecPayPercentage.setValue(moRegistry.getPayPercentage());
        moDecUnitsMaximumWeek.setValue(moRegistry.getUnitsMaximumWeek());
        moDecUnitsFactor.setValue(moRegistry.getUnitsFactor());
        moBoolWelfare.setValue(moRegistry.isWelfare());
        moBoolPayBonus.setValue(moRegistry.isPayBonus());
        moBoolDaysAdjustment.setValue(moRegistry.isDaysAdjustment());
        moBoolDaysAbsence.setValue(moRegistry.isDaysAbsence());
        moBoolDaysWorked.setValue(moRegistry.isDaysWorked());
        moBoolDaysWorkedBased.setValue(moRegistry.isDaysWorkedBasedOn());
        moBoolWithholding.setValue(moRegistry.isWithholding());
        moBoolPayrollTax.setValue(moRegistry.isPayrollTax());
        moBoolAlternativeTaxCalculation.setValue(moRegistry.isAlternativeTaxCalculation());
        moKeyEarningType.setValue(new int[] { moRegistry.getFkEarningTypeId() });
        moKeyOtherPaymentType.setValue(new int[] { moRegistry.getFkOtherPaymentTypeId() });
        moKeyEarningComputationType.setValue(new int[] { moRegistry.getFkEarningComputationTypeId() });
        moKeyEarningExemptionType.setValue(new int[] { moRegistry.getFkEarningExemptionTypeId() });
        moKeyEarningExemptionTypeYear.setValue(new int[] { moRegistry.getFkEarningExemptionTypeYearId() });
        moBoolLoan.setValue(moRegistry.isLoan());
        moKeyLoanType.setValue(new int[] { moRegistry.getFkLoanTypeId() });
        moKeyBenefitType.setValue(new int[] { moRegistry.getFkBenefitTypeId() });
        moKeyAccountingConfigurationType.setValue(new int[] { moRegistry.getFkAccountingConfigurationTypeId() });
        moKeyAccountingRecordType.setValue(new int[] { moRegistry.getFkAccountingRecordTypeId() });
        moKeyAbsenceClass.setValue(new int[] { moRegistry.getFkAbsenceClassId_n() });
        moKeyAbsenceType.setValue(new int[] { moRegistry.getFkAbsenceClassId_n(), moRegistry.getFkAbsenceTypeId_n() });
        moKeyBonus.setValue(new int[] { moRegistry.getFkBonusId_n() });

        setFormEditable(true);
        
        itemStateChangedEarningComputationType();
        itemStateChangedEarningExemptionType();
        itemStateChangedEarningExemptionTypeYear();
        itemStateChangedEarningType(false);
        itemStateChangedLoan();
        
        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            
        }
        
        addAllListeners();
    }

    @Override
    @SuppressWarnings("deprecation")
    public SDbRegistry getRegistry() throws Exception {
        SDbEarning registry = moRegistry.clone();

        if (registry.isRegistryNew()) {}

        registry.setCode(moTextCode.getValue());
        registry.setName(moTextName.getValue());
        registry.setNameAbbreviated(moTextNameAbbreviated.getValue());
        registry.setExemptionMwz(moDecExemptionMwz.getValue());
        registry.setExemptionMwzYear(moDecExemptionMwzYear.getValue());
        registry.setExemptionSalaryEqualsMwzPercentage(moDecExemptionSalaryEqualsMwzPercentage.getValue());
        registry.setExemptionSalaryEqualsMwzLimit(moDecExemptionSalaryEqualsMwzLimit.getValue());
        registry.setExemptionSalaryGreaterMwzPercentage(moDecExemptionSalaryGreaterMwzPercentage.getValue());
        registry.setExemptionSalaryGreaterMwzLimit(moDecExemptionSalaryGreaterMwzLimit.getValue());
        registry.setPayPercentage(moDecPayPercentage.getValue());
        registry.setUnitsMaximumWeek(moDecUnitsMaximumWeek.getValue());
        registry.setUnitsFactor(moDecUnitsFactor.getValue());
        registry.setWelfare(moBoolWelfare.getValue());
        registry.setPayBonus(moBoolPayBonus.getValue());
        registry.setDaysAdjustment(moBoolDaysAdjustment.getValue());
        registry.setDaysAbsence(moBoolDaysAbsence.getValue());
        registry.setDaysWorked(moBoolDaysWorked.getValue());
        registry.setDaysWorkedBasedOn(moBoolDaysWorkedBased.getValue());
        registry.setWithholding(moBoolWithholding.getValue());
        registry.setPayrollTax(moBoolPayrollTax.getValue());
        registry.setAlternativeTaxCalculation(moBoolAlternativeTaxCalculation.getValue());
        registry.setFkEarningTypeId(moKeyEarningType.getValue()[0]);
        registry.setFkEarningComputationTypeId(moKeyEarningComputationType.getValue()[0]);
        registry.setFkEarningExemptionTypeId(moKeyEarningExemptionType.getValue()[0]);
        registry.setFkEarningExemptionTypeYearId(moKeyEarningExemptionTypeYear.getValue()[0]);
        registry.setFkOtherPaymentTypeId(moKeyOtherPaymentType.getValue()[0]);
        registry.setFkLoanTypeId(moKeyLoanType.getValue()[0]);
        registry.setFkBenefitTypeId(moKeyBenefitType.getValue()[0]);
        registry.setFkAccountingConfigurationTypeId(moKeyAccountingConfigurationType.getValue()[0]);
        registry.setFkAccountingRecordTypeId(moKeyAccountingRecordType.getValue()[0]);
        registry.setFkAbsenceClassId_n(moKeyAbsenceClass.getSelectedIndex() == 0 || moKeyAbsenceType.getSelectedIndex() == 0 ? SLibConsts.UNDEFINED : moKeyAbsenceClass.getValue()[0]);
        registry.setFkAbsenceTypeId_n(moKeyAbsenceClass.getSelectedIndex() == 0 || moKeyAbsenceType.getSelectedIndex() == 0 ? SLibConsts.UNDEFINED : moKeyAbsenceType.getValue()[1]);
        registry.setFkBonusId_n(moKeyBonus.getSelectedIndex() == 0 ? SLibConsts.UNDEFINED : moKeyBonus.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moKeyEarningType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_OTH && moKeyOtherPaymentType.getValue()[0] == SModSysConsts.HRSS_TP_OTH_PAY_NA) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlOtherPaymentType) + "'.");
                validation.setComponent(moKeyOtherPaymentType);
            }
            else if (moBoolLoan.getValue() && moKeyLoanType.getValue()[0] <= SModSysConsts.HRSS_TP_LOAN_NA) { // should not be less, just in case
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlLoanType) + "'.");
                validation.setComponent(moKeyLoanType);
            }
            else if (moKeyLoanType.getValue()[0] > SModSysConsts.HRSS_TP_LOAN_NA && moKeyEarningComputationType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_COMP_AMT) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlEarningComputationType.getText()) + "'.");
                validation.setComponent(moKeyEarningComputationType);
            }
            else {
                if (moBoolWelfare.getValue()) {
                    if (moDecExemptionSalaryEqualsMwzPercentage.getValue() != 1) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlExemptionSalaryEqualsMwzPercentage.getText()) + "'.");
                        validation.setComponent(moDecExemptionSalaryEqualsMwzPercentage);
                    }
                    else if (moDecExemptionSalaryGreaterMwzPercentage.getValue() != 1) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlExemptionSalaryGreaterMwzPercentage.getText()) + "'.");
                        validation.setComponent(moDecExemptionSalaryGreaterMwzPercentage);
                    }
                }
                
                if (moBoolPayBonus.getValue()) {
                    
                }
                
                if (validation.isValid()) {
                    if (moKeyEarningExemptionType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_EXEM_MWZ_GBL && moKeyEarningExemptionTypeYear.getValue()[0] == SModSysConsts.HRSS_TP_EAR_EXEM_MWZ_GBL) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlEarningExemptionType.getText()) + "' (" + SGuiUtils.getLabelName(jlSettingsAditional.getText()) + ").");
                        validation.setComponent(moKeyEarningExemptionTypeYear);
                    }
                    else if (moKeyEarningComputationType.getValue()[0] != SModSysConsts.HRSS_TP_EAR_COMP_DAYS && moBoolDaysAdjustment.getValue()) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(moBoolDaysAdjustment.getText()) + "'.");
                        validation.setComponent(moBoolDaysAdjustment);
                    }
                    else if (moKeyEarningComputationType.getValue()[0] == SModSysConsts.HRSS_TP_EAR_COMP_PCT_INCOME && !moBoolDaysWorkedBased.getValue()) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(moBoolDaysWorkedBased.getText()) + "'.");
                        validation.setComponent(moBoolDaysWorkedBased);
                    }
                    else if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_GBL &&
                            !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_GBL, SModSysConsts.HRSS_TP_ACC_DEP, SModSysConsts.HRSS_TP_ACC_EMP })) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                        validation.setComponent(moKeyAccountingRecordType);
                    }
                    else if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_DEP &&
                            !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_DEP, SModSysConsts.HRSS_TP_ACC_EMP })) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                        validation.setComponent(moKeyAccountingRecordType);
                    }
                    else if (moKeyAccountingConfigurationType.getValue()[0] == SModSysConsts.HRSS_TP_ACC_EMP &&
                            !SLibUtils.belongsTo(moKeyAccountingRecordType.getValue()[0], new int[] { SModSysConsts.HRSS_TP_ACC_EMP })) {
                        validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + SGuiUtils.getLabelName(jlAccountingRecordType.getText()) + "'.");
                        validation.setComponent(moKeyAccountingRecordType);
                    }
                }
            }
        }
        
        return validation;
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox && e.getStateChange() == ItemEvent.SELECTED) {
            JComboBox comboBox = (JComboBox)  e.getSource();

            if (comboBox == moKeyEarningComputationType) {
                itemStateChangedEarningComputationType();
            }
            else if (comboBox == moKeyEarningExemptionType) {
                itemStateChangedEarningExemptionType();
            }
            else if (comboBox == moKeyEarningExemptionTypeYear) {
                itemStateChangedEarningExemptionTypeYear();
            }
            else if (comboBox == moKeyEarningType) {
                itemStateChangedEarningType(true);
            }
        }
        else if (e.getSource() instanceof JCheckBox) {
            JCheckBox checkBox = (JCheckBox)  e.getSource();

            if (checkBox == moBoolLoan) {
                itemStateChangedLoan();
            }
            else if (checkBox == moBoolPayBonus) {
                itemStateChangedPayBonus();
            }
        }
    }
}
