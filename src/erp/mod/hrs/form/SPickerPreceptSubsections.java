/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SRowPreceptSubsection;
import erp.mod.hrs.utils.SDocUtils;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 * Este diálogo seleccionador permite elegir una o más subsecciones de preceptos.
 * Al mostrar subsecciones de preceptos prevamiente elegidas mediante el método setValue(),
 * se actualizan las subsecciones de preceptos activas, y sólo se desplegarán aquellas elegidas que sigan estando activas.
 * @author Sergio Flores
 */
public class SPickerPreceptSubsections extends SBeanFormDialog implements ActionListener {
    
    public static final int VAL_PREC_SUBSEC_KEYS = 1;
    
    private static final int ROWS_AVAILABLE = 1;
    private static final int ROWS_SELECTED = 2;
    
    private SGridPaneForm moRowsAvailable;
    private SGridPaneForm moRowsSelected;
    private ArrayList<SRowPreceptSubsection> maPreceptSubsectionRowsAvailable;
    private ArrayList<int[]> maPreceptSubsectionKeysSelected;

    /**
     * Creates new form SPickerPreceptSubsections
     * @param client
     */
    public SPickerPreceptSubsections(SGuiClient client) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, 0, 0, "Seleccionar opciones");
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jPanelRows = new javax.swing.JPanel();
        jPanelRowsAvailable = new javax.swing.JPanel();
        jPanelRowsControls = new javax.swing.JPanel();
        jPanelRowsControls1 = new javax.swing.JPanel();
        jLabel = new javax.swing.JLabel();
        jbRowAdd = new javax.swing.JButton();
        jbRowRemove = new javax.swing.JButton();
        jbRowMoveUp = new javax.swing.JButton();
        jbRowMoveDown = new javax.swing.JButton();
        jPanelRowsSelected = new javax.swing.JPanel();
        jPanelOptions = new javax.swing.JPanel();
        jspPreceptSubsections = new javax.swing.JScrollPane();
        jtaPreceptSubsections = new javax.swing.JTextArea();

        jPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar opciones:"));
        jPanel.setLayout(new java.awt.BorderLayout(0, 5));

        jPanelRows.setLayout(new java.awt.BorderLayout(5, 0));

        jPanelRowsAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones disponibles:"));
        jPanelRowsAvailable.setPreferredSize(new java.awt.Dimension(400, 300));
        jPanelRowsAvailable.setLayout(new java.awt.BorderLayout());
        jPanelRows.add(jPanelRowsAvailable, java.awt.BorderLayout.WEST);

        jPanelRowsControls.setLayout(new java.awt.BorderLayout());

        jPanelRowsControls1.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanelRowsControls1.add(jLabel);

        jbRowAdd.setText(">");
        jbRowAdd.setToolTipText("Agregar");
        jbRowAdd.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelRowsControls1.add(jbRowAdd);

        jbRowRemove.setText("<");
        jbRowRemove.setToolTipText("Remover");
        jbRowRemove.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelRowsControls1.add(jbRowRemove);

        jbRowMoveUp.setText("↑");
        jbRowMoveUp.setToolTipText("Mover arriba");
        jbRowMoveUp.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelRowsControls1.add(jbRowMoveUp);

        jbRowMoveDown.setText("↓");
        jbRowMoveDown.setToolTipText("Mover abajo");
        jbRowMoveDown.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelRowsControls1.add(jbRowMoveDown);

        jPanelRowsControls.add(jPanelRowsControls1, java.awt.BorderLayout.NORTH);

        jPanelRows.add(jPanelRowsControls, java.awt.BorderLayout.CENTER);

        jPanelRowsSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones seleccionadas:"));
        jPanelRowsSelected.setPreferredSize(new java.awt.Dimension(400, 300));
        jPanelRowsSelected.setLayout(new java.awt.BorderLayout());
        jPanelRows.add(jPanelRowsSelected, java.awt.BorderLayout.EAST);

        jPanel.add(jPanelRows, java.awt.BorderLayout.NORTH);

        jPanelOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones seleccionadas:"));
        jPanelOptions.setLayout(new java.awt.BorderLayout());

        jspPreceptSubsections.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspPreceptSubsections.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtaPreceptSubsections.setEditable(false);
        jtaPreceptSubsections.setBackground(java.awt.SystemColor.control);
        jtaPreceptSubsections.setColumns(20);
        jtaPreceptSubsections.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtaPreceptSubsections.setLineWrap(true);
        jtaPreceptSubsections.setRows(5);
        jtaPreceptSubsections.setText("I. Engañarlo el trabajador o en su caso, el sindicato que lo hubiese propuesto o recomendado con certificados falsos o referencias en los que se atribuyan al trabajador capacidad, aptitudes o facultades de que carezca. Esta causa de rescisión dejará de tener efecto después de treinta días de prestar sus servicios el trabajador;\nII. Incurrir el trabajador, durante sus labores, en faltas de probidad u honradez, en actos de violencia, amagos, injurias o malos tratamientos en contra del patrón, sus familiares o del personal directivo o administrativo de la empresa o establecimiento, o en contra de clientes y proveedores del patrón, salvo que medie provocación o que obre en defensa propia;\nIII. Cometer el trabajador contra alguno de sus compañeros, cualquiera de los actos enumerados en la fracción anterior, si como consecuencia de ellos se altera la disciplina del lugar en que se desempeña el trabajo;");
        jtaPreceptSubsections.setWrapStyleWord(true);
        jtaPreceptSubsections.setFocusable(false);
        jspPreceptSubsections.setViewportView(jtaPreceptSubsections);

        jPanelOptions.add(jspPreceptSubsections, java.awt.BorderLayout.CENTER);

        jPanel.add(jPanelOptions, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanelOptions;
    private javax.swing.JPanel jPanelRows;
    private javax.swing.JPanel jPanelRowsAvailable;
    private javax.swing.JPanel jPanelRowsControls;
    private javax.swing.JPanel jPanelRowsControls1;
    private javax.swing.JPanel jPanelRowsSelected;
    private javax.swing.JButton jbRowAdd;
    private javax.swing.JButton jbRowMoveDown;
    private javax.swing.JButton jbRowMoveUp;
    private javax.swing.JButton jbRowRemove;
    private javax.swing.JScrollPane jspPreceptSubsections;
    private javax.swing.JTextArea jtaPreceptSubsections;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 880, 550);

        /*
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName), 100, 0);
        
        moFields.addField(moTextName);
        
        moFields.setFormButton(jbSave);
        */
        
        moRowsAvailable = new SGridPaneForm(miClient, SModConsts.HRS_PREC_SUBSEC, ROWS_AVAILABLE, "Opciones disponibles") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Precepto", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Sección", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Subsección código", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Subsección nombre", 250));
                
                return columns;
            }
            
            @Override
            public void actionMouseClicked() {
                actionPerformedRowAdd();
            }
        };
        
        jPanelRowsAvailable.add(moRowsAvailable, BorderLayout.CENTER);
        
        moRowsSelected = new SGridPaneForm(miClient, SModConsts.HRS_PREC_SUBSEC, ROWS_SELECTED, "Opciones seleccionadas") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Precepto", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Sección", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Subsección código", 40));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_CAT, "Subsección nombre", 250));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_INT_RAW, "Posición", 40));
                
                return columns;
            }
            
            @Override
            public void actionMouseClicked() {
                actionPerformedRowRemove();
            }
        };
        
        jPanelRowsSelected.add(moRowsSelected, BorderLayout.CENTER);
        
        //mvFormGrids.add(moRowsAvailable);
        //mvFormGrids.add(moRowsSelected);
    }
    
    private void updatePreceptSubsectionRowsSelected() {
        String optionsSelected = "";
        maPreceptSubsectionKeysSelected.clear();
        
        for (SGridRow gridRow : moRowsSelected.getModel().getGridRows()) {
            SRowPreceptSubsection row = (SRowPreceptSubsection) gridRow;
            maPreceptSubsectionKeysSelected.add(row.getPreceptSubsectionKey());
            optionsSelected += (optionsSelected.isEmpty() ? "" : "\n") + row.getPreceptSubsectionName();
        }
        
        jtaPreceptSubsections.setText(optionsSelected);
        jtaPreceptSubsections.setCaretPosition(0);
    }
    
    private void renderPreceptSubsectionKeys(final ArrayList<int[]> preceptSubsecionKeys) {
        try {
            maPreceptSubsectionRowsAvailable = SDocUtils.getPreceptSubsectionRows(miClient.getSession());
            maPreceptSubsectionKeysSelected = new ArrayList<>();
            
            ArrayList<SRowPreceptSubsection> preceptSubsectionRowsSelected = new ArrayList<>();

            for (int[] preceptSubsectionKey : preceptSubsecionKeys) {
                for (int index = 0; index < maPreceptSubsectionRowsAvailable.size(); index++) {
                    if (SLibUtils.compareKeys(preceptSubsectionKey, maPreceptSubsectionRowsAvailable.get(index).getPreceptSubsectionKey())) {
                        preceptSubsectionRowsSelected.add(maPreceptSubsectionRowsAvailable.remove(index));
                        break;
                    }
                }
            }

            // render rows available:
            
            moRowsAvailable.populateGrid(new Vector<>(maPreceptSubsectionRowsAvailable));
            moRowsAvailable.getTable().setRowSorter(null); // prevents from sorting rows
            
            // render rows selected:
            
            moRowsSelected.populateGrid(new Vector<>(preceptSubsectionRowsSelected));
            moRowsSelected.getTable().setRowSorter(null); // prevents from sorting rows
            
            updatePreceptSubsectionRowsSelected();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void actionPerformedRowAdd() {
        int indexToAdd = moRowsAvailable.getTable().getSelectedRow();
        
        if (indexToAdd == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
            moRowsAvailable.getTable().requestFocusInWindow();
        }
        else {
            // take row from available ones:
            
            SRowPreceptSubsection rowBeingAdded = (SRowPreceptSubsection) moRowsAvailable.getModel().getGridRows().remove(moRowsAvailable.getTable().convertRowIndexToModel(indexToAdd));
            moRowsAvailable.renderGridRows();
            moRowsAvailable.setSelectedGridRow(indexToAdd < moRowsAvailable.getTable().getRowCount() ? indexToAdd : indexToAdd - 1);
            
            // add row to selected ones:
            
            moRowsSelected.addGridRow(rowBeingAdded);
            moRowsSelected.renderGridRows();
            moRowsSelected.setSelectedGridRow(moRowsSelected.getTable().getRowCount() - 1);
            
            updatePreceptSubsectionRowsSelected();
        }
    }
    
    private void actionPerformedRowRemove() {
        int indexToRemove = moRowsSelected.getTable().getSelectedRow();
        
        if (indexToRemove == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
            moRowsSelected.getTable().requestFocusInWindow();
        }
        else {
            // take row from selected ones:
            
            SRowPreceptSubsection rowBeingRemoved = (SRowPreceptSubsection) moRowsSelected.getModel().getGridRows().remove(moRowsSelected.getTable().convertRowIndexToModel(indexToRemove));
            moRowsSelected.renderGridRows();
            moRowsSelected.setSelectedGridRow(indexToRemove < moRowsSelected.getTable().getRowCount() ? indexToRemove : indexToRemove - 1);
            
            updatePreceptSubsectionRowsSelected();
            
            // insert row into available ones:
            
            int indexToInsert;
            
            for (indexToInsert = 0; indexToInsert < moRowsAvailable.getTable().getRowCount(); indexToInsert++) {
                SRowPreceptSubsection rowAvailable = (SRowPreceptSubsection) moRowsAvailable.getModel().getGridRows().get(moRowsAvailable.getTable().convertRowIndexToModel(indexToInsert));
                
                if (rowBeingRemoved.getPositionGlobal() < rowAvailable.getPositionGlobal()) {
                    break;
                }
            }
            
            moRowsAvailable.getModel().getGridRows().insertElementAt(rowBeingRemoved, moRowsAvailable.getTable().convertRowIndexToModel(indexToInsert));
            moRowsAvailable.renderGridRows();
            moRowsAvailable.setSelectedGridRow(indexToInsert);
        }
    }
    
    private void actionPerformedRowMoveUp() {
        int indexToMove = moRowsSelected.getTable().getSelectedRow();
        
        if (indexToMove == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
            moRowsSelected.getTable().requestFocusInWindow();
        }
        else if (indexToMove > 0) {
            // move up row:
            
            SRowPreceptSubsection rowBeingRemoved = (SRowPreceptSubsection) moRowsSelected.getModel().getGridRows().remove(moRowsSelected.getTable().convertRowIndexToModel(indexToMove));
            moRowsSelected.getModel().getGridRows().insertElementAt(rowBeingRemoved, indexToMove - 1);
            moRowsSelected.renderGridRows();
            moRowsSelected.setSelectedGridRow(indexToMove - 1);
            
            updatePreceptSubsectionRowsSelected();
        }
    }
    
    private void actionPerformedRowMoveDown() {
        int indexToMove = moRowsSelected.getTable().getSelectedRow();
        
        if (indexToMove == -1) {
            miClient.showMsgBoxWarning(SGridConsts.MSG_SELECT_ROW);
            moRowsSelected.getTable().requestFocusInWindow();
        }
        else if (indexToMove + 1 < moRowsSelected.getTable().getRowCount()) {
            // move down row:
            
            SRowPreceptSubsection rowBeingRemoved = (SRowPreceptSubsection) moRowsSelected.getModel().getGridRows().remove(moRowsSelected.getTable().convertRowIndexToModel(indexToMove));
            moRowsSelected.getModel().getGridRows().insertElementAt(rowBeingRemoved, indexToMove + 1);
            moRowsSelected.renderGridRows();
            moRowsSelected.setSelectedGridRow(indexToMove + 1);
            
            updatePreceptSubsectionRowsSelected();
        }
    }
    
    @Override
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        
        //...
        
        addAllListeners();
    }
    
    @Override
    public void addAllListeners() {
        jbRowAdd.addActionListener(this);
        jbRowRemove.addActionListener(this);
        jbRowMoveUp.addActionListener(this);
        jbRowMoveDown.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbRowAdd.removeActionListener(this);
        jbRowRemove.removeActionListener(this);
        jbRowMoveUp.removeActionListener(this);
        jbRowMoveDown.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (moRowsSelected.getTable().getRowCount() == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_UNDEF_OPTION);
                validation.setComponent(moRowsAvailable.getTable());
            }
        }
        
        return validation;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setValue(final int type, final Object value) {
        switch (type) {
            case VAL_PREC_SUBSEC_KEYS:
                renderPreceptSubsectionKeys((ArrayList<int[]>) value);
                break;
            default:
                // nothing
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case VAL_PREC_SUBSEC_KEYS:
                value = maPreceptSubsectionKeysSelected; // array allways up to date
                break;
            default:
                // nothing
        }
        
        return value;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbRowAdd) {
                actionPerformedRowAdd();
            }
            else if (button == jbRowRemove) {
                actionPerformedRowRemove();
            }
            else if (button == jbRowMoveUp) {
                actionPerformedRowMoveUp();
            }
            else if (button == jbRowMoveDown) {
                actionPerformedRowMoveDown();
            }
        }
    }
}
