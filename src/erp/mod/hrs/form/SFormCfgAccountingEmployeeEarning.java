/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbCfgAccountingEmployeeEarning;
import erp.mod.hrs.db.SDbEarning;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanForm;

/**
 * Configuración de la contabilización de las percepciones que lo requieran.
 * Aplica para la modalidad de configuración de contabilización 'dinámica'.
 * @author Sergio Flores
 */
public class SFormCfgAccountingEmployeeEarning extends SBeanForm implements ActionListener, ItemListener {

    private SDbCfgAccountingEmployeeEarning moRegistry;
    private SDbEarning moEarning;

    /**
     * Creates new form SFormCfgAccountingEarning.
     * @param client GUI client.
     * @param title Form title.
     */
    public SFormCfgAccountingEmployeeEarning(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_CFG_ACC_EAR, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickEmployee = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlEarning = new javax.swing.JLabel();
        moKeyEarning = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel8 = new javax.swing.JPanel();
        jlAccountingRecordType = new javax.swing.JLabel();
        jtfAccountingRecordType = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jlAccountingRecordTypeHelp = new javax.swing.JLabel();
        jlAccountingRecordTypeHelpText = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jlBizPartner = new javax.swing.JLabel();
        moKeyBizPartner = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickBizPartner = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel12.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployee.setForeground(java.awt.Color.blue);
        jlEmployee.setText("Empleado:*");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel9.add(moKeyEmployee);

        jbPickEmployee.setText("...");
        jbPickEmployee.setToolTipText("Seleccionar asociado de negocios");
        jbPickEmployee.setFocusable(false);
        jbPickEmployee.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbPickEmployee);

        jPanel12.add(jPanel9);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEarning.setForeground(java.awt.Color.blue);
        jlEarning.setText("Percepción:*");
        jlEarning.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlEarning);

        moKeyEarning.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel6.add(moKeyEarning);

        jPanel12.add(jPanel6);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingRecordType.setText("Registro contable:");
        jlAccountingRecordType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel8.add(jlAccountingRecordType);

        jtfAccountingRecordType.setEditable(false);
        jtfAccountingRecordType.setFocusable(false);
        jtfAccountingRecordType.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel8.add(jtfAccountingRecordType);

        jPanel12.add(jPanel8);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAccountingRecordTypeHelp.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlAccountingRecordTypeHelp);

        jlAccountingRecordTypeHelpText.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(jlAccountingRecordTypeHelpText);

        jPanel12.add(jPanel3);

        jPanel2.add(jPanel12, java.awt.BorderLayout.NORTH);

        jPanel14.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBizPartner.setText("Asociado negocios:");
        jlBizPartner.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlBizPartner);

        moKeyBizPartner.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(moKeyBizPartner);

        jbPickBizPartner.setText("...");
        jbPickBizPartner.setToolTipText("Seleccionar asociado de negocios");
        jbPickBizPartner.setFocusable(false);
        jbPickBizPartner.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbPickBizPartner);

        jPanel14.add(jPanel5);

        jPanel2.add(jPanel14, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbPickBizPartner;
    private javax.swing.JButton jbPickEmployee;
    private javax.swing.JLabel jlAccountingRecordType;
    private javax.swing.JLabel jlAccountingRecordTypeHelp;
    private javax.swing.JLabel jlAccountingRecordTypeHelpText;
    private javax.swing.JLabel jlBizPartner;
    private javax.swing.JLabel jlEarning;
    private javax.swing.JLabel jlEmployee;
    private javax.swing.JTextField jtfAccountingRecordType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyBizPartner;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEarning;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee), false);
        moKeyEarning.setKeySettings(miClient, SGuiUtils.getLabelName(jlEarning), true);
        moKeyBizPartner.setKeySettings(miClient, SGuiUtils.getLabelName(jlBizPartner), false);
        
        moFields.addField(moKeyEmployee);
        moFields.addField(moKeyEarning);
        moFields.addField(moKeyBizPartner);

        moFields.setFormButton(jbSave);
    }
    
    private void actionPickEmployee() {
        SGuiOptionPicker picker = miClient.getSession().getModule(SModConsts.MOD_BPS_N).getOptionPicker(SModConsts.HRSU_EMP, 0, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            int[] key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != 0) {
                    moKeyBizPartner.setValue(new int[] { key[0] });
                    moKeyBizPartner.requestFocusInWindow();
                }
            }
        }
    }
    
    private void actionPickBizPartner() {
        SGuiOptionPicker picker = miClient.getSession().getModule(SModConsts.MOD_BPS_N).getOptionPicker(SModConsts.BPSU_BP, 0, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            int[] key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != 0) {
                    moKeyBizPartner.setValue(new int[] { key[0] });
                    moKeyBizPartner.requestFocusInWindow();
                }
            }
        }
    }
    
    private void updateAccountComplements() {
        boolean enable = moEarning != null && moEarning.getFkAccountingRecordTypeId() == SModSysConsts.HRSS_TP_ACC_GBL;
        
        moKeyBizPartner.setEnabled(enable);
        jbPickBizPartner.setEnabled(enable);
    }
    
    private void itemStateChangedEarning() {
        moEarning = null;
        
        jtfAccountingRecordType.setText("");
        jlAccountingRecordTypeHelpText.setText("");
        moKeyBizPartner.setEnabled(false);
        moKeyBizPartner.resetField();
        jbPickBizPartner.setEnabled(false);
        
        if (moKeyEarning.getSelectedIndex() > 0) {
            moEarning = (SDbEarning) miClient.getSession().readRegistry(SModConsts.HRS_EAR, moKeyEarning.getValue());
        }
        
        if (moEarning != null) {
            jtfAccountingRecordType.setText((String) miClient.getSession().readField(SModConsts.HRSS_TP_ACC, new int[] { moEarning.getFkAccountingRecordTypeId() }, SDbRegistry.FIELD_NAME));
            jtfAccountingRecordType.setCaretPosition(0);
            
            if (moEarning.getFkAccountingRecordTypeId() == SModSysConsts.HRSS_TP_ACC_EMP) {
                jlAccountingRecordTypeHelpText.setText("(Seleccionar un valor para el campo '" + moKeyBizPartner.getFieldName() + "'.)");
            }
            else {
                jlAccountingRecordTypeHelpText.setText("(¡El registro contable debe ser '" + miClient.getSession().readField(SModConsts.HRSS_TP_ACC, new int[] { SModSysConsts.HRSS_TP_ACC_EMP }, SDbRegistry.FIELD_NAME) + "' para completar la configuración.!)");
            }
            
            updateAccountComplements();
        }
    }
    
    @Override
    public void addAllListeners() {
        jbPickEmployee.addActionListener(this);
        jbPickBizPartner.addActionListener(this);
        moKeyEarning.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickEmployee.removeActionListener(this);
        jbPickBizPartner.removeActionListener(this);
        moKeyEarning.removeItemListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyEmployee, SModConsts.HRSU_EMP, 0, null);
        miClient.getSession().populateCatalogue(moKeyEarning, SModConsts.HRS_EAR, 0, null);
        miClient.getSession().populateCatalogue(moKeyBizPartner, SModConsts.BPSU_BP, 0, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbCfgAccountingEmployeeEarning) registry;
        
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }
        
        moKeyEmployee.setValue(new int[] { moRegistry.getPkEmployeeId()});
        moKeyEarning.setValue(new int[] { moRegistry.getPkEarningId() });
        itemStateChangedEarning();
        moKeyBizPartner.setValue(new int[] { moRegistry.getFkBizPartnerId() });
        
        setFormEditable(true);
        updateAccountComplements();
        
        if (moRegistry.isRegistryNew()) {
            moKeyEmployee.setEnabled(true);
            moKeyEarning.setEnabled(true);
        }
        else {
            moKeyEmployee.setEnabled(false);
            moKeyEarning.setEnabled(false);
        }
        
        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbCfgAccountingEmployeeEarning registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkEmployeeId(moKeyEmployee.getValue()[0]);
            registry.setPkEarningId(moKeyEarning.getValue()[0]);
        }
        
        registry.setFkBizPartnerId(moKeyBizPartner.getValue()[0]);
        registry.setFkAccountingRecordTypeId(moEarning.getFkAccountingRecordTypeId());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moRegistry.isRegistryNew()) {
                try {
                    int[] key = new int[] { moKeyEmployee.getValue()[0], moKeyEarning.getValue()[0] }; // convenience variable
                    
                    if (SDbCfgAccountingEmployeeEarning.countExistingRegistries(miClient.getSession(), key) > 0) {
                        throw new Exception("Ya existe un registro para el empleado '" + moKeyEmployee.getSelectedItem().getItem() + "' y la percepción '" + moKeyEarning.getSelectedItem().getItem() + "'."
                                + "\nSi no visualiza el registro existente en la vista, busque entre los registros eliminados.");
                    }
                }
                catch (Exception e) {
                    validation.setMessage(e.getMessage());
                    validation.setComponent(moKeyEarning);
                }
            }
        }
            
        return validation;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickEmployee) {
                actionPickEmployee();
            }
            else if (button == jbPickBizPartner) {
                actionPickBizPartner();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            
            if (field == moKeyEarning) {
                itemStateChangedEarning();
            }
        }
    }
}
