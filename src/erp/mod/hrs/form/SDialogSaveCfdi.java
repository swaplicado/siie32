/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.cfd.SCfdConsts;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.mtrn.data.SCfdPrint;
import erp.mtrn.data.SDataCfd;
import erp.print.SDataConstantsPrint;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileWriter;
import java.sql.ResultSet;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiParams;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Isabel Servín
 */
public class SDialogSaveCfdi extends SBeanFormDialog implements ActionListener, ChangeListener, ItemListener {
    
    private int emitedCfdi;

    /**
     * Creates new form SDialogSaveCfdi
     * @param client
     * @param title
     * @throws java.lang.Exception
     */
    public SDialogSaveCfdi(SGuiClient client, final String title) throws Exception {
        this.setTitle(title);
        miClient = client;
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moCalYear = new sa.lib.gui.bean.SBeanFieldCalendarYear();
        jPanel4 = new javax.swing.JPanel();
        jlPeriod = new javax.swing.JLabel();
        moCalPeriod = new sa.lib.gui.bean.SBeanFieldCalendarMonth();
        jPanel5 = new javax.swing.JPanel();
        jlEmployee = new javax.swing.JLabel();
        moKeyEmployee = new sa.lib.gui.bean.SBeanFieldKey();
        jtbEmployeeActive = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jlCfdiFound = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jlSaveFolder = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        moTextSaveFolder = new sa.lib.gui.bean.SBeanFieldText();
        jPanel9 = new javax.swing.JPanel();
        jbSaveFolder = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();

        setTitle("Descarga de CFDIs de nóminas");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generación de archivos"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.GridLayout(8, 0));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlYear.setText("Ejercicio:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlYear);
        jPanel3.add(moCalYear);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlPeriod.setText("Periodo:*");
        jlPeriod.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlPeriod);
        jPanel4.add(moCalPeriod);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlEmployee.setText("Empleado:");
        jlEmployee.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlEmployee);

        moKeyEmployee.setPreferredSize(new java.awt.Dimension(350, 23));
        jPanel5.add(moKeyEmployee);

        jtbEmployeeActive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbEmployeeActive.setSelected(true);
        jtbEmployeeActive.setToolTipText("Filtrar eliminados");
        jtbEmployeeActive.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbEmployeeActive.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif"))); // NOI18N
        jPanel5.add(jtbEmployeeActive);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlCfdiFound.setForeground(java.awt.SystemColor.textInactiveText);
        jlCfdiFound.setText("Se encontraron 0 CFDIs emitidos");
        jlCfdiFound.setPreferredSize(new java.awt.Dimension(500, 23));
        jPanel6.add(jlCfdiFound);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlSaveFolder.setText("Ruta descarga:*");
        jlSaveFolder.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel7.add(jlSaveFolder);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        moTextSaveFolder.setEditable(false);
        moTextSaveFolder.setPreferredSize(new java.awt.Dimension(600, 23));
        jPanel8.add(moTextSaveFolder);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jbSaveFolder.setText("Seleccionar carpeta");
        jbSaveFolder.setPreferredSize(new java.awt.Dimension(145, 23));
        jPanel9.add(jbSaveFolder);

        jPanel2.add(jPanel9);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        jPanel2.add(jPanel10);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbSaveFolder;
    private javax.swing.JLabel jlCfdiFound;
    private javax.swing.JLabel jlEmployee;
    private javax.swing.JLabel jlPeriod;
    private javax.swing.JLabel jlSaveFolder;
    private javax.swing.JLabel jlYear;
    private javax.swing.JToggleButton jtbEmployeeActive;
    private sa.lib.gui.bean.SBeanFieldCalendarMonth moCalPeriod;
    private sa.lib.gui.bean.SBeanFieldCalendarYear moCalYear;
    private sa.lib.gui.bean.SBeanFieldKey moKeyEmployee;
    private sa.lib.gui.bean.SBeanFieldText moTextSaveFolder;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        jbSave.setText("Guardar");
        jbCancel.setText("Cerrar");
        
        moCalYear.setCalendarSettings(SGuiUtils.getLabelName(jlYear));
        moCalPeriod.setCalendarSettings(SGuiUtils.getLabelName(jlYear));
        moKeyEmployee.setKeySettings(miClient, SGuiUtils.getLabelName(jlEmployee.getText()), false);
        moTextSaveFolder.setTextSettings(SGuiUtils.getLabelName(jlSaveFolder), 500);
        
        moFields.addField(moCalYear);
        moFields.addField(moCalPeriod);
        moFields.addField(moKeyEmployee);
        moFields.addField(moTextSaveFolder);
        moFields.setFormButton(jbSave);
        
        reloadCatalogues();
        addAllListeners();
        getCfdiEmited();
    }

    private void populateEmployee() {
        miClient.getSession().populateCatalogue(moKeyEmployee, erp.mod.SModConsts.HRSU_EMP, SLibConsts.UNDEFINED, 
                new SGuiParams(jtbEmployeeActive.isSelected() ? SGuiConsts.PARAM_REGS_ACT : SGuiConsts.PARAM_REGS_ALL));
    }
    
    @Override
    public void reloadCatalogues() {
        moCalYear.setValue(SLibTimeUtils.digestYear(miClient.getSession().getCurrentDate())[0]);
        moCalPeriod.setValue(SLibTimeUtils.digestMonth(miClient.getSession().getCurrentDate())[1]);
        populateEmployee();
    }
    
    private void actionSaveFolder() {
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            moTextSaveFolder.setValue(fc.getSelectedFile().getAbsolutePath());
        }
    }
    
    private void getCfdiEmited() {
        try {
            String sql = "SELECT COUNT(*) FROM hrs_pay AS p " +
                    "INNER JOIN hrs_pay_rcp AS pr ON p.id_pay = pr.id_pay " +
                    "INNER JOIN hrs_pay_rcp_iss as pri ON pr.id_pay = pri.id_pay AND pr.id_emp = pri.id_emp " +
                    "INNER JOIN trn_cfd as c on pri.id_pay = c.fid_pay_rcp_pay_n AND pri.id_emp = c.fid_pay_rcp_emp_n AND pri.id_iss = c.fid_pay_rcp_iss_n " +
                    "WHERE p.per_year = " + moCalYear.getValue() + " " +
                    "AND p.per = " + moCalPeriod.getValue() + " " +
                    (moKeyEmployee.getSelectedIndex() != 0 ? "AND pr.id_emp = " + moKeyEmployee.getValue()[0] + " " : "") +
                    "AND pri.fk_st_rcp = 2 " +
                    "AND NOT p.b_del " +
                    "AND NOT pr.b_del " +
                    "AND NOT pri.b_del;";
            try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                if (resultSet.next()) {
                    emitedCfdi = resultSet.getInt(1);
                    jlCfdiFound.setText("Se encontraron " + emitedCfdi + " CFDIs emitidos");
                }
            }
        } catch (Exception e) {
            miClient.showMsgBoxError(e.getMessage());
        }
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }

    @Override
    public void addAllListeners() {
        jbSaveFolder.addActionListener(this);
        moCalYear.addChangeListener(this);
        moCalPeriod.addChangeListener(this);
        moKeyEmployee.addItemListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbSaveFolder.removeActionListener(this);
        moCalYear.removeChangeListener(this);
        moCalPeriod.removeChangeListener(this);
        moKeyEmployee.removeItemListener(this);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void setValue(final int type, final Object value) {
    }

    @Override
    public Object getValue(final int type) {
       return null;
    }
    
    @Override
    @SuppressWarnings("deprecation")
    public void actionSave()  {
        try {
            if (miClient.showMsgBoxConfirm("El proceso puede durar varios minutos. ¿Desea continuar?") == JOptionPane.OK_OPTION) {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                SGuiValidation validation = validateForm();
                if (validation.isValid()) {
                    String sql = "SELECT c.id_cfd FROM hrs_pay AS p " +
                            "INNER JOIN hrs_pay_rcp AS pr ON p.id_pay = pr.id_pay " +
                            "INNER JOIN hrs_pay_rcp_iss as pri ON pr.id_pay = pri.id_pay AND pr.id_emp = pri.id_emp " +
                            "INNER JOIN trn_cfd as c on pri.id_pay = c.fid_pay_rcp_pay_n AND pri.id_emp = c.fid_pay_rcp_emp_n AND pri.id_iss = c.fid_pay_rcp_iss_n " +
                            "WHERE p.per_year = " + moCalYear.getValue() + " " +
                            "AND p.per = " + moCalPeriod.getValue() + " " + 
                            (moKeyEmployee.getSelectedIndex() != 0 ? "AND pr.id_emp = " + moKeyEmployee.getValue()[0] + " " : "") +
                            "AND pri.fk_st_rcp = 2 " +
                            "AND NOT p.b_del " +
                            "AND NOT pr.b_del " +
                            "AND NOT pri.b_del;";
                    try (ResultSet resultSet = miClient.getSession().getDatabase().getConnection().createStatement().executeQuery(sql)) {
                        while (resultSet.next()) {

                            SDataCfd cfd = (SDataCfd) SDataUtilities.readRegistry((SClientInterface) miClient, SDataConstants.TRN_CFD, new int[] { resultSet.getInt(1) }, SLibConstants.EXEC_MODE_SILENT);

                            SCfdPrint cfdPrint = new SCfdPrint((SClientInterface) miClient);
                            if (cfd.getFkXmlTypeId() == SDataConstantsSys.TRNS_TP_XML_CFDI_33) {
                                cfdPrint.printPayrollReceipt33_12(cfd, SDataConstantsPrint.PRINT_MODE_PDF_FILE_PATH, SLibConsts.UNDEFINED,
                                        moTextSaveFolder.getValue(), SCfdConsts.CFDI_PAYROLL_VER_CUR);
                            }
                            else if (cfd.getFkXmlTypeId() == SDataConstantsSys.TRNS_TP_XML_CFDI_40) {
                                cfdPrint.printPayrollReceipt40_12(cfd, SDataConstantsPrint.PRINT_MODE_PDF_FILE_PATH, SLibConsts.UNDEFINED,
                                        moTextSaveFolder.getValue(), SCfdConsts.CFDI_PAYROLL_VER_CUR);
                            }

                            File xmlFile = new File(moTextSaveFolder.getValue() + "/" + cfd.getDocXmlName());
                            xmlFile.createNewFile();
                            try (FileWriter fw = new FileWriter(xmlFile)) {
                                fw.write(cfd.getDocXml());
                            }
                        } 
                    }
                    miClient.showMsgBoxInformation("El proceso ha finalizado");
                    this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            }
        } catch (Exception e) {}
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbSaveFolder) {
                actionSaveFolder();
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        if (e.getSource() instanceof JSpinner) {
            JSpinner spinner = (JSpinner) e.getSource();
            
            if (spinner == moCalYear) {
                getCfdiEmited();
            }
            else if (spinner == moCalPeriod) {
                getCfdiEmited();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            JComboBox comboBox = (JComboBox) e.getSource();
            
            if (comboBox == moKeyEmployee) {
                getCfdiEmited();
            }
        }
    }
}
