/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbHoliday;
import java.util.Date;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormHoliday extends SBeanForm {

    private SDbHoliday moRegistry;

    /**
     * Creates new form SFormHoliday
     */
    public SFormHoliday(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_HOL, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlDate = new javax.swing.JLabel();
        moDateDate = new sa.lib.gui.bean.SBeanFieldDate();
        jPanel6 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel7 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jPanel8 = new javax.swing.JPanel();
        jlHint1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jlHint2 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(6, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setForeground(new java.awt.Color(0, 0, 255));
        jlYear.setText("Año:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlYear);

        moIntYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(moIntYear);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDate.setText("Día:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlDate);
        jPanel5.add(moDateDate);

        jPanel2.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código día:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlCode);

        moTextCode.setText("TEXT");
        jPanel6.add(moTextCode);

        jPanel2.add(jPanel6);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre día:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlName);

        moTextName.setText("TEXT");
        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel7.add(moTextName);

        jPanel2.add(jPanel7);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlHint1.setForeground(java.awt.SystemColor.textInactiveText);
        jlHint1.setText("Día festivo: día no laborable, de descanso obligatorio.");
        jlHint1.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel8.add(jlHint1);

        jPanel2.add(jPanel8);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlHint2.setForeground(java.awt.SystemColor.textInactiveText);
        jlHint2.setText("Día feriado: día no laborable, de descanso otorgado.");
        jlHint2.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel9.add(jlHint2);

        jPanel2.add(jPanel9);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlHint1;
    private javax.swing.JLabel jlHint2;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlYear;
    private sa.lib.gui.bean.SBeanFieldDate moDateDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntYear;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moDateDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlDate.getText()), true);
        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode.getText()), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 50);

        moFields.addField(moIntYear);
        moFields.addField(moDateDate);
        moFields.addField(moTextCode);
        moFields.addField(moTextName);

        moFields.setFormButton(jbSave);
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {

    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int year = SLibConsts.UNDEFINED;

        moRegistry = (SDbHoliday) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            year = miClient.getSession().getCurrentYear();
            jtfRegistryKey.setText("");
        }
        else {
            year = moRegistry.getPkHolidayYearId();
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moIntYear.setValue(year);
        moDateDate.setValue(moRegistry.getDate());
        moTextName.setValue(moRegistry.getName());
        moTextCode.setValue(moRegistry.getCode());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moIntYear.setEditable(true);
        }
        else {
            moIntYear.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbHoliday registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setPkHolidayYearId(moIntYear.getValue());
        }

        registry.setDate(moDateDate.getValue());
        registry.setName(moTextName.getValue());
        registry.setCode(moTextCode.getValue());

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        Date min = null;
        Date max = null;
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moIntYear.getValue() < 2000 || moIntYear.getValue() > 2100) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlYear) + "'" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "2001 y" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "2100.");
                validation.setComponent(moIntYear);
            }
            else {
                min = SLibTimeUtils.createDate(moIntYear.getValue(), 1, 1);
                max = SLibTimeUtils.createDate(moIntYear.getValue(), 12, 31);

                if (moDateDate.getValue().before(min) || moDateDate.getValue().after(max)) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlDate) + "'" +
                            SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + SLibUtils.DateFormatDate.format(min) + " y" +
                            SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + SLibUtils.DateFormatDate.format(max) + ".");
                    validation.setComponent(moDateDate);
                }
            }
        }

        return validation;
    }
}
