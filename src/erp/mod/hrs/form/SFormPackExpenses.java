/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbPackExpenses;
import erp.mod.hrs.db.SDbPackExpensesItem;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridColumnForm;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridPaneForm;
import sa.lib.grid.SGridPaneFormOwner;
import sa.lib.grid.SGridRow;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiOptionPicker;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 * Configuración de paquetes de gastos y sus ítems por tipo de gasto.
 * Aplica para la modalidad de configuración de contabilización 'dinámica'.
 * @author Sergio Flores
 */
public class SFormPackExpenses extends SBeanForm implements SGridPaneFormOwner, ActionListener {

    private SDbPackExpenses moRegistry;
    private SGridPaneForm moGridItems;

    /**
     * Creates new form SFormPackExpenses.
     * @param client GUI client.
     * @param title Form title.
     */
    public SFormPackExpenses(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRSU_PACK_EXP, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlCode = new javax.swing.JLabel();
        moTextCode = new sa.lib.gui.bean.SBeanFieldText();
        jPanel5 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        moTextName = new sa.lib.gui.bean.SBeanFieldText();
        jlTotalExpenses = new javax.swing.JLabel();
        jtfTotalExpenses = new javax.swing.JTextField();
        jpExpenses = new javax.swing.JPanel();
        jpExpensesNorth = new javax.swing.JPanel();
        jpExpensesNorth1 = new javax.swing.JPanel();
        jlExpenseType = new javax.swing.JLabel();
        jlItem = new javax.swing.JLabel();
        jpExpensesNorth2 = new javax.swing.JPanel();
        moKeyExpenseType = new sa.lib.gui.bean.SBeanFieldKey();
        moKeyItem = new sa.lib.gui.bean.SBeanFieldKey();
        jbPickItem = new javax.swing.JButton();
        jpExpensesNorth3 = new javax.swing.JPanel();
        jbAddExpense = new javax.swing.JButton();
        jbClearExpense = new javax.swing.JButton();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCode.setText("Código:*");
        jlCode.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlCode);

        moTextCode.setText("TEXT");
        jPanel4.add(moTextCode);

        jPanel2.add(jPanel4);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre:*");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlName);

        moTextName.setText("TEXT");
        moTextName.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel5.add(moTextName);

        jlTotalExpenses.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlTotalExpenses.setText("Gastos:");
        jlTotalExpenses.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlTotalExpenses);

        jtfTotalExpenses.setEditable(false);
        jtfTotalExpenses.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtfTotalExpenses.setText("0 de 0");
        jtfTotalExpenses.setFocusable(false);
        jtfTotalExpenses.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel5.add(jtfTotalExpenses);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jpExpenses.setBorder(javax.swing.BorderFactory.createTitledBorder("Gastos:"));
        jpExpenses.setLayout(new java.awt.BorderLayout());

        jpExpensesNorth.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jpExpensesNorth1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlExpenseType.setText("Tipo de gasto:");
        jlExpenseType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpExpensesNorth1.add(jlExpenseType);

        jlItem.setText("Ítem de gasto:");
        jlItem.setPreferredSize(new java.awt.Dimension(350, 23));
        jpExpensesNorth1.add(jlItem);

        jpExpensesNorth.add(jpExpensesNorth1);

        jpExpensesNorth2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyExpenseType.setPreferredSize(new java.awt.Dimension(200, 23));
        jpExpensesNorth2.add(moKeyExpenseType);

        moKeyItem.setPreferredSize(new java.awt.Dimension(350, 23));
        jpExpensesNorth2.add(moKeyItem);

        jbPickItem.setText("...");
        jbPickItem.setToolTipText("Seleccionar ítem");
        jbPickItem.setFocusable(false);
        jbPickItem.setPreferredSize(new java.awt.Dimension(23, 23));
        jpExpensesNorth2.add(jbPickItem);

        jpExpensesNorth.add(jpExpensesNorth2);

        jpExpensesNorth3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));

        jbAddExpense.setText("Agregar");
        jbAddExpense.setPreferredSize(new java.awt.Dimension(75, 23));
        jpExpensesNorth3.add(jbAddExpense);

        jbClearExpense.setText("Limpiar");
        jbClearExpense.setPreferredSize(new java.awt.Dimension(75, 23));
        jpExpensesNorth3.add(jbClearExpense);

        jpExpensesNorth.add(jpExpensesNorth3);

        jpExpenses.add(jpExpensesNorth, java.awt.BorderLayout.NORTH);

        jPanel1.add(jpExpenses, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbAddExpense;
    private javax.swing.JButton jbClearExpense;
    private javax.swing.JButton jbPickItem;
    private javax.swing.JLabel jlCode;
    private javax.swing.JLabel jlExpenseType;
    private javax.swing.JLabel jlItem;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlTotalExpenses;
    private javax.swing.JPanel jpExpenses;
    private javax.swing.JPanel jpExpensesNorth;
    private javax.swing.JPanel jpExpensesNorth1;
    private javax.swing.JPanel jpExpensesNorth2;
    private javax.swing.JPanel jpExpensesNorth3;
    private javax.swing.JTextField jtfTotalExpenses;
    private sa.lib.gui.bean.SBeanFieldKey moKeyExpenseType;
    private sa.lib.gui.bean.SBeanFieldKey moKeyItem;
    private sa.lib.gui.bean.SBeanFieldText moTextCode;
    private sa.lib.gui.bean.SBeanFieldText moTextName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 640, 400);

        moTextCode.setTextSettings(SGuiUtils.getLabelName(jlCode.getText()), 10);
        moTextName.setTextSettings(SGuiUtils.getLabelName(jlName.getText()), 50);
        moKeyExpenseType.setKeySettings(miClient, SGuiUtils.getLabelName(jlExpenseType), false);
        moKeyItem.setKeySettings(miClient, SGuiUtils.getLabelName(jlItem), false);

        moFields.addField(moTextCode);
        moFields.addField(moTextName);
        moFields.addField(moKeyExpenseType);
        moFields.addField(moKeyItem);
        
        moFields.setFormButton(jbAddExpense);
        
        moGridItems = new SGridPaneForm(miClient, SModConsts.HRSU_PACK_EXP_ITEM, 0, "Ítems de gastos") {
            
            @Override
            public void initGrid() {
                setRowButtonsEnabled(false, false, true);
            }
            
            @Override
            public ArrayList<SGridColumnForm> createGridColumns() {
                ArrayList<SGridColumnForm> columns = new ArrayList<>();
                
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_CAT_M, "Tipo gasto"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_NAME_ITM_L, "Nombre ítem"));
                columns.add(new SGridColumnForm(SGridConsts.COL_TYPE_TEXT_CODE_ITM, "Código ítem"));
                
                return columns;
            }
        };
        
        jpExpenses.add(moGridItems, BorderLayout.CENTER);
        moGridItems.setPaneFormOwner(this);
    }
    
    private void updateTotalExpenses() {
        int total = moKeyExpenseType.getItemCount() - 1;
        jtfTotalExpenses.setText("" + moGridItems.getTable().getRowCount() + " de " + total);
    }
    
    private void actionPerformedPickItem() {
        SGuiOptionPicker picker = miClient.getSession().getModule(SModConsts.MOD_ITM_N).getOptionPicker(SModConsts.ITMU_ITEM, SLibConsts.UNDEFINED, null);
        picker.resetPicker();
        picker.setPickerVisible(true);

        if (picker.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            int[] key = (int[]) picker.getOption();

            if (key != null) {
                if (key[0] != SLibConsts.UNDEFINED) {
                    moKeyItem.setValue(new int[] { key[0] });
                }
            }
        }
    }

    private void actionPerformedAddExpense() {
        if (moKeyExpenseType.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moKeyExpenseType.getFieldName() + "'");
            moKeyExpenseType.requestFocusInWindow();
        }
        else if (moKeyItem.getSelectedIndex() <= 0) {
            miClient.showMsgBoxWarning(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + moKeyItem.getFieldName() + "'");
            moKeyItem.requestFocusInWindow();
        }
        else {
            boolean found = false;
            
            for (SGridRow row : moGridItems.getModel().getGridRows()) {
                if (((SDbPackExpensesItem) row).getPkExpenseTypeId() == moKeyExpenseType.getValue()[0]) {
                    miClient.showMsgBoxWarning("El " + moKeyExpenseType.getFieldName() + " '" + moKeyExpenseType.getSelectedItem().getItem() + "' ya existe en los gastos del paquete.");
                    found = true;
                    break;
                }
            }
            
            if (!found) {
                SDbPackExpensesItem packExpensesItem = new SDbPackExpensesItem();

                //packExpensesItem.setPkPackExpensesId(...);
                packExpensesItem.setPkExpenseTypeId(moKeyExpenseType.getValue()[0]);
                packExpensesItem.setFkItemId(moKeyItem.getValue()[0]);

                packExpensesItem.setDbmsExpenseTypeCode(moKeyExpenseType.getSelectedItem().getCode());
                packExpensesItem.setDbmsExpenseTypeName(moKeyExpenseType.getSelectedItem().getItem());
                packExpensesItem.setDbmsItemCode(moKeyItem.getSelectedItem().getCode());
                packExpensesItem.setDbmsItemName(moKeyItem.getSelectedItem().getItem());

                moGridItems.addGridRow(packExpensesItem);
                moGridItems.renderGridRows();
                moGridItems.setSelectedGridRow(moGridItems.getTable().getRowCount() - 1);

                actionPerformedClearExpense();
                updateTotalExpenses();
            }
        }
    }

    private void actionPerformedClearExpense() {
        moKeyExpenseType.resetField();
        moKeyItem.resetField();
        
        moKeyExpenseType.requestFocusInWindow();
    }

    @Override
    public void addAllListeners() {
        jbPickItem.addActionListener(this);
        jbAddExpense.addActionListener(this);
        jbClearExpense.addActionListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickItem.removeActionListener(this);
        jbAddExpense.removeActionListener(this);
        jbClearExpense.removeActionListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyExpenseType, SModConsts.HRSU_TP_EXP, 0, null);
        miClient.getSession().populateCatalogue(moKeyItem, SModConsts.ITMU_ITEM, 0, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        moRegistry = (SDbPackExpenses) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            
            moRegistry.setSystem(false); // all editable registries are non-system
            
            jtfRegistryKey.setText("");
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moTextName.setValue(moRegistry.getName());
        moTextCode.setValue(moRegistry.getCode());
        
        moKeyExpenseType.resetField();
        moKeyItem.resetField();
        
        moGridItems.populateGrid(new Vector<>(moRegistry.getChildItems()));
        updateTotalExpenses();

        setFormEditable(true);
        
        if (moRegistry.isRegistryNew()) {
            
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbPackExpenses registry = moRegistry.clone();

        if (registry.isRegistryNew()) { }

        registry.setName(moTextName.getValue());
        registry.setCode(moTextCode.getValue());
        
        registry.getChildItems().clear();
        
        for (SGridRow row : moGridItems.getModel().getGridRows()) {
            registry.getChildItems().add((SDbPackExpensesItem) row);
        }

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moGridItems.getTable().getRowCount() == 0) {
                validation.setMessage("Se deben capturar los gastos del paquete.");
                validation.setComponent(moKeyExpenseType);
            }
            else {
                for (int index = 1; index < moKeyExpenseType.getItemCount(); index++) { // skip first item
                    boolean found = false;
                    SGuiItem guiItem = (SGuiItem) moKeyExpenseType.getItemAt(index);
                    
                    for (SGridRow row : moGridItems.getModel().getGridRows()) {
                        if (((SDbPackExpensesItem) row).getPkExpenseTypeId() == guiItem.getPrimaryKey()[0]) {
                            found = true;
                            break;
                        }
                    }
                    
                    if (!found) {
                        validation.setMessage("Falta capturar en el paquete el tipo de gasto '" + guiItem.toString() + "'.");
                        validation.setComponent(moKeyExpenseType);
                        moKeyExpenseType.setSelectedIndex(index);
                        break;
                    }
                }
            }
        }
        
        return validation;
    }

    @Override
    public void notifyRowNew(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        
    }

    @Override
    public void notifyRowEdit(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        
    }

    @Override
    public void notifyRowDelete(int gridType, int gridSubtype, int row, SGridRow gridRow) {
        if (gridType == SModConsts.HRSU_PACK_EXP_ITEM) {
            updateTotalExpenses();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbPickItem) {
                actionPerformedPickItem();
            }
            else if (button == jbAddExpense) {
                actionPerformedAddExpense();
            }
            else if (button == jbClearExpense) {
                actionPerformedClearExpense();
            }
        }
    }
}
