/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.mbps.data.SDataBizPartnerBranch;
import erp.mcfg.data.SCfgUtils;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.cfg.db.SDbDocument;
import erp.mod.hrs.db.SDbDocAdminRecord;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.utils.SDocUtils;
import erp.musr.data.SDataUser;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.joda.time.LocalTime;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Sergio Flores
 */
public class SFormDocAdminRecord extends SBeanForm implements ActionListener, FocusListener {
    
    private SDbDocAdminRecord moRegistry;
    private SDbEmployee moOffender;
    private SPickerEmployee moPickerEmployee;
    private SPickerPreceptSubsections moPickerPreceptSubsections;
    private HashMap<Integer, String> moEmployeesMap;
    private int mnCfgParamHrsDepartmentId;
    private int mnCfgParamHrsRepCompanyId;
    private int mnCfgParamHrsRepUnionId;
    private int mnPrivilegeLevel;
    private int mnEmployeeOffenderId;
    private int mnEmployeeBossId;
    private int mnEmployeeHumanResourcesId;
    private int mnEmployeeUnionId_n;
    private int mnEmployeeWitness1;
    private int mnEmployeeWitness2;
    private int mnHumanResoursesDepartmentId;
    private int mnOffenderDepartmentId;
    private int mnOffenderPositionId;
    private ArrayList<int[]> maPreceptSubsectionKeys;

    /**
     * Creates new form SFormDocAdminRecord
     * @param client GUI client.
     * @param title Title.
     */
    public SFormDocAdminRecord(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_DOC_ADM_REC, 0, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        jPanelDoc = new javax.swing.JPanel();
        jPanelDocN = new javax.swing.JPanel();
        jPanelDocN1 = new javax.swing.JPanel();
        jlDoc = new javax.swing.JLabel();
        jtfDocName = new javax.swing.JTextField();
        jtfDocCode = new javax.swing.JTextField();
        jPanelDocN2 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        jtfNumber = new javax.swing.JTextField();
        jtfCompanyBranchCode = new javax.swing.JTextField();
        jtfLocality = new javax.swing.JTextField();
        jtfState = new javax.swing.JTextField();
        jPanelDocN3 = new javax.swing.JPanel();
        jlDatetimeStart = new javax.swing.JLabel();
        moDatetimeStart = new sa.lib.gui.bean.SBeanFieldDatetime();
        jlDatetimeStartHelp = new javax.swing.JLabel();
        jPanelDocN7 = new javax.swing.JPanel();
        jlDatetimeEnd = new javax.swing.JLabel();
        moDatetimeEnd = new sa.lib.gui.bean.SBeanFieldDatetime();
        jlDatetimeEndHelp = new javax.swing.JLabel();
        jPanelDocN4 = new javax.swing.JPanel();
        jlEmployeeOffender = new javax.swing.JLabel();
        jtfEmployeeOffender = new javax.swing.JTextField();
        jbPickEmployeeOffender = new javax.swing.JButton();
        jPanelDocN5 = new javax.swing.JPanel();
        jlOffenderDepartment = new javax.swing.JLabel();
        jtfOffenderDepartmentName = new javax.swing.JTextField();
        jtfOffenderDepartmentCode = new javax.swing.JTextField();
        jckOffenderActive = new javax.swing.JCheckBox();
        jPanelDocN6 = new javax.swing.JPanel();
        jlOffenderPosition = new javax.swing.JLabel();
        jtfOffenderPositionName = new javax.swing.JTextField();
        jtfOffenderPositionCode = new javax.swing.JTextField();
        jckOffenderUnionized = new javax.swing.JCheckBox();
        jPanelDocN8 = new javax.swing.JPanel();
        jlEmployeeBoss = new javax.swing.JLabel();
        jtfEmployeeBoss = new javax.swing.JTextField();
        jbPickEmployeeBoss = new javax.swing.JButton();
        jPanelDocN9 = new javax.swing.JPanel();
        jlEmployeeHumanResources = new javax.swing.JLabel();
        jtfEmployeeHumanResources = new javax.swing.JTextField();
        jbPickEmployeeHumanResources = new javax.swing.JButton();
        jlEmployeeHumanResourcesHelp = new javax.swing.JLabel();
        jPanelDocN10 = new javax.swing.JPanel();
        jlEmployeeUnion_n = new javax.swing.JLabel();
        jtfEmployeeUnion_n = new javax.swing.JTextField();
        jbPickEmployeeUnion_n = new javax.swing.JButton();
        jPanelDocN11 = new javax.swing.JPanel();
        jlEmployeeWitness1 = new javax.swing.JLabel();
        jtfEmployeeWitness1 = new javax.swing.JTextField();
        jbPickEmployeeWitness1 = new javax.swing.JButton();
        moBoolHumanResourcesWitness1 = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanelDocN12 = new javax.swing.JPanel();
        jlEmployeeWitness2 = new javax.swing.JLabel();
        jtfEmployeeWitness2 = new javax.swing.JTextField();
        jbPickEmployeeWitness2 = new javax.swing.JButton();
        moBoolHumanResourcesWitness2 = new sa.lib.gui.bean.SBeanFieldBoolean();
        jPanelDocC = new javax.swing.JPanel();
        jPanelDocC1 = new javax.swing.JPanel();
        jPanelDocC11 = new javax.swing.JPanel();
        jlPreceptSubsections = new javax.swing.JLabel();
        jbPickPreceptSubsections = new javax.swing.JButton();
        jspPreceptSubsections = new javax.swing.JScrollPane();
        jtaPreceptSubsections = new javax.swing.JTextArea();
        jPanelDocS = new javax.swing.JPanel();
        jPanelDocS1 = new javax.swing.JPanel();
        jlFilevault = new javax.swing.JLabel();
        jtfFilevaultId = new javax.swing.JTextField();
        jtfFilevaultTs = new javax.swing.JTextField();
        jtfFileType = new javax.swing.JTextField();
        jbViewFile = new javax.swing.JButton();
        jPanelSan = new javax.swing.JPanel();
        jPanelSanN = new javax.swing.JPanel();
        jlBreachAbstract = new javax.swing.JLabel();
        moTextBreachAbstract = new sa.lib.gui.bean.SBeanFieldText();
        jPanelSanC = new javax.swing.JPanel();
        jPanelSanC1 = new javax.swing.JPanel();
        jPanelSanC11 = new javax.swing.JPanel();
        jlBreachDescrip = new javax.swing.JLabel();
        jspBreachDescrip = new javax.swing.JScrollPane();
        jtaBreachDescrip = new javax.swing.JTextArea();
        jPanelSanC12 = new javax.swing.JPanel();
        jlOffenderComments1 = new javax.swing.JLabel();
        jspOffenderComments1 = new javax.swing.JScrollPane();
        jtaOffenderComments1 = new javax.swing.JTextArea();
        jPanelSanC13 = new javax.swing.JPanel();
        jlOffenderComments2 = new javax.swing.JLabel();
        jspOffenderComments2 = new javax.swing.JScrollPane();
        jtaOffenderComments2 = new javax.swing.JTextArea();
        jPanelSanC2 = new javax.swing.JPanel();
        jPanelSanC21 = new javax.swing.JPanel();
        jlEndingNotes = new javax.swing.JLabel();
        jPanelSanC22 = new javax.swing.JPanel();
        jcbEndingNotes = new javax.swing.JComboBox();
        jPanelSanC23 = new javax.swing.JPanel();
        moBoolOffenderSign = new sa.lib.gui.bean.SBeanFieldBoolean();
        moBoolOffenderDis = new sa.lib.gui.bean.SBeanFieldBoolean();

        jPanel.setLayout(new java.awt.BorderLayout());

        jPanelDoc.setBorder(javax.swing.BorderFactory.createTitledBorder("Formato:"));
        jPanelDoc.setLayout(new java.awt.BorderLayout(0, 5));

        jPanelDocN.setLayout(new java.awt.GridLayout(12, 1, 0, 5));

        jPanelDocN1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDoc.setText("Formato:");
        jlDoc.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN1.add(jlDoc);

        jtfDocName.setEditable(false);
        jtfDocName.setText("TEXT");
        jtfDocName.setFocusable(false);
        jtfDocName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanelDocN1.add(jtfDocName);

        jtfDocCode.setEditable(false);
        jtfDocCode.setText("TEXT");
        jtfDocCode.setFocusable(false);
        jtfDocCode.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanelDocN1.add(jtfDocCode);

        jPanelDocN.add(jPanelDocN1);

        jPanelDocN2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Folio:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN2.add(jlNumber);

        jtfNumber.setEditable(false);
        jtfNumber.setText("0");
        jtfNumber.setFocusable(false);
        jtfNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN2.add(jtfNumber);

        jtfCompanyBranchCode.setEditable(false);
        jtfCompanyBranchCode.setText("TEXT");
        jtfCompanyBranchCode.setToolTipText("Sucursal");
        jtfCompanyBranchCode.setFocusable(false);
        jtfCompanyBranchCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanelDocN2.add(jtfCompanyBranchCode);

        jtfLocality.setEditable(false);
        jtfLocality.setText("TEXT");
        jtfLocality.setToolTipText("Localidad");
        jtfLocality.setFocusable(false);
        jtfLocality.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanelDocN2.add(jtfLocality);

        jtfState.setEditable(false);
        jtfState.setText("TEXT");
        jtfState.setToolTipText("Estado");
        jtfState.setFocusable(false);
        jtfState.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanelDocN2.add(jtfState);

        jPanelDocN.add(jPanelDocN2);

        jPanelDocN3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeStart.setText("Fecha-hr inicial:*");
        jlDatetimeStart.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN3.add(jlDatetimeStart);
        jPanelDocN3.add(moDatetimeStart);

        jlDatetimeStartHelp.setForeground(java.awt.Color.gray);
        jlDatetimeStartHelp.setText("formato: dd/mm/aaaa hh:mm:ss (24 hr)");
        jlDatetimeStartHelp.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanelDocN3.add(jlDatetimeStartHelp);

        jPanelDocN.add(jPanelDocN3);

        jPanelDocN7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatetimeEnd.setText("Fecha-hr final:*");
        jlDatetimeEnd.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN7.add(jlDatetimeEnd);
        jPanelDocN7.add(moDatetimeEnd);

        jlDatetimeEndHelp.setForeground(java.awt.Color.gray);
        jlDatetimeEndHelp.setText("formato: dd/mm/aaaa hh:mm:ss (24 hr)");
        jlDatetimeEndHelp.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanelDocN7.add(jlDatetimeEndHelp);

        jPanelDocN.add(jPanelDocN7);

        jPanelDocN4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeOffender.setText("Empleado:*");
        jlEmployeeOffender.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN4.add(jlEmployeeOffender);

        jtfEmployeeOffender.setEditable(false);
        jtfEmployeeOffender.setText("TEXT");
        jtfEmployeeOffender.setFocusable(false);
        jtfEmployeeOffender.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN4.add(jtfEmployeeOffender);

        jbPickEmployeeOffender.setText("...");
        jbPickEmployeeOffender.setToolTipText("Seleccionar...");
        jbPickEmployeeOffender.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN4.add(jbPickEmployeeOffender);

        jPanelDocN.add(jPanelDocN4);

        jPanelDocN5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOffenderDepartment.setText("Depto. empleado:");
        jlOffenderDepartment.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN5.add(jlOffenderDepartment);

        jtfOffenderDepartmentName.setEditable(false);
        jtfOffenderDepartmentName.setText("TEXT");
        jtfOffenderDepartmentName.setFocusable(false);
        jtfOffenderDepartmentName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanelDocN5.add(jtfOffenderDepartmentName);

        jtfOffenderDepartmentCode.setEditable(false);
        jtfOffenderDepartmentCode.setText("TEXT");
        jtfOffenderDepartmentCode.setFocusable(false);
        jtfOffenderDepartmentCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanelDocN5.add(jtfOffenderDepartmentCode);

        jckOffenderActive.setText("Está activo");
        jckOffenderActive.setEnabled(false);
        jckOffenderActive.setFocusable(false);
        jckOffenderActive.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN5.add(jckOffenderActive);

        jPanelDocN.add(jPanelDocN5);

        jPanelDocN6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOffenderPosition.setText("Puesto empleado:");
        jlOffenderPosition.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN6.add(jlOffenderPosition);

        jtfOffenderPositionName.setEditable(false);
        jtfOffenderPositionName.setText("TEXT");
        jtfOffenderPositionName.setFocusable(false);
        jtfOffenderPositionName.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanelDocN6.add(jtfOffenderPositionName);

        jtfOffenderPositionCode.setEditable(false);
        jtfOffenderPositionCode.setText("TEXT");
        jtfOffenderPositionCode.setFocusable(false);
        jtfOffenderPositionCode.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanelDocN6.add(jtfOffenderPositionCode);

        jckOffenderUnionized.setText("Es sindicalizado");
        jckOffenderUnionized.setEnabled(false);
        jckOffenderUnionized.setFocusable(false);
        jckOffenderUnionized.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN6.add(jckOffenderUnionized);

        jPanelDocN.add(jPanelDocN6);

        jPanelDocN8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeBoss.setText("Jefe inmediato:*");
        jlEmployeeBoss.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN8.add(jlEmployeeBoss);

        jtfEmployeeBoss.setEditable(false);
        jtfEmployeeBoss.setText("TEXT");
        jtfEmployeeBoss.setFocusable(false);
        jtfEmployeeBoss.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN8.add(jtfEmployeeBoss);

        jbPickEmployeeBoss.setText("...");
        jbPickEmployeeBoss.setToolTipText("Seleccionar...");
        jbPickEmployeeBoss.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN8.add(jbPickEmployeeBoss);

        jPanelDocN.add(jPanelDocN8);

        jPanelDocN9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeHumanResources.setText("Rep. patronal:");
        jlEmployeeHumanResources.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN9.add(jlEmployeeHumanResources);

        jtfEmployeeHumanResources.setEditable(false);
        jtfEmployeeHumanResources.setText("TEXT");
        jtfEmployeeHumanResources.setFocusable(false);
        jtfEmployeeHumanResources.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN9.add(jtfEmployeeHumanResources);

        jbPickEmployeeHumanResources.setText("...");
        jbPickEmployeeHumanResources.setToolTipText("Seleccionar...");
        jbPickEmployeeHumanResources.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN9.add(jbPickEmployeeHumanResources);

        jlEmployeeHumanResourcesHelp.setForeground(java.awt.Color.gray);
        jlEmployeeHumanResourcesHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/gui/img/icon_view_info.png"))); // NOI18N
        jlEmployeeHumanResourcesHelp.setText("RRHH");
        jlEmployeeHumanResourcesHelp.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jlEmployeeHumanResourcesHelp.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanelDocN9.add(jlEmployeeHumanResourcesHelp);

        jPanelDocN.add(jPanelDocN9);

        jPanelDocN10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeUnion_n.setText("Rep. sindical:");
        jlEmployeeUnion_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN10.add(jlEmployeeUnion_n);

        jtfEmployeeUnion_n.setEditable(false);
        jtfEmployeeUnion_n.setText("TEXT");
        jtfEmployeeUnion_n.setFocusable(false);
        jtfEmployeeUnion_n.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN10.add(jtfEmployeeUnion_n);

        jbPickEmployeeUnion_n.setText("...");
        jbPickEmployeeUnion_n.setToolTipText("Seleccionar...");
        jbPickEmployeeUnion_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN10.add(jbPickEmployeeUnion_n);

        jPanelDocN.add(jPanelDocN10);

        jPanelDocN11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeWitness1.setText("Testigo #1:");
        jlEmployeeWitness1.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN11.add(jlEmployeeWitness1);

        jtfEmployeeWitness1.setEditable(false);
        jtfEmployeeWitness1.setText("TEXT");
        jtfEmployeeWitness1.setFocusable(false);
        jtfEmployeeWitness1.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN11.add(jtfEmployeeWitness1);

        jbPickEmployeeWitness1.setText("...");
        jbPickEmployeeWitness1.setToolTipText("Seleccionar...");
        jbPickEmployeeWitness1.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN11.add(jbPickEmployeeWitness1);

        moBoolHumanResourcesWitness1.setText("Es RRHH");
        moBoolHumanResourcesWitness1.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanelDocN11.add(moBoolHumanResourcesWitness1);

        jPanelDocN.add(jPanelDocN11);

        jPanelDocN12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeWitness2.setText("Testigo #2:");
        jlEmployeeWitness2.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocN12.add(jlEmployeeWitness2);

        jtfEmployeeWitness2.setEditable(false);
        jtfEmployeeWitness2.setText("TEXT");
        jtfEmployeeWitness2.setFocusable(false);
        jtfEmployeeWitness2.setPreferredSize(new java.awt.Dimension(305, 23));
        jPanelDocN12.add(jtfEmployeeWitness2);

        jbPickEmployeeWitness2.setText("...");
        jbPickEmployeeWitness2.setToolTipText("Seleccionar...");
        jbPickEmployeeWitness2.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocN12.add(jbPickEmployeeWitness2);

        moBoolHumanResourcesWitness2.setText("Es RRHH");
        moBoolHumanResourcesWitness2.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanelDocN12.add(moBoolHumanResourcesWitness2);

        jPanelDocN.add(jPanelDocN12);

        jPanelDoc.add(jPanelDocN, java.awt.BorderLayout.NORTH);

        jPanelDocC.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 5, 0, 5));
        jPanelDocC.setLayout(new java.awt.BorderLayout());

        jPanelDocC1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanelDocC11.setLayout(new java.awt.BorderLayout());

        jlPreceptSubsections.setText("Faltas cometidas:*");
        jlPreceptSubsections.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelDocC11.add(jlPreceptSubsections, java.awt.BorderLayout.CENTER);

        jbPickPreceptSubsections.setText("...");
        jbPickPreceptSubsections.setToolTipText("Seleccionar...");
        jbPickPreceptSubsections.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocC11.add(jbPickPreceptSubsections, java.awt.BorderLayout.EAST);

        jPanelDocC1.add(jPanelDocC11, java.awt.BorderLayout.NORTH);

        jspPreceptSubsections.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspPreceptSubsections.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspPreceptSubsections.setPreferredSize(new java.awt.Dimension(100, 100));

        jtaPreceptSubsections.setEditable(false);
        jtaPreceptSubsections.setBackground(java.awt.SystemColor.control);
        jtaPreceptSubsections.setColumns(20);
        jtaPreceptSubsections.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtaPreceptSubsections.setLineWrap(true);
        jtaPreceptSubsections.setRows(5);
        jtaPreceptSubsections.setText("I. Engañarlo el trabajador o en su caso, el sindicato que lo hubiese propuesto o recomendado con certificados falsos o referencias en los que se atribuyan al trabajador capacidad, aptitudes o facultades de que carezca. Esta causa de rescisión dejará de tener efecto después de treinta días de prestar sus servicios el trabajador;\nII. Incurrir el trabajador, durante sus labores, en faltas de probidad u honradez, en actos de violencia, amagos, injurias o malos tratamientos en contra del patrón, sus familiares o del personal directivo o administrativo de la empresa o establecimiento, o en contra de clientes y proveedores del patrón, salvo que medie provocación o que obre en defensa propia;\nIII. Cometer el trabajador contra alguno de sus compañeros, cualquiera de los actos enumerados en la fracción anterior, si como consecuencia de ellos se altera la disciplina del lugar en que se desempeña el trabajo;");
        jtaPreceptSubsections.setWrapStyleWord(true);
        jtaPreceptSubsections.setFocusable(false);
        jspPreceptSubsections.setViewportView(jtaPreceptSubsections);

        jPanelDocC1.add(jspPreceptSubsections, java.awt.BorderLayout.CENTER);

        jPanelDocC.add(jPanelDocC1, java.awt.BorderLayout.CENTER);

        jPanelDoc.add(jPanelDocC, java.awt.BorderLayout.CENTER);

        jPanelDocS.setLayout(new java.awt.GridLayout(1, 1));

        jPanelDocS1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFilevault.setText("Archivo documento:");
        jlFilevault.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanelDocS1.add(jlFilevault);

        jtfFilevaultId.setEditable(false);
        jtfFilevaultId.setText("TEXT");
        jtfFilevaultId.setToolTipText("ID documento");
        jtfFilevaultId.setFocusable(false);
        jtfFilevaultId.setPreferredSize(new java.awt.Dimension(175, 23));
        jPanelDocS1.add(jtfFilevaultId);

        jtfFilevaultTs.setEditable(false);
        jtfFilevaultTs.setText("01/01/2001 00:00:00");
        jtfFilevaultTs.setToolTipText("TS documento");
        jtfFilevaultTs.setFocusable(false);
        jtfFilevaultTs.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanelDocS1.add(jtfFilevaultTs);

        jtfFileType.setEditable(false);
        jtfFileType.setText("TEXT");
        jtfFileType.setToolTipText("Tipo archivo");
        jtfFileType.setFocusable(false);
        jtfFileType.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanelDocS1.add(jtfFileType);

        jbViewFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_look.gif"))); // NOI18N
        jbViewFile.setToolTipText("Ver...");
        jbViewFile.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanelDocS1.add(jbViewFile);

        jPanelDocS.add(jPanelDocS1);

        jPanelDoc.add(jPanelDocS, java.awt.BorderLayout.SOUTH);

        jPanel.add(jPanelDoc, java.awt.BorderLayout.CENTER);

        jPanelSan.setBorder(javax.swing.BorderFactory.createTitledBorder("Diligencia:"));
        jPanelSan.setLayout(new java.awt.BorderLayout(0, 5));

        jPanelSanN.setLayout(new java.awt.GridLayout(2, 1));

        jlBreachAbstract.setForeground(new java.awt.Color(0, 102, 102));
        jlBreachAbstract.setText("Falta cometida:*");
        jPanelSanN.add(jlBreachAbstract);

        moTextBreachAbstract.setText("Text");
        jPanelSanN.add(moTextBreachAbstract);

        jPanelSan.add(jPanelSanN, java.awt.BorderLayout.NORTH);

        jPanelSanC.setLayout(new java.awt.BorderLayout());

        jPanelSanC1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanelSanC11.setPreferredSize(new java.awt.Dimension(400, 128));
        jPanelSanC11.setLayout(new java.awt.BorderLayout());

        jlBreachDescrip.setForeground(new java.awt.Color(0, 102, 102));
        jlBreachDescrip.setText("Descripción de la falta:*");
        jlBreachDescrip.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelSanC11.add(jlBreachDescrip, java.awt.BorderLayout.PAGE_START);

        jspBreachDescrip.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspBreachDescrip.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspBreachDescrip.setPreferredSize(new java.awt.Dimension(100, 125));

        jtaBreachDescrip.setColumns(20);
        jtaBreachDescrip.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtaBreachDescrip.setLineWrap(true);
        jtaBreachDescrip.setRows(5);
        jtaBreachDescrip.setText("The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.");
        jtaBreachDescrip.setWrapStyleWord(true);
        jspBreachDescrip.setViewportView(jtaBreachDescrip);

        jPanelSanC11.add(jspBreachDescrip, java.awt.BorderLayout.CENTER);

        jPanelSanC1.add(jPanelSanC11);

        jPanelSanC12.setPreferredSize(new java.awt.Dimension(400, 128));
        jPanelSanC12.setLayout(new java.awt.BorderLayout());

        jlOffenderComments1.setForeground(new java.awt.Color(0, 102, 102));
        jlOffenderComments1.setText("Comentarios iniciales del empleado:");
        jlOffenderComments1.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelSanC12.add(jlOffenderComments1, java.awt.BorderLayout.PAGE_START);

        jspOffenderComments1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspOffenderComments1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspOffenderComments1.setPreferredSize(new java.awt.Dimension(100, 125));

        jtaOffenderComments1.setColumns(20);
        jtaOffenderComments1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtaOffenderComments1.setLineWrap(true);
        jtaOffenderComments1.setRows(5);
        jtaOffenderComments1.setText("The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.");
        jtaOffenderComments1.setWrapStyleWord(true);
        jspOffenderComments1.setViewportView(jtaOffenderComments1);

        jPanelSanC12.add(jspOffenderComments1, java.awt.BorderLayout.CENTER);

        jPanelSanC1.add(jPanelSanC12);

        jPanelSanC13.setPreferredSize(new java.awt.Dimension(400, 128));
        jPanelSanC13.setLayout(new java.awt.BorderLayout());

        jlOffenderComments2.setForeground(new java.awt.Color(0, 102, 102));
        jlOffenderComments2.setText("Comentarios finales del empleado:");
        jlOffenderComments2.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelSanC13.add(jlOffenderComments2, java.awt.BorderLayout.PAGE_START);

        jspOffenderComments2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspOffenderComments2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jspOffenderComments2.setPreferredSize(new java.awt.Dimension(100, 125));

        jtaOffenderComments2.setColumns(20);
        jtaOffenderComments2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtaOffenderComments2.setLineWrap(true);
        jtaOffenderComments2.setRows(5);
        jtaOffenderComments2.setText("The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.");
        jtaOffenderComments2.setWrapStyleWord(true);
        jspOffenderComments2.setViewportView(jtaOffenderComments2);

        jPanelSanC13.add(jspOffenderComments2, java.awt.BorderLayout.CENTER);

        jPanelSanC1.add(jPanelSanC13);

        jPanelSanC.add(jPanelSanC1, java.awt.BorderLayout.PAGE_START);

        jPanelSanC2.setLayout(new java.awt.GridLayout(3, 0));

        jPanelSanC21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        jlEndingNotes.setForeground(new java.awt.Color(0, 102, 102));
        jlEndingNotes.setText("Comentarios finales:");
        jlEndingNotes.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelSanC21.add(jlEndingNotes);

        jPanelSanC2.add(jPanelSanC21);

        jPanelSanC22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jcbEndingNotes.setEditable(true);
        jcbEndingNotes.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanelSanC22.add(jcbEndingNotes);

        jPanelSanC2.add(jPanelSanC22);

        jPanelSanC23.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        moBoolOffenderSign.setText("El empleado firmó");
        moBoolOffenderSign.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanelSanC23.add(moBoolOffenderSign);

        moBoolOffenderDis.setText("El empleado fue desvinculado");
        moBoolOffenderDis.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanelSanC23.add(moBoolOffenderDis);

        jPanelSanC2.add(jPanelSanC23);

        jPanelSanC.add(jPanelSanC2, java.awt.BorderLayout.CENTER);

        jPanelSan.add(jPanelSanC, java.awt.BorderLayout.CENTER);

        jPanel.add(jPanelSan, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanelDoc;
    private javax.swing.JPanel jPanelDocC;
    private javax.swing.JPanel jPanelDocC1;
    private javax.swing.JPanel jPanelDocC11;
    private javax.swing.JPanel jPanelDocN;
    private javax.swing.JPanel jPanelDocN1;
    private javax.swing.JPanel jPanelDocN10;
    private javax.swing.JPanel jPanelDocN11;
    private javax.swing.JPanel jPanelDocN12;
    private javax.swing.JPanel jPanelDocN2;
    private javax.swing.JPanel jPanelDocN3;
    private javax.swing.JPanel jPanelDocN4;
    private javax.swing.JPanel jPanelDocN5;
    private javax.swing.JPanel jPanelDocN6;
    private javax.swing.JPanel jPanelDocN7;
    private javax.swing.JPanel jPanelDocN8;
    private javax.swing.JPanel jPanelDocN9;
    private javax.swing.JPanel jPanelDocS;
    private javax.swing.JPanel jPanelDocS1;
    private javax.swing.JPanel jPanelSan;
    private javax.swing.JPanel jPanelSanC;
    private javax.swing.JPanel jPanelSanC1;
    private javax.swing.JPanel jPanelSanC11;
    private javax.swing.JPanel jPanelSanC12;
    private javax.swing.JPanel jPanelSanC13;
    private javax.swing.JPanel jPanelSanC2;
    private javax.swing.JPanel jPanelSanC21;
    private javax.swing.JPanel jPanelSanC22;
    private javax.swing.JPanel jPanelSanC23;
    private javax.swing.JPanel jPanelSanN;
    private javax.swing.JButton jbPickEmployeeBoss;
    private javax.swing.JButton jbPickEmployeeHumanResources;
    private javax.swing.JButton jbPickEmployeeOffender;
    private javax.swing.JButton jbPickEmployeeUnion_n;
    private javax.swing.JButton jbPickEmployeeWitness1;
    private javax.swing.JButton jbPickEmployeeWitness2;
    private javax.swing.JButton jbPickPreceptSubsections;
    private javax.swing.JButton jbViewFile;
    private javax.swing.JComboBox jcbEndingNotes;
    private javax.swing.JCheckBox jckOffenderActive;
    private javax.swing.JCheckBox jckOffenderUnionized;
    private javax.swing.JLabel jlBreachAbstract;
    private javax.swing.JLabel jlBreachDescrip;
    private javax.swing.JLabel jlDatetimeEnd;
    private javax.swing.JLabel jlDatetimeEndHelp;
    private javax.swing.JLabel jlDatetimeStart;
    private javax.swing.JLabel jlDatetimeStartHelp;
    private javax.swing.JLabel jlDoc;
    private javax.swing.JLabel jlEmployeeBoss;
    private javax.swing.JLabel jlEmployeeHumanResources;
    private javax.swing.JLabel jlEmployeeHumanResourcesHelp;
    private javax.swing.JLabel jlEmployeeOffender;
    private javax.swing.JLabel jlEmployeeUnion_n;
    private javax.swing.JLabel jlEmployeeWitness1;
    private javax.swing.JLabel jlEmployeeWitness2;
    private javax.swing.JLabel jlEndingNotes;
    private javax.swing.JLabel jlFilevault;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlOffenderComments1;
    private javax.swing.JLabel jlOffenderComments2;
    private javax.swing.JLabel jlOffenderDepartment;
    private javax.swing.JLabel jlOffenderPosition;
    private javax.swing.JLabel jlPreceptSubsections;
    private javax.swing.JScrollPane jspBreachDescrip;
    private javax.swing.JScrollPane jspOffenderComments1;
    private javax.swing.JScrollPane jspOffenderComments2;
    private javax.swing.JScrollPane jspPreceptSubsections;
    private javax.swing.JTextArea jtaBreachDescrip;
    private javax.swing.JTextArea jtaOffenderComments1;
    private javax.swing.JTextArea jtaOffenderComments2;
    private javax.swing.JTextArea jtaPreceptSubsections;
    private javax.swing.JTextField jtfCompanyBranchCode;
    private javax.swing.JTextField jtfDocCode;
    private javax.swing.JTextField jtfDocName;
    private javax.swing.JTextField jtfEmployeeBoss;
    private javax.swing.JTextField jtfEmployeeHumanResources;
    private javax.swing.JTextField jtfEmployeeOffender;
    private javax.swing.JTextField jtfEmployeeUnion_n;
    private javax.swing.JTextField jtfEmployeeWitness1;
    private javax.swing.JTextField jtfEmployeeWitness2;
    private javax.swing.JTextField jtfFileType;
    private javax.swing.JTextField jtfFilevaultId;
    private javax.swing.JTextField jtfFilevaultTs;
    private javax.swing.JTextField jtfLocality;
    private javax.swing.JTextField jtfNumber;
    private javax.swing.JTextField jtfOffenderDepartmentCode;
    private javax.swing.JTextField jtfOffenderDepartmentName;
    private javax.swing.JTextField jtfOffenderPositionCode;
    private javax.swing.JTextField jtfOffenderPositionName;
    private javax.swing.JTextField jtfState;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolHumanResourcesWitness1;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolHumanResourcesWitness2;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolOffenderDis;
    private sa.lib.gui.bean.SBeanFieldBoolean moBoolOffenderSign;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeEnd;
    private sa.lib.gui.bean.SBeanFieldDatetime moDatetimeStart;
    private sa.lib.gui.bean.SBeanFieldText moTextBreachAbstract;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 960, 600);

        moDatetimeStart.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeStart), true);
        moDatetimeEnd.setDateSettings(miClient, SGuiUtils.getLabelName(jlDatetimeEnd), true);
        moBoolHumanResourcesWitness1.setBooleanSettings(moBoolHumanResourcesWitness1.getText(), false);
        moBoolHumanResourcesWitness2.setBooleanSettings(moBoolHumanResourcesWitness2.getText(), false);
        moTextBreachAbstract.setTextSettings(SGuiUtils.getLabelName(jlBreachAbstract), 100);
        moTextBreachAbstract.setTextCaseType(0);
        
        jcbEndingNotes.setEditable(true);
        moBoolOffenderSign.setBooleanSettings(moBoolOffenderSign.getText(), false);
        moBoolOffenderDis.setBooleanSettings(moBoolOffenderDis.getText(), false);
        
        moFields.addField(moDatetimeStart);
        moFields.addField(moDatetimeEnd);
        moFields.addField(moBoolHumanResourcesWitness1);
        moFields.addField(moBoolHumanResourcesWitness2);
        moFields.addField(moTextBreachAbstract);
        moFields.addField(moBoolOffenderSign);
        moFields.addField(moBoolOffenderDis);

        moFields.setFormButton(jbSave);
        
        moPickerEmployee = new SPickerEmployee(miClient);
        moPickerPreceptSubsections = new SPickerPreceptSubsections(miClient);
        moEmployeesMap = new HashMap<>();
        
        try {
            mnCfgParamHrsDepartmentId = SLibUtils.parseInt(SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_DOC_HRS_DEP));
            mnCfgParamHrsRepCompanyId = SLibUtils.parseInt(SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_DOC_HRS_REP_COM));
            mnCfgParamHrsRepUnionId = SLibUtils.parseInt(SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_DOC_HRS_REP_UNI));
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        
        mnPrivilegeLevel = ((SClientInterface) miClient).getSessionXXX().getUser().hasRight((SClientInterface) miClient, SDataConstantsSys.PRV_HRS_DOC_ADM_REC).Level;
    }
    
    private void validateShowForm() throws Exception {
        msCanShowFormMessage = "";
        mbCanShowForm = true;
        
        int[] brancKey = ((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey();
        
        if (brancKey == null || brancKey[0] == 0) {
            msCanShowFormMessage = "Tu sesión de usuario no tiene seleccionada una sucursal de la empresa.";
            mbCanShowForm = false;
        }
        else if (mnPrivilegeLevel < SUtilConsts.LEV_CAPTURE) {
            msCanShowFormMessage = "Tu usuario no tiene permiso para capturar registros.";
            mbCanShowForm = false;
        }
        else if (mnPrivilegeLevel == SUtilConsts.LEV_CAPTURE && ((SDataUser) miClient.getSession().getUser()).getFkBizPartnerId_n() == 0) {
            msCanShowFormMessage = "Tu usuario no tiene asignado un asociado de negocios.";
            mbCanShowForm = false;
        }
        else if (mnCfgParamHrsDepartmentId == 0) {
            msCanShowFormMessage = "No se ha configurado cuál es el departamento de RRHH.";
            mbCanShowForm = false;
        }
        else if (mnCfgParamHrsRepCompanyId == 0) {
            msCanShowFormMessage = "No se ha configurado quién es el representante patronal.";
            mbCanShowForm = false;
        }
        
        if (!msCanShowFormMessage.isEmpty()) {
            throw new Exception(msCanShowFormMessage);
        }
    }
    
    private String getEmployeeName(final int employeeId) {
        String name = moEmployeesMap.get(employeeId);
        
        if (name == null) {
            name = (String) miClient.getSession().readField(SModConsts.HRSU_EMP, new int[] { employeeId }, SDbRegistry.FIELD_NAME);
            moEmployeesMap.put(employeeId, name);
        }
        
        return name;
    }
    
    private void showEmployee(final int employeeMode, final int employeeId, final boolean showOffenderData) {
        int effectiveId = 0;
        JTextField employee = null;
        
        switch (employeeMode) {
            case SPickerEmployee.MODE_OFFENDER:
                mnEmployeeOffenderId = effectiveId = employeeId;
                employee = jtfEmployeeOffender;
                break;
                
            case SPickerEmployee.MODE_BOSS:
                mnEmployeeBossId = effectiveId = employeeId;
                employee = jtfEmployeeBoss;
                break;
                
            case SPickerEmployee.MODE_REP_COM:
                mnEmployeeHumanResourcesId = effectiveId = employeeId;
                employee = jtfEmployeeHumanResources;
                break;
                
            case SPickerEmployee.MODE_REP_UNI:
                mnEmployeeUnionId_n = effectiveId = employeeId;
                employee = jtfEmployeeUnion_n;
                break;
                
            case SPickerEmployee.MODE_WITNESS_1:
                mnEmployeeWitness1 = effectiveId = employeeId;
                employee = jtfEmployeeWitness1;
                break;
                
            case SPickerEmployee.MODE_WITNESS_2:
                mnEmployeeWitness2 = effectiveId = employeeId;
                employee = jtfEmployeeWitness2;
                break;
                
            default:
                // nothing
        }
        
        // validate special cases:
        
        if (employeeMode == SPickerEmployee.MODE_OFFENDER) {
            if (mnEmployeeOffenderId == 0) {
                // clear offender data:
                
                moOffender = null;

                if (showOffenderData) {
                    showOffenderData(
                            0, 
                            0, 
                            false, 
                            false);
                }
            }
            else {
                // get offender data:
                
                moOffender = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { mnEmployeeOffenderId }, SDbConsts.MODE_VERBOSE);

                if (showOffenderData) {
                    showOffenderData(
                            moOffender.getFkDepartmentId(), 
                            moOffender.getFkPositionId(), 
                            moOffender.isUnionized(), 
                            moOffender.isActive());
                }
            }
        }
        
        // render effective employee's name:
        
        String effectiveName = effectiveId == 0 ? "" : getEmployeeName(effectiveId);
        
        if (employee != null) {
            employee.setText(effectiveName);
            employee.setCaretPosition(0);
        }
    }
    
    private void showOffenderData(final int departmentId, final int positionId, final boolean unionized, final boolean active) {
        mnOffenderDepartmentId = departmentId;
        mnOffenderPositionId = positionId;
        
        if (mnOffenderDepartmentId == 0) {
            jtfOffenderDepartmentName.setText("");
            jtfOffenderDepartmentCode.setText("");
        }
        else {
            jtfOffenderDepartmentName.setText((String) miClient.getSession().readField(SModConsts.HRSU_DEP, new int[] { mnOffenderDepartmentId }, SDbRegistry.FIELD_NAME));
            jtfOffenderDepartmentCode.setText((String) miClient.getSession().readField(SModConsts.HRSU_DEP, new int[] { mnOffenderDepartmentId }, SDbRegistry.FIELD_CODE));
            
            jtfOffenderDepartmentName.setCaretPosition(0);
            jtfOffenderDepartmentCode.setCaretPosition(0);
        }
        
        if (mnOffenderPositionId == 0) {
            jtfOffenderPositionName.setText("");
            jtfOffenderPositionCode.setText("");
        }
        else {
            jtfOffenderPositionName.setText((String) miClient.getSession().readField(SModConsts.HRSU_POS, new int[] { mnOffenderPositionId }, SDbRegistry.FIELD_NAME));
            jtfOffenderPositionCode.setText((String) miClient.getSession().readField(SModConsts.HRSU_POS, new int[] { mnOffenderPositionId }, SDbRegistry.FIELD_CODE));

            jtfOffenderPositionName.setCaretPosition(0);
            jtfOffenderPositionCode.setCaretPosition(0);
        }
        
        
        jckOffenderUnionized.setSelected(unionized);
        jckOffenderActive.setSelected(active);
        
        jbPickEmployeeUnion_n.setEnabled(unionized);
        showEmployee(SPickerEmployee.MODE_REP_UNI, !unionized ? 0 : mnCfgParamHrsRepUnionId, false);
    }
    
    private void updatePreceptSubsections(final ArrayList<int[]> preceptSubsectionKeys) {
        maPreceptSubsectionKeys = new ArrayList<>(preceptSubsectionKeys);
        jtaPreceptSubsections.setText(SDocUtils.composePreceptSubsections(miClient.getSession(), maPreceptSubsectionKeys, "\n"));
        jtaPreceptSubsections.setCaretPosition(0);
    }
    
    private void actionPerformedPickEmployee(final int employeeMode, final JTextField employee, final boolean showOffenderData) {
        moPickerEmployee.resetForm();
        moPickerEmployee.setValue(SPickerEmployee.VAL_MODE, employeeMode);
        moPickerEmployee.setValue(SModConsts.HRSU_EMP, employee.getText());
        moPickerEmployee.setVisible(true);
        
        if (moPickerEmployee.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            showEmployee(employeeMode, (int) moPickerEmployee.getValue(SModConsts.HRSU_EMP), showOffenderData);
        }
    }

    @SuppressWarnings("unchecked")
    private void actionPerformedPickPreceptSubsections() {
        moPickerPreceptSubsections.resetForm();
        moPickerPreceptSubsections.setValue(SPickerPreceptSubsections.VAL_PREC_SUBSEC_KEYS, maPreceptSubsectionKeys);
        moPickerPreceptSubsections.setVisible(true);
        
        if (moPickerPreceptSubsections.getFormResult() == SGuiConsts.FORM_RESULT_OK) {
            updatePreceptSubsections((ArrayList<int[]>) moPickerPreceptSubsections.getValue(SPickerPreceptSubsections.VAL_PREC_SUBSEC_KEYS));
        }
    }
    
    private void actionPerformedViewFile() {
        if (jbViewFile.isEnabled()) {
            try {
                SDocUtils.viewFile(miClient, SDocUtils.BUCKET_DOC_ADM_REC, moRegistry.getFilevaultId());
            }
            catch (Exception e) {
                SLibUtils.showException(this, e);
            }
        }
    }
    
    @Override
    public void addAllListeners() {
        jbPickEmployeeOffender.addActionListener(this);
        jbPickEmployeeBoss.addActionListener(this);
        jbPickEmployeeHumanResources.addActionListener(this);
        jbPickEmployeeUnion_n.addActionListener(this);
        jbPickEmployeeWitness1.addActionListener(this);
        jbPickEmployeeWitness2.addActionListener(this);
        jbPickPreceptSubsections.addActionListener(this);
        jbViewFile.addActionListener(this);
        jcbEndingNotes.getEditor().getEditorComponent().addFocusListener(this);
    }

    @Override
    public void removeAllListeners() {
        jbPickEmployeeOffender.removeActionListener(this);
        jbPickEmployeeBoss.removeActionListener(this);
        jbPickEmployeeHumanResources.removeActionListener(this);
        jbPickEmployeeUnion_n.removeActionListener(this);
        jbPickEmployeeWitness1.removeActionListener(this);
        jbPickEmployeeWitness2.removeActionListener(this);
        jbPickPreceptSubsections.removeActionListener(this);
        jbViewFile.removeActionListener(this);
        jcbEndingNotes.getEditor().getEditorComponent().removeFocusListener(this);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void reloadCatalogues() {
        try {
            jcbEndingNotes.removeAllItems();
            String breaches[] = SCfgUtils.getParamValue(miClient.getSession().getStatement(), SDataConstantsSys.CFG_PARAM_DOC_HRS_NTS_ADM_REC).split(";");
            for (String breach : breaches) {
                jcbEndingNotes.addItem(breach);
            }
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    @Override
    @SuppressWarnings("unchecked")
    public void setRegistry(SDbRegistry registry) throws Exception {
        validateShowForm();
        
        moRegistry = (SDbDocAdminRecord) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();
        
        if (moRegistry.isRegistryNew()) {
            boolean isBeingCopied = moRegistry.getPkDocAdminRecordId() != 0;
            
            moRegistry.initPrimaryKey();
            jtfRegistryKey.setText("");
            
            moRegistry.setNumber(SDbDocAdminRecord.getNextNumber(miClient.getSession()));
            moRegistry.setRecordTsStart(miClient.getSession().getCurrentDate());
            moRegistry.setRecordTsEnd(miClient.getSession().getCurrentDate());
            moRegistry.setFkDocumentId(SDocUtils.getDocCurrentVersionId(miClient.getSession(), SModSysConsts.CFGS_TP_DOC_ADM_REC));
            moRegistry.setFkCompanyBranchId(((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey()[0]);
            
            SDataBizPartnerBranch companyBranch = new SDataBizPartnerBranch();
            companyBranch.read(((SSessionCustom) miClient.getSession().getSessionCustom()).getCurrentBranchKey(), miClient.getSession().getStatement());
            
            moRegistry.setFkCompanyBranchAddressId(companyBranch.getDbmsBizPartnerBranchAddressOfficial().getPkAddressId());
            moRegistry.setLocality(companyBranch.getDbmsBizPartnerBranchAddressOfficial().getLocality());
            moRegistry.setFkStateId(companyBranch.getDbmsBizPartnerBranchAddressOfficial().getFkStateId_n());
            
            mnEmployeeHumanResourcesId = mnCfgParamHrsRepCompanyId;
            mnHumanResoursesDepartmentId = mnCfgParamHrsDepartmentId;
            
            mnEmployeeWitness1 = 0;
            mnEmployeeWitness2 = ((SDataUser) miClient.getSession().getUser()).getFkBizPartnerId_n();
            
            moRegistry.setHumanResourcesWitness1(false);
            moRegistry.setHumanResourcesWitness2(true);
            
            if (isBeingCopied && !moRegistry.getFilevaultId().isEmpty()) {
                miClient.showMsgBoxInformation("Se eliminará la información de control del resguardo del archivo del documento (ID: " + moRegistry.getFilevaultId() + ").\n"
                        + "No es recomendable que esta nueva copia tenga la misma información de control que el documento original.");
                moRegistry.setFilevaultId("");
                moRegistry.setFilevaultTs_n(null);
            }
        }
        else {
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
            
            mnEmployeeHumanResourcesId = moRegistry.getFkEmployeeHumanResourcesId();
            mnHumanResoursesDepartmentId = moRegistry.getFkHumanResourcesDepartmentId();
            
            mnEmployeeWitness1 = moRegistry.getFkEmployeeWitness1Id();
            mnEmployeeWitness2 = moRegistry.getFkEmployeeWitness2Id();
        }
        
        mnEmployeeOffenderId = moRegistry.getFkEmployeeOffenderId();
        mnEmployeeBossId = moRegistry.getFkEmployeeBossId();
        mnEmployeeUnionId_n = moRegistry.getFkEmployeeUnionId_n();
        
        SDbDocument document = (SDbDocument) miClient.getSession().readRegistry(SModConsts.CFGU_DOC, new int[] { moRegistry.getFkDocumentId() });

        jtfDocName.setText(document.getName());
        jtfDocName.setCaretPosition(0);
        
        jtfDocCode.setText(document.getCode());
        jtfDocCode.setCaretPosition(0);
        
        jtfNumber.setText("" + moRegistry.getNumber() + (moRegistry.isRegistryNew() ? "*" : ""));
        jtfNumber.setCaretPosition(0);
        
        jtfCompanyBranchCode.setText((String) miClient.getSession().readField(SModConsts.BPSU_BPB, new int[] { moRegistry.getFkCompanyBranchId() }, SDbRegistry.FIELD_CODE));
        jtfCompanyBranchCode.setCaretPosition(0);
        
        jtfLocality.setText(moRegistry.getLocality());
        jtfLocality.setCaretPosition(0);
        
        jtfState.setText(SDataReadDescriptions.getCatalogueDescription((SClientInterface) miClient, SDataConstants.LOCU_STA, new int[] { moRegistry.getFkStateId() }, SLibConstants.DESCRIPTION_NAME));
        jtfState.setCaretPosition(0);
        
        moDatetimeStart.setValue(moRegistry.getRecordTsStart());
        moDatetimeEnd.setValue(moRegistry.getRecordTsEnd());
        
        showEmployee(SPickerEmployee.MODE_OFFENDER, mnEmployeeOffenderId, false);
        showOffenderData(
                moRegistry.getFkOffenderDepartmentId(), 
                moRegistry.getFkOffenderPositionId(), 
                moRegistry.isOffenderUnionized(), 
                moOffender == null ? false : moOffender.isActive()); // offender just read in method showEmployee()
        
        showEmployee(SPickerEmployee.MODE_BOSS, mnEmployeeBossId, false);
        showEmployee(SPickerEmployee.MODE_REP_COM, mnEmployeeHumanResourcesId, false);
        showEmployee(SPickerEmployee.MODE_REP_UNI, mnEmployeeUnionId_n, false);
        showEmployee(SPickerEmployee.MODE_WITNESS_1, mnEmployeeWitness1, false);
        showEmployee(SPickerEmployee.MODE_WITNESS_2, mnEmployeeWitness2, false);
        
        jlEmployeeHumanResourcesHelp.setToolTipText("Nombre departamento: " + miClient.getSession().readField(SModConsts.HRSU_DEP, new int[] { mnHumanResoursesDepartmentId }, SDbRegistry.FIELD_NAME));
        moBoolHumanResourcesWitness1.setValue(moRegistry.isHumanResourcesWitness1());
        moBoolHumanResourcesWitness2.setValue(moRegistry.isHumanResourcesWitness2());
        
        updatePreceptSubsections(moRegistry.getPreceptSubsectionKeys());
        
        jtfFilevaultId.setText(moRegistry.getFilevaultId());
        jtfFilevaultId.setCaretPosition(0);
        
        jtfFilevaultTs.setText(moRegistry.getFilevaultTs_n() == null ? "" : SLibUtils.DateFormatDatetime.format(moRegistry.getFilevaultTs_n()));
        jtfFilevaultTs.setCaretPosition(0);
        
        jtfFileType.setText(moRegistry.getFileType());
        jtfFileType.setCaretPosition(0);
        
        moTextBreachAbstract.setValue(moRegistry.getBreachAbstract());
        
        jtaBreachDescrip.setText(moRegistry.getBreachDescrip());
        jtaBreachDescrip.setCaretPosition(0);

        jtaOffenderComments1.setText(moRegistry.getOffenderComments1());
        jtaOffenderComments1.setCaretPosition(0);

        jtaOffenderComments2.setText(moRegistry.getOffenderComments2());
        jtaOffenderComments2.setCaretPosition(0);
        
        jcbEndingNotes.addItem(moRegistry.getEndingNotes());
        jcbEndingNotes.setSelectedIndex(jcbEndingNotes.getItemCount()-1);
        ((JTextField)jcbEndingNotes.getEditor().getEditorComponent()).setCaretPosition(0);

        moBoolOffenderSign.setValue(moRegistry.isOffenderSigned());
        moBoolOffenderDis.setValue(moRegistry.isOffenderDismissed());

        setFormEditable(true);
        
        jbViewFile.setEnabled(!moRegistry.getFilevaultId().isEmpty());
        jbSave.setEnabled(moRegistry.getFilevaultId().isEmpty());
        
        if (moRegistry.isRegistryNew()) {
            
        }
        else {
            
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbDocAdminRecord registry = moRegistry.clone();

        if (registry.isRegistryNew()) {
            registry.setNumber(0); // reset number so it can be regenerated
        }

        //registry.setPkDocBreachId(...);
        //registry.setNumber(...);
        //registry.setLocality(...); // immutable member
        registry.setRecordTsStart(moDatetimeStart.getValue());
        registry.setRecordTsEnd(moDatetimeEnd.getValue());
        registry.setBreachAbstract(moTextBreachAbstract.getValue());
        registry.setBreachDescrip(jtaBreachDescrip.getText());
        registry.setOffenderComments1(jtaOffenderComments1.getText());
        registry.setEndingNotes(jcbEndingNotes.getSelectedItem() == null ? "" : jcbEndingNotes.getSelectedItem().toString());
        registry.setOffenderComments2(jtaOffenderComments2.getText());
        //registry.setFilevaultId(...);
        //registry.setFilevaultTs_n(...);
        registry.setOffenderUnionized(jckOffenderUnionized.isSelected());
        registry.setOffenderSigned(moBoolOffenderSign.getValue());
        registry.setOffenderDismissed(moBoolOffenderDis.getValue());
        registry.setHumanResourcesWitness1(moBoolHumanResourcesWitness1.getValue());
        registry.setHumanResourcesWitness2(moBoolHumanResourcesWitness2.getValue());
        //registry.setDeleted(...);
        //registry.setFkDocumentId(...); // immutable member
        //registry.setFkCompanyBranchId(...); // immutable member
        //registry.setFkCompanyBranchAddressId(...); // immutable member
        //registry.setFkStateId(...); // immutable member
        registry.setFkEmployeeOffenderId(mnEmployeeOffenderId);
        registry.setFkEmployeeBossId(mnEmployeeBossId);
        registry.setFkEmployeeUnionId_n(mnEmployeeUnionId_n);
        registry.setFkEmployeeHumanResourcesId(mnEmployeeHumanResourcesId);
        registry.setFkEmployeeWitness1Id(mnEmployeeWitness1);
        registry.setFkEmployeeWitness2Id(mnEmployeeWitness2);
        registry.setFkHumanResourcesDepartmentId(mnHumanResoursesDepartmentId);
        registry.setFkOffenderDepartmentId(mnOffenderDepartmentId);
        registry.setFkOffenderPositionId(mnOffenderPositionId);
        //registry.setFkUserInsertId(...);
        //registry.setFkUserUpdateId(...);
        //registry.setTsUserInsert(...);
        //registry.setTsUserUpdate(...);
        
        registry.setPreceptSubsectionKeys(maPreceptSubsectionKeys);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            LocalTime localTime = new LocalTime(moDatetimeStart.getValue());
            if (localTime.getMillisOfDay() == 0) {
                if (miClient.showMsgBoxConfirm("¿Estás seguro/a que no deseas espeficar la hora para el campo '" + moDatetimeStart.getFieldName() + "'?") != JOptionPane.YES_OPTION) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DIF + "'" + moDatetimeStart.getFieldName() + "':\n"
                            + "horas, minutos y segundos en formato: hh:mm:ss (24 hr)");
                    validation.setComponent(moDatetimeStart.getComponent().getEditor());
                }
            }
        }
        
        if (validation.isValid()) {
            if (mnEmployeeOffenderId == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeOffender) + "'.");
                validation.setComponent(jbPickEmployeeOffender);
            }
            else if (mnEmployeeBossId == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeBoss) + "'.");
                validation.setComponent(jbPickEmployeeBoss);
            }
            else if (mnEmployeeHumanResourcesId == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeHumanResources) + "'.");
                validation.setComponent(jbPickEmployeeHumanResources);
            }
            else if (jckOffenderUnionized.isSelected() && mnEmployeeUnionId_n == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeUnion_n) + "'.");
                validation.setComponent(jbPickEmployeeUnion_n);
            }
            else if (mnEmployeeWitness1 == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeWitness1) + "'.");
                validation.setComponent(jbPickEmployeeWitness1);
            }
            else if (mnEmployeeWitness2 == 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlEmployeeWitness2) + "'.");
                validation.setComponent(jbPickEmployeeWitness2);
            }
            else {
                jtaPreceptSubsections.setText(SLibUtils.textTrim(jtaPreceptSubsections.getText()));
                jtaBreachDescrip.setText(SLibUtils.textTrim(jtaBreachDescrip.getText()));
                jtaOffenderComments1.setText(SLibUtils.textTrim(jtaOffenderComments1.getText()));
                jtaOffenderComments2.setText(SLibUtils.textTrim(jtaOffenderComments2.getText()));
                
                if (jtaPreceptSubsections.getText().isEmpty()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlPreceptSubsections) + "'.");
                    validation.setComponent(jbPickPreceptSubsections);
                }
                else if (jtaBreachDescrip.getText().isEmpty()) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlBreachDescrip) + "'.");
                    validation.setComponent(jtaBreachDescrip);
                }
                else if (jtaOffenderComments1.getText().isEmpty() && miClient.showMsgBoxConfirm("¿Estás seguro/a que deseas dejar sin valor al campo '" + SGuiUtils.getLabelName(jlOffenderComments1) + "'?") != JOptionPane.YES_OPTION) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlOffenderComments1) + "'.");
                    validation.setComponent(jtaOffenderComments1);
                }
                else if (jtaOffenderComments2.getText().isEmpty() && miClient.showMsgBoxConfirm("¿Estás seguro/a que deseas dejar sin valor al campo '" + SGuiUtils.getLabelName(jlOffenderComments2) + "'?") != JOptionPane.YES_OPTION) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlOffenderComments2) + "'.");
                    validation.setComponent(jtaOffenderComments2);
                }
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbPickEmployeeOffender) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_OFFENDER, jtfEmployeeOffender, true);
            }
            else if (button == jbPickEmployeeBoss) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_BOSS, jtfEmployeeBoss, false);
            }
            else if (button == jbPickEmployeeHumanResources) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_REP_COM, jtfEmployeeHumanResources, false);
            }
            else if (button == jbPickEmployeeUnion_n) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_REP_UNI, jtfEmployeeUnion_n, false);
            }
            else if (button == jbPickEmployeeWitness1) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_WITNESS_1, jtfEmployeeWitness1, false);
            }
            else if (button == jbPickEmployeeWitness2) {
                actionPerformedPickEmployee(SPickerEmployee.MODE_WITNESS_2, jtfEmployeeWitness2, false);
            }
            else if (button == jbPickPreceptSubsections) {
                actionPerformedPickPreceptSubsections();
            }
            else if (button == jbViewFile) {
                actionPerformedViewFile();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent e) { }

    @Override
    @SuppressWarnings("unchecked")
    public void focusLost(FocusEvent e) {
        if (jcbEndingNotes.getSelectedItem() != null && !jcbEndingNotes.getSelectedItem().toString().isEmpty()) {
            String text = jcbEndingNotes.getSelectedItem().toString();
            jcbEndingNotes.removeItem(jcbEndingNotes.getSelectedItem());
            jcbEndingNotes.addItem(SLibUtils.textTrim(text).substring(0, 100));
            jcbEndingNotes.setSelectedIndex(jcbEndingNotes.getItemCount()-1);
            ((JTextField)jcbEndingNotes.getEditor().getEditorComponent()).setCaretPosition(0);
        }
    }
}
