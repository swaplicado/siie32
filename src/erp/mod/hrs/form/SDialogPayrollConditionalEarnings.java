/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.utils.SPrepayrollUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JTextField;
import sa.lib.SLibConsts;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Edwin Carmona, Sergio Flores
 */
public class SDialogPayrollConditionalEarnings extends SBeanFormDialog implements FocusListener, ActionListener {
    
    private ArrayList<Integer> mlBonusIds;
    
    /**
     * Creates new form SDialogPayrollConditionalEarnings
     */
    public SDialogPayrollConditionalEarnings(SGuiClient client, String title) {
        setFormSettings(client, SModConsts.HRSX_PAY_LAY, SLibConsts.UNDEFINED, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sBeanOptionPicker1 = new sa.lib.gui.bean.SBeanOptionPicker();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlBonus = new javax.swing.JLabel();
        moBonusKey = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();

        setTitle("Layout movimientos empleados");

        jPanel1.setMaximumSize(new java.awt.Dimension(450, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Perpeciones a pagar:"));
        jPanel15.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel15.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel16.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel16.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBonus.setText("Bono:*");
        jlBonus.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlBonus);

        moBonusKey.setPreferredSize(new java.awt.Dimension(225, 23));
        jPanel4.add(moBonusKey);

        jPanel16.add(jPanel4);

        jPanel15.add(jPanel16, java.awt.BorderLayout.NORTH);

        jPanel9.setMaximumSize(new java.awt.Dimension(450, 350));
        jPanel9.setLayout(new java.awt.BorderLayout());
        jPanel15.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel15, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlBonus;
    private sa.lib.gui.bean.SBeanFieldKey moBonusKey;
    private sa.lib.gui.bean.SBeanOptionPicker sBeanOptionPicker1;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 450, 300);
        
        jbSave.setText("Aceptar");

        moFields.setFormButton(jbSave);
        moBonusKey.setKeySettings(miClient, SGuiUtils.getLabelName(jlBonus), true);
        
        moFields.addField(moBonusKey);
        reloadCatalogues();
        
        removeAllListeners();
        addAllListeners();
    }

    public void setFormReset() {
    }

    public ArrayList<Integer> getBonusIds() {
        return mlBonusIds;
    }
    
    public int getCurrentBonus() {
        return moBonusKey.getSelectedItem().getPrimaryKey()[0];
    }
    
    public String getCurrentBonusText() {
        return moBonusKey.getSelectedItem().getItem();
    }
    
    public boolean getWithPreviousPayments() {
        return SPrepayrollUtils.isWithPreviousPayment(miClient.getSession(), moBonusKey.getSelectedItem().getPrimaryKey()[0]);
    }
    
    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moBonusKey, SModConsts.HRSS_BONUS, 0, null);
    }
    
    @Override
    public SGuiValidation validateForm() {
        String msg = "";
        SGuiValidation validation = moFields.validateFields();
        
        return validation;
    }
    
    
    @Override
    public void actionSave() {
       if (jbSave.isEnabled()) {
            if (SGuiUtils.computeValidation(miClient, validateForm())) {
                mlBonusIds = new ArrayList<>();
                mlBonusIds.add(moBonusKey.getSelectedItem().getPrimaryKey()[0]);
                
                mnFormResult = SGuiConsts.FORM_RESULT_OK;
                dispose();
            }
        }
    }

    @Override
    public void addAllListeners() {
       
    }

    @Override
    public void removeAllListeners() {
       
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {

    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void focusGained(FocusEvent e) { }

    @Override
    public void focusLost(FocusEvent e) {
        if (e.getSource() instanceof javax.swing.JTextField) {
            JTextField textField = (JTextField) e.getSource();

        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
        }
    }
}
