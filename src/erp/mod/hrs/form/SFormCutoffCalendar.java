/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbPrePayrollCutoffCalendar;
import erp.mod.hrs.db.SHrsConsts;
import java.util.Date;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanForm;

/**
 *
 * @author Edwin Carmona, Sergio Flores
 */
public class SFormCutoffCalendar extends SBeanForm {

    private SDbPrePayrollCutoffCalendar moRegistry;

    /**
     * Creates new form SFormCutoffCalendar
     */
    public SFormCutoffCalendar(SGuiClient client, String title) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, SModConsts.HRS_PRE_PAY_CUT_CAL, SLibConsts.UNDEFINED, title);
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlYear = new javax.swing.JLabel();
        moIntYear = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel7 = new javax.swing.JPanel();
        jlPaymentType = new javax.swing.JLabel();
        moKeyPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel9 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moIntNumber = new sa.lib.gui.bean.SBeanFieldInteger();
        jPanel5 = new javax.swing.JPanel();
        jlCutoffDate = new javax.swing.JLabel();
        moDateCutoffDate = new sa.lib.gui.bean.SBeanFieldDate();
        jlCutoffDateHint = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.GridLayout(4, 1, 0, 5));

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlYear.setForeground(java.awt.Color.blue);
        jlYear.setText("Año:*");
        jlYear.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlYear);

        moIntYear.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel4.add(moIntYear);

        jPanel2.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPaymentType.setText("Período pago:*");
        jlPaymentType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jlPaymentType);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel7.add(moKeyPaymentType);

        jPanel2.add(jPanel7);

        jPanel9.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("Número nómina:*");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlNumber);

        moIntNumber.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(moIntNumber);

        jPanel2.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCutoffDate.setText("Fecha corte:*");
        jlCutoffDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlCutoffDate);
        jPanel5.add(moDateCutoffDate);

        jlCutoffDateHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlCutoffDateHint.setText("(de la prenómina en cuestión)");
        jlCutoffDateHint.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel5.add(jlCutoffDateHint);

        jPanel2.add(jPanel5);

        jPanel1.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jlCutoffDate;
    private javax.swing.JLabel jlCutoffDateHint;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JLabel jlPaymentType;
    private javax.swing.JLabel jlYear;
    private sa.lib.gui.bean.SBeanFieldDate moDateCutoffDate;
    private sa.lib.gui.bean.SBeanFieldInteger moIntNumber;
    private sa.lib.gui.bean.SBeanFieldInteger moIntYear;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPaymentType;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 480, 300);

        moIntYear.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_CAL_YEAR, true);
        moKeyPaymentType.setKeySettings(miClient, SGuiUtils.getLabelName(jlPaymentType), true);
        moIntNumber.setIntegerSettings(SGuiUtils.getLabelName(jlYear.getText()), SGuiConsts.GUI_TYPE_INT_RAW, true);
        moIntNumber.setMaxInteger(SHrsConsts.YEAR_WEEKS_EXTENDED);
        moDateCutoffDate.setDateSettings(miClient, SGuiUtils.getLabelName(jlCutoffDate.getText()), true);

        moFields.addField(moIntYear);
        moFields.addField(moKeyPaymentType);
        moFields.addField(moIntNumber);
        moFields.addField(moDateCutoffDate);

        moFields.setFormButton(jbSave);
    }

    @Override
    public void addAllListeners() {

    }

    @Override
    public void removeAllListeners() {

    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyPaymentType, SModConsts.HRSS_TP_PAY, SLibConsts.UNDEFINED, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        int year = SLibConsts.UNDEFINED;

        moRegistry = (SDbPrePayrollCutoffCalendar) registry;

        mnFormResult = SLibConsts.UNDEFINED;
        mbFirstActivation = true;

        removeAllListeners();
        reloadCatalogues();

        if (moRegistry.isRegistryNew()) {
            moRegistry.initPrimaryKey();
            year = miClient.getSession().getCurrentYear();
            jtfRegistryKey.setText("");
        }
        else {
            year = moRegistry.getYear();
            jtfRegistryKey.setText(SLibUtils.textKey(moRegistry.getPrimaryKey()));
        }

        moIntYear.setValue(year);
        moKeyPaymentType.setValue(new int[] { moRegistry.getFkPaymentTypeId() });
        moIntNumber.setValue(moRegistry.getNumber());
        moDateCutoffDate.setValue(moRegistry.getDateCutoff());

        setFormEditable(true);

        if (moRegistry.isRegistryNew()) {
            moIntYear.setEditable(true);
        }
        else {
            moIntYear.setEditable(false);
        }

        addAllListeners();
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        SDbPrePayrollCutoffCalendar registry = moRegistry.clone();
        
        registry.setYear(moIntYear.getValue());
        registry.setNumber(moIntNumber.getValue());
        registry.setDateCutoff(moDateCutoffDate.getValue());
        registry.setFkPaymentTypeId(moKeyPaymentType.getValue()[0]);

        return registry;
    }

    @Override
    public SGuiValidation validateForm() {
        Date min = null;
        Date max = null;
        SGuiValidation validation = moFields.validateFields();

        if (validation.isValid()) {
            if (moIntYear.getValue() < 2000 || moIntYear.getValue() > 2100) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_VAL_ + "'" + SGuiUtils.getLabelName(jlYear) + "'" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_GREAT_EQUAL + "2001 y" +
                        SGuiConsts.ERR_MSG_FIELD_VAL_LESS_EQUAL + "2100.");
                validation.setComponent(moIntYear);
            }
            else {
                min = SLibTimeUtils.createDate(moIntYear.getValue(), 1, 1);
                max = SLibTimeUtils.createDate(moIntYear.getValue(), 12, 31);

                if (moDateCutoffDate.getValue().before(min) || moDateCutoffDate.getValue().after(max)) {
                    validation.setMessage(SGuiConsts.ERR_MSG_FIELD_DATE_ + "'" + SGuiUtils.getLabelName(jlCutoffDate) + "'" +
                            SGuiConsts.ERR_MSG_FIELD_DATE_GREAT_EQUAL + SLibUtils.DateFormatDate.format(min) + " y" +
                            SGuiConsts.ERR_MSG_FIELD_DATE_LESS_EQUAL + SLibUtils.DateFormatDate.format(max) + ".");
                    validation.setComponent(moDateCutoffDate);
                }
            }
        }

        return validation;
    }
}
