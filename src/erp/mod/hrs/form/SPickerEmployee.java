/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mod.hrs.form;

import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SHrsUtils;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JList;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldKey;
import sa.lib.gui.bean.SBeanFieldText;
import sa.lib.gui.bean.SBeanFormDialog;

/**
 *
 * @author Sergio Flores
 */
public class SPickerEmployee extends SBeanFormDialog implements ActionListener, ItemListener, KeyListener, MouseListener {
    
    public static final int VAL_MODE = 1;
    
    public static final int MODE_OFFENDER = 11;
    public static final int MODE_BOSS = 12;
    public static final int MODE_AUTHOR = 13;
    public static final int MODE_REP_COM = 21;
    public static final int MODE_REP_UNI = 22;
    public static final int MODE_WITNESS_1 = 31;
    public static final int MODE_WITNESS_2 = 32;
    
    public static final HashMap<Integer, String> ModesMap = new HashMap<>();
    
    static {
        ModesMap.put(MODE_OFFENDER, "empleado");
        ModesMap.put(MODE_BOSS, "jefe inmediato");
        ModesMap.put(MODE_AUTHOR, "reporta");
        ModesMap.put(MODE_REP_COM, "representante patronal");
        ModesMap.put(MODE_REP_UNI, "representante sindical");
        ModesMap.put(MODE_WITNESS_1, "testigo 1");
        ModesMap.put(MODE_WITNESS_2, "testigo 2");
    }

    private boolean mbCompaniesEnabled;
    private ArrayList<Employee> maEmployees;

    /**
     * Creates new form SPickerEmployee
     * @param client
     */
    public SPickerEmployee(SGuiClient client, boolean companiesEnabled) {
        setFormSettings(client, SGuiConsts.BEAN_FORM_EDIT, 0, 0, "Seleccionar empleado");
        
        mbCompaniesEnabled = companiesEnabled;
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlCompany = new javax.swing.JLabel();
        moKeyCompany = new sa.lib.gui.bean.SBeanFieldKey();
        jPanel4 = new javax.swing.JPanel();
        jlEmployeeName = new javax.swing.JLabel();
        moTextEmployeeName = new sa.lib.gui.bean.SBeanFieldText();
        jspEmployees = new javax.swing.JScrollPane();
        jlstEmployees = new javax.swing.JList();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar empleado:"));
        jPanel1.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel2.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCompany.setText("Empresa:");
        jlCompany.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlCompany);

        moKeyCompany.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel3.add(moKeyCompany);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEmployeeName.setText("Nombre empleado:");
        jlEmployeeName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel4.add(jlEmployeeName);

        moTextEmployeeName.setText("TEXT");
        moTextEmployeeName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel4.add(moTextEmployeeName);

        jPanel2.add(jPanel4);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        jspEmployees.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jspEmployees.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlstEmployees.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspEmployees.setViewportView(jlstEmployees);

        jPanel1.add(jspEmployees, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jlCompany;
    private javax.swing.JLabel jlEmployeeName;
    private javax.swing.JList jlstEmployees;
    private javax.swing.JScrollPane jspEmployees;
    private sa.lib.gui.bean.SBeanFieldKey moKeyCompany;
    private sa.lib.gui.bean.SBeanFieldText moTextEmployeeName;
    // End of variables declaration//GEN-END:variables

    private void initComponentsCustom() {
        SGuiUtils.setWindowBounds(this, 560, 350);
        
        moKeyCompany.setKeySettings(miClient, SGuiUtils.getLabelName(jlCompany), true);
        moKeyCompany.setEnabled(mbCompaniesEnabled);
        moTextEmployeeName.setTextSettings(SGuiUtils.getLabelName(jlEmployeeName), 202, 0);
        
        moFields.addField(moKeyCompany);
        moFields.addField(moTextEmployeeName);
        
        //moFields.setFormButton(jbSave); // prevent from sendig focus to Save button when user inputs an Enter
        
        reloadCatalogues();
        moKeyCompany.setValue(new int[] { miClient.getSession().getConfigCompany().getCompanyId() });
                
        retrieveEmployees();
    }
    
    private void retrieveEmployees() {
        try {
            maEmployees = new ArrayList<>();
            
            if (moKeyCompany.getSelectedIndex() <= 0) {
                moTextEmployeeName.setEnabled(false);
            }
            else {
                moTextEmployeeName.setEnabled(true);
                
                int company = moKeyCompany.getSelectedItem().getPrimaryKey()[0];
                boolean isThisCompany = company == miClient.getSession().getConfigCompany().getCompanyId();
                
                String sql = "SELECT e.id_emp, b.bp "
                        + "FROM " + SModConsts.TablesMap.get(SModConsts.HRSU_EMP) + " AS e "
                        + (isThisCompany ? "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.HRS_EMP_MEMBER) + " AS em ON em.id_emp = e.id_emp " : "")
                        + "INNER JOIN " + SModConsts.TablesMap.get(SModConsts.BPSU_BP) + " AS b ON b.id_bp = e.id_emp "
                        + "WHERE e.b_act "
                        + (isThisCompany ? "" : "AND e.fk_src_com = " + company + " ")
                        + "ORDER BY b.bp, e.id_emp;";

                try (ResultSet resultSet = miClient.getSession().getStatement().executeQuery(sql)) {
                    while (resultSet.next()) {
                        maEmployees.add(new Employee(resultSet.getInt(1), resultSet.getString(2)));
                    }
                }
            }

            moTextEmployeeName.resetField();
            showEmployees();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    @SuppressWarnings("unchecked")
    private void showEmployees() {
        Vector employees = new Vector();
        String name = moTextEmployeeName.getValue();
        
        if (name.isEmpty()) {
            employees.addAll(maEmployees);
        }
        else {
            for (Employee employee : maEmployees) {
                if (SLibUtils.textToAscii(employee.Name).contains(SLibUtils.textToAscii(name).toUpperCase())) {
                    employees.add(employee);
                }
            }
        }
        
        jlstEmployees.setListData(employees);
        
        if (jlstEmployees.getModel().getSize() > 0) {
            jlstEmployees.setSelectedIndex(0);
        }
    }
    
    private void setEmployee(final String name) {
        try {
            if (mbCompaniesEnabled && name != null && !name.isEmpty()) {
                SDbEmployee employee = SHrsUtils.getEmployeeByName(miClient, name);

                if (employee != null) {
                    int company = 0;

                    if (moKeyCompany.getSelectedIndex() > 0) {
                        company = moKeyCompany.getSelectedItem().getPrimaryKey()[0];
                    }

                    if (company != employee.getFkSourceCompanyId()) {
                        moKeyCompany.setValue(new int[] { employee.getFkSourceCompanyId() }); // triggers item-state-changed event!
                    }
                }
            }

            moTextEmployeeName.setValue(name);
            showEmployees();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void actionPerformedEmployee() {
        jlstEmployees.requestFocusInWindow();
    }
    
    private void itemStateChangedCompany() {
        try {
            retrieveEmployees();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }
    
    private void keyTypedEmployee() {
        showEmployees();
    }
    
    private void keyTypedEmployees(final KeyEvent e) {
        if (jlstEmployees.getSelectedIndex() != -1 && e.getKeyCode() == KeyEvent.VK_ENTER) {
            actionSave();
        }
    }
    
    private void mouseClickedEmployees(MouseEvent e) {
        if (jlstEmployees.getSelectedIndex() != -1 && e.getClickCount() == 2) {
            actionSave();
        }
    }
    
    @Override
    public void resetForm() {
        mnFormResult = 0;
        mbFirstActivation = true;
        
        removeAllListeners();
        
        //...
        
        addAllListeners();
    }
    
    @Override
    public void addAllListeners() {
        moTextEmployeeName.addActionListener(this);
        
        moKeyCompany.addItemListener(this);
        
        moTextEmployeeName.addKeyListener(this);
        jlstEmployees.addKeyListener(this);
        
        jlstEmployees.addMouseListener(this);
    }

    @Override
    public void removeAllListeners() {
        moTextEmployeeName.removeActionListener(this);
        
        moKeyCompany.removeItemListener(this);
        
        moTextEmployeeName.removeKeyListener(this);
        jlstEmployees.removeKeyListener(this);
        
        jlstEmployees.removeMouseListener(this);
    }

    @Override
    public void reloadCatalogues() {
        miClient.getSession().populateCatalogue(moKeyCompany, SModConsts.CFGU_CO, SModConsts.MOD_HRS, null);
    }

    @Override
    public void setRegistry(SDbRegistry registry) throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SDbRegistry getRegistry() throws Exception {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public SGuiValidation validateForm() {
        SGuiValidation validation = moFields.validateFields();
        
        if (validation.isValid()) {
            if (jlstEmployees.getSelectedIndex() == -1) {
                validation.setMessage(SGuiConsts.ERR_MSG_UNDEF_OPTION);
                validation.setComponent(jlstEmployees.getModel().getSize() > 0 ? jlstEmployees : moTextEmployeeName);
            }
        }
        
        return validation;
    }

    @Override
    public void setValue(final int type, final Object value) {
        switch (type) {
            case VAL_MODE:
                setTitle(SUtilConsts.TXT_SELECT + " " + ModesMap.get((Integer) value));
                break;
                
            case SModConsts.HRSU_EMP:
                setEmployee((String) value);
                break;
                
            default:
                // nothing
        }
    }

    @Override
    public Object getValue(final int type) {
        Object value = null;
        
        switch (type) {
            case SModConsts.HRSU_EMP:
                value = ((Employee) jlstEmployees.getSelectedValue()).Id;
                break;
            default:
                // nothing
        }
        
        return value;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextEmployeeName) {
                actionPerformedEmployee();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof SBeanFieldKey && e.getStateChange() == ItemEvent.SELECTED) {
            SBeanFieldKey field = (SBeanFieldKey) e.getSource();
            
            if (field == moKeyCompany) {
                itemStateChangedCompany();
            }
        }
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
        System.out.println("keyTyped: " + e.getKeyCode() + "/ source: " + e.getSource().getClass().getName());
    }

    @Override
    public void keyPressed(KeyEvent e) {
        System.out.println("keyPressed: " + e.getKeyCode() + "/ source: " + e.getSource().getClass().getName());
        
        if (e.getSource() instanceof JList) {
            JList list = (JList) e.getSource();
            
            if (list == jlstEmployees) {
                keyTypedEmployees(e);
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        System.out.println("keyReleased: " + e.getKeyCode() + "/ source: " + e.getSource().getClass().getName());
        
        if (e.getSource() instanceof SBeanFieldText) {
            SBeanFieldText field = (SBeanFieldText) e.getSource();
            
            if (field == moTextEmployeeName) {
                keyTypedEmployee();
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (e.getSource() instanceof JList) {
            JList list = (JList) e.getSource();
            
            if (list == jlstEmployees) {
                mouseClickedEmployees(e);
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {

    }

    @Override
    public void mouseExited(MouseEvent e) {

    }

    private class Employee {
        int Id;
        String Name;
        
        public Employee(int id, String name) {
            Id = id;
            Name = name;
        }
        
        @Override
        public String toString() {
            return Name;
        }
    }
}
