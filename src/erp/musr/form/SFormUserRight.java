/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormUserRight.java
 *
 * Created on 26/12/2009, 10:16:46 AM
 */

package erp.musr.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STablePane;
import erp.musr.data.SDataUserPrivilegeCompany;
import erp.musr.data.SDataUserPrivilegeCompanyRow;
import erp.musr.data.SDataUserPrivilegeRow;
import erp.musr.data.SDataUserPrivilegeUser;
import erp.musr.data.SDataUserRoleCompany;
import erp.musr.data.SDataUserRoleCompanyRow;
import erp.musr.data.SDataUserRoleRow;
import erp.musr.data.SDataUserRoleUser;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;

/**
 *
 * @author Alfonso Flores, Sergio Flores
 */
public class SFormUserRight extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.musr.data.SDataUser moUser;
    SFormUserRightEntry moFormUserRightEntry;

    private erp.lib.table.STablePane moUserRolesPane;
    private erp.lib.table.STablePane moUserPrivilegesPane;
    private erp.lib.table.STablePane moCompanyRolesPane;
    private erp.lib.table.STablePane moCompanyPrivilegesPane;

    /** Creates new form SFormUserRight */
    public SFormUserRight(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.USRX_RIGHT;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlUser = new javax.swing.JLabel();
        jtfUser = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jbAddUserRole = new javax.swing.JButton();
        jbModifyUserRole = new javax.swing.JButton();
        jbDeleteUserRole = new javax.swing.JButton();
        jpUserRoles = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jbAddUserPrivilege = new javax.swing.JButton();
        jbModifyUserPrivilege = new javax.swing.JButton();
        jbDeleteUserPrivilege = new javax.swing.JButton();
        jpPanel9 = new javax.swing.JPanel();
        jpUserPrivileges = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jbAddCompanyRole = new javax.swing.JButton();
        jbModifyCompanyRole = new javax.swing.JButton();
        jbDeleteCompanyRole = new javax.swing.JButton();
        jpCompanyRoles = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jbAddCompanyPrivilege = new javax.swing.JButton();
        jbModifyCompanyPrivilege = new javax.swing.JButton();
        jbDeleteCompanyPrivilege = new javax.swing.JButton();
        jpCoPriv = new javax.swing.JPanel();
        jpCompanyPrivileges = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Permisos de usuario");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(792, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(776, 33));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlUser.setText("Usuario:");
        jlUser.setPreferredSize(new java.awt.Dimension(80, 23));
        jPanel3.add(jlUser);

        jtfUser.setText("USER");
        jtfUser.setEnabled(false);
        jtfUser.setFocusable(false);
        jtfUser.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfUser);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Roles asignados:"));
        jPanel8.setPreferredSize(new java.awt.Dimension(771, 220));
        jPanel8.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel14.setPreferredSize(new java.awt.Dimension(755, 23));
        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbAddUserRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbAddUserRole.setToolTipText("Crear [Ctrl+N]");
        jbAddUserRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbAddUserRole);

        jbModifyUserRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModifyUserRole.setToolTipText("Modificar [Ctrl+M]");
        jbModifyUserRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbModifyUserRole);

        jbDeleteUserRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteUserRole.setToolTipText("Eliminar [Ctrl+D]");
        jbDeleteUserRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel14.add(jbDeleteUserRole);

        jPanel8.add(jPanel14, java.awt.BorderLayout.NORTH);

        jpUserRoles.setLayout(new java.awt.BorderLayout());
        jPanel8.add(jpUserRoles, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel8, java.awt.BorderLayout.NORTH);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Privilegios asignados:"));
        jPanel9.setPreferredSize(new java.awt.Dimension(771, 215));
        jPanel9.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel15.setPreferredSize(new java.awt.Dimension(755, 23));
        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbAddUserPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbAddUserPrivilege.setToolTipText("Crear [Shift+N]");
        jbAddUserPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbAddUserPrivilege);

        jbModifyUserPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModifyUserPrivilege.setToolTipText("Modificar [Shift+M]");
        jbModifyUserPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbModifyUserPrivilege);

        jbDeleteUserPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteUserPrivilege.setToolTipText("Eliminar [Shift+D]");
        jbDeleteUserPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel15.add(jbDeleteUserPrivilege);

        jPanel9.add(jPanel15, java.awt.BorderLayout.NORTH);

        jpPanel9.setLayout(new java.awt.BorderLayout());

        jpUserPrivileges.setPreferredSize(new java.awt.Dimension(100, 150));
        jpUserPrivileges.setLayout(new java.awt.BorderLayout());
        jpPanel9.add(jpUserPrivileges, java.awt.BorderLayout.NORTH);

        jPanel9.add(jpPanel9, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel9, java.awt.BorderLayout.CENTER);
        jPanel9.getAccessibleContext().setAccessibleName("null");

        jTabbedPane1.addTab("Permisos a nivel de usuario", jPanel7);

        jPanel6.setLayout(new java.awt.BorderLayout());

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Roles asignados:"));
        jPanel10.setPreferredSize(new java.awt.Dimension(771, 220));
        jPanel10.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel18.setPreferredSize(new java.awt.Dimension(755, 23));
        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbAddCompanyRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbAddCompanyRole.setToolTipText("Crear [Ctrl+N]");
        jbAddCompanyRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbAddCompanyRole);

        jbModifyCompanyRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModifyCompanyRole.setToolTipText("Modificar [Ctrl+M]");
        jbModifyCompanyRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbModifyCompanyRole);

        jbDeleteCompanyRole.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteCompanyRole.setToolTipText("Eliminar [Ctrl+D]");
        jbDeleteCompanyRole.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel18.add(jbDeleteCompanyRole);

        jPanel10.add(jPanel18, java.awt.BorderLayout.NORTH);

        jpCompanyRoles.setLayout(new java.awt.BorderLayout());
        jPanel10.add(jpCompanyRoles, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Privilegios asignados:"));
        jPanel11.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel19.setPreferredSize(new java.awt.Dimension(755, 23));
        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 0));

        jbAddCompanyPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbAddCompanyPrivilege.setToolTipText("Crear [Shift+N]");
        jbAddCompanyPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbAddCompanyPrivilege);

        jbModifyCompanyPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModifyCompanyPrivilege.setToolTipText("Modificar [Shift+M]");
        jbModifyCompanyPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbModifyCompanyPrivilege);

        jbDeleteCompanyPrivilege.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteCompanyPrivilege.setToolTipText("Eliminar [Shift+D]");
        jbDeleteCompanyPrivilege.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel19.add(jbDeleteCompanyPrivilege);

        jPanel11.add(jPanel19, java.awt.BorderLayout.NORTH);

        jpCoPriv.setLayout(new java.awt.BorderLayout());

        jpCompanyPrivileges.setPreferredSize(new java.awt.Dimension(100, 150));
        jpCompanyPrivileges.setLayout(new java.awt.BorderLayout());
        jpCoPriv.add(jpCompanyPrivileges, java.awt.BorderLayout.NORTH);

        jPanel11.add(jpCoPriv, java.awt.BorderLayout.CENTER);

        jPanel6.add(jPanel11, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Permisos a nivel de empresa", jPanel6);

        jPanel4.add(jTabbedPane1, java.awt.BorderLayout.PAGE_START);

        jPanel2.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(950, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<SFormField>();
        int i;

        moFormUserRightEntry = new SFormUserRightEntry(miClient);

        erp.lib.table.STableColumnForm tableColumnsUserRoles[];
        erp.lib.table.STableColumnForm tableColumnsUserPrivileges[];
        erp.lib.table.STableColumnForm tableColumnsCompanyRoles[];
        erp.lib.table.STableColumnForm tableColumnsCompanyPrivileges[];

        moUserRolesPane = new STablePane(miClient);
        moUserRolesPane.setDoubleClickAction(this, "publicActionModifyRole");
        jpUserRoles.add(moUserRolesPane, BorderLayout.CENTER);

        moUserPrivilegesPane = new STablePane(miClient);
        moUserPrivilegesPane.setDoubleClickAction(this, "publicActionModifyPrivilege");
        jpUserPrivileges.add(moUserPrivilegesPane, BorderLayout.CENTER);

        moCompanyRolesPane = new STablePane(miClient);
        moCompanyRolesPane.setDoubleClickAction(this, "publicActionModifyRole");
        jpCompanyRoles.add(moCompanyRolesPane, BorderLayout.CENTER);

        moCompanyPrivilegesPane = new STablePane(miClient);
        moCompanyPrivilegesPane.setDoubleClickAction(this, "publicActionModifyPrivilege");
        jpCompanyPrivileges.add(moCompanyPrivilegesPane, BorderLayout.CENTER);

        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);
        jbAddUserRole.addActionListener(this);
        jbModifyUserRole.addActionListener(this);
        jbDeleteUserRole.addActionListener(this);
        jbAddUserPrivilege.addActionListener(this);
        jbModifyUserPrivilege.addActionListener(this);
        jbDeleteUserPrivilege.addActionListener(this);
        jbAddCompanyRole.addActionListener(this);
        jbModifyCompanyRole.addActionListener(this);
        jbDeleteCompanyRole.addActionListener(this);
        jbAddCompanyPrivilege.addActionListener(this);
        jbModifyCompanyPrivilege.addActionListener(this);
        jbDeleteCompanyPrivilege.addActionListener(this);

        i = 0;
        tableColumnsUserRoles = new STableColumnForm[3];
        tableColumnsUserRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo Rol", 300);
        tableColumnsUserRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Rol", 300);
        tableColumnsUserRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nivel de acceso", 100);

        for (i = 0; i < tableColumnsUserRoles.length; i++) {
            moUserRolesPane.addTableColumn(tableColumnsUserRoles[i]);
        }

        i = 0;
        tableColumnsUserPrivileges = new STableColumnForm[2];
        tableColumnsUserPrivileges[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Privilegio", 300);
        tableColumnsUserPrivileges[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nivel de acceso", 100);

        for (i = 0; i < tableColumnsUserPrivileges.length; i++) {
            moUserPrivilegesPane.addTableColumn(tableColumnsUserPrivileges[i]);
        }

        i = 0;
        tableColumnsCompanyRoles = new STableColumnForm[4];
        tableColumnsCompanyRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empresa", 300);
        tableColumnsCompanyRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo Rol", 300);
        tableColumnsCompanyRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Rol", 300);
        tableColumnsCompanyRoles[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nivel de acceso", 100);

        for (i = 0; i < tableColumnsCompanyRoles.length; i++) {
            moCompanyRolesPane.addTableColumn(tableColumnsCompanyRoles[i]);
        }

        i = 0;
        tableColumnsCompanyPrivileges = new STableColumnForm[3];
        tableColumnsCompanyPrivileges[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empresa", 300);
        tableColumnsCompanyPrivileges[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Privilegio", 300);
        tableColumnsCompanyPrivileges[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nivel de acceso", 100);

        for (i = 0; i < tableColumnsCompanyPrivileges.length; i++) {
            moCompanyPrivilegesPane.addTableColumn(tableColumnsCompanyPrivileges[i]);
        }

        SFormUtilities.createActionMap(rootPane, this, "publicActionAddRole", "delete", KeyEvent.VK_N, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionModifyRole", "addDps", KeyEvent.VK_M, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionDeleteRole", "removeDps", KeyEvent.VK_D, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionAddPrivilege", "addNote", KeyEvent.VK_N, KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionModifyPrivilege", "modifyNote", KeyEvent.VK_M, KeyEvent.SHIFT_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "publicActionDeletePrivilege", "deleteNote", KeyEvent.VK_D, KeyEvent.SHIFT_DOWN_MASK);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction action = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), action, "esc", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            jTabbedPane1.setSelectedIndex(0);
        }
    }

    private void actionOk() {
        erp.lib.form.SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void actionAddUserRole() {
        int index = 0;
        Vector<int[]> rights = null;
        SDataUserRoleUser role = null;
        SDataUserRoleRow roleRow = null;

        if (jbAddUserRole.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_ROL_USR);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(true);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_ROL_USR);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            moFormUserRightEntry.setVisible(true);
            if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                role = (SDataUserRoleUser) moFormUserRightEntry.getRegistry();
                roleRow = new SDataUserRoleRow(role);

                moUserRolesPane.addTableRow(roleRow);
                moUserRolesPane.renderTableRows();
                index = moUserRolesPane.getTableGuiRowCount() - 1;
                moUserRolesPane.getTable().setRowSelectionInterval(index, index);
                moUserRolesPane.getVerticalScrollBar().setValue((index + 1) * moUserRolesPane.getTable().getRowHeight());
            }
        }
    }

    private void actionModifyUserRole() {
        int index = moUserRolesPane.getTable().getSelectedRow();
        Vector<int[]> rights = null;
        SDataUserRoleUser role = null;
        SDataUserRoleRow roleRow = null;

        if (jbModifyUserRole.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_ROL_USR);
            rights.remove(index);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(true);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_ROL_USR);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            if (index != -1) {
                role = (SDataUserRoleUser) moUserRolesPane.getTableRow(index).getData();
                moFormUserRightEntry.setRegistry(role);
                moFormUserRightEntry.setVisible(true);
                if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    role = (SDataUserRoleUser) moFormUserRightEntry.getRegistry();
                    roleRow = new SDataUserRoleRow(role);

                    moUserRolesPane.getTableModel().getTableRows().set(index, roleRow);
                    moUserRolesPane.renderTableRows();
                    moUserRolesPane.getTable().setRowSelectionInterval(index, index);
                    moUserRolesPane.getVerticalScrollBar().setValue((index + 1) * moUserRolesPane.getTable().getRowHeight());
                }
            }
        }
    }

    private void actionDeleteUserRole() {
        int index = moUserRolesPane.getTable().getSelectedRow();

        if (jbDeleteUserRole.isEnabled()) {
            if (index != -1) {
                moUserRolesPane.removeTableRow(index);
                moUserRolesPane.renderTableRows();
                if (moUserRolesPane.getTableGuiRowCount() == 1) {
                    moUserRolesPane.setTableRowSelection(0);
                }
                else if (moUserRolesPane.getTableGuiRowCount() > 1) {
                    if (index == moUserRolesPane.getTableGuiRowCount()) {
                        moUserRolesPane.setTableRowSelection(index - 1);
                    }
                    else {
                        moUserRolesPane.setTableRowSelection(index);
                    }
                }
            }
        }
    }

    private void actionAddUserPrivilege() {
        int index = 0;
        Vector<int[]> rights = null;
        SDataUserPrivilegeUser privilege = null;
        SDataUserPrivilegeRow privilegeRow = null;

        if (jbAddUserPrivilege.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_PRV_USR);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(false);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_PRV_USR);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            moFormUserRightEntry.setVisible(true);
            if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                privilege = (SDataUserPrivilegeUser) moFormUserRightEntry.getRegistry();
                privilegeRow = new SDataUserPrivilegeRow(privilege);

                moUserPrivilegesPane.addTableRow(privilegeRow);
                moUserPrivilegesPane.renderTableRows();
                index = moUserPrivilegesPane.getTableGuiRowCount() - 1;
                moUserPrivilegesPane.getTable().setRowSelectionInterval(index, index);
                moUserPrivilegesPane.getVerticalScrollBar().setValue((index + 1) * moUserPrivilegesPane.getTable().getRowHeight());
            }
        }
    }

    private void actionModifyUserPrivilege() {
        int index = moUserPrivilegesPane.getTable().getSelectedRow();
        Vector<int[]> rights = null;
        SDataUserPrivilegeUser privilege = null;
        SDataUserPrivilegeRow privilegeRow = null;

        if (jbModifyUserPrivilege.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_PRV_USR);
            rights.remove(index);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(false);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_PRV_USR);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            if (index != -1) {
                privilege = (SDataUserPrivilegeUser) moUserPrivilegesPane.getTableRow(index).getData();
                moFormUserRightEntry.setRegistry(privilege);
                moFormUserRightEntry.setVisible(true);
                if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    privilege = (SDataUserPrivilegeUser) moFormUserRightEntry.getRegistry();
                    privilegeRow = new SDataUserPrivilegeRow(privilege);

                    moUserPrivilegesPane.getTableModel().getTableRows().set(index, privilegeRow);
                    moUserPrivilegesPane.renderTableRows();
                    moUserPrivilegesPane.getTable().setRowSelectionInterval(index, index);
                    moUserPrivilegesPane.getVerticalScrollBar().setValue((index + 1) * moUserPrivilegesPane.getTable().getRowHeight());
                }
            }
        }
    }

    private void actionDeleteUserPrivilege() {
        int index = moUserPrivilegesPane.getTable().getSelectedRow();

        if (jbDeleteUserPrivilege.isEnabled()) {
            if (index != -1) {
                moUserPrivilegesPane.removeTableRow(index);
                moUserPrivilegesPane.renderTableRows();
                if (moUserPrivilegesPane.getTableGuiRowCount() == 1) {
                    moUserPrivilegesPane.setTableRowSelection(0);
                }
                else if (moUserPrivilegesPane.getTableGuiRowCount() > 1) {
                    if (index == moUserPrivilegesPane.getTableGuiRowCount()) {
                        moUserPrivilegesPane.setTableRowSelection(index - 1);
                    }
                    else {
                        moUserPrivilegesPane.setTableRowSelection(index);
                    }
                }
            }
        }
    }

    private void actionAddCompanyRole() {
        int index = 0;
        Vector<int[]> rights = null;
        SDataUserRoleCompany roleCompany = null;
        SDataUserRoleCompanyRow roleCompanyRow = null;

        if (jbAddCompanyRole.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_ROL_CO);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(true);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_ROL_CO);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            moFormUserRightEntry.setVisible(true);
            if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                roleCompany = (SDataUserRoleCompany) moFormUserRightEntry.getRegistry();
                roleCompanyRow = new SDataUserRoleCompanyRow(roleCompany);

                moCompanyRolesPane.addTableRow(roleCompanyRow);
                moCompanyRolesPane.renderTableRows();
                index = moCompanyRolesPane.getTableGuiRowCount() - 1;
                moCompanyRolesPane.getTable().setRowSelectionInterval(index, index);
                moCompanyRolesPane.getVerticalScrollBar().setValue((index + 1) * moCompanyRolesPane.getTable().getRowHeight());
            }
        }
    }

    private void actionModifyCompanyRole() {
        int index = moCompanyRolesPane.getTable().getSelectedRow();
        Vector<int[]> rights = null;
        SDataUserRoleCompany roleCompany = null;
        SDataUserRoleCompanyRow roleCompanyRow = null;

        if (jbModifyCompanyRole.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_ROL_CO);
            rights.remove(index);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(true);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_ROL_CO);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            if (index != -1) {
                roleCompany = (SDataUserRoleCompany) moCompanyRolesPane.getTableRow(index).getData();
                moFormUserRightEntry.setRegistry(roleCompany);
                moFormUserRightEntry.setVisible(true);
                if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    roleCompany = (SDataUserRoleCompany) moFormUserRightEntry.getRegistry();
                    roleCompanyRow = new SDataUserRoleCompanyRow(roleCompany);

                    moCompanyRolesPane.getTableModel().getTableRows().set(index, roleCompanyRow);
                    moCompanyRolesPane.renderTableRows();
                    moCompanyRolesPane.getTable().setRowSelectionInterval(index, index);
                    moCompanyRolesPane.getVerticalScrollBar().setValue((index + 1) * moCompanyRolesPane.getTable().getRowHeight());
                }
            }
        }
    }

    private void actionDeleteCompanyRole() {
        int index = moCompanyRolesPane.getTable().getSelectedRow();

        if (jbDeleteCompanyRole.isEnabled()) {
            if (index != -1) {
                moCompanyRolesPane.removeTableRow(index);
                moCompanyRolesPane.renderTableRows();
                if (moCompanyRolesPane.getTableGuiRowCount() == 1) {
                    moCompanyRolesPane.setTableRowSelection(0);
                }
                else if (moCompanyRolesPane.getTableGuiRowCount() > 1) {
                    if (index == moCompanyRolesPane.getTableGuiRowCount()) {
                        moCompanyRolesPane.setTableRowSelection(index - 1);
                    }
                    else {
                        moCompanyRolesPane.setTableRowSelection(index);
                    }
                }
            }
        }
    }

    private void actionAddCompanyPrivilege() {
        int index = 0;
        Vector<int[]> rights = null;
        SDataUserPrivilegeCompany privilegeCompany = null;
        SDataUserPrivilegeCompanyRow privilegeCompanyRow = null;

        if (jbAddCompanyPrivilege.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_PRV_CO);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(false);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_PRV_CO);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            moFormUserRightEntry.setVisible(true);
            if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                privilegeCompany = (SDataUserPrivilegeCompany) moFormUserRightEntry.getRegistry();
                privilegeCompanyRow = new SDataUserPrivilegeCompanyRow(privilegeCompany);

                moCompanyPrivilegesPane.addTableRow(privilegeCompanyRow);
                moCompanyPrivilegesPane.renderTableRows();
                index = moCompanyPrivilegesPane.getTableGuiRowCount() - 1;
                moCompanyPrivilegesPane.getTable().setRowSelectionInterval(index, index);
                moCompanyPrivilegesPane.getVerticalScrollBar().setValue((index + 1) * moCompanyPrivilegesPane.getTable().getRowHeight());
            }
        }
    }

    private void actionModifyCompanyPrivilege() {
        int index = moCompanyPrivilegesPane.getTable().getSelectedRow();
        Vector<int[]> rights = null;
        SDataUserPrivilegeCompany privilegeCompany = null;
        SDataUserPrivilegeCompanyRow privilegeCompanyRow = null;

        if (jbModifyCompanyPrivilege.isEnabled()) {
            rights = readCurrentRights(SDataConstants.USRU_PRV_CO);
            rights.remove(index);
            moFormUserRightEntry.setParamPkUserId(moUser.getPkUserId());
            moFormUserRightEntry.setParamIsRole(false);
            moFormUserRightEntry.setParamUserRightType(SDataConstants.USRU_PRV_CO);
            moFormUserRightEntry.setParamCurrentRights(rights);
            moFormUserRightEntry.formRefreshCatalogues();
            moFormUserRightEntry.formReset();
            if (index != -1) {
                privilegeCompany = (SDataUserPrivilegeCompany) moCompanyPrivilegesPane.getTableRow(index).getData();
                moFormUserRightEntry.setRegistry(privilegeCompany);
                moFormUserRightEntry.setVisible(true);
                if (moFormUserRightEntry.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                    privilegeCompany = (SDataUserPrivilegeCompany) moFormUserRightEntry.getRegistry();
                    privilegeCompanyRow = new SDataUserPrivilegeCompanyRow(privilegeCompany);

                    moCompanyPrivilegesPane.getTableModel().getTableRows().set(index, privilegeCompanyRow);
                    moCompanyPrivilegesPane.renderTableRows();
                    moCompanyPrivilegesPane.getTable().setRowSelectionInterval(index, index);
                    moCompanyPrivilegesPane.getVerticalScrollBar().setValue((index + 1) * moCompanyPrivilegesPane.getTable().getRowHeight());
                }
            }
        }
    }

    private void actionDeleteCompanyPrivilege() {
        int index = moCompanyPrivilegesPane.getTable().getSelectedRow();

        if (jbDeleteCompanyPrivilege.isEnabled()) {
            if (index != -1) {
                moCompanyPrivilegesPane.removeTableRow(index);
                moCompanyPrivilegesPane.renderTableRows();
                if (moCompanyPrivilegesPane.getTableGuiRowCount() == 1) {
                    moCompanyPrivilegesPane.setTableRowSelection(0);
                }
                else if (moCompanyPrivilegesPane.getTableGuiRowCount() > 1) {
                    if (index == moCompanyPrivilegesPane.getTableGuiRowCount()) {
                        moCompanyPrivilegesPane.setTableRowSelection(index - 1);
                    }
                    else {
                        moCompanyPrivilegesPane.setTableRowSelection(index);
                    }
                }
            }
        }
    }

    private java.util.Vector<int[]> readCurrentRights(int type) {
        int i = 0;
        Vector<int[]> rights = new Vector<int[]>();

        switch (type) {
            case SDataConstants.USRU_ROL_USR:
                for (i = 0; i < moUserRolesPane.getTableGuiRowCount(); i++) {
                    rights.add(new int[] { ((SDataUserRoleUser) moUserRolesPane.getTableRow(i).getData()).getPkRoleId() });
                }
                break;
            case SDataConstants.USRU_PRV_USR:
                for (i = 0; i < moUserPrivilegesPane.getTableGuiRowCount(); i++) {
                    rights.add(new int[] { ((SDataUserPrivilegeUser) moUserPrivilegesPane.getTableRow(i).getData()).getPkPrivilegeId() });
                }
                break;
            case SDataConstants.USRU_ROL_CO:
                for (i = 0; i < moCompanyRolesPane.getTableGuiRowCount(); i++) {
                    rights.add(new int[] { ((SDataUserRoleCompany) moCompanyRolesPane.getTableRow(i).getData()).getPkCompanyId(),
                    ((SDataUserRoleCompany) moCompanyRolesPane.getTableRow(i).getData()).getPkRoleId() });
                }
                break;
            case SDataConstants.USRU_PRV_CO:
                for (i = 0; i < moCompanyPrivilegesPane.getTableGuiRowCount(); i++) {
                    rights.add(new int[] { ((SDataUserPrivilegeCompany) moCompanyPrivilegesPane.getTableRow(i).getData()).getPkCompanyId(),
                    ((SDataUserPrivilegeCompany) moCompanyPrivilegesPane.getTableRow(i).getData()).getPkPrivilegeId() });
                }
                break;
            default:
                break;
        }

        return rights;
    }

    public void publicActionAddRole() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbAddUserRole.isEnabled()) {
            actionAddUserRole();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbAddCompanyRole.isEnabled()) {
            actionAddCompanyRole();
        }
    }

    public void publicActionModifyRole() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbModifyUserRole.isEnabled()) {
            actionModifyUserRole();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbModifyCompanyRole.isEnabled()) {
            actionModifyCompanyRole();
        }
    }

    public void publicActionDeleteRole() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbDeleteUserRole.isEnabled()) {
            actionDeleteUserRole();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbDeleteCompanyRole.isEnabled()) {
            actionDeleteCompanyRole();
        }
    }

    public void publicActionAddPrivilege() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbAddUserPrivilege.isEnabled()) {
            actionAddUserPrivilege();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbAddCompanyPrivilege.isEnabled()) {
            actionAddCompanyPrivilege();
        }
    }

    public void publicActionModifyPrivilege() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbModifyUserPrivilege.isEnabled()) {
            actionModifyUserPrivilege();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbModifyCompanyPrivilege.isEnabled()) {
            actionModifyCompanyPrivilege();
        }
    }

    public void publicActionDeletePrivilege() {
        if (jTabbedPane1.getSelectedIndex() == 0 && jbDeleteUserPrivilege.isEnabled()) {
            actionDeleteUserPrivilege();
        }
        else if (jTabbedPane1.getSelectedIndex() == 1 && jbDeleteCompanyPrivilege.isEnabled()) {
            actionDeleteCompanyPrivilege();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAddCompanyPrivilege;
    private javax.swing.JButton jbAddCompanyRole;
    private javax.swing.JButton jbAddUserPrivilege;
    private javax.swing.JButton jbAddUserRole;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDeleteCompanyPrivilege;
    private javax.swing.JButton jbDeleteCompanyRole;
    private javax.swing.JButton jbDeleteUserPrivilege;
    private javax.swing.JButton jbDeleteUserRole;
    private javax.swing.JButton jbModifyCompanyPrivilege;
    private javax.swing.JButton jbModifyCompanyRole;
    private javax.swing.JButton jbModifyUserPrivilege;
    private javax.swing.JButton jbModifyUserRole;
    private javax.swing.JButton jbOk;
    private javax.swing.JLabel jlUser;
    private javax.swing.JPanel jpCoPriv;
    private javax.swing.JPanel jpCompanyPrivileges;
    private javax.swing.JPanel jpCompanyRoles;
    private javax.swing.JPanel jpPanel9;
    private javax.swing.JPanel jpUserPrivileges;
    private javax.swing.JPanel jpUserRoles;
    private javax.swing.JTextField jtfUser;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moUser = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moUserRolesPane.createTable(null);
        moUserRolesPane.clearTableRows();
        moCompanyRolesPane.createTable(null);
        moCompanyRolesPane.clearTableRows();
        moUserPrivilegesPane.createTable(null);
        moUserPrivilegesPane.clearTableRows();
        moCompanyPrivilegesPane.createTable(null);
        moCompanyPrivilegesPane.clearTableRows();
        jTabbedPane1.setSelectedIndex(0);
    }

    @Override
    public void formRefreshCatalogues() {

    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        erp.lib.form.SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moUser = (erp.musr.data.SDataUser) registry;
        SDataUserRoleRow roleRow = null;
        SDataUserRoleCompanyRow roleCompanyRow = null;
        SDataUserPrivilegeRow privilegeRow = null;
        SDataUserPrivilegeCompanyRow privilegeCompanyRow = null;
        int i = 0;

        jtfUser.setText(moUser.getUser());

        // Read the user roles:

        for (i = 0; i < moUser.getDbmsUserRolesUser().size(); i++) {
            roleRow = new SDataUserRoleRow(moUser.getDbmsUserRolesUser().get(i));
            moUserRolesPane.addTableRow(roleRow);
        }
        if (i >= 1) {
            moUserRolesPane.setTableRowSelection(0);
        }

        for (i = 0; i < moUser.getDbmsUserRolesCompany().size(); i++) {
            roleCompanyRow = new SDataUserRoleCompanyRow(moUser.getDbmsUserRolesCompany().get(i));
            moCompanyRolesPane.addTableRow(roleCompanyRow);
        }
        if (i >= 1) {
            moCompanyRolesPane.setTableRowSelection(0);
        }

        // Read the user privileges:

        for (i = 0; i < moUser.getDbmsUserPrivilegesUser().size(); i++) {
            privilegeRow = new SDataUserPrivilegeRow(moUser.getDbmsUserPrivilegesUser().get(i));
            moUserPrivilegesPane.addTableRow(privilegeRow);
        }
        if (i >= 1) {
            moUserPrivilegesPane.setTableRowSelection(0);
        }

        for (i = 0; i < moUser.getDbmsUserPrivilegesCompany().size(); i++) {
            privilegeCompanyRow = new SDataUserPrivilegeCompanyRow(moUser.getDbmsUserPrivilegesCompany().get(i));
            moCompanyPrivilegesPane.addTableRow(privilegeCompanyRow);
        }
        if (i >= 1) {
            moCompanyPrivilegesPane.setTableRowSelection(0);
        }
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        SDataUserRoleUser role = null;
        SDataUserRoleCompany roleCompany = null;
        SDataUserPrivilegeUser privilege = null;
        SDataUserPrivilegeCompany privilegeCompany = null;
        int i = 0;

        // Read the user roles:

        moUser.getDbmsUserRolesUser().clear();
        for (i = 0; i < moUserRolesPane.getTableGuiRowCount(); i++) {
            role = new SDataUserRoleUser();
            role = (SDataUserRoleUser) moUserRolesPane.getTableRow(i).getData();
            role.setPkUserId(moUser.getPkUserId());
            moUser.getDbmsUserRolesUser().add(role);
        }

        moUser.getDbmsUserRolesCompany().clear();
        for (i = 0; i < moCompanyRolesPane.getTableGuiRowCount(); i++) {
            roleCompany = new SDataUserRoleCompany();
            roleCompany = (SDataUserRoleCompany) moCompanyRolesPane.getTableRow(i).getData();
            roleCompany.setPkUserId(moUser.getPkUserId());
            moUser.getDbmsUserRolesCompany().add(roleCompany);
        }

        // Read the user privileges:

        moUser.getDbmsUserPrivilegesUser().clear();
        for (i = 0; i < moUserPrivilegesPane.getTableGuiRowCount(); i++) {
            privilege = new SDataUserPrivilegeUser();
            privilege = (SDataUserPrivilegeUser) moUserPrivilegesPane.getTableRow(i).getData();
            privilege.setPkUserId(moUser.getPkUserId());
            moUser.getDbmsUserPrivilegesUser().add(privilege);
        }

        moUser.getDbmsUserPrivilegesCompany().clear();
        for (i = 0; i < moCompanyPrivilegesPane.getTableGuiRowCount(); i++) {
            privilegeCompany = new SDataUserPrivilegeCompany();
            privilegeCompany = (SDataUserPrivilegeCompany) moCompanyPrivilegesPane.getTableRow(i).getData();
            privilegeCompany.setPkUserId(moUser.getPkUserId());
            moUser.getDbmsUserPrivilegesCompany().add(privilegeCompany);
        }

        return moUser;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbAddUserRole) {
                actionAddUserRole();
            }
            else if (button == jbModifyUserRole) {
                actionModifyUserRole();
            }
            else if (button == jbDeleteUserRole) {
                actionDeleteUserRole();
            }
            else if (button == jbAddUserPrivilege) {
                actionAddUserPrivilege();
            }
            else if (button == jbModifyUserPrivilege) {
                actionModifyUserPrivilege();
            }
            else if (button == jbDeleteUserPrivilege) {
                actionDeleteUserPrivilege();
            }
            else if (button == jbAddCompanyRole) {
                actionAddCompanyRole();
            }
            else if (button == jbModifyCompanyRole) {
                actionModifyCompanyRole();
            }
            else if (button == jbDeleteCompanyRole) {
                actionDeleteCompanyRole();
            }
            else if (button == jbAddCompanyPrivilege) {
                actionAddCompanyPrivilege();
            }
            else if (button == jbModifyCompanyPrivilege) {
                actionModifyCompanyPrivilege();
            }
            else if (button == jbDeleteCompanyPrivilege) {
                actionDeleteCompanyPrivilege();
            }
        }
    }
}
