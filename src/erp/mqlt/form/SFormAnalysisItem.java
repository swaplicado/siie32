/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mqlt.form;

import erp.data.SDataConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.mqlt.data.SDataAnalysisItem;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import sa.gui.util.SUtilConsts;

/**
 *
 * @author Edwin Carmona
 */
public class SFormAnalysisItem extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private SDataAnalysisItem moDataAnalysisItem;
    
    private erp.lib.form.SFormField moFieldPkAnalysisId;
    private erp.lib.form.SFormField moFieldPkItemId;
    private erp.lib.form.SFormField moFieldOrderPos;
    private erp.lib.form.SFormField moFieldIsMax;
    private erp.lib.form.SFormField moFieldMaxValue;
    private erp.lib.form.SFormField moFieldIsMin;
    private erp.lib.form.SFormField moFieldMinValue;
    private erp.lib.form.SFormField moFieldIsRequired;
    private erp.lib.form.SFormField moFieldIsDeleted;

    public SFormAnalysisItem(erp.client.SClientInterface client, String title, int formType) {
        super(client.getFrame(), true);
        miClient = client;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jlPkAnalysisId = new javax.swing.JLabel();
        jcbPkAnalysisId = new javax.swing.JComboBox();
        jbPkAnalysisId = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jlPkItemId = new javax.swing.JLabel();
        jcbFkItemId = new javax.swing.JComboBox<>();
        jbFkItemId = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jlOrderPos = new javax.swing.JLabel();
        jtfOrderPosition = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jlPkDateId1 = new javax.swing.JLabel();
        jckIsMax = new javax.swing.JCheckBox();
        jckIsMin = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jlMaxValue = new javax.swing.JLabel();
        jtfMaxValue = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlMinValue = new javax.swing.JLabel();
        jtfMinValue = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlDummy = new javax.swing.JLabel();
        jckIsRequired = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jlDummy1 = new javax.swing.JLabel();
        jckIsDeleted = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Análisis vs ítem"); // NOI18N
        setModal(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.GridLayout(8, 0, 0, 5));

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlPkAnalysisId.setForeground(new java.awt.Color(0, 0, 255));
        jlPkAnalysisId.setText("Análisis:*");
        jlPkAnalysisId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel8.add(jlPkAnalysisId);

        jcbPkAnalysisId.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel8.add(jcbPkAnalysisId);

        jbPkAnalysisId.setText("...");
        jbPkAnalysisId.setToolTipText("Seleccionar ítem");
        jbPkAnalysisId.setFocusable(false);
        jbPkAnalysisId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbPkAnalysisId);

        jPanel3.add(jPanel8);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 5, 0));

        jlPkItemId.setForeground(new java.awt.Color(0, 0, 255));
        jlPkItemId.setText("Ítem:*");
        jlPkItemId.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel6.add(jlPkItemId);

        jcbFkItemId.setMaximumRowCount(16);
        jcbFkItemId.setPreferredSize(new java.awt.Dimension(275, 23));
        jPanel6.add(jcbFkItemId);

        jbFkItemId.setText("...");
        jbFkItemId.setToolTipText("Seleccionar ítem");
        jbFkItemId.setFocusable(false);
        jbFkItemId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbFkItemId);

        jPanel3.add(jPanel6);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlOrderPos.setText("Posición (ordenamiento):*");
        jlOrderPos.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel1.add(jlOrderPos);

        jtfOrderPosition.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jtfOrderPosition.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jtfOrderPosition);

        jPanel3.add(jPanel1);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPkDateId1.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel4.add(jlPkDateId1);

        jckIsMax.setText("Aplica máx.");
        jPanel4.add(jckIsMax);

        jckIsMin.setText("Aplica mín.");
        jPanel4.add(jckIsMin);

        jPanel3.add(jPanel4);

        jPanel7.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMaxValue.setText("Valor máximo:*");
        jlMaxValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel7.add(jlMaxValue);

        jtfMaxValue.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfMaxValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel7.add(jtfMaxValue);

        jPanel3.add(jPanel7);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlMinValue.setText("Valor mínimo:*");
        jlMinValue.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel9.add(jlMinValue);

        jtfMinValue.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jtfMinValue.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfMinValue);

        jPanel3.add(jPanel9);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDummy.setPreferredSize(new java.awt.Dimension(243, 0));
        jPanel5.add(jlDummy);

        jckIsRequired.setText("Es requerido");
        jPanel5.add(jckIsRequired);

        jPanel3.add(jPanel5);

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDummy1.setPreferredSize(new java.awt.Dimension(243, 0));
        jPanel10.add(jlDummy1);

        jckIsDeleted.setText("Registro eliminado");
        jPanel10.add(jckIsDeleted);

        jPanel3.add(jPanel10);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar"); // NOI18N
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar"); // NOI18N
        jbCancel.setToolTipText("[Escape]");
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(496, 339));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        mvFields = new Vector<>();

        moFieldPkAnalysisId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkAnalysisId, jlPkAnalysisId);
        moFieldPkAnalysisId.setPickerButton(jbPkAnalysisId);
        moFieldPkItemId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkItemId, jlPkItemId);
        moFieldPkItemId.setPickerButton(jbFkItemId);
        moFieldOrderPos = new SFormField(miClient, SLibConstants.DATA_TYPE_INTEGER, true, jtfOrderPosition, jlOrderPos);
        moFieldIsMax = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsMax);
        moFieldMaxValue = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfMaxValue, jlMaxValue);
        moFieldIsMin = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsMin);
        moFieldMinValue = new SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfMinValue, jlMinValue);
        moFieldIsRequired = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsRequired);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, true, jckIsDeleted);

        mvFields.add(moFieldPkAnalysisId);
        mvFields.add(moFieldPkItemId);
        mvFields.add(moFieldOrderPos);
        mvFields.add(moFieldIsMax);
        mvFields.add(moFieldMaxValue);
        mvFields.add(moFieldIsMin);
        mvFields.add(moFieldMinValue);
        mvFields.add(moFieldIsRequired);
        mvFields.add(moFieldIsDeleted);

        jbFkItemId.addActionListener(this);
        jbPkAnalysisId.addActionListener(this);
        
        jbOk.addActionListener(this);
        jbCancel.addActionListener(this);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
        }
    }
    
    private void actionPkAnalysisId() {
        miClient.pickOption(SDataConstants.QLT_ANALYSIS, moFieldPkAnalysisId, null);
    }
    
    private void actionPkItemId() {
        miClient.pickOption(SDataConstants.ITMU_ITEM, moFieldPkItemId, null);
    }
    
    private void enabledFields(boolean b) {
        jcbPkAnalysisId.setEnabled(b);
        jcbPkAnalysisId.setFocusable(b);
        jbPkAnalysisId.setEnabled(b);
        jbPkAnalysisId.setFocusable(b);
        jcbFkItemId.setEnabled(b);
        jcbFkItemId.setFocusable(b);
        jbFkItemId.setEnabled(b);
        jbFkItemId.setFocusable(b);
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFkItemId;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPkAnalysisId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkItemId;
    private javax.swing.JComboBox jcbPkAnalysisId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsMax;
    private javax.swing.JCheckBox jckIsMin;
    private javax.swing.JCheckBox jckIsRequired;
    private javax.swing.JLabel jlDummy;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlMaxValue;
    private javax.swing.JLabel jlMinValue;
    private javax.swing.JLabel jlOrderPos;
    private javax.swing.JLabel jlPkAnalysisId;
    private javax.swing.JLabel jlPkDateId1;
    private javax.swing.JLabel jlPkItemId;
    private javax.swing.JTextField jtfMaxValue;
    private javax.swing.JTextField jtfMinValue;
    private javax.swing.JTextField jtfOrderPosition;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moDataAnalysisItem = null;

        for (int i = 0; i < mvFields.size(); i++) {
            mvFields.get(i).resetField();
        }

        jckIsRequired.setEnabled(true);
    }

    @Override
    @SuppressWarnings("unchecked")
    public void formRefreshCatalogues() {
        SFormUtilities.populateComboBox(miClient, jcbFkItemId, SDataConstants.ITMU_ITEM);
        SFormUtilities.populateComboBox(miClient, jcbPkAnalysisId, SDataConstants.QLT_ANALYSIS);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(mvFields.get(i).getComponent());
                break;
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        moDataAnalysisItem = (SDataAnalysisItem) registry;
        
        moFieldPkAnalysisId.setKey(new int[] { moDataAnalysisItem.getPkAnalysisId() });
        moFieldPkItemId.setKey(new int[] { moDataAnalysisItem.getPkItemId() });
        
        moFieldOrderPos.setFieldValue(moDataAnalysisItem.getSortPosition());
        moFieldIsMax.setFieldValue(moDataAnalysisItem.getMax());
        moFieldMaxValue.setFieldValue(moDataAnalysisItem.getMaxValue());
        moFieldIsMin.setFieldValue(moDataAnalysisItem.getMin());
        moFieldMinValue.setFieldValue(moDataAnalysisItem.getMinValue());
        moFieldIsRequired.setFieldValue(moDataAnalysisItem.getIsRequired());
        moFieldIsDeleted.setFieldValue(moDataAnalysisItem.getIsDeleted());
        
        this.enabledFields(moDataAnalysisItem.getIsRegistryNew());
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moDataAnalysisItem == null) {
            moDataAnalysisItem = new SDataAnalysisItem();
            moDataAnalysisItem.setPkAnalysisId(moFieldPkAnalysisId.getKeyAsIntArray()[0]);
            moDataAnalysisItem.setPkItemId(moFieldPkItemId.getKeyAsIntArray()[0]);
            
            moDataAnalysisItem.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moDataAnalysisItem.setFkUserEditId(SUtilConsts.USR_NA_ID);
            moDataAnalysisItem.setFkUserDeleteId(SUtilConsts.USR_NA_ID);
            moDataAnalysisItem.setUserNewTs(miClient.getSessionXXX().getWorkingDate());
            moDataAnalysisItem.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
            moDataAnalysisItem.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());

        }
        else {
            moDataAnalysisItem.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moDataAnalysisItem.setUserEditTs(miClient.getSessionXXX().getWorkingDate());
            
            if (moFieldIsDeleted.getBoolean()) {
                moDataAnalysisItem.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                moDataAnalysisItem.setUserDeleteTs(miClient.getSessionXXX().getWorkingDate());
            }
            else {
                moDataAnalysisItem.setFkUserDeleteId(SUtilConsts.USR_NA_ID);
            }
        }
        
        moDataAnalysisItem.setSortPosition(moFieldOrderPos.getInteger());
        moDataAnalysisItem.setMin(moFieldIsMin.getBoolean());
        moDataAnalysisItem.setMinValue(moFieldMinValue.getString());
        moDataAnalysisItem.setMax(moFieldIsMax.getBoolean());
        moDataAnalysisItem.setMaxValue(moFieldMaxValue.getString());
        moDataAnalysisItem.setIsRequired(moFieldIsRequired.getBoolean());
        moDataAnalysisItem.setIsDeleted(moFieldIsDeleted.getBoolean());
        
        return moDataAnalysisItem;
    }

    @Override
    public void setValue(int type, java.lang.Object value) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public java.lang.Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(java.awt.event.ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbOk) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkAnalysisId) {
                actionPkAnalysisId();
            }
            else if (button == jbFkItemId) {
                actionPkItemId();
            }
        }
    }
}
