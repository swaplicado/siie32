/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ImportAccountingRecords.java
 *
 * Created on 8/06/2010, 08:54:47 AM
 */

package erp.util.imp;

import erp.data.SDataConstantsSys;
import erp.lib.SLibConstants;
import erp.lib.SLibTimeUtilities;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataDatabase;
import java.awt.Cursor;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.TimeZone;
import javax.swing.JOptionPane;

/**
 *
 * @author Sergio Flores
 */
public class ImportAccountingRecords extends javax.swing.JFrame {

    private erp.lib.data.SDataDatabase moDbMySql;
    private erp.lib.data.SDataDatabase moDbSqlServer;

    /** Creates new form ImportAccountingRecords */
    public ImportAccountingRecords() {
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlDateImport = new javax.swing.JLabel();
        jftDateImport = new javax.swing.JFormattedTextField();
        jlDateImportExample = new javax.swing.JLabel();
        jbImport = new javax.swing.JButton();
        jpbProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Importar pólizas contables");

        jlDateImport.setText("Fecha de corte:");
        jlDateImport.setPreferredSize(new java.awt.Dimension(100, 20));

        jftDateImport.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        jftDateImport.setText("31/07/2010");
        jftDateImport.setPreferredSize(new java.awt.Dimension(75, 20));

        jlDateImportExample.setText("(dd/mm/yyyy)");
        jlDateImportExample.setPreferredSize(new java.awt.Dimension(100, 20));

        jbImport.setText("Importar");
        jbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportActionPerformed(evt);
            }
        });

        jpbProgress.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jpbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbImport))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlDateImportExample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftDateImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlDateImportExample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbImport)
                    .addComponent(jpbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportActionPerformed
        importAccountingRecords();
    }//GEN-LAST:event_jbImportActionPerformed

    private void initComponentsExtra() {
        TimeZone.setDefault(SLibTimeUtilities.SysTimeZone);

        moDbMySql = new SDataDatabase(SLibConstants.DBMS_MY_SQL);

        /*
        moDbMySql.connect("gs01", "3306", "erp_gs", "root", "msroot");
        moDbSqlServer = new SDataDatabase(SLibConstants.DBMS_SQL_SERVER_2005);
        moDbSqlServer.connect("localhost\\ALFONSO2005", "", "siie2_GS", "sa", "1120");
        */

        /*
        moDbMySql.connect("tron01", "3306", "th", "root", "msroot");
        moDbSqlServer = new SDataDatabase(SLibConstants.DBMS_SQL_SERVER_2005);
        moDbSqlServer.connect("localhost\\sql_2005", "", "siie2_TH", "sflores", "sssfg");
        */

        //   2014-12-24
        moDbMySql.connect("localhost", "3306", "erp_momosa", "root", "msroot");
        moDbSqlServer = new SDataDatabase(SLibConstants.DBMS_SQL_SERVER_2005);
        moDbSqlServer.connect("localhost\\SQLEXPRESS", "", "siie2_optron", "jbarajas", "j");


        /*moDbMySql.connect("serveruniversal", "3306", "erp_universal", "root", "msroot");
        moDbSqlServer = new SDataDatabase(SLibConstants.DBMS_SQL_SERVER_2005);
        moDbSqlServer.connect("DESARROLLO1\\SQLEXPRESS", "", "sii2_TH", "jbarajas", "universal");
        */

        jftDateImport.setText("31/12/2008");
    }

    private int[] lookUpDps(java.sql.Statement stSqlServer, java.sql.Statement stMySql, int bp_cat, int bp, int doc) throws java.lang.Exception {
        int[] key = null;
        String sql = "";
        ResultSet rsSqlServer = null;
        ResultSet rsMySql = null;

        sql = "SELECT id_bp, id_year, id_doc FROM dbo.map_dps " +
                "WHERE bp_cat=" + bp_cat + " AND bp=" + bp + " AND doc=" + doc + "; ";
        rsSqlServer = stSqlServer.executeQuery(sql);
        if (rsSqlServer.next()) {
            key = new int[] { rsSqlServer.getInt("id_year"), rsSqlServer.getInt("id_doc") };

            sql = "SELECT fid_bp_r FROM trn_dps WHERE id_year=" + key[0] + " AND id_doc=" + key[1] + "; ";
            rsMySql = stMySql.executeQuery(sql);
            if (!rsMySql.next()) {
                throw new Exception("No se encontró el DPS en el SIIE 2.0: [" + key[0] + ", " + key[1] + "].");
            }
            else {
                if (rsSqlServer.getInt("id_bp") != rsMySql.getInt("fid_bp_r")) {
                    throw new Exception("El business partner de mapeo del DPS [" + key[0] + ", " + key[1] + "] no coincide: " + rsSqlServer.getInt("id_bp") + " (mapeo) vs. " + rsMySql.getInt("fid_bp_r") + " (SIIE 2.0).");
                }
            }
        }

        return key;
    }

    /*
     * Method lookUpBp is obsolete.
     * Business Partner mapping is done using SIIE 2.0 Business Partner previously imported.
     * A last validation is done to check if business partner is duplicated, so
     * SIIE 1 customer or supplier key is updated with the correct one.
     */

    /*
    private int lookUpBp(java.sql.Statement stSqlServer, java.sql.Statement stMySql, int bp_cat, int bp) throws java.lang.Exception {
        int id_bp = 0;
        String sql = "";
        ResultSet rsSqlServer = null;
        ResultSet rsMySql = null;

        switch (bp_cat) {
            case 2:
                sql = "SELECT id_bp FROM dbo.map_bp WHERE prv=" + bp + " ";
                break;
            case 3:
                sql = "SELECT id_bp FROM dbo.map_bp WHERE cte=" + bp + " ";
                break;
            default:
                throw new Exception("lookUpBp: Categoría de business partner inválida.");
        }

        rsSqlServer = stSqlServer.executeQuery(sql);
        if (!rsSqlServer.next()) {
            throw new Exception("lookUpBp: No se encontró el mapeo del business partner.");
        }
        else {
            id_bp = rsSqlServer.getInt("id_bp");
            sql = "SELECT count(*) AS f_count FROM erp.bpsu_bp_ct WHERE id_bp_ct=" + bp_cat + " AND id_bp=" + id_bp + " ";
            rsMySql = stMySql.executeQuery(sql);
            if (!rsMySql.next() || rsMySql.getInt("f_count") != 1) {
                throw new Exception("lookUpBp: No se encontró el registro de la categoría del business partner.");
            }
        }

        return id_bp;
    }
    */

    private void importAccountingRecords() {
        int nMap = 0;
        int nYear = 0;
        int nRecord = 0;
        int nRecordCount = 0;
        int nPlmAno = 0;
        int nPlmNumPol = 0;
        int nPlcCuenta = 0;
        int nPlcSCuenta = 0;
        int nPlcSSCuenta = 0;
        int nSCta = 0;
        int nSSCta = 0;
        int nId_year = 0;
        int nId_per = 0;
        int nFid_cob_n = 0;
        int nFid_ent_n = 0;
        int nId_acc_cash_n = 0;
        int nFid_ct_ref_n = 0;
        int nFid_cur = 0;
        int nFid_bp_nr = 0;
        int nFid_bpb_n = 0;
        int nFidBpr = 0;
        int nFidBpb = 0;
        int nFidItem = 0;
        int nFidItemAux = 0;
        int nFidTaxBasic = 0;
        int nFidTax = 0;
        int nEntryNumber = 0;
        double dExchangeRate = 0;
        double dPlcCargos = 0;
        double dPlcCargosCy = 0;
        double dPlcAbonos = 0;
        double dPlcAbonosCy = 0;
        double dPlcUnidades = 0;
        double dPlcImporteMonedaExtra = 0;
        double dPercentage = 0;
        boolean bPlcDifCambiaria = false;
        boolean bError = false;
        boolean bMapExists = false;
        int[] anPeriod = null;
        int[] anDpsKey = null;
        int[] anSysMoveTypeKey = null;
        String sSql = "";
        String sType = "";
        String sUser = "";
        String sReference = "";
        String sFidAcc = "";
        String sFidCcb = "";
        String sPlcConcepto = "";
        String sPlcMoneda = "";
        Cursor oCursor = null;
        Statement stMySql = null;
        Statement stMySqlAux = null;
        Statement stSqlServer = null;
        Statement stSqlServerAux = null;
        Statement stSqlServerEntry = null;
        Statement stSqlServerMap = null;
        ResultSet rsMySql = null;
        ResultSet rsMySqlAux = null;
        ResultSet rsSqlServer = null;
        ResultSet rsSqlServerAux = null;
        ResultSet rsSqlServerEntry = null;
        ResultSet rsSqlServerMap = null;
        SimpleDateFormat sdf = null;
        SimpleDateFormat sdfMySql = null;
        SimpleDateFormat sdfMagic = null;
        java.util.Date tDate = null;
        java.util.Date tDateImport = null;
        ImportProgressThread oProgressThread = null;

        try {
            oCursor = getCursor();
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            jpbProgress.setValue(0);
            oProgressThread = new ImportProgressThread(this);
            oProgressThread.startThread();

            sdf = new SimpleDateFormat("dd/MM/yyyy");
            sdfMySql = new SimpleDateFormat("yyyy-MM-dd");
            sdfMagic = new SimpleDateFormat("yyyyMMdd");
            tDateImport = sdf.parse(jftDateImport.getText());
            nYear = SLibTimeUtilities.digestYear(tDateImport)[0];

            stMySql = moDbMySql.getConnection().createStatement();
            stMySqlAux = moDbMySql.getConnection().createStatement();
            stSqlServer = moDbSqlServer.getConnection().createStatement();
            stSqlServerAux = moDbSqlServer.getConnection().createStatement();
            stSqlServerEntry = moDbSqlServer.getConnection().createStatement();
            stSqlServerMap = moDbSqlServer.getConnection().createStatement();

            // Delete previously imported accounting records:

            sSql = "DELETE fin_rec_ety FROM fin_rec_ety, fin_rec " +
                    "WHERE fin_rec_ety.id_year = fin_rec.id_year AND " +
                    "fin_rec_ety.id_per = fin_rec.id_per AND " +
                    "fin_rec_ety.id_bkc = fin_rec.id_bkc AND " +
                    "fin_rec_ety.id_tp_rec = fin_rec.id_tp_rec AND " +
                    "fin_rec_ety.id_num = fin_rec.id_num AND " +
                    "fin_rec.dt <= '" + sdfMySql.format(tDateImport) + "' AND fin_rec.id_year = " + nYear + "; ";
            stMySql.execute(sSql);

            sSql = "DELETE FROM fin_rec WHERE dt <= '" + sdfMySql.format(tDateImport) + "' AND id_year = " + nYear + "; ";
            stMySql.execute(sSql);

            // Import accounting records:

            /*
             * IMPORTANT:
             * Tables "dbo.Polizas" and "dbo.Polizas_reng" must be imported first into local machine, into local SQL Server DBMS!
             */

            sSql = "SELECT COUNT(*) FROM dbo.Polizas WHERE plm_fecha<='" + sdfMagic.format(tDateImport) + "' AND plm_ano=" + nYear + "; ";
            rsSqlServer = stSqlServer.executeQuery(sSql);
            if (!rsSqlServer.next()) {
                throw new Exception("No hay pólizas contables para importar.");
            }
            else {
                nRecordCount = rsSqlServer.getInt(1);
            }

            sSql = "SELECT * " +
                    "FROM dbo.Polizas LEFT OUTER JOIN dbo.map_cuentas_bancarias ON plm_banco=bank " +
                    "WHERE plm_fecha<='" + sdfMagic.format(tDateImport) + "' AND plm_ano=" + nYear + "; ";
            rsSqlServer = stSqlServer.executeQuery(sSql);
            while (rsSqlServer.next()) {
                nPlmAno = rsSqlServer.getInt("plm_ano");
                nPlmNumPol = rsSqlServer.getInt("plm_num_pol");

                tDate = sdfMagic.parse(rsSqlServer.getString("plm_fecha"));
                anPeriod = SLibTimeUtilities.digestDate(tDate);

                sType = rsSqlServer.getString("plm_tipo");

                if (sType.compareTo("S") == 0) {
                    nId_year = anPeriod[0] + 1;
                    nId_per = 1;
                }
                else {
                    nId_year = anPeriod[0];
                    nId_per = anPeriod[1];
                }

                if (sType.compareTo("C") == 0) {
                    nFid_cob_n = 3016;         // NOTA: fixed ID of unique Cash in Tron Hermanos!, poner el PK de la entidad "Caja" que corresponda para la empresa.
                    nId_acc_cash_n = 2;     // NOTA: fixed ID of unique Cash in Tron Hermanos!, poner el PK de la entidad "Caja" que corresponda para la empresa.
                }
                else {
                    nFid_cob_n = rsSqlServer.getInt("id_cob");
                    nId_acc_cash_n = rsSqlServer.getInt("id_acc_cash");
                }

                sUser = rsSqlServer.getString("plm_reg_mov").trim();

                if (sUser.length() == 0) {
                    sUser = "system";
                }

                sSql = "INSERT INTO fin_rec VALUES (" +
                        nId_year + ", " + nId_per + ", 1, 'X" + sType + "', " + nPlmNumPol + ", " +
                        "'" + sdfMySql.format(tDate) + "', 'PÓLIZA " + sType + " (USR: " + sdf.format(sdfMagic.parse(rsSqlServer.getString("plm_fecha_mov"))) + ", " + sUser + ")', " +
                        "0, 0, 0, 0, 1, 0, 1, " + (nFid_cob_n == 0 ? "NULL, NULL" : "" + nFid_cob_n + ", " + nId_acc_cash_n) + ", 1, 1, 1, 1, 1, " +
                        "'" + sdfMySql.format(tDateImport) + "', '" + sdfMySql.format(tDateImport) + "', '" + sdfMySql.format(tDateImport) + "', NOW(), NOW()); ";
                stMySql.execute(sSql);

                // Import accounting record entries:

                nEntryNumber = 0;

                sSql = "SELECT * " +
                        "FROM dbo.Polizas_reng " +
                        "WHERE plc_ano=" + nPlmAno + " AND plc_tipo='" + sType + "' AND plc_num_pol=" + nPlmNumPol + "; ";
                rsSqlServerEntry = stSqlServerEntry.executeQuery(sSql);
                while (rsSqlServerEntry.next()) {
                    nPlcCuenta = rsSqlServerEntry.getInt("plc_cuenta");
                    nPlcSCuenta = rsSqlServerEntry.getInt("plc_scta");
                    nPlcSSCuenta = rsSqlServerEntry.getInt("plc_sscta");
                    dPlcCargos = rsSqlServerEntry.getDouble("plc_cargos");
                    dPlcAbonos = rsSqlServerEntry.getDouble("plc_abonos");
                    dPlcUnidades = 0;
                    sPlcConcepto = rsSqlServerEntry.getString("plc_concepto").trim().replaceAll("'", "''");
                    sPlcMoneda = rsSqlServerEntry.getString("plc_moneda").trim();
                    dPlcImporteMonedaExtra = rsSqlServerEntry.getDouble("plc_imp_moneda_extra");
                    bPlcDifCambiaria = rsSqlServerEntry.getBoolean("plc_swdif_cambiaria");

                    if (sPlcMoneda.compareTo("MXN") == 0) {
                        nFid_cur = 1;   // mexican pesos
                        dExchangeRate = 1d;

                        dPlcCargosCy = dPlcCargos;
                        dPlcAbonosCy = dPlcAbonos;
                    }
                    else {
                        /*
                         * Existen bastantes movimientos que tienen moneda USD, pero el importe en moneda extranjera y/o el tipo de cambio está en cero.
                         */

                        if (bPlcDifCambiaria) {
                            nFid_cur = 1;   // mexican pesos
                            dExchangeRate = 1d;

                            dPlcCargosCy = dPlcCargos;
                            dPlcAbonosCy = dPlcAbonos;
                        }
                        else {
                            nFid_cur = 2;   // US dollars
                            dExchangeRate = rsSqlServerEntry.getDouble("plc_tipo_cambio");

                            if (dExchangeRate == 0d && dPlcImporteMonedaExtra != 0d) {
                                if (dPlcCargos != 0d) {
                                    dExchangeRate = dPlcCargos / dPlcImporteMonedaExtra;
                                }
                                else {
                                    dExchangeRate = dPlcAbonos / dPlcImporteMonedaExtra;
                                }
                            }

                            if (dPlcImporteMonedaExtra == 0d && dExchangeRate != 0d) {
                                if (dPlcCargos != 0d) {
                                    dPlcImporteMonedaExtra = dPlcCargos / dExchangeRate;
                                }
                                else {
                                    dPlcImporteMonedaExtra = dPlcAbonos / dExchangeRate;
                                }
                            }

                            if (dPlcCargos != 0d) {
                                dPlcCargosCy = dPlcImporteMonedaExtra;
                                dPlcAbonosCy = 0d;
                            }
                            else {
                                dPlcCargosCy = 0d;
                                dPlcAbonosCy = dPlcImporteMonedaExtra;
                            }
                        }
                    }

                    bMapExists = false;
                    if (nPlcCuenta == 1130) {           // NOTA: validar que la cuenta de clientes sea efectivamente esta.
                        nSCta = 0;
                        nSSCta = 0;
                    }
                    else if (nPlcCuenta == 2131) {      // NOTA: validar que la cuenta de proveedores sea efectivamente esta.
                        nSCta = 0;
                        nSSCta = 0;
                    }
                    else {
                        nSCta = nPlcSCuenta;
                        nSSCta = nPlcSSCuenta;
                    }

                    for (nMap = 1; nMap <= 5 && !bMapExists; nMap++) {
                        switch (nMap) {
                            case 1:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc " +
                                        "FROM dbo.map_cuentas_contables " +
                                        "WHERE cta=" + nPlcCuenta + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=" + nPlmAno + " AND imp_d_c='" + (dPlcAbonos != 0d ? "A" : "C") + "' ";
                                break;
                            case 2:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc " +
                                        "FROM dbo.map_cuentas_contables " +
                                        "WHERE cta=" + nPlcCuenta + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=" + nPlmAno + " AND imp_d_c='' ";
                                break;
                            case 3:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc " +
                                        "FROM dbo.map_cuentas_contables " +
                                        "WHERE cta=" + nPlcCuenta + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=0 AND imp_d_c='" + (dPlcAbonos != 0d ? "A" : "C") + "' ";
                                break;
                            case 4:
                                sSql = "SELECT fid_cta, fid_cc, fid_tax_bas, fid_tax, fid_item, fid_item_aux, fid_bpr, fid_bpb, imp_perc " +
                                        "FROM dbo.map_cuentas_contables " +
                                        "WHERE cta=" + nPlcCuenta + " AND scta=" + nSCta + " AND sscta=" + nSSCta + " AND " +
                                        "imp_year=0 AND imp_d_c='' ";
                                break;
                            default:
                                throw new Exception("No se ha encontrado el mapeo de la cuenta: [" + nPlcCuenta + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                        }

                        if (sSql.length() == 0) {
                            throw new Exception("No existe sentencia SQL de mapeo de la cuenta: [" + nPlcCuenta + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                        }
                        else {
                            rsSqlServerMap = stSqlServerMap.executeQuery(sSql);
                            while (rsSqlServerMap.next()) {
                                sFidAcc = rsSqlServerMap.getString("fid_cta");
                                sFidCcb = rsSqlServerMap.getString("fid_cc");
                                nFidBpr = rsSqlServerMap.getInt("fid_bpr");
                                nFidBpb = rsSqlServerMap.getInt("fid_bpb");
                                nFidItem = rsSqlServerMap.getInt("fid_item");
                                nFidItemAux = rsSqlServerMap.getInt("fid_item_aux");
                                nFidTaxBasic = rsSqlServerMap.getInt("fid_tax_bas");
                                nFidTax = rsSqlServerMap.getInt("fid_tax");
                                dPercentage = rsSqlServerMap.getDouble("imp_perc");

                                if (sFidAcc == null) {
                                    sFidAcc = "";
                                }
                                else {
                                    sFidAcc = sFidAcc.trim();
                                }

                                if (sFidCcb == null || sFidCcb.trim().length() == 0) {
                                    sFidCcb = "";
                                }
                                else {
                                    sFidCcb = sFidCcb.trim();
                                }

                                nFid_cob_n = 0;
                                nFid_ent_n = 0;
                                nFid_ct_ref_n = 0;
                                anDpsKey = null;

                                /*
                                 * *** CUENTAS DE SISTEMA ***
                                 * NOTA:
                                 * Esta sección se configura a mano, de acuerdo a la contabilidad de la empresa en cuestión:
                                 */

                                switch (nPlcCuenta) {
                                    case 1110:
                                        // Caja y bancos:

                                        sSql = "SELECT id_cob, id_acc_cash FROM dbo.map_cuentas_bancarias WHERE bank=" + nPlcSCuenta + "; ";
                                        rsSqlServerAux = stSqlServerAux.executeQuery(sSql);
                                        if (!rsSqlServerAux.next()) {
                                            throw new Exception("No se encontró la configuración del banco: [" + nPlcSCuenta + "].");
                                        }
                                        else {
                                            nFid_cob_n = rsSqlServerAux.getInt("id_cob");
                                            nFid_ent_n = rsSqlServerAux.getInt("id_acc_cash");
                                        }
                                        break;

                                    case 1130:
                                        // Clientes:

                                        nFid_ct_ref_n = 3;

                                        // Buscar ID del DPS del presente movimiento:

                                        anDpsKey = lookUpDps(stSqlServerAux, stMySqlAux, nFid_ct_ref_n, nPlcSCuenta, nPlcSSCuenta);
                                        break;

                                    case 2131:
                                        // Proveedores:

                                        nFid_ct_ref_n = 2;

                                        // Buscar ID del DPS del presente movimiento:

                                        anDpsKey = lookUpDps(stSqlServerAux, stMySqlAux, nFid_ct_ref_n, nPlcSCuenta, nPlcSSCuenta);
                                        break;

                                    case 1150:
                                        // Deudores diversos:

                                        nFid_ct_ref_n = 5;
                                        break;

                                     case 2120:
                                     case 2160:
                                        // Acreedores diversos:

                                        nFid_ct_ref_n = 4;
                                        break;

                                    case 5000:
                                        // Compras:

                                        if (sPlcConcepto.indexOf(" ") != -1) {
                                            dPlcUnidades = SLibUtilities.parseDouble(sPlcConcepto.substring(0, sPlcConcepto.indexOf(" ")));
                                        }
                                        break;

                                    default:
                                }

                                /*
                                 * *** FIN: CUENTAS DE SISTEMA ***
                                 */

                                if (sFidAcc.length() == 0) {
                                    throw new Exception("Se ha encontrado una inconsistencia en el mapeo de la cuenta: [" + nPlcCuenta + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                                }

                                if (nFidItem == 0 && nFidItemAux != 0) {
                                    throw new Exception("Se ha encontrado una inconsistencia en el mapeo de los ítems de la cuenta: [" + nPlcCuenta + "-" + nPlcSCuenta + "-" + nPlcSSCuenta + "].");
                                }

                                sReference = "";

                                if (nFid_ct_ref_n == 0) {
                                    nFid_bp_nr = 0;
                                    nFid_bpb_n = 0;
                                }
                                else {
                                    if (nFidBpr != 0) {
                                        nFid_bp_nr = nFidBpr;
                                        nFid_bpb_n = nFidBpb;
                                    }
                                    else if (nFid_ct_ref_n == 3 || nFid_ct_ref_n == 2) {
                                        if (nFid_ct_ref_n == 3) {
                                            sSql = "SELECT cte_fixed FROM dbo.map_bp_cte_fixed WHERE cte=" + nPlcSCuenta + "; ";
                                            rsSqlServerAux = stSqlServerAux.executeQuery(sSql);
                                            if (rsSqlServerAux.next()) {
                                                nPlcSCuenta = rsSqlServerAux.getInt("cte_fixed");   // original business partner is duplicated, so only one registry must be used
                                            }
                                        }
                                        else if (nFid_ct_ref_n == 2) {
                                            sSql = "SELECT prv_fixed FROM dbo.map_bp_prv_fixed WHERE prv=" + nPlcSCuenta + "; ";
                                            rsSqlServerAux = stSqlServerAux.executeQuery(sSql);
                                            if (rsSqlServerAux.next()) {
                                                nPlcSCuenta = rsSqlServerAux.getInt("prv_fixed");   // original business partner is duplicated, so only one registry must be used
                                            }
                                        }

                                        sSql = "SELECT c.id_bp, b.id_bpb " +
                                                "FROM erp.bpsu_bp_ct AS c INNER JOIN erp.bpsu_bpb AS b ON " +
                                                "c.id_bp=b.fid_bp AND b.fid_tp_bpb=1 " +
                                                "WHERE c.id_ct_bp=" + nFid_ct_ref_n + " AND c.bp_key='" + nPlcSCuenta + "'; ";
                                        rsMySql = stMySql.executeQuery(sSql);
                                        if (!rsMySql.next()) {
                                            throw new Exception("No se encontró la configuración del business partner: [" + nPlcSCuenta + "] cat.: [" + nFid_ct_ref_n + "].");
                                        }
                                        else {
                                            nFid_bp_nr = rsMySql.getInt("c.id_bp");
                                            nFid_bpb_n = rsMySql.getInt("b.id_bpb");
                                        }

                                        /*
                                         * *** SERIES DE DOCUMENTOS DE VENTAS ***
                                         * NOTA:
                                         * Esta sección se configura a mano, de acuerdo a los prefijos contables de la empresa en cuestión:
                                         */

                                        if (nFid_ct_ref_n == 3) {
                                            if (nPlcSSCuenta > 1000000 && nPlcSSCuenta < 2000000) {
                                                sReference = "A-";
                                            }
                                            else if (nPlcSSCuenta < 3000000) {
                                                sReference = "B-";
                                            }
                                            else if (nPlcSSCuenta < 4000000) {
                                                sReference = "";
                                            }
                                            else if (nPlcSSCuenta < 5000000) {
                                                sReference = "";
                                            }
                                            else if (nPlcSSCuenta < 6000000) {
                                                sReference = "";
                                            }
                                        }

                                        /*
                                         * *** FIN: SERIES DE DOCUMENTOS DE VENTAS ***
                                         */

                                        sReference += nPlcSSCuenta;
                                    }
                                    else {
                                        nFid_bp_nr = 0;
                                        nFid_bpb_n = 0;
                                    }
                                }

                                /*
                                 * *** CUENTAS DE SISTEMA ***
                                 * NOTA:
                                 * Esta sección se configura a mano, de acuerdo a la contabilidad de la empresa en cuestión:
                                 */

                                if (sFidAcc.startsWith("1105")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_CASH;
                                }
                                else if (sFidAcc.startsWith("1110")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_CASH_BANK;
                                }
                                else if (sFidAcc.startsWith("1140") || sFidAcc.startsWith("2105")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                                }
                                else if (sFidAcc.startsWith("1120") || sFidAcc.startsWith("2120")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                                }
                                else if (sFidAcc.startsWith("2115")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                                }
                                else if (sFidAcc.startsWith("1145")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                                }
                                else if (sFidAcc.startsWith("1130")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_STOCK;
                                }
                                else if (sFidAcc.startsWith("1155") || sFidAcc.startsWith("1160")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT;
                                }
                                else if (sFidAcc.startsWith("1165")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_DBT_PEND;
                                }
                                else if (sFidAcc.startsWith("2130") || sFidAcc.startsWith("2140")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT;
                                }
                                else if (sFidAcc.startsWith("2135")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_TAX_CDT_PEND;
                                }
                                else if (sFidAcc.startsWith("1205") || sFidAcc.startsWith("1210") || sFidAcc.startsWith("1215") ||
                                        sFidAcc.startsWith("1220") || sFidAcc.startsWith("1225") || sFidAcc.startsWith("1230") ||
                                        sFidAcc.startsWith("1235")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_ASSET_ASSET;
                                }
                                else if (sFidAcc.startsWith("4100") || sFidAcc.startsWith("4200") || sFidAcc.startsWith("4300")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_SAL_GOOD;
                                }
                                else if (sFidAcc.startsWith("5100") || sFidAcc.startsWith("5200") || sFidAcc.startsWith("5300")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PUR_GOOD;
                                }
                                else if (sFidAcc.startsWith("6000") || sFidAcc.startsWith("7000") || sFidAcc.startsWith("8000")) {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PUR_SERV;
                                }
                                else if (sFidAcc.startsWith("4122") || sFidAcc.startsWith("4123") || sFidAcc.startsWith("4125")) {
                                    if (dPlcCargos < 0) {
                                        anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PROF_LOSS;
                                    }
                                    else {
                                        anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_PROF_PROF;
                                    }
                                }
                                else {
                                    anSysMoveTypeKey = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                                }

                                /*
                                 * *** FIN: CUENTAS DE SISTEMA ***
                                 */

                                /*
                                 * End of code exclusive for Tron Hermanos
                                 */

                                nEntryNumber++;
                                sSql = "INSERT INTO fin_rec_ety VALUES (" +
                                        nId_year + ", " + nId_per + ", 1, 'X" + sType + "', " + nPlmNumPol + ", " + nEntryNumber + ", " +
                                        "'" + sPlcConcepto.substring(0, sPlcConcepto.length()> 99 ? 99 : sPlcConcepto.length()) + "', '" + sReference + "', 0, " +
                                        (dPlcCargos * dPercentage) + ", " + (dPlcAbonos * dPercentage) + ", " + dExchangeRate + ", " + dExchangeRate + ", " +
                                        (dPlcCargosCy * dPercentage) + ", " + (dPlcAbonosCy * dPercentage) + ", " +
                                        Math.abs(dPlcUnidades) + ", 0, " + nEntryNumber + ", '', " + bPlcDifCambiaria + ", 1, 0, " +
                                        "'" + sFidAcc + "', 1, NULL, 99, 1, 1, 99, " + (dPlcCargos != 0 ? "1, " : "2, ") + "1, 1, " + anSysMoveTypeKey[0] + ", " + anSysMoveTypeKey[1] + ", " +
                                        nFid_cur + ", " + (sFidCcb.length() == 0 || sFidCcb.compareTo("0") == 0 ? "NULL" : "'" + sFidCcb + "'") + ", NULL, NULL, " +
                                        (nFid_bp_nr == 0 ? "NULL" : "" + nFid_bp_nr) + ", " + (nFid_bpb_n == 0 ? "NULL" : "" + nFid_bpb_n) + ", " + (nFid_ct_ref_n == 0 ? "NULL" : "" + nFid_ct_ref_n) + ", " +
                                        (nFid_cob_n == 0 ? "NULL, NULL, " : "" + nFid_cob_n + ", " + nFid_ent_n + ", ") +
                                        "NULL, NULL, " +
                                        (nFidTaxBasic == 0 ? "NULL, NULL, " : "" + nFidTaxBasic + ", " + nFidTax + ", ") + "NULL, " +
                                        (anDpsKey == null ? "NULL, NULL, " : "" + anDpsKey[0] + ", " + anDpsKey[1] + ", ") + "NULL, NULL, " +
                                        "NULL, NULL, NULL, NULL, NULL, NULL, NULL, " +
                                        "" + (nFidItem == 0 ? "NULL" : "" + nFidItem) + ", " +
                                        "" + (nFidItemAux == 0 ? "NULL" : "" + nFidItemAux) + ", NULL, NULL, NULL, " +
                                        "1, 1, 1, '" + sdfMySql.format(tDateImport) + "', NOW(), NOW()); ";
                                stMySql.execute(sSql);

                                bMapExists = true;
                            }
                        }
                    }
                }

                jpbProgress.setValue((int) ((++nRecord / (double) nRecordCount) * 100d));
                System.out.println("Record " + nRecord + " out of " + nRecordCount + "; plc_ano=" + nPlmAno + ", plc_tipo='" + sType + "', plc_num_pol=" + nPlmNumPol + ".");
            }

            // Update fid_unit_n in fin_rec_ety:

            sSql = "UPDATE fin_rec AS r " +
                    "INNER JOIN fin_rec_ety AS re ON r.id_year = re.id_year AND r.id_per = re.id_per AND r.id_bkc = re.id_bkc AND r.id_tp_rec = re.id_tp_rec AND r.id_num = re.id_num " +
                    "INNER JOIN erp.itmu_item AS it ON re.fid_item_n = it.id_item " +
                    "SET re.fid_unit_n = it.fid_unit " +
                    "WHERE re.id_year = " + nYear + " AND r.dt <= '" + sdfMySql.format(tDateImport) + "';";
            stMySql.execute(sSql);
        }
        catch (Exception e) {
            bError = true;
            SLibUtilities.printOutException(this, e);
            System.err.println("Record plc_ano=" + nPlmAno + ", plc_tipo='" + sType + "', plc_num_pol=" + nPlmNumPol + ".");
            System.err.println("SQL: [" + sSql + "]");
        }
        finally {
            oProgressThread.stopThread();
            setCursor(oCursor);
            if (!bError) {
                System.err.println("El proceso ha finalizado exitosamente.");
                JOptionPane.showMessageDialog(this, "El proceso ha finalizado exitosamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                System.err.println("El proceso ha finalizado con errores.");
                JOptionPane.showMessageDialog(this, "El proceso ha finalizado con errores.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ImportAccountingRecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbImport;
    private javax.swing.JFormattedTextField jftDateImport;
    private javax.swing.JLabel jlDateImport;
    private javax.swing.JLabel jlDateImportExample;
    private javax.swing.JProgressBar jpbProgress;
    // End of variables declaration//GEN-END:variables

}
