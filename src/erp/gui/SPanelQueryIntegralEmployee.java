/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SPanelQueryIntegralEmployee.java
 *
 */

package erp.gui;

import erp.data.SDataConstantsSys;
import erp.gui.grid.SGridFilterPanelEmployee;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableSetting;
import erp.lib.table.STableTabInterface;
import erp.mbps.data.SDataEmployee;
import erp.mbps.data.SRowIntegralEmployee;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbEmployee;
import erp.mod.hrs.db.SDbEmployeeBenefitTablesAnnum;
import erp.mod.hrs.db.SHrsBenefitsManager;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsUtils;
import erp.mod.hrs.utils.SAnniversary;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.util.Date;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.JToggleButton;
import javax.swing.event.ListSelectionEvent;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibTimeUtils;
import sa.lib.SLibUtils;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiItem;

/**
 *
 * @author Sergio Flores
 */
public class SPanelQueryIntegralEmployee extends javax.swing.JPanel implements STableTabInterface, java.awt.event.ActionListener, java.awt.event.ItemListener, javax.swing.event.ListSelectionListener {
    
    public static final String NO_PHOTO = "(Foto no disponible)";
    public static final String NO_SIGNATURE = "(Firma no disponible)";

    private int mnPanelType;
    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moAvailableEmployeesPane;
    private SDbConfig moModuleConfig;
    private boolean mbHasRightEmpWage;
    private SDbEmployee moCurrentEmployee;
    
    private int mnFilterPaymentTypeId;
    private int mnFilterDepartamentId;
    private int mnFilterStatusEmployee;
    
    /** Creates new form SPanelQueryIntegralEmployee
     * @param client 
     */
    public SPanelQueryIntegralEmployee(erp.client.SClientInterface client) {
        try {
            mnPanelType = SModConsts.HRSX_EMP_INT;
            miClient = client;

            initComponents();
            initComponentsExtra();
        }
        catch (Exception ex) {
            SLibUtilities.printOutException(this, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgFilter = new javax.swing.ButtonGroup();
        bgSalary = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jpFilter = new javax.swing.JPanel();
        jtbStatusEmployeeActive = new javax.swing.JToggleButton();
        jtbStatusEmployeeInactive = new javax.swing.JToggleButton();
        jtbStatusEmployeeAll = new javax.swing.JToggleButton();
        jcbFilterPaymentType = new javax.swing.JComboBox();
        jbClearFilterPaymentType = new javax.swing.JButton();
        jlEmployeesAvailable = new javax.swing.JLabel();
        jpInformation = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jlFirstName = new javax.swing.JLabel();
        jtfFirstName = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jlFiscalId = new javax.swing.JLabel();
        jtfFiscalId = new javax.swing.JTextField();
        jlAlternativeId = new javax.swing.JLabel();
        jtfAlternativeId = new javax.swing.JTextField();
        jlSocialSecurityNumber = new javax.swing.JLabel();
        jtfSocialSecurityNumber = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jlDateBirth = new javax.swing.JLabel();
        jftDateBirth = new javax.swing.JFormattedTextField();
        jlDateBenefits = new javax.swing.JLabel();
        jftDateBenefits = new javax.swing.JFormattedTextField();
        jlAnniversary = new javax.swing.JLabel();
        jtfAnniversary = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jlDateLastHire = new javax.swing.JLabel();
        jftDateLastHire = new javax.swing.JFormattedTextField();
        jlDateLastDismissal_n = new javax.swing.JLabel();
        jftDateLastDismissal_n = new javax.swing.JFormattedTextField();
        jPanel18 = new javax.swing.JPanel();
        jlSalary = new javax.swing.JLabel();
        jtfSalary = new javax.swing.JTextField();
        jftSalaryLastChange = new javax.swing.JFormattedTextField();
        jlWage = new javax.swing.JLabel();
        jtfWage = new javax.swing.JTextField();
        jftWageLastChange = new javax.swing.JFormattedTextField();
        jPanel20 = new javax.swing.JPanel();
        jlSalarySscBase = new javax.swing.JLabel();
        jtfSalarySscBase = new javax.swing.JTextField();
        jftSalarySscBaseLastChange = new javax.swing.JFormattedTextField();
        jlSalaryBase = new javax.swing.JLabel();
        jtfSalaryBase = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jlBank = new javax.swing.JLabel();
        jtfBank = new javax.swing.JTextField();
        jlBankAccount = new javax.swing.JLabel();
        jtfBankAccount = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jlSex = new javax.swing.JLabel();
        jtfSex = new javax.swing.JTextField();
        jlMarital = new javax.swing.JLabel();
        jtfMarital = new javax.swing.JTextField();
        jlFkBloodType = new javax.swing.JLabel();
        jtfBloodType = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jlEducationType = new javax.swing.JLabel();
        jtfEducationType = new javax.swing.JTextField();
        jlMwzType = new javax.swing.JLabel();
        jtfMwzType = new javax.swing.JTextField();
        jlWorkingHoursDay = new javax.swing.JLabel();
        jtfWorkingHoursDay = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        jlCutoff = new javax.swing.JLabel();
        jtfCutoff = new javax.swing.JTextField();
        jlSeniorityDays1 = new javax.swing.JLabel();
        jtfCurrentYearDays = new javax.swing.JTextField();
        jlSeniority = new javax.swing.JLabel();
        jtfSeniorityYears = new javax.swing.JTextField();
        jlSeniorityYears = new javax.swing.JLabel();
        jtfSeniorityDays = new javax.swing.JTextField();
        jlSeniorityDays = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jlBenefitType = new javax.swing.JLabel();
        jlBenefitValue = new javax.swing.JLabel();
        jlBenefitPropPart = new javax.swing.JLabel();
        jlBenefitPropValue = new javax.swing.JLabel();
        jlBenefitPropPay = new javax.swing.JLabel();
        jPanel27 = new javax.swing.JPanel();
        jlAnnBon = new javax.swing.JLabel();
        jtfAnnBonDays = new javax.swing.JTextField();
        jlAnnBonDays1 = new javax.swing.JLabel();
        jtfAnnBonPropPart = new javax.swing.JTextField();
        jtfAnnBonPropDays = new javax.swing.JTextField();
        jlAnnBonDays2 = new javax.swing.JLabel();
        jtfAnnBonPropPay = new javax.swing.JTextField();
        jlAnnBonCur = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jlVac = new javax.swing.JLabel();
        jtfVacDays = new javax.swing.JTextField();
        jlVacDays1 = new javax.swing.JLabel();
        jtfVacPropPart = new javax.swing.JTextField();
        jtfVacPropDays = new javax.swing.JTextField();
        jlVacDays2 = new javax.swing.JLabel();
        jtfVacPropPay = new javax.swing.JTextField();
        jlVacCur = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jlVacBon = new javax.swing.JLabel();
        jtfVacBonPct = new javax.swing.JTextField();
        jlDummy1 = new javax.swing.JLabel();
        jtfVacBonPropPay = new javax.swing.JTextField();
        jlVacBonCur = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jlSettlement = new javax.swing.JLabel();
        jtfSettlement = new javax.swing.JTextField();
        jlSettlementCur = new javax.swing.JLabel();
        jlDummy2 = new javax.swing.JLabel();
        jWageMinimum = new javax.swing.JLabel();
        jtfWageMinimum = new javax.swing.JTextField();
        jlWageMinimumCur = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jlIndemnification = new javax.swing.JLabel();
        jtfIndemnification = new javax.swing.JTextField();
        jlRJDj = new javax.swing.JLabel();
        jtfIndemnificationDisL = new javax.swing.JTextField();
        jlIndemnificationDisL = new javax.swing.JLabel();
        jtfIndemnificationDicL = new javax.swing.JTextField();
        jlIndemnificationDicL = new javax.swing.JLabel();
        jrbSalaryBase = new javax.swing.JRadioButton();
        jrbSalarySscBase = new javax.swing.JRadioButton();
        jPanel6 = new javax.swing.JPanel();
        jlImgPhoto = new javax.swing.JLabel();
        jlImgSignature = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel1.add(jPanel3, java.awt.BorderLayout.NORTH);

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados:"));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());

        jpFilter.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgFilter.add(jtbStatusEmployeeActive);
        jtbStatusEmployeeActive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_act_off.gif"))); // NOI18N
        jtbStatusEmployeeActive.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jtbStatusEmployeeActive);

        bgFilter.add(jtbStatusEmployeeInactive);
        jtbStatusEmployeeInactive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_ina_off.gif"))); // NOI18N
        jtbStatusEmployeeInactive.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jtbStatusEmployeeInactive);

        bgFilter.add(jtbStatusEmployeeAll);
        jtbStatusEmployeeAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbStatusEmployeeAll.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jtbStatusEmployeeAll);

        jcbFilterPaymentType.setToolTipText("Filtrar periodo pago");
        jcbFilterPaymentType.setPreferredSize(new java.awt.Dimension(125, 23));
        jpFilter.add(jcbFilterPaymentType);

        jbClearFilterPaymentType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_delete_tmp.gif"))); // NOI18N
        jbClearFilterPaymentType.setToolTipText("Quitar filtro periodo pago");
        jbClearFilterPaymentType.setPreferredSize(new java.awt.Dimension(23, 23));
        jpFilter.add(jbClearFilterPaymentType);

        jpEmployeesAvailable.add(jpFilter, java.awt.BorderLayout.NORTH);

        jlEmployeesAvailable.setText("n");
        jlEmployeesAvailable.setPreferredSize(new java.awt.Dimension(100, 23));
        jpEmployeesAvailable.add(jlEmployeesAvailable, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jpEmployeesAvailable, java.awt.BorderLayout.CENTER);

        jpInformation.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos personales:"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(9, 0, 0, 3));

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFirstName.setText("Nombre:");
        jlFirstName.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel13.add(jlFirstName);

        jtfFirstName.setEditable(false);
        jtfFirstName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jtfFirstName.setText("TEXT");
        jtfFirstName.setFocusable(false);
        jtfFirstName.setPreferredSize(new java.awt.Dimension(445, 23));
        jPanel13.add(jtfFirstName);

        jPanel7.add(jPanel13);

        jPanel21.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFiscalId.setText("RFC:");
        jlFiscalId.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jlFiscalId);

        jtfFiscalId.setEditable(false);
        jtfFiscalId.setText("TEXT");
        jtfFiscalId.setFocusable(false);
        jtfFiscalId.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel21.add(jtfFiscalId);

        jlAlternativeId.setText("CURP:");
        jlAlternativeId.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlAlternativeId);

        jtfAlternativeId.setEditable(false);
        jtfAlternativeId.setText("TEXT");
        jtfAlternativeId.setFocusable(false);
        jtfAlternativeId.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel21.add(jtfAlternativeId);

        jlSocialSecurityNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSocialSecurityNumber.setText("NSS:");
        jlSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel21.add(jlSocialSecurityNumber);

        jtfSocialSecurityNumber.setEditable(false);
        jtfSocialSecurityNumber.setText("TEXT");
        jtfSocialSecurityNumber.setFocusable(false);
        jtfSocialSecurityNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel21.add(jtfSocialSecurityNumber);

        jPanel7.add(jPanel21);

        jPanel22.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateBirth.setText("Nacimiento:");
        jlDateBirth.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jlDateBirth);

        jftDateBirth.setEditable(false);
        jftDateBirth.setText("01/01/2001");
        jftDateBirth.setFocusable(false);
        jftDateBirth.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jftDateBirth);

        jlDateBenefits.setText("Inicio prestaciones:");
        jlDateBenefits.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlDateBenefits);

        jftDateBenefits.setEditable(false);
        jftDateBenefits.setBackground(new java.awt.Color(204, 255, 255));
        jftDateBenefits.setText("01/01/2001");
        jftDateBenefits.setFocusable(false);
        jftDateBenefits.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel22.add(jftDateBenefits);

        jlAnniversary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlAnniversary.setText("Aniv. actual:");
        jlAnniversary.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel22.add(jlAnniversary);

        jtfAnniversary.setEditable(false);
        jtfAnniversary.setBackground(new java.awt.Color(204, 255, 255));
        jtfAnniversary.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnniversary.setText("0");
        jtfAnniversary.setFocusable(false);
        jtfAnniversary.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel22.add(jtfAnniversary);

        jPanel7.add(jPanel22);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateLastHire.setText("Última alta:");
        jlDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jlDateLastHire);

        jftDateLastHire.setEditable(false);
        jftDateLastHire.setText("01/01/2001");
        jftDateLastHire.setFocusable(false);
        jftDateLastHire.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateLastHire);

        jlDateLastDismissal_n.setText("Última baja:");
        jlDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel15.add(jlDateLastDismissal_n);

        jftDateLastDismissal_n.setEditable(false);
        jftDateLastDismissal_n.setText("01/01/2001");
        jftDateLastDismissal_n.setFocusable(false);
        jftDateLastDismissal_n.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel15.add(jftDateLastDismissal_n);

        jPanel7.add(jPanel15);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalary.setText("Salario diario:");
        jlSalary.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jlSalary);

        jtfSalary.setEditable(false);
        jtfSalary.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalary.setText("0.00");
        jtfSalary.setFocusable(false);
        jtfSalary.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel18.add(jtfSalary);

        jftSalaryLastChange.setEditable(false);
        jftSalaryLastChange.setText("01/01/2001");
        jftSalaryLastChange.setFocusable(false);
        jftSalaryLastChange.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jftSalaryLastChange);

        jlWage.setText("Sueldo mensual:");
        jlWage.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel18.add(jlWage);

        jtfWage.setEditable(false);
        jtfWage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWage.setText("0.00");
        jtfWage.setFocusable(false);
        jtfWage.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel18.add(jtfWage);

        jftWageLastChange.setEditable(false);
        jftWageLastChange.setText("01/01/2001");
        jftWageLastChange.setFocusable(false);
        jftWageLastChange.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel18.add(jftWageLastChange);

        jPanel7.add(jPanel18);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSalarySscBase.setText("SBC:");
        jlSalarySscBase.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jlSalarySscBase);

        jtfSalarySscBase.setEditable(false);
        jtfSalarySscBase.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalarySscBase.setText("0.00");
        jtfSalarySscBase.setFocusable(false);
        jtfSalarySscBase.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel20.add(jtfSalarySscBase);

        jftSalarySscBaseLastChange.setEditable(false);
        jftSalarySscBaseLastChange.setText("01/01/2001");
        jftSalarySscBaseLastChange.setFocusable(false);
        jftSalarySscBaseLastChange.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel20.add(jftSalarySscBaseLastChange);

        jlSalaryBase.setText("Salario base:");
        jlSalaryBase.setPreferredSize(new java.awt.Dimension(105, 23));
        jPanel20.add(jlSalaryBase);

        jtfSalaryBase.setEditable(false);
        jtfSalaryBase.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSalaryBase.setText("0.00");
        jtfSalaryBase.setFocusable(false);
        jtfSalaryBase.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel20.add(jtfSalaryBase);

        jPanel7.add(jPanel20);

        jPanel19.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBank.setText("Banco:");
        jlBank.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel19.add(jlBank);

        jtfBank.setEditable(false);
        jtfBank.setText("TEXT");
        jtfBank.setFocusable(false);
        jtfBank.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jtfBank);

        jlBankAccount.setText(" Cuenta bancaria:");
        jlBankAccount.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel19.add(jlBankAccount);

        jtfBankAccount.setEditable(false);
        jtfBankAccount.setText("TEXT");
        jtfBankAccount.setFocusable(false);
        jtfBankAccount.setPreferredSize(new java.awt.Dimension(235, 23));
        jPanel19.add(jtfBankAccount);

        jPanel7.add(jPanel19);

        jPanel16.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSex.setText("Sexo:");
        jlSex.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlSex);

        jtfSex.setEditable(false);
        jtfSex.setText("TEXT");
        jtfSex.setFocusable(false);
        jtfSex.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jtfSex);

        jlMarital.setText(" Estado civil:");
        jlMarital.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jlMarital);

        jtfMarital.setEditable(false);
        jtfMarital.setText("TEXT");
        jtfMarital.setFocusable(false);
        jtfMarital.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel16.add(jtfMarital);

        jlFkBloodType.setText("Tipo sangre:");
        jlFkBloodType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel16.add(jlFkBloodType);

        jtfBloodType.setEditable(false);
        jtfBloodType.setText("TEXT");
        jtfBloodType.setFocusable(false);
        jtfBloodType.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel16.add(jtfBloodType);

        jPanel7.add(jPanel16);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlEducationType.setText("Escolaridad:");
        jlEducationType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlEducationType);

        jtfEducationType.setEditable(false);
        jtfEducationType.setText("TEXT");
        jtfEducationType.setFocusable(false);
        jtfEducationType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfEducationType);

        jlMwzType.setText(" Área geográfica:");
        jlMwzType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jlMwzType);

        jtfMwzType.setEditable(false);
        jtfMwzType.setText("TEXT");
        jtfMwzType.setFocusable(false);
        jtfMwzType.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel9.add(jtfMwzType);

        jlWorkingHoursDay.setText(" Hrs. jornada:");
        jlWorkingHoursDay.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel9.add(jlWorkingHoursDay);

        jtfWorkingHoursDay.setEditable(false);
        jtfWorkingHoursDay.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWorkingHoursDay.setText("0");
        jtfWorkingHoursDay.setFocusable(false);
        jtfWorkingHoursDay.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel9.add(jtfWorkingHoursDay);

        jPanel7.add(jPanel9);

        jPanel4.add(jPanel7, java.awt.BorderLayout.NORTH);

        jpInformation.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Prestaciones:"));
        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel10.setFocusable(false);
        jPanel10.setLayout(new java.awt.GridLayout(7, 1, 0, 3));

        jPanel30.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCutoff.setText("Fecha corte:");
        jlCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlCutoff);

        jtfCutoff.setEditable(false);
        jtfCutoff.setBackground(new java.awt.Color(204, 255, 255));
        jtfCutoff.setText("01/01/2001");
        jtfCutoff.setFocusable(false);
        jtfCutoff.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jtfCutoff);

        jlSeniorityDays1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSeniorityDays1.setText("Días año:");
        jlSeniorityDays1.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlSeniorityDays1);

        jtfCurrentYearDays.setEditable(false);
        jtfCurrentYearDays.setBackground(new java.awt.Color(204, 255, 255));
        jtfCurrentYearDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfCurrentYearDays.setText("0");
        jtfCurrentYearDays.setFocusable(false);
        jtfCurrentYearDays.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(jtfCurrentYearDays);

        jlSeniority.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlSeniority.setText("Antigüedad:");
        jlSeniority.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel30.add(jlSeniority);

        jtfSeniorityYears.setEditable(false);
        jtfSeniorityYears.setBackground(new java.awt.Color(204, 255, 255));
        jtfSeniorityYears.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSeniorityYears.setText("0");
        jtfSeniorityYears.setFocusable(false);
        jtfSeniorityYears.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(jtfSeniorityYears);

        jlSeniorityYears.setText("años");
        jlSeniorityYears.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel30.add(jlSeniorityYears);

        jtfSeniorityDays.setEditable(false);
        jtfSeniorityDays.setBackground(new java.awt.Color(204, 255, 255));
        jtfSeniorityDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSeniorityDays.setText("0");
        jtfSeniorityDays.setFocusable(false);
        jtfSeniorityDays.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel30.add(jtfSeniorityDays);

        jlSeniorityDays.setText("días");
        jlSeniorityDays.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel30.add(jlSeniorityDays);

        jPanel10.add(jPanel30);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBenefitType.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel11.add(jlBenefitType);

        jlBenefitValue.setText("Prest. aniv. actual");
        jlBenefitValue.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlBenefitValue);

        jlBenefitPropPart.setText("Parte prop.");
        jlBenefitPropPart.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel11.add(jlBenefitPropPart);

        jlBenefitPropValue.setText("Prest. proporcional");
        jlBenefitPropValue.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlBenefitPropValue);

        jlBenefitPropPay.setText("Pago proporcional");
        jlBenefitPropPay.setPreferredSize(new java.awt.Dimension(120, 23));
        jPanel11.add(jlBenefitPropPay);

        jPanel10.add(jPanel11);

        jPanel27.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlAnnBon.setText("Gratif. anual:");
        jlAnnBon.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel27.add(jlAnnBon);

        jtfAnnBonDays.setEditable(false);
        jtfAnnBonDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnBonDays.setText("0.0");
        jtfAnnBonDays.setFocusable(false);
        jtfAnnBonDays.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel27.add(jtfAnnBonDays);

        jlAnnBonDays1.setText("días");
        jlAnnBonDays1.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel27.add(jlAnnBonDays1);

        jtfAnnBonPropPart.setEditable(false);
        jtfAnnBonPropPart.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnBonPropPart.setText("0.00000000");
        jtfAnnBonPropPart.setFocusable(false);
        jtfAnnBonPropPart.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel27.add(jtfAnnBonPropPart);

        jtfAnnBonPropDays.setEditable(false);
        jtfAnnBonPropDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnBonPropDays.setText("0.000");
        jtfAnnBonPropDays.setFocusable(false);
        jtfAnnBonPropDays.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel27.add(jtfAnnBonPropDays);

        jlAnnBonDays2.setText("días");
        jlAnnBonDays2.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel27.add(jlAnnBonDays2);

        jtfAnnBonPropPay.setEditable(false);
        jtfAnnBonPropPay.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfAnnBonPropPay.setText("0.00");
        jtfAnnBonPropPay.setFocusable(false);
        jtfAnnBonPropPay.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel27.add(jtfAnnBonPropPay);

        jlAnnBonCur.setText("CUR");
        jlAnnBonCur.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel27.add(jlAnnBonCur);

        jPanel10.add(jPanel27);

        jPanel28.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVac.setText("Vacaciones:");
        jlVac.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel28.add(jlVac);

        jtfVacDays.setEditable(false);
        jtfVacDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacDays.setText("0.0");
        jtfVacDays.setFocusable(false);
        jtfVacDays.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel28.add(jtfVacDays);

        jlVacDays1.setText("días");
        jlVacDays1.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel28.add(jlVacDays1);

        jtfVacPropPart.setEditable(false);
        jtfVacPropPart.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacPropPart.setText("0.00000000");
        jtfVacPropPart.setFocusable(false);
        jtfVacPropPart.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel28.add(jtfVacPropPart);

        jtfVacPropDays.setEditable(false);
        jtfVacPropDays.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacPropDays.setText("0.000");
        jtfVacPropDays.setFocusable(false);
        jtfVacPropDays.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel28.add(jtfVacPropDays);

        jlVacDays2.setText("días");
        jlVacDays2.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel28.add(jlVacDays2);

        jtfVacPropPay.setEditable(false);
        jtfVacPropPay.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacPropPay.setText("0.00");
        jtfVacPropPay.setFocusable(false);
        jtfVacPropPay.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel28.add(jtfVacPropPay);

        jlVacCur.setText("CUR");
        jlVacCur.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel28.add(jlVacCur);

        jPanel10.add(jPanel28);

        jPanel29.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlVacBon.setText("Prima vac.:");
        jlVacBon.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel29.add(jlVacBon);

        jtfVacBonPct.setEditable(false);
        jtfVacBonPct.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacBonPct.setText("0.00 %");
        jtfVacBonPct.setFocusable(false);
        jtfVacBonPct.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel29.add(jtfVacBonPct);

        jlDummy1.setPreferredSize(new java.awt.Dimension(245, 23));
        jPanel29.add(jlDummy1);

        jtfVacBonPropPay.setEditable(false);
        jtfVacBonPropPay.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfVacBonPropPay.setText("0.00");
        jtfVacBonPropPay.setFocusable(false);
        jtfVacBonPropPay.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel29.add(jtfVacBonPropPay);

        jlVacBonCur.setText("CUR");
        jlVacBonCur.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel29.add(jlVacBonCur);

        jPanel10.add(jPanel29);

        jPanel31.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlSettlement.setText("Finiquito:");
        jlSettlement.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jlSettlement);

        jtfSettlement.setEditable(false);
        jtfSettlement.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfSettlement.setText("0.00");
        jtfSettlement.setFocusable(false);
        jtfSettlement.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel31.add(jtfSettlement);

        jlSettlementCur.setText("CUR");
        jlSettlementCur.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel31.add(jlSettlementCur);

        jlDummy2.setPreferredSize(new java.awt.Dimension(130, 23));
        jPanel31.add(jlDummy2);

        jWageMinimum.setText("Salario mínimo:");
        jWageMinimum.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel31.add(jWageMinimum);

        jtfWageMinimum.setEditable(false);
        jtfWageMinimum.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfWageMinimum.setText("0.00");
        jtfWageMinimum.setFocusable(false);
        jtfWageMinimum.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel31.add(jtfWageMinimum);

        jlWageMinimumCur.setText("CUR");
        jlWageMinimumCur.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel31.add(jlWageMinimumCur);

        jPanel10.add(jPanel31);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlIndemnification.setText("Liquidación:");
        jlIndemnification.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel2.add(jlIndemnification);

        jtfIndemnification.setEditable(false);
        jtfIndemnification.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIndemnification.setText("0.00");
        jtfIndemnification.setFocusable(false);
        jtfIndemnification.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel2.add(jtfIndemnification);

        jlRJDj.setForeground(new java.awt.Color(109, 109, 109));
        jlRJDj.setText("RV");
        jlRJDj.setToolTipText("Renuncia voluntaria");
        jlRJDj.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel2.add(jlRJDj);

        jtfIndemnificationDisL.setEditable(false);
        jtfIndemnificationDisL.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIndemnificationDisL.setText("0.00");
        jtfIndemnificationDisL.setFocusable(false);
        jtfIndemnificationDisL.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel2.add(jtfIndemnificationDisL);

        jlIndemnificationDisL.setForeground(new java.awt.Color(109, 109, 109));
        jlIndemnificationDisL.setText("DJ");
        jlIndemnificationDisL.setToolTipText("Despido justificado");
        jlIndemnificationDisL.setPreferredSize(new java.awt.Dimension(30, 23));
        jPanel2.add(jlIndemnificationDisL);

        jtfIndemnificationDicL.setEditable(false);
        jtfIndemnificationDicL.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfIndemnificationDicL.setText("0.00");
        jtfIndemnificationDicL.setFocusable(false);
        jtfIndemnificationDicL.setPreferredSize(new java.awt.Dimension(85, 23));
        jPanel2.add(jtfIndemnificationDicL);

        jlIndemnificationDicL.setForeground(new java.awt.Color(109, 109, 109));
        jlIndemnificationDicL.setText("DI");
        jlIndemnificationDicL.setToolTipText("Despido injustificado");
        jlIndemnificationDicL.setPreferredSize(new java.awt.Dimension(25, 23));
        jPanel2.add(jlIndemnificationDicL);

        bgSalary.add(jrbSalaryBase);
        jrbSalaryBase.setText("SB");
        jrbSalaryBase.setPreferredSize(new java.awt.Dimension(40, 23));
        jPanel2.add(jrbSalaryBase);

        bgSalary.add(jrbSalarySscBase);
        jrbSalarySscBase.setSelected(true);
        jrbSalarySscBase.setText("SBC");
        jrbSalarySscBase.setPreferredSize(new java.awt.Dimension(50, 23));
        jPanel2.add(jrbSalarySscBase);

        jPanel10.add(jPanel2);

        jPanel12.add(jPanel10, java.awt.BorderLayout.NORTH);

        jPanel5.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlImgPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlImgPhoto.setText("Foto");
        jlImgPhoto.setToolTipText("Foto (tamaño sugerido: 100×100 px)");
        jlImgPhoto.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jlImgPhoto.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel6.add(jlImgPhoto);

        jlImgSignature.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlImgSignature.setText("Firma");
        jlImgSignature.setToolTipText("Firma (tamaño sugerido: 250×100 px)");
        jlImgSignature.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jlImgSignature.setPreferredSize(new java.awt.Dimension(250, 100));
        jPanel6.add(jlImgSignature);

        jPanel5.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jpInformation.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel1.add(jpInformation, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFilter;
    private javax.swing.ButtonGroup bgSalary;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel jWageMinimum;
    private javax.swing.JButton jbClearFilterPaymentType;
    private javax.swing.JComboBox jcbFilterPaymentType;
    private javax.swing.JFormattedTextField jftDateBenefits;
    private javax.swing.JFormattedTextField jftDateBirth;
    private javax.swing.JFormattedTextField jftDateLastDismissal_n;
    private javax.swing.JFormattedTextField jftDateLastHire;
    private javax.swing.JFormattedTextField jftSalaryLastChange;
    private javax.swing.JFormattedTextField jftSalarySscBaseLastChange;
    private javax.swing.JFormattedTextField jftWageLastChange;
    private javax.swing.JLabel jlAlternativeId;
    private javax.swing.JLabel jlAnnBon;
    private javax.swing.JLabel jlAnnBonCur;
    private javax.swing.JLabel jlAnnBonDays1;
    private javax.swing.JLabel jlAnnBonDays2;
    private javax.swing.JLabel jlAnniversary;
    private javax.swing.JLabel jlBank;
    private javax.swing.JLabel jlBankAccount;
    private javax.swing.JLabel jlBenefitPropPart;
    private javax.swing.JLabel jlBenefitPropPay;
    private javax.swing.JLabel jlBenefitPropValue;
    private javax.swing.JLabel jlBenefitType;
    private javax.swing.JLabel jlBenefitValue;
    private javax.swing.JLabel jlCutoff;
    private javax.swing.JLabel jlDateBenefits;
    private javax.swing.JLabel jlDateBirth;
    private javax.swing.JLabel jlDateLastDismissal_n;
    private javax.swing.JLabel jlDateLastHire;
    private javax.swing.JLabel jlDummy1;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlEducationType;
    private javax.swing.JLabel jlEmployeesAvailable;
    private javax.swing.JLabel jlFirstName;
    private javax.swing.JLabel jlFiscalId;
    private javax.swing.JLabel jlFkBloodType;
    private javax.swing.JLabel jlImgPhoto;
    private javax.swing.JLabel jlImgSignature;
    private javax.swing.JLabel jlIndemnification;
    private javax.swing.JLabel jlIndemnificationDicL;
    private javax.swing.JLabel jlIndemnificationDisL;
    private javax.swing.JLabel jlMarital;
    private javax.swing.JLabel jlMwzType;
    private javax.swing.JLabel jlRJDj;
    private javax.swing.JLabel jlSalary;
    private javax.swing.JLabel jlSalaryBase;
    private javax.swing.JLabel jlSalarySscBase;
    private javax.swing.JLabel jlSeniority;
    private javax.swing.JLabel jlSeniorityDays;
    private javax.swing.JLabel jlSeniorityDays1;
    private javax.swing.JLabel jlSeniorityYears;
    private javax.swing.JLabel jlSettlement;
    private javax.swing.JLabel jlSettlementCur;
    private javax.swing.JLabel jlSex;
    private javax.swing.JLabel jlSocialSecurityNumber;
    private javax.swing.JLabel jlVac;
    private javax.swing.JLabel jlVacBon;
    private javax.swing.JLabel jlVacBonCur;
    private javax.swing.JLabel jlVacCur;
    private javax.swing.JLabel jlVacDays1;
    private javax.swing.JLabel jlVacDays2;
    private javax.swing.JLabel jlWage;
    private javax.swing.JLabel jlWageMinimumCur;
    private javax.swing.JLabel jlWorkingHoursDay;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JPanel jpFilter;
    private javax.swing.JPanel jpInformation;
    private javax.swing.JRadioButton jrbSalaryBase;
    private javax.swing.JRadioButton jrbSalarySscBase;
    private javax.swing.JToggleButton jtbStatusEmployeeActive;
    private javax.swing.JToggleButton jtbStatusEmployeeAll;
    private javax.swing.JToggleButton jtbStatusEmployeeInactive;
    private javax.swing.JTextField jtfAlternativeId;
    private javax.swing.JTextField jtfAnnBonDays;
    private javax.swing.JTextField jtfAnnBonPropDays;
    private javax.swing.JTextField jtfAnnBonPropPart;
    private javax.swing.JTextField jtfAnnBonPropPay;
    private javax.swing.JTextField jtfAnniversary;
    private javax.swing.JTextField jtfBank;
    private javax.swing.JTextField jtfBankAccount;
    private javax.swing.JTextField jtfBloodType;
    private javax.swing.JTextField jtfCurrentYearDays;
    private javax.swing.JTextField jtfCutoff;
    private javax.swing.JTextField jtfEducationType;
    private javax.swing.JTextField jtfFirstName;
    private javax.swing.JTextField jtfFiscalId;
    private javax.swing.JTextField jtfIndemnification;
    private javax.swing.JTextField jtfIndemnificationDicL;
    private javax.swing.JTextField jtfIndemnificationDisL;
    private javax.swing.JTextField jtfMarital;
    private javax.swing.JTextField jtfMwzType;
    private javax.swing.JTextField jtfSalary;
    private javax.swing.JTextField jtfSalaryBase;
    private javax.swing.JTextField jtfSalarySscBase;
    private javax.swing.JTextField jtfSeniorityDays;
    private javax.swing.JTextField jtfSeniorityYears;
    private javax.swing.JTextField jtfSettlement;
    private javax.swing.JTextField jtfSex;
    private javax.swing.JTextField jtfSocialSecurityNumber;
    private javax.swing.JTextField jtfVacBonPct;
    private javax.swing.JTextField jtfVacBonPropPay;
    private javax.swing.JTextField jtfVacDays;
    private javax.swing.JTextField jtfVacPropDays;
    private javax.swing.JTextField jtfVacPropPart;
    private javax.swing.JTextField jtfVacPropPay;
    private javax.swing.JTextField jtfWage;
    private javax.swing.JTextField jtfWageMinimum;
    private javax.swing.JTextField jtfWorkingHoursDay;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsExtra() throws Exception {
        moAvailableEmployeesPane = new STablePaneGrid(miClient);
        jpEmployeesAvailable.add(moAvailableEmployeesPane, BorderLayout.CENTER);
        
        moModuleConfig = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });

        mbHasRightEmpWage = miClient.getSessionXXX().getUser().hasRight(miClient, SDataConstantsSys.PRV_HRS_CAT_EMP_WAGE).HasRight;

        int i = 0;
        STableColumnForm[] aoTableColumns = new STableColumnForm[17];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 250);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 50);
        aoTableColumns[i++].setCellRenderer(SGridUtils.CellRendererIntegerRaw);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Activo", STableConstants.WIDTH_BOOLEAN_2X);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período pago", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Categoría", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo empleado", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Calle", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número ext.", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número int.", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Colonia", 150);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "CP", 50);
        aoTableColumns[i++].setApostropheOnCsvRequired(true);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "AP", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Localidad", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Municipio", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Estado", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "País", 50);

        for (i = 0; i < aoTableColumns.length; i++) {
            moAvailableEmployeesPane.addTableColumn(aoTableColumns[i]);
        }
        
        jlAnnBonCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jlVacCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jlVacBonCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jlSettlementCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        jlWageMinimumCur.setText(miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        
        jbClearFilterPaymentType.addActionListener(this);
        
        jcbFilterPaymentType.addItemListener(this);
        jtbStatusEmployeeActive.addItemListener(this);
        jtbStatusEmployeeInactive.addItemListener(this);
        jtbStatusEmployeeAll.addItemListener(this);
        
        jrbSalaryBase.addItemListener(this);
        jrbSalarySscBase.addItemListener(this);
        
        prepareFilters();
        populateEmployees();
    }                                        

    private void prepareFilters() {
        miClient.getSession().populateCatalogue(jcbFilterPaymentType, SModConsts.HRSS_TP_PAY, SLibConsts.UNDEFINED, null);
        actionPerformedClearFilterPaymentType(false);
        
        jtbStatusEmployeeActive.setSelected(true);
        itemStateChangedStatusEmployeeActive(false);
    }
    
    private void populateEmployees() throws Exception {
        String sql = "";
        ResultSet resultSet = null;
        int employeeId = 0;
        
        moAvailableEmployeesPane.createTable(this);
        moAvailableEmployeesPane.clearTableRows();
        
        sql = "SELECT emp.*, CAST(emp.num AS UNSIGNED INTEGER) AS _emp_num, bp.bp, dep.name, ct.code, tp.code, pay.name, a.street, a.street_num_ext, a.street_num_int, a.neighborhood, a.reference, " +
                "a.locality, a.county, a.state, a.zip_code, a.po_box, IF(cty.cty IS NULL, 'MÉXICO', cty.cty) AS f_cty " +
                "FROM erp.hrsu_emp AS emp " +
                "INNER JOIN hrs_emp_member AS empm ON empm.id_emp = emp.id_emp " +
                "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = emp.fk_dep " +
                "INNER JOIN erp.hrsu_tp_emp AS ct ON ct.id_tp_emp = emp.fk_tp_emp " +
                "INNER JOIN erp.hrsu_tp_wrk AS tp ON tp.id_tp_wrk = emp.fk_tp_wrk " +
                "INNER JOIN erp.hrss_tp_pay AS pay ON pay.id_tp_pay = emp.fk_tp_pay " +
                "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                "INNER JOIN erp.bpsu_bpb AS bpb ON bpb.fid_bp = bp.id_bp " +
                "INNER JOIN erp.bpsu_bpb_add AS a ON a.id_bpb = bpb.id_bpb " +
                "LEFT OUTER JOIN erp.locu_cty AS cty ON cty.id_cty = a.fid_cty_n " + 
                "WHERE emp.b_del = 0 AND bp.b_del = 0" + (mnFilterPaymentTypeId != SLibConsts.UNDEFINED ? " AND emp.fk_tp_pay = " + mnFilterPaymentTypeId : "") + " " +
                (mnFilterDepartamentId != SLibConsts.UNDEFINED ? " AND emp.fk_dep = " + mnFilterDepartamentId : "") + " " +
                (mnFilterStatusEmployee != SLibConsts.UNDEFINED ? (mnFilterStatusEmployee == SGridFilterPanelEmployee.EMP_STATUS_ACT ? " AND emp.b_act " : (mnFilterStatusEmployee == SGridFilterPanelEmployee.EMP_STATUS_INA ? " AND NOT emp.b_act " : "")) : "") + " " +
                "AND bp.b_att_emp " +
                "GROUP BY emp.id_emp " +
                "ORDER BY bp.bp, emp.id_emp, pay.name ";

        resultSet = miClient.getSession().getStatement().executeQuery(sql);
        while (resultSet.next()) {
            SRowIntegralEmployee row = new SRowIntegralEmployee();

            employeeId = resultSet.getInt("id_emp");
            row.setPrimaryKey(new int[] { employeeId });
            row.setPkEmployeeId(employeeId);
            row.setEmployeeNumber(resultSet.getInt("_emp_num"));
            row.setEmployeeName(resultSet.getString("bp.bp"));
            row.setActive(resultSet.getBoolean("emp.b_act"));
            row.setEmployeeCategory(resultSet.getString("ct.code"));
            row.setEmployeeType(resultSet.getString("tp.code"));
            row.setDepartament(resultSet.getString("dep.name"));
            row.setSalaryType(resultSet.getString("pay.name"));
            row.setStreet(resultSet.getString("a.street"));
            row.setStreetNumberExt(resultSet.getString("a.street_num_ext"));
            row.setStreetNumberInt(resultSet.getString("a.street_num_int"));
            row.setNeighborhood(resultSet.getString("a.neighborhood"));
            row.setLocality(resultSet.getString("a.locality"));
            row.setCounty(resultSet.getString("a.county"));
            row.setState(resultSet.getString("a.state"));
            row.setZipCode(resultSet.getString("a.zip_code"));
            row.setPoBox(resultSet.getString("a.po_box"));
            row.setCountry(resultSet.getString("f_cty"));
            
            row.prepareTableRow();
            moAvailableEmployeesPane.addTableRow(row);
        }
        
        moAvailableEmployeesPane.renderTableRows();
        moAvailableEmployeesPane.setTableRowSelection(0);
        
        jlEmployeesAvailable.setText("Empleados disponibles: " + moAvailableEmployeesPane.getTableModel().getRowCount());
    }
    
    private void renderEmployee(final int employeeId) {
        try {
            miClient.getFrame().getRootPane().setCursor(new Cursor(Cursor.WAIT_CURSOR));
            
            if (employeeId == 0) {
                moCurrentEmployee = null;

                jtfFirstName.setText("");
                jtfFiscalId.setText("");
                jtfAlternativeId.setText("");

                jtfSocialSecurityNumber.setText("");
                jftDateBirth.setText("");
                jftDateBenefits.setText("");
                jftDateLastHire.setText("");
                jftDateLastDismissal_n.setText("");

                jtfSalary.setText("");
                jftSalaryLastChange.setText("");
                jtfWage.setText("");
                jftWageLastChange.setText("");
                jtfSalarySscBase.setText("");
                jftSalarySscBaseLastChange.setText("");
                jtfSalaryBase.setText("");

                jtfBank.setText("");
                jtfBankAccount.setText("");

                jtfSex.setText("");
                jtfMarital.setText("");
                jtfBloodType.setText("");
                jtfEducationType.setText("");
                jtfMwzType.setText("");
                jtfWorkingHoursDay.setText("");

                jlImgPhoto.setIcon(null);
                jlImgPhoto.setText("");

                jlImgSignature.setIcon(null);
                jlImgSignature.setText("");
            }
            else {
                moCurrentEmployee = (SDbEmployee) miClient.getSession().readRegistry(SModConsts.HRSU_EMP, new int[] { employeeId });

                jtfFirstName.setText(moCurrentEmployee.getXtaEmployeeName());
                jtfFiscalId.setText(moCurrentEmployee.getXtaEmployeeRfc());
                jtfAlternativeId.setText(moCurrentEmployee.getXtaEmployeeCurp());

                jtfSocialSecurityNumber.setText(moCurrentEmployee.getSocialSecurityNumber());
                jftDateBirth.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateBirth()));
                jftDateBenefits.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateBenefits()));
                jftDateLastHire.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateLastHire()));
                jftDateLastDismissal_n.setText(moCurrentEmployee.getDateLastDismissal_n() == null ? "" : SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateLastDismissal_n()));

                if (!mbHasRightEmpWage) {
                    jtfSalary.setText("");
                    jftSalaryLastChange.setText("");
                    jtfWage.setText("");
                    jftWageLastChange.setText("");
                    jtfSalarySscBase.setText("");
                    jftSalarySscBaseLastChange.setText("");
                    jtfSalaryBase.setText("");

                    jtfBank.setText("");
                    jtfBankAccount.setText("");
                }
                else {
                    jtfSalary.setText(SLibUtils.DecimalFormatValue2D.format(moCurrentEmployee.getSalary()));
                    jftSalaryLastChange.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateSalary()));
                    jtfWage.setText(SLibUtils.DecimalFormatValue2D.format(moCurrentEmployee.getWage()));
                    jftWageLastChange.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateWage()));
                    jtfSalarySscBase.setText(SLibUtils.DecimalFormatValue2D.format(moCurrentEmployee.getSalarySscBase()));
                    jftSalarySscBaseLastChange.setText(SLibUtils.DateFormatDate.format(moCurrentEmployee.getDateSalarySscBase()));
                    jtfSalaryBase.setText(SLibUtils.getDecimalFormatAmount().format(moCurrentEmployee.getSettlementSalary()));

                    jtfBank.setText(moCurrentEmployee.getFkBankId_n() == SLibConsts.UNDEFINED ? "" : (String) miClient.getSession().readField(SModConsts.HRSS_BANK, new int[] { moCurrentEmployee.getFkBankId_n() }, SDbRegistry.FIELD_NAME));
                    jtfBank.setCaretPosition(0);
                    jtfBankAccount.setText(moCurrentEmployee.getBankAccount());
                    jtfBankAccount.setCaretPosition(0);
                }

                jtfSex.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { moCurrentEmployee.getFkCatalogueSexClassId(), moCurrentEmployee.getFkCatalogueSexTypeId() }, SDbRegistry.FIELD_NAME) + "");
                jtfSex.setCaretPosition(0);
                jtfMarital.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { moCurrentEmployee.getFkCatalogueMaritalStatusClassId(), moCurrentEmployee.getFkCatalogueMaritalStatusTypeId() }, SDbRegistry.FIELD_NAME) + "");
                jtfMarital.setCaretPosition(0);
                jtfBloodType.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { moCurrentEmployee.getFkCatalogueBloodTypeClassId(), moCurrentEmployee.getFkCatalogueBloodTypeTypeId() }, SDbRegistry.FIELD_NAME) + "");
                jtfBloodType.setCaretPosition(0);
                jtfEducationType.setText(miClient.getSession().readField(SModConsts.HRSS_TP_HRS_CAT, new int[] { moCurrentEmployee.getFkCatalogueEducationClassId(), moCurrentEmployee.getFkCatalogueEducationTypeId() }, SDbRegistry.FIELD_NAME) + "");
                jtfEducationType.setCaretPosition(0);
                jtfMwzType.setText(miClient.getSession().readField(SModConsts.HRSU_TP_MWZ, new int[] { moCurrentEmployee.getFkMwzTypeId() }, SDbRegistry.FIELD_NAME) + "");
                jtfMwzType.setCaretPosition(0);
                jtfWorkingHoursDay.setText("" + moCurrentEmployee.getWorkingHoursDay());
                jtfWorkingHoursDay.setCaretPosition(0);

                SDataEmployee dataEmployee = new SDataEmployee();
                dataEmployee.read(new int[] { employeeId }, miClient.getSession().getStatement());

                if (dataEmployee.getXtaImageIconPhoto_n() != null) {
                    ImageIcon photo = dataEmployee.getXtaImageIconPhoto_n();
                    if (photo.getIconHeight() > 300) {
                        photo = new ImageIcon(photo.getImage().getScaledInstance(100, 100, Image.SCALE_DEFAULT));
                    }
                    jlImgPhoto.setIcon(photo);
                    jlImgPhoto.setText("");
                }
                else {
                    jlImgPhoto.setIcon(null);
                    jlImgPhoto.setText(NO_PHOTO);
                }

                if (dataEmployee.getXtaImageIconSignature_n() != null) {
                    jlImgSignature.setIcon(dataEmployee.getXtaImageIconSignature_n());
                    jlImgSignature.setText("");
                }
                else {
                    jlImgSignature.setIcon(null);
                    jlImgSignature.setText(NO_SIGNATURE);
                }
            }
            
            renderBenefits();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
        finally {
            miClient.getFrame().getRootPane().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
    }
    
    private void renderBenefits() throws Exception {
        Date cutoff = miClient.getSession().getCurrentDate();
        jtfCutoff.setText(SLibUtils.DateFormatDate.format(cutoff));

        if (moCurrentEmployee == null || !mbHasRightEmpWage) {
            // current year elapsed days:

            jtfCurrentYearDays.setText("");
            jtfCurrentYearDays.setToolTipText(null);

            // seniority:

            jtfSeniorityYears.setText("");
            jtfSeniorityYears.setToolTipText(null);

            jtfSeniorityDays.setText("");
            jtfSeniorityDays.setToolTipText(null);
            
            jtfAnniversary.setText("");

            // benefits:

            jtfAnnBonDays.setText("");
            jtfAnnBonPropPart.setText("");
            jtfAnnBonPropDays.setText("");
            jtfAnnBonPropPay.setText("");

            jtfVacDays.setText("");
            jtfVacPropPart.setText("");
            jtfVacPropDays.setText("");
            jtfVacPropPay.setText("");

            jtfVacBonPct.setText("");
            jtfVacBonPropPay.setText("");

            renderSettlement(null, 0, 0);
        }
        else {
            // current year elapsed days:

            Date cutoffYearStart = SLibTimeUtils.getBeginOfYear(cutoff);

            if (moCurrentEmployee.getDateBenefits().after(cutoffYearStart)) {
                cutoffYearStart = moCurrentEmployee.getDateBenefits().after(cutoff) ? cutoff : moCurrentEmployee.getDateBenefits();
            }

            SAnniversary anniversaryCurrentYear = new SAnniversary(cutoffYearStart, cutoff);

            jtfCurrentYearDays.setText("" + anniversaryCurrentYear.getElapsedYearDaysForBenefits());
            jtfCurrentYearDays.setToolTipText(anniversaryCurrentYear.getPeriodDatesDescription());

            // seniority:

            SAnniversary anniversaryCutoff = moCurrentEmployee.createAnniversary(cutoff);

            jtfSeniorityYears.setText("" + anniversaryCutoff.getElapsedYears());
            jtfSeniorityYears.setToolTipText(anniversaryCutoff.getPeriodYearsDescription());

            String toolTipForSeniorityDays = "";

            if (anniversaryCutoff.getElapsedYears() == 0) {
                toolTipForSeniorityDays = anniversaryCutoff.getPeriodDatesDescription();
            }
            else {
                toolTipForSeniorityDays = "Del " + SLibUtils.DateFormatDate.format(anniversaryCutoff.getPeriodStart().withYear(moCurrentEmployee.getBenefitsYear() + anniversaryCutoff.getElapsedYears()).toDate()) + " al " + SLibUtils.DateFormatDate.format(cutoff);
            }

            jtfSeniorityDays.setText("" + anniversaryCutoff.getElapsedYearDaysForBenefits());
            jtfSeniorityDays.setToolTipText(toolTipForSeniorityDays);
            
            int cutoffAnniversary = anniversaryCutoff.getCurrentAnniversary();
            
            jtfAnniversary.setText("" + cutoffAnniversary);

            // benefits:

            double paymentDaily = moCurrentEmployee.getEffectiveSalary(moModuleConfig.isFortnightStandard());

            SHrsBenefitsManager hrsBenefitsManager = new SHrsBenefitsManager(miClient.getSession(), moCurrentEmployee, 0);
            SDbEmployeeBenefitTablesAnnum annumAnnBon = hrsBenefitsManager.getBenefitAnnum(SModSysConsts.HRSS_TP_BEN_ANN_BON, cutoffAnniversary);
            SDbEmployeeBenefitTablesAnnum annumVac = hrsBenefitsManager.getBenefitAnnum(SModSysConsts.HRSS_TP_BEN_VAC, cutoffAnniversary);
            SDbEmployeeBenefitTablesAnnum annumVacBon = hrsBenefitsManager.getBenefitAnnum(SModSysConsts.HRSS_TP_BEN_VAC_BON, cutoffAnniversary);

            double annBondays;
            double annBonProp;
            double annBonDaysProp;
            double annBonPay;

            jtfAnnBonDays.setText("" + (annBondays = annumAnnBon.getBenefitDays()));
            jtfAnnBonPropPart.setText(SLibUtils.getDecimalFormatAmountUnitary().format(annBonProp = anniversaryCurrentYear.getCurrentAnniversaryPropPartForBenefits()));
            jtfAnnBonPropDays.setText(SLibUtils.DecimalFormatValue3D.format(annBonDaysProp = annBondays * annBonProp));
            jtfAnnBonPropPay.setText(SLibUtils.getDecimalFormatAmount().format(annBonPay = SLibUtils.roundAmount(annBonDaysProp * paymentDaily)));

            double vacDays;
            double vacProp;
            double vacDaysProp;
            double vacPay;

            jtfVacDays.setText("" + (vacDays = annumVac.getBenefitDays()));
            jtfVacPropPart.setText(SLibUtils.getDecimalFormatAmountUnitary().format(vacProp = anniversaryCutoff.getCurrentAnniversaryPropPartForBenefits()));
            jtfVacPropDays.setText(SLibUtils.DecimalFormatValue3D.format(vacDaysProp = vacDays * vacProp));
            jtfVacPropPay.setText(SLibUtils.getDecimalFormatAmount().format(vacPay = SLibUtils.roundAmount(vacDaysProp * paymentDaily)));

            double vacBonPct;
            double vacBonPay;

            jtfVacBonPct.setText(SLibUtils.getDecimalFormatPercentageDiscount().format(vacBonPct = annumVacBon.getBenefitBonusPct()));
            jtfVacBonPropPay.setText(SLibUtils.getDecimalFormatAmount().format(vacBonPay = SLibUtils.roundAmount(vacPay * vacBonPct)));

            renderSettlement(anniversaryCutoff, SLibUtils.roundAmount(annBonPay + vacPay + vacBonPay), moModuleConfig.getFkMwzReferenceTypeId());
        }
    }
    
    /**
     * Render settlement amounts.
     * @param seniorityYears Worked years.
     * @param seniorityDays Worked days in last year.
     * @param settlementPaymentDaily Daily payment for settlement.
     * @param mwzReferenceId ID of Reference Minimum-Wage-Zone.
     * @throws Exception 
     */
    private void renderSettlement(final SAnniversary anniversary, final double settlement, final int mwzReferenceId) throws Exception {
        if (anniversary == null || settlement == 0 || mwzReferenceId == 0) {
            jtfWageMinimum.setText("");
            jtfSettlement.setText("");
            jtfIndemnification.setText("");
            jtfIndemnificationDisL.setText("");
            jtfIndemnificationDicL.setText("");
        }
        else {
            double mwzReferenceWage = SHrsUtils.getRecentMinimumWage(miClient.getSession(), mwzReferenceId, miClient.getSession().getCurrentDate());
            double settlementSalary = jrbSalarySscBase.isSelected() ? moCurrentEmployee.getSalarySscBase() : moCurrentEmployee.getSettlementSalary();
            double settlementSalaryCap = SLibUtils.roundAmount(SHrsConsts.RET_BONUS_DMW_LIMIT * mwzReferenceWage);
            double settlementSalaryCapped = settlementSalary <= settlementSalaryCap ? settlementSalary : settlementSalaryCap;
            double retirementBonus = SHrsConsts.RET_BONUS_DAYS_PER_YEAR * settlementSalaryCapped * anniversary.getElapsedYearsPlusPropPart();

            double rjdj = settlement;
            double disl = settlement;
            double dicl = settlement;

            if (anniversary.getElapsedYears() >= SHrsConsts.RET_BONUS_YEARS_MIN) {
                rjdj = SLibUtils.roundAmount(
                        rjdj + retirementBonus
                );
            }

            disl = SLibUtils.roundAmount(
                    disl + retirementBonus
                    + ((SHrsConsts.DIS_COMP_MONTHS * SHrsConsts.MONTH_DAYS_FIXED) * settlementSalary)
            );

            dicl = SLibUtils.roundAmount(
                    dicl + retirementBonus
                    + ((SHrsConsts.DIS_COMP_MONTHS * SHrsConsts.MONTH_DAYS_FIXED) * settlementSalary)
                    + (SHrsConsts.DIS_COMP_DAYS_PER_YEAR * settlementSalary * anniversary.getElapsedYearsPlusPropPart())
            );
            
            jtfWageMinimum.setText(SLibUtils.getDecimalFormatAmount().format(mwzReferenceWage));
            jtfSettlement.setText(SLibUtils.getDecimalFormatAmount().format(settlement));
            jtfIndemnification.setText(SLibUtils.getDecimalFormatAmount().format(rjdj));
            jtfIndemnificationDisL.setText(SLibUtils.getDecimalFormatAmount().format(disl));
            jtfIndemnificationDicL.setText(SLibUtils.getDecimalFormatAmount().format(dicl));
        }
    }

    private void actionPerformedClearFilterPaymentType(final boolean populateEmployees) {
        jbClearFilterPaymentType.setEnabled(false);
        jcbFilterPaymentType.setSelectedIndex(0);
        jcbFilterPaymentType.requestFocus();
        mnFilterPaymentTypeId = SLibConsts.UNDEFINED;
        
        if (populateEmployees) {
            try {
                populateEmployees();
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }

    private void itemStateChangedFilterPaymentType(final boolean populateEmployees) {
        mnFilterPaymentTypeId = (((SGuiItem) jcbFilterPaymentType.getSelectedItem()).getPrimaryKey().length == 0 ? SLibConsts.UNDEFINED : ((SGuiItem) jcbFilterPaymentType.getSelectedItem()).getPrimaryKey()[0]);
        jbClearFilterPaymentType.setEnabled(jcbFilterPaymentType.getSelectedIndex() > 0);
        
        if (populateEmployees) {
            try {
                populateEmployees();
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }

    private void itemStateChangedStatusEmployeeActive(final boolean populateEmployees) {
        if (jtbStatusEmployeeActive.isSelected()) {
            mnFilterStatusEmployee = SGridFilterPanelEmployee.EMP_STATUS_ACT;
            jtbStatusEmployeeActive.setSelectedIcon(new ImageIcon(getClass().getResource("/erp/img/icon_std_po_act_on.gif")));
        }
        else if (jtbStatusEmployeeInactive.isSelected()) {
            mnFilterStatusEmployee = SGridFilterPanelEmployee.EMP_STATUS_INA;
            jtbStatusEmployeeInactive.setSelectedIcon(new ImageIcon(getClass().getResource("/erp/img/icon_std_po_ina_on.gif")));
        }
        else if (jtbStatusEmployeeAll.isSelected()) {
            mnFilterStatusEmployee = SGridFilterPanelEmployee.EMP_STATUS_ALL;
            jtbStatusEmployeeAll.setSelectedIcon(new ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif")));
        }
        
        if (populateEmployees) {
            try {
                populateEmployees();
            }
            catch (Exception e) {
                SLibUtils.printException(this, e);
            }
        }
    }

    private void itemStateChangedSalary() {
        try {
            renderBenefits();
        }
        catch (Exception e) {
            SLibUtils.showException(this, e);
        }
    }

    private void valueChangedEmployee() {
        SRowIntegralEmployee row = (SRowIntegralEmployee) moAvailableEmployeesPane.getSelectedTableRow();

        renderEmployee(row == null ? 0 : row.getPkEmployeeId());
    }

    /*
     * Public methods
     */

    /*
     * Overriden methods
     */

    @Override
    public int getTabType() {
        return mnPanelType;
    }

    @Override
    public int getTabTypeAux01() {
        return SLibConstants.UNDEFINED;
    }

    @Override
    public int getTabTypeAux02() {
        return SLibConstants.UNDEFINED;
    }

    @Override
    public Vector<Integer> getSuscriptors() {
        return new Vector<>();
    }

    @Override
    public Vector<STableSetting> getTableSettings() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void addSetting(STableSetting setting) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void updateSetting(STableSetting setting) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionRefresh(int mode) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbClearFilterPaymentType) {
                actionPerformedClearFilterPaymentType(true);
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getSource() instanceof JComboBox) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == jcbFilterPaymentType) {
                    itemStateChangedFilterPaymentType(true);
                }
            }
        }
        else if (e.getSource() instanceof JRadioButton) { // JRadioButton extends JToggleButton, consider it before
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JRadioButton radioButton = (JRadioButton) e.getSource();

                if (radioButton == jrbSalaryBase || radioButton == jrbSalarySscBase) {
                    itemStateChangedSalary();
                }
            }
        }
        else if (e.getSource() instanceof JToggleButton) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                JToggleButton toggleButton = (JToggleButton) e.getSource();
                
                if (toggleButton == jtbStatusEmployeeActive) {
                    itemStateChangedStatusEmployeeActive(true);
                }
                else if (toggleButton == jtbStatusEmployeeInactive) {
                    itemStateChangedStatusEmployeeActive(true);
                }
                else if (toggleButton == jtbStatusEmployeeAll) {
                    itemStateChangedStatusEmployeeActive(true);
                }
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            valueChangedEmployee();
        }
    }
}
