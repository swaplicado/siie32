/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.grid;

import erp.mod.SModConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import sa.lib.db.SDbRegistry;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridFilter;
import sa.lib.grid.SGridFilterValue;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiItem;
import sa.lib.gui.SGuiParams;

/**
 *
 * @author Juan Barajas, Sergio Flores
 */
public class SGridFilterPanelEmployee extends JPanel implements SGridFilter, ActionListener, ItemListener {

    public static final int EMP_STATUS = 200; // to set and get filter in UI
    public static final int EMP_STATUS_ACT = 2; // active
    public static final int EMP_STATUS_INA = 3; // inactive
    public static final int EMP_STATUS_ALL = 4; // all
    
    private final SGuiClient miClient;
    private final SGridPaneView moPaneView;
    private boolean mbInitializing;
    
    /**
     * Creates new form SGridFilterPanelEmployee.
     * 
     * @param client
     * @param paneView
     */
    public SGridFilterPanelEmployee(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgStatus = new javax.swing.ButtonGroup();
        jtbStatusActive = new javax.swing.JToggleButton();
        jtbStatusInactive = new javax.swing.JToggleButton();
        jtbStatusAll = new javax.swing.JToggleButton();
        moKeyPaymentType = new sa.lib.gui.bean.SBeanFieldKey();
        jbClearPaymentType = new javax.swing.JButton();
        moKeyDepartment = new sa.lib.gui.bean.SBeanFieldKey();
        jbClearDepartment = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        bgStatus.add(jtbStatusActive);
        jtbStatusActive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_act_off.gif"))); // NOI18N
        jtbStatusActive.setSelected(true);
        jtbStatusActive.setToolTipText("Ver activos");
        jtbStatusActive.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbStatusActive.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_act_on.gif"))); // NOI18N
        add(jtbStatusActive);

        bgStatus.add(jtbStatusInactive);
        jtbStatusInactive.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_ina_off.gif"))); // NOI18N
        jtbStatusInactive.setToolTipText("Ver inactivos");
        jtbStatusInactive.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbStatusInactive.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_po_ina_on.gif"))); // NOI18N
        add(jtbStatusInactive);

        bgStatus.add(jtbStatusAll);
        jtbStatusAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_off.gif"))); // NOI18N
        jtbStatusAll.setToolTipText("Ver todos");
        jtbStatusAll.setPreferredSize(new java.awt.Dimension(23, 23));
        jtbStatusAll.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/switch_filter_on.gif"))); // NOI18N
        add(jtbStatusAll);

        moKeyPaymentType.setPreferredSize(new java.awt.Dimension(125, 23));
        add(moKeyPaymentType);

        jbClearPaymentType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_delete_tmp.gif"))); // NOI18N
        jbClearPaymentType.setToolTipText("Quitar filtro");
        jbClearPaymentType.setPreferredSize(new java.awt.Dimension(23, 23));
        add(jbClearPaymentType);

        moKeyDepartment.setPreferredSize(new java.awt.Dimension(250, 23));
        add(moKeyDepartment);

        jbClearDepartment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_delete_tmp.gif"))); // NOI18N
        jbClearDepartment.setToolTipText("Quitar filtro");
        jbClearDepartment.setPreferredSize(new java.awt.Dimension(23, 23));
        add(jbClearDepartment);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgStatus;
    private javax.swing.JButton jbClearDepartment;
    private javax.swing.JButton jbClearPaymentType;
    private javax.swing.JToggleButton jtbStatusActive;
    private javax.swing.JToggleButton jtbStatusAll;
    private javax.swing.JToggleButton jtbStatusInactive;
    private sa.lib.gui.bean.SBeanFieldKey moKeyDepartment;
    private sa.lib.gui.bean.SBeanFieldKey moKeyPaymentType;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        miClient.getSession().populateCatalogue(moKeyPaymentType, SModConsts.HRSS_TP_PAY, 0, new SGuiParams(SDbRegistry.FIELD_CODE));
        miClient.getSession().populateCatalogue(moKeyDepartment, SModConsts.HRSU_DEP, 0, new SGuiParams(SDbRegistry.FIELD_CODE));
        
        bgStatus.clearSelection();
        actionClearPaymentType();
        actionClearDepartment();
        
        jbClearPaymentType.addActionListener(this);
        jbClearDepartment.addActionListener(this);
        moKeyPaymentType.addItemListener(this);
        moKeyDepartment.addItemListener(this);
        jtbStatusActive.addItemListener(this);
        jtbStatusInactive.addItemListener(this);
        jtbStatusAll.addItemListener(this);
    }
    
    private void itemStateChangedStatus() {
        int filter = 0;
        
        if (jtbStatusActive.isSelected()) {
            filter = EMP_STATUS_ACT;
        }
        else if (jtbStatusInactive.isSelected()) {
            filter = EMP_STATUS_INA;
        }
        else if (jtbStatusAll.isSelected()) {
            filter = EMP_STATUS_ALL;
        }
        
        moPaneView.putFilter(EMP_STATUS, new SGridFilterValue(EMP_STATUS, SGridConsts.FILTER_DATA_TYPE_INT, filter));
    }
    
    private void actionClearPaymentType() {
        jbClearPaymentType.setEnabled(false);
        
        if (moKeyPaymentType.getSelectedIndex() > 0) {
            moKeyPaymentType.setSelectedIndex(0); // triggers an item state changed event
            moKeyPaymentType.requestFocusInWindow();
        }
    }
    
    private void actionClearDepartment() {
        jbClearDepartment.setEnabled(false);
        
        if (moKeyDepartment.getSelectedIndex() > 0) {
            moKeyDepartment.setSelectedIndex(0); // triggers an item state changed event
            moKeyDepartment.requestFocusInWindow();
        }
    }
    
    private void itemStateChangedPaymentType() {
        moPaneView.putFilter(SModConsts.HRSS_TP_PAY, new SGridFilterValue(SModConsts.HRSS_TP_PAY, SGridConsts.FILTER_DATA_TYPE_INT_ARRAY, ((SGuiItem) moKeyPaymentType.getSelectedItem()).getPrimaryKey()));
        jbClearPaymentType.setEnabled(moKeyPaymentType.getSelectedIndex() > 0);
    }
    
    private void itemStateChangedDepartment() {
        moPaneView.putFilter(SModConsts.HRSU_DEP, new SGridFilterValue(SModConsts.HRSU_DEP, SGridConsts.FILTER_DATA_TYPE_INT_ARRAY, ((SGuiItem) moKeyDepartment.getSelectedItem()).getPrimaryKey()));
        jbClearDepartment.setEnabled(moKeyDepartment.getSelectedIndex() > 0);
    }
    
    /*
     * Public methods
     */
    
    /*
     * Protected methods
     */
    
    /**
     * Initialize filter.
     * 
     * @param value Initial value for status filter. Constants available in this class: EMP_STATUS_ACT, EMP_STATUS_INA, EMP_STATUS_ALL. Any other value disables estatus filter.
     */
    @Override
    public void initFilter(Object value) {
        mbInitializing = true;
        
        int status = (int) value;
        
        switch (status) {
            case EMP_STATUS_ACT:
                jtbStatusActive.setSelected(true);
                break;
            case EMP_STATUS_INA:
                jtbStatusInactive.setSelected(true);
                break;
            case EMP_STATUS_ALL:
                jtbStatusAll.setSelected(true);
                break;
            default:
                bgStatus.clearSelection();
        }
        
        if (bgStatus.getSelection() == null) {
            moPaneView.getFiltersMap().remove(EMP_STATUS);
            
            jtbStatusActive.setEnabled(false);
            jtbStatusInactive.setEnabled(false);
            jtbStatusAll.setEnabled(false);
        }
        else {
            moPaneView.getFiltersMap().put(EMP_STATUS, new SGridFilterValue(EMP_STATUS, SGridConsts.FILTER_DATA_TYPE_INT, status));
            
            jtbStatusActive.setEnabled(true);
            jtbStatusInactive.setEnabled(true);
            jtbStatusAll.setEnabled(true);
        }
        
        moPaneView.getFiltersMap().put(SModConsts.HRSS_TP_PAY, new SGridFilterValue(SModConsts.HRSS_TP_PAY, SGridConsts.FILTER_DATA_TYPE_INT, null)); // no filter actually
        moPaneView.getFiltersMap().put(SModConsts.HRSU_DEP, new SGridFilterValue(SModConsts.HRSU_DEP, SGridConsts.FILTER_DATA_TYPE_INT, null)); // no filter actually
        
        mbInitializing = false;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbClearPaymentType) {
                actionClearPaymentType();
            }
            else if (button == jbClearDepartment) {
                actionClearDepartment();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbInitializing && e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() instanceof JComboBox) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == moKeyPaymentType) {
                    itemStateChangedPaymentType();
                }
                else if (comboBox == moKeyDepartment) {
                    itemStateChangedDepartment();
                }
            }
            else if (e.getSource() instanceof JToggleButton) {
                JToggleButton toggleButton = (JToggleButton) e.getSource();

                if (toggleButton == jtbStatusActive || toggleButton == jtbStatusInactive || toggleButton == jtbStatusAll) {
                    itemStateChangedStatus();
                }
            }
        }
    }
}
