/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.grid;

import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import sa.lib.grid.SGridConsts;
import sa.lib.grid.SGridFilter;
import sa.lib.grid.SGridFilterValue;
import sa.lib.grid.SGridPaneView;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiItem;

/**
 *
 * @author Edwin Carmona
 */
public class SGridFilterPanelValMovType extends JPanel implements SGridFilter, ActionListener, ItemListener {
    
    private final SGuiClient miClient;
    private final SGridPaneView moPaneView;
    private boolean mbInitializing;
    
    /**
     * Creates new form SGridFilterPanelEmployee.
     * 
     * @param client
     * @param paneView
     */
    public SGridFilterPanelValMovType(SGuiClient client, SGridPaneView paneView) {
        miClient = client;
        moPaneView = paneView;
        
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgStatus = new javax.swing.ButtonGroup();
        moKeyTpValMvt = new sa.lib.gui.bean.SBeanFieldKey();
        jbClearTpValMvt = new javax.swing.JButton();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        moKeyTpValMvt.setPreferredSize(new java.awt.Dimension(125, 23));
        add(moKeyTpValMvt);

        jbClearTpValMvt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sa/lib/img/cmd_std_delete_tmp.gif"))); // NOI18N
        jbClearTpValMvt.setToolTipText("Quitar filtro");
        jbClearTpValMvt.setPreferredSize(new java.awt.Dimension(23, 23));
        add(jbClearTpValMvt);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgStatus;
    private javax.swing.JButton jbClearTpValMvt;
    private sa.lib.gui.bean.SBeanFieldKey moKeyTpValMvt;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */
    
    private void initComponentsCustom() {
        moKeyTpValMvt.removeAllItems();
        SGuiItem oItem;
        oItem = new SGuiItem(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_ALL }, SModSysConsts.TRNX_TP_NM_VAL_MVT_ALL);
        moKeyTpValMvt.addItem(oItem);
        oItem = new SGuiItem(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_ENTRY }, SModSysConsts.TRNX_TP_NM_VAL_MVT_ENTRY);
        moKeyTpValMvt.addItem(oItem);
        oItem = new SGuiItem(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_CONS }, SModSysConsts.TRNX_TP_NM_VAL_MVT_CONS);
        moKeyTpValMvt.addItem(oItem);
        
        bgStatus.clearSelection();
        actionClearTpValMvt();
        
        jbClearTpValMvt.addActionListener(this);
        moKeyTpValMvt.addItemListener(this);
    }
    
    private void actionClearTpValMvt() {
        jbClearTpValMvt.setEnabled(false);
        
        if (moKeyTpValMvt.getSelectedIndex() > 0) {
            moKeyTpValMvt.setSelectedIndex(0); // triggers an item state changed event
            moKeyTpValMvt.requestFocusInWindow();
        }
    }
    
    private void itemStateChangedStatusReq() {
        moPaneView.putFilter(SModConsts.TRNX_TP_VAL_MVT, new SGridFilterValue(SModConsts.TRNX_TP_VAL_MVT, SGridConsts.FILTER_DATA_TYPE_INT_ARRAY, ((SGuiItem) moKeyTpValMvt.getSelectedItem()).getPrimaryKey()));
        jbClearTpValMvt.setEnabled(moKeyTpValMvt.getSelectedIndex() > 0);
    }
    
    /*
     * Public methods
     */
    
    /*
     * Protected methods
     */
    
    /**
     * Initialize filter.
     * 
     * @param value Initial value for status filter. Constants available in this class: EMP_STATUS_ACT, EMP_STATUS_INA, EMP_STATUS_ALL. Any other value disables estatus filter.
     */
    @Override
    public void initFilter(Object value) {
        mbInitializing = true;
        
        int status = (int) value;
        
        switch (status) {
            case SModSysConsts.TRNX_TP_VAL_MVT_ALL:
                moKeyTpValMvt.setValue(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_ALL } );
                break;
            case SModSysConsts.TRNX_TP_VAL_MVT_ENTRY:
                moKeyTpValMvt.setValue(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_ENTRY } );
                break;
            case SModSysConsts.TRNX_TP_VAL_MVT_CONS:
                moKeyTpValMvt.setValue(new int[] { SModSysConsts.TRNX_TP_VAL_MVT_CONS } );
                break;
            default:
                
        }
        
        moPaneView.getFiltersMap().put(SModConsts.TRNX_TP_VAL_MVT, new SGridFilterValue(SModConsts.TRNX_TP_VAL_MVT, SGridConsts.FILTER_DATA_TYPE_INT, new int[] { SModSysConsts.TRNX_TP_VAL_MVT_ALL }));
        
        mbInitializing = false;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();
            
            if (button == jbClearTpValMvt) {
                actionClearTpValMvt();
            }
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (!mbInitializing && e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() instanceof JComboBox) {
                JComboBox comboBox = (JComboBox) e.getSource();

                if (comboBox == moKeyTpValMvt) {
                    itemStateChangedStatusReq();
                }   
            }
        }
    }
}
