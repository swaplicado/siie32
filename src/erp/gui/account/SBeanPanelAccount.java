/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.gui.account;

import erp.gui.session.SSessionCustom;
import erp.mcfg.data.SDataParamsCompany;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JPanel;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibConsts;
import sa.lib.SLibUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiFields;
import sa.lib.gui.SGuiUtils;
import sa.lib.gui.SGuiValidation;
import sa.lib.gui.bean.SBeanFieldText;

/**
 *
 * @author Sergio Flores
 */
public class SBeanPanelAccount extends JPanel implements ActionListener, FocusListener, KeyListener {

    public static Frame OwnerFrame;

    private SGuiClient miClient;
    private int mnAccountType;
    private int mnAccountMask;
    private int mnLevels;
    private boolean mbMandatory;
    private boolean mbOnlyExistingAccounts;
    private boolean mbOnlyTerminalAccounts;
    private String msCurrentCodeLevelStd;
    private Color moColorNormal;
    private Color moColorWarning;
    private Component moComponentPrevious;
    private Component moComponentPreviousExtra; // even farther than previous
    private Component moComponentNext;
    private Component moComponentNextExtra; // even farther than next
    private SGuiFields moFields;
    private SBeanFieldText[] maoTextCodeLevelStds;
    private SAccountChooser[] maoAccountChoosers;
    private SPickerAccount moPickerAccount;
    private int[] manDigits;
    private DecimalFormat[] maoDecimalFormats;
    private SAccount[] maoAccounts;
    private ArrayList<SAccountLedger> maAccountLedgers;

    /**
     * Creates new panel SBeanPanelAccount.
     */
    public SBeanPanelAccount() {
        initComponents();
        initComponentsCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMain = new javax.swing.JPanel();
        jPanelNorth = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jlNumber = new javax.swing.JLabel();
        moTextCodeLevel1 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel2 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel3 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel4 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel5 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel6 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel7 = new sa.lib.gui.bean.SBeanFieldText();
        moTextCodeLevel8 = new sa.lib.gui.bean.SBeanFieldText();
        jbPick = new javax.swing.JButton();
        jbClear = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jlName = new javax.swing.JLabel();
        jtfName = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanelMain.setLayout(new java.awt.BorderLayout(0, 5));

        jPanelNorth.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlNumber.setText("NÃºmero cuenta:");
        jlNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel1.add(jlNumber);

        moTextCodeLevel1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel1.setText("000000");
        moTextCodeLevel1.setName("Code1"); // NOI18N
        moTextCodeLevel1.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel1);

        moTextCodeLevel2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel2.setText("000000");
        moTextCodeLevel2.setName("Code2"); // NOI18N
        moTextCodeLevel2.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel2);

        moTextCodeLevel3.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel3.setText("000000");
        moTextCodeLevel3.setName("Code3"); // NOI18N
        moTextCodeLevel3.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel3);

        moTextCodeLevel4.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel4.setText("000000");
        moTextCodeLevel4.setName("Code4"); // NOI18N
        moTextCodeLevel4.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel4);

        moTextCodeLevel5.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel5.setText("000000");
        moTextCodeLevel5.setName("Code5"); // NOI18N
        moTextCodeLevel5.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel5);

        moTextCodeLevel6.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel6.setText("000000");
        moTextCodeLevel6.setName("Code6"); // NOI18N
        moTextCodeLevel6.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel6);

        moTextCodeLevel7.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel7.setText("000000");
        moTextCodeLevel7.setName("Code7"); // NOI18N
        moTextCodeLevel7.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel7);

        moTextCodeLevel8.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        moTextCodeLevel8.setText("000000");
        moTextCodeLevel8.setName("Code8"); // NOI18N
        moTextCodeLevel8.setPreferredSize(new java.awt.Dimension(45, 23));
        jPanel1.add(moTextCodeLevel8);

        jbPick.setText("...");
        jbPick.setToolTipText("Buscar cuenta (F5)");
        jbPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbPick);

        jbClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbClear.setToolTipText("Limpiar cuenta");
        jbClear.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel1.add(jbClear);

        jPanelNorth.add(jPanel1);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlName.setText("Nombre cuenta:");
        jlName.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel2.add(jlName);

        jtfName.setEditable(false);
        jtfName.setText("Tres tristes tigres tragaban trigo en tres tristes trastos sentados en un trigal. Sentados en un trigal en tres tristes trastos tragaban trigo tres tristes tigres.");
        jtfName.setToolTipText("Tres tristes tigres tragaban trigo en tres triste trastos, sentados en un trigal. Sentados en un trigal, en tres tristes trastos, tragaban trigo tres tristes tigres.");
        jtfName.setCaretPosition(0);
        jtfName.setFocusable(false);
        jtfName.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel2.add(jtfName);

        jPanelNorth.add(jPanel2);

        jPanelMain.add(jPanelNorth, java.awt.BorderLayout.NORTH);

        add(jPanelMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelMain;
    private javax.swing.JPanel jPanelNorth;
    private javax.swing.JButton jbClear;
    private javax.swing.JButton jbPick;
    private javax.swing.JLabel jlName;
    private javax.swing.JLabel jlNumber;
    private javax.swing.JTextField jtfName;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel1;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel2;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel3;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel4;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel5;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel6;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel7;
    private sa.lib.gui.bean.SBeanFieldText moTextCodeLevel8;
    // End of variables declaration//GEN-END:variables

    /*
     * Private methods
     */

    private void initComponentsCustom() {
        mnAccountType = SLibConsts.UNDEFINED;
        mnAccountMask = 0;
        mnLevels = 0;
        mbMandatory = true;
        mbOnlyExistingAccounts = true;
        mbOnlyTerminalAccounts = true;
        msCurrentCodeLevelStd = "";
        moColorNormal = jtfName.getForeground();
        moColorWarning = Color.RED;
        moComponentPrevious = null;
        moComponentPreviousExtra = null;
        moComponentNext = null;
        moComponentNextExtra = null;
        moFields = new SGuiFields();
        maoTextCodeLevelStds = new SBeanFieldText[SAccountConsts.LEVELS];
        maoAccountChoosers = new SAccountChooser[SAccountConsts.LEVELS];
        moPickerAccount = null; // GUI Client not yet available
        manDigits = new int[SAccountConsts.LEVELS];
        maoDecimalFormats = new DecimalFormat[SAccountConsts.LEVELS];
        maoAccounts = null;
        maAccountLedgers = new ArrayList<>();

        maoTextCodeLevelStds[0] = moTextCodeLevel1;
        maoTextCodeLevelStds[1] = moTextCodeLevel2;
        maoTextCodeLevelStds[2] = moTextCodeLevel3;
        maoTextCodeLevelStds[3] = moTextCodeLevel4;
        maoTextCodeLevelStds[4] = moTextCodeLevel5;
        maoTextCodeLevelStds[5] = moTextCodeLevel6;
        maoTextCodeLevelStds[6] = moTextCodeLevel7;
        maoTextCodeLevelStds[7] = moTextCodeLevel8;

        for (int i = 0; i < maoTextCodeLevelStds.length; i++) {
            maoTextCodeLevelStds[i].setEditable(false);
            maoTextCodeLevelStds[i].setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, new HashSet<AWTKeyStroke>());
        }

        for (int i = 0; i < maoAccountChoosers.length; i++) {
            maoAccountChoosers[i] = new SAccountChooser(OwnerFrame);
        }

        jbPick.addActionListener(this);
        jbClear.addActionListener(this);
    }

    private void renderAccountName(int currentIndex) {
        String text = "";
        Color color = moColorNormal;

        for (int i = 0; i < maoAccounts.length; i++) {
            if (maoAccounts[i] == null) {
                if (mbOnlyExistingAccounts && SLibUtils.parseInt(maoTextCodeLevelStds[i].getValue()) != 0 && i <= currentIndex) {
                    text += (text.isEmpty() ? "" : " / ") + "(" + SAccountConsts.TXT_EXISTING_NON.toUpperCase() + ")";
                    color = moColorWarning;
                }
                break;
            }
            else {
                text += (text.isEmpty() ? "" : " / ") + maoAccounts[i].getName();
            }
        }

        jtfName.setText(text);
        jtfName.setToolTipText(text.isEmpty() ? null : text);
        jtfName.setCaretPosition(0);
        jtfName.setForeground(color);
    }

    private void computeAccount(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);
        SAccount account = null;

        if (index >= 0) {
            fieldText.setValue(maoDecimalFormats[index].format(SLibUtils.parseInt(fieldText.getValue())));

            if (index == 0) {
                account = SAccountUtils.findAccountByCodeLevelStd(new ArrayList<SAccount>(maAccountLedgers), SAccountUtils.convertCodeLevelStd(fieldText.getValue()));
            }
            else {
                account = maoAccounts[index - 1] == null ? null : SAccountUtils.findAccountByCodeLevelStd(maoAccounts[index - 1].getChildren(), SAccountUtils.convertCodeLevelStd(fieldText.getValue()));
            }

            if (account == null || maoAccounts[index] == null || account.getCodeStd().compareTo(maoAccounts[index].getCodeStd()) != 0) {
                maoAccounts[index] = account;

                if (index == 0) {
                    if (account == null) {
                        for (int i = 1; i < mnLevels; i++) {
                            maoTextCodeLevelStds[i].setEditable(false);
                        }
                    }
                    else {
                        for (int i = 1; i < mnLevels; i++) {
                            maoTextCodeLevelStds[i].setEditable(i < ((SAccountLedger) account).getDeep());
                        }
                    }
                }

                for (int i = index + 1; i < mnLevels; i++) {
                    maoAccounts[i] = null;
                    maoTextCodeLevelStds[i].setValue(!maoTextCodeLevelStds[i].isEditable() ? "" : maoDecimalFormats[i].format(0));
                }
            }

            renderAccountName(index);
        }
    }

    private int getTextNumberIndex(final SBeanFieldText fieldText) {
        int index = -1;

        for (int i = 0; i < maoTextCodeLevelStds.length; i++) {
            if (fieldText == maoTextCodeLevelStds[i]) {
                index = i;
                break;
            }
        }

        return index;
    }

    private boolean isLastTextNumberReached(final int index) {
        return index >= 0 && ((index + 1 == maoTextCodeLevelStds.length) || (index + 1 < maoTextCodeLevelStds.length && !maoTextCodeLevelStds[index + 1].isEditable()));
    }
    
    private void processFocusPrevious(Component component) {
        if (component instanceof SBeanPanelAccount) {
            SBeanPanelAccount panelAccount = (SBeanPanelAccount) component;
            
            panelAccount.getTextNumberLast().requestFocus();
        }
        else {
            component.requestFocus();
        }
    }

    private void computeFocusComponentPrevious(final int index) {
        if (index == 0) {
            // Move to previous component:

            if (moComponentPrevious != null && moComponentPrevious.isEnabled()) {
                processFocusPrevious(moComponentPrevious);
            }
            else if (moComponentPreviousExtra != null && moComponentPreviousExtra.isEnabled()) {
                processFocusPrevious(moComponentPreviousExtra);
            }
        }
        else {
            // Move to previous text field:

            maoTextCodeLevelStds[index - 1].requestFocus();
        }
    }
    
    private void processFocusNext(Component component) {
        if (component instanceof SBeanPanelAccount) {
            SBeanPanelAccount panelAccount = (SBeanPanelAccount) component;
            
            if (panelAccount.getSelectedAccount() == null) {
                panelAccount.setSelectedAccount(getSelectedAccount()); // user aid: repeat current selected account in next panel
            }

            panelAccount.getTextNumberFirst().requestFocus();
        }
        else {
            component.requestFocus();
        }
    }

    private void computeFocusComponentNext(final int index) {
        if (isLastTextNumberReached(index)) {
            // Move to next component:

            if (moComponentNext != null && moComponentNext.isEnabled()) {
                processFocusNext(moComponentNext);
            }
            else if (moComponentNextExtra != null && moComponentNextExtra.isEnabled()) {
                processFocusNext(moComponentNextExtra);
            }
            else {
                jbPick.requestFocus();
            }
        }
        else {
            // Move to next text field:

            maoTextCodeLevelStds[index + 1].requestFocus();
        }
    }

    private void keyReleased(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);
        int position = 0;

        if (index >= 0) {
            if (fieldText.getValue().length() == maoDecimalFormats[index].getMinimumIntegerDigits() && fieldText.getValue().compareTo(msCurrentCodeLevelStd) != 0) {
                position = fieldText.getCaretPosition();
                computeAccount(fieldText);
                fieldText.setCaretPosition(position);   // caret position lost on account computation

                /*  NOTE: when some improvement is required on account input, use this snip of code (sflores, 2013-08-07):
                if (maoAccounts[index] != null && !isLastTextNumberReached(index)) {
                    // Current account found and not last account level:
                    maoTextCodeLevelStds[index + 1].requestFocus();
                }
                else {
                    // Current account not found or last account level:
                    fieldText.setCaretPosition(position);
                }
                */
            }
        }
    }

    private void keyPressedTab(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);

        if (index >= 0) {
            computeFocusComponentNext(index);
        }
    }

    private void keyPressedRight(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);

        if (index >= 0) {
            if (fieldText.getCaretPosition() == fieldText.getText().length()) {
                computeFocusComponentNext(index);
            }
        }
    }

    private void keyPressedLeft(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);

        if (index >= 0) {
            if (fieldText.getCaretPosition() == 0) {
                computeFocusComponentPrevious(index);
            }
        }
    }

    private void keyPressedDown(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);
        Point point = null;
        SAccount account = null;
        SAccountChooser accountChooser = null;
        ArrayList<SAccount> accounts = null;

        if (index >= 0) {
            point = fieldText.getLocationOnScreen();

            if (index == 0) {
                accounts = new ArrayList<SAccount>(maAccountLedgers);
            }
            else {
                accounts = maoAccounts[index - 1] == null ? new ArrayList<SAccount>() : maoAccounts[index - 1].getChildren();
            }

            accountChooser = maoAccountChoosers[index];
            accountChooser.resetChooser();
            accountChooser.setAccounts(accounts);
            accountChooser.setSelectedAccount(fieldText.getValue());
            accountChooser.setLocation(new Point(point.x, point.y + fieldText.getHeight()));
            accountChooser.setVisible(true);

            if (accountChooser.getChooserResult() == SGuiConsts.FORM_RESULT_OK) {
                account = accountChooser.getSelectedAccount();

                if (account != null) {
                    fieldText.setValue(account.getCodeLevelStd());

                    computeAccount(fieldText);
                    computeFocusComponentNext(index);
                }
            }
        }
    }

    private void computeActionPerformed(SBeanFieldText fieldText) {
        int index = getTextNumberIndex(fieldText);

        if (index >= 0) {
            computeAccount(fieldText);
            computeFocusComponentNext(index);
        }
    }

    private void computeFocusGained(SBeanFieldText fieldText) {
        msCurrentCodeLevelStd = fieldText.getValue();

        if (SLibUtils.parseInt(fieldText.getValue()) == 0) {
            fieldText.setValue("");
        }
    }

    private void computeFocusLost(SBeanFieldText fieldText) {
        computeAccount(fieldText);
    }

    private void actionPick() {
        SAccount account = getSelectedAccount();

        if (account == null) {
            moPickerAccount.resetPicker("", "");
        }
        else {
            moPickerAccount.resetPicker(SAccountUtils.subtractCodeUsr(SAccountUtils.convertCodeUsr(mnAccountMask, account.getCodeStd()), account.getLevel()), account.getName());
        }

        moPickerAccount.setVisible(true);
        if (moPickerAccount.getPickerResult() == SGuiConsts.FORM_RESULT_OK) {
            account = moPickerAccount.getSelectedAccount();
            setSelectedAccount(account);
            if (account != null) {
                maoTextCodeLevelStds[account.getLevel() - 1].requestFocus();
            }
        }
    }

    private void actionClear() {
        maoTextCodeLevelStds[0].setValue(maoDecimalFormats[0].format(0));
        computeAccount(maoTextCodeLevelStds[0]);
        maoTextCodeLevelStds[0].requestFocus();
    }

    /*
     * Public methods
     */

    /**
     * Initialize this panel.
     * Method <code>setPanelSettings()</code> must be called first.
     */
    public void initPanel() {
        maoAccounts = new SAccount[SAccountConsts.LEVELS];

        for (int i = 0; i < maoTextCodeLevelStds.length; i++) {
            if (i == 0) {
                maoTextCodeLevelStds[0].setValue(maoDecimalFormats[0].format(0));
            }
            else {
                maoTextCodeLevelStds[i].setValue("");
                maoTextCodeLevelStds[i].setEditable(false);
            }
        }

        renderAccountName(0);
    }

    public void setAccountNameWidth(int width) {
        jtfName.setPreferredSize(new Dimension(width, 23));
    }

    /**
     * Sets previous component for focus moving backward.
     * Note that component can be a <code>SBeanPanelAccount</code> object aswell.
     * @param component
     */
    public void setComponentPrevious(final Component component) {
        moComponentPrevious = component;
        moComponentPreviousExtra = null;
    }

    /**
     * Sets previous components for focus moving backward.
     * Note that components can be a <code>SBeanPanelAccount</code> object aswell.
     * @param component
     * @param componentExtra
     */
    public void setComponentPrevious(final Component component, final Component componentExtra) {
        moComponentPrevious = component;
        moComponentPreviousExtra = componentExtra;
    }

    /**
     * Sets next component for focus moving forward.
     * Note that component can be a <code>SBeanPanelAccount</code> object aswell.
     * In this case, next panel's account will be set with this panel current account if the former is empty.
     */
    public void setComponentNext(final Component component) {
        moComponentNext = component;
        moComponentNextExtra = null;
    }

    /**
     * Sets next components for focus moving forward.
     * Note that components can be a <code>SBeanPanelAccount</code> object aswell.
     * In this case, next panels' account will be set with this panel current account if the former is empty.
     */
    public void setComponentNext(final Component component, final Component componentExtra) {
        moComponentNext = component;
        moComponentNextExtra = componentExtra;
    }

    /**
     * Defines panel <code>SBeanPanelAccount</code> settings.
     * <p>
     * Let <strong>accountPanel</strong> be an instance of <code>SBeanPanelAccount</code>:
     * <p>
     * a) To add an Account Panel instance into some container, do the following:
     * <pre>
     * <code>accountPanel.setPanelSettings(client, SAccountConsts.TYPE, true | false, true | false);
     * accountPanel.setAccountNameWidth(width);
     * accountPanel.setComponentPrevious(component);
     * accountPanel.setComponentNext(component);</code>
     * </pre>
     * b) Before using an Account Panel, do the following:
     * <pre>
     * <code>accountPanel.resetPanel();</code>
     * </pre>
     * c) After using an Account Panel, validate its contents:
     * <pre>
     * <code>accountPanel.validatePanel();</code>
     * </pre>
     * @param client GUI Client.
     * @param type Constants defined in SAccountConsts.
     * @param mandatory Defines if user input is mandatory.
     * @param onlyExistingAccounts Defines if only existing accounts are allowed.
     * @param onlyTerminalAccounts Defines if only terminal accounts are allowed.
     */
    public void setPanelSettings(final SGuiClient client, final int type, final boolean mandatory, final boolean onlyExistingAccounts, final boolean onlyTerminalAccounts) {
        miClient = client;
        mnAccountType = type;
        mbMandatory = mandatory;
        mbOnlyExistingAccounts = onlyExistingAccounts;
        mbOnlyTerminalAccounts = onlyTerminalAccounts;
        moPickerAccount = new SPickerAccount(miClient, mnAccountType);

        switch (mnAccountType) {
            case SAccountConsts.TYPE_ACCOUNT:
                jlNumber.setText(SAccountConsts.NUM_ACCOUNT + ":" + (!mbMandatory ? "" : "*"));
                jlName.setText(SAccountConsts.NAME_ACCOUNT + ":");
                jbPick.setToolTipText(SUtilConsts.TXT_FIND + " " + SAccountConsts.NAME_ACCOUNT.toLowerCase() + " (F5)");
                jbClear.setToolTipText(SUtilConsts.TXT_CLEAR + " " + SAccountConsts.NAME_ACCOUNT.toLowerCase());
                mnAccountMask = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskAccount();
                maAccountLedgers.addAll(((SSessionCustom) miClient.getSession().getSessionCustom()).getAccountLedgers());
                break;
            case SAccountConsts.TYPE_COST_CENTER:
                jlNumber.setText(SAccountConsts.NUM_COST_CENTER + ":" + (!mbMandatory ? "" : "*"));
                jlName.setText(SAccountConsts.NAME_COST_CENTER + ":");
                jbPick.setToolTipText(SUtilConsts.TXT_FIND + " " + SAccountConsts.NAME_COST_CENTER.toLowerCase() + " (F5)");
                jbClear.setToolTipText(SUtilConsts.TXT_CLEAR + " " + SAccountConsts.NAME_COST_CENTER.toLowerCase());
                mnAccountMask = ((SDataParamsCompany) miClient.getSession().getConfigCompany()).getMaskCostCenter();
                maAccountLedgers.addAll(((SSessionCustom) miClient.getSession().getSessionCustom()).getCostCenterLedgers());
                break;
            default:
        }

        mnLevels = SAccountUtils.getLevels(mnAccountMask);

        for (int i = 0; i < maoTextCodeLevelStds.length; i++) {
            manDigits[i] = SAccountUtils.getDigits(mnAccountMask, i + 1);

            if (i >= mnLevels) {
                maoDecimalFormats[i] = null;
                maoTextCodeLevelStds[i].removeActionListener(this);
                maoTextCodeLevelStds[i].removeFocusListener(this);
                maoTextCodeLevelStds[i].removeKeyListener(this);
                maoTextCodeLevelStds[i].setVisible(false);
                maoTextCodeLevelStds[i].setEditable(false);
                maoTextCodeLevelStds[i].setValue("");
                maoTextCodeLevelStds[i].setTextSettings("", 0);
            }
            else {
                maoDecimalFormats[i] = new DecimalFormat(SLibUtils.textRepeat("0", manDigits[i]));
                maoTextCodeLevelStds[i].addActionListener(this);
                maoTextCodeLevelStds[i].addFocusListener(this);
                maoTextCodeLevelStds[i].addKeyListener(this);
                maoTextCodeLevelStds[i].setVisible(true);
                maoTextCodeLevelStds[i].setEditable(true);
                maoTextCodeLevelStds[i].setValue(maoDecimalFormats[i].format(0));
                maoTextCodeLevelStds[i].setTextSettings("Nivel " + (i + 1), manDigits[i]);
            }
        }

        moFields.getFields().clear();
        moFields.addField(moTextCodeLevel1);
        moFields.addField(moTextCodeLevel2);
        moFields.addField(moTextCodeLevel3);
        moFields.addField(moTextCodeLevel4);
        moFields.addField(moTextCodeLevel5);
        moFields.addField(moTextCodeLevel6);
        moFields.addField(moTextCodeLevel7);
        moFields.addField(moTextCodeLevel8);
    }
    
    public void setSelectedAccount(SAccount account) {
        String codeLevelStd = "";

        actionClear();

        if (account != null) {
            for (int level = 1; level <= SAccountConsts.LEVELS; level++) {
                codeLevelStd = SAccountUtils.subtractCodeLevelStd(account.getCodeStd(), level);
                if (SLibUtils.parseInt(codeLevelStd) == 0) {
                    break;
                }
                else {
                    maoTextCodeLevelStds[level - 1].setValue(codeLevelStd);
                    computeAccount(maoTextCodeLevelStds[level - 1]);
                }
            }
        }
    }

    public SAccount getSelectedAccount() {
        SAccount account = null;

        for (int i = 0; i < maoAccounts.length; i++) {
            if (maoAccounts[i] == null) {
                break;
            }
            else {
                account = maoAccounts[i];
            }
        }

        return account;
    }

    public void setPanelEditable(boolean enabled) {
        moTextCodeLevel1.setEditable(enabled);
        jbPick.setEnabled(enabled);
        jbClear.setEnabled(enabled);
    }

    public boolean isPanelEditable() {
        return moTextCodeLevel1.isEditable();
    }
    
    public String getPanelAccountName() {
        String name = "";
        
        switch (mnAccountType) {
            case SAccountConsts.TYPE_ACCOUNT:
                name = SAccountConsts.NAME_ACCOUNT;
                break;
            case SAccountConsts.TYPE_COST_CENTER:
                name = SAccountConsts.NAME_COST_CENTER;
                break;
            default:
                // nothing
        }
        
        return name;
    }

    public SBeanFieldText getTextNumberFirst() {
        return maoTextCodeLevelStds[0];
    }

    public SBeanFieldText getTextNumberLast() {
        SBeanFieldText fieldText = null;

        for (int i = maoTextCodeLevelStds.length - 1; i >= 0; i--) {
            if (maoTextCodeLevelStds[i].isEditable()) {
                fieldText = maoTextCodeLevelStds[i];
                break;
            }
        }

        return fieldText;
    }

    public String composeAccountStd() {
        return SAccountUtils.composeCodeStd(maoTextCodeLevelStds);
    }

    public String composeAccountUsr() {
        return SAccountUtils.composeCodeUsr(maoTextCodeLevelStds, maoDecimalFormats);
    }

    public SGuiValidation validatePanel() {
        SAccount account = null;
        String accountStd = "";
        SGuiValidation validation = new SGuiValidation();

        if (isPanelEditable()) {
            account = getSelectedAccount();
            accountStd = composeAccountStd();

            if (mbMandatory && account == null) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlNumber) + "'.");
                validation.setComponent(moTextCodeLevel1);
            }
            else if (mbOnlyExistingAccounts && account == null && accountStd.compareTo(SAccountUtils.composeCodeStdMin()) != 0) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlNumber) + "'.\n"
                        + "(" + SGuiUtils.getLabelName(jlNumber) + " " + SAccountConsts.TXT_EXISTING + ")");
                validation.setComponent(moTextCodeLevel1);
            }
            else if (mbOnlyTerminalAccounts && account != null && maoAccounts[0] != null && account.getLevel() != ((SAccountLedger) maoAccounts[0]).getDeep()) {
                validation.setMessage(SGuiConsts.ERR_MSG_FIELD_REQ + "'" + SGuiUtils.getLabelName(jlNumber) + "'.\n"
                        + "(" + SGuiUtils.getLabelName(jlNumber) + " " + SAccountConsts.TXT_TERMINAL + ")");
                validation.setComponent(moTextCodeLevel1);
            }
        }

        return validation;
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        if (evt.getSource() instanceof SBeanFieldText) {
            //System.out.println("Action performed: " + ((SBeanFieldText) evt.getSource()).getName() + "!");
            computeActionPerformed((SBeanFieldText) evt.getSource());
        }
        else if (evt.getSource() instanceof JButton) {
            JButton button = (JButton) evt.getSource();

            if (button == jbPick) {
                actionPick();
            }
            else if (button == jbClear) {
                actionClear();
            }
        }
    }

    @Override
    public void focusGained(FocusEvent evt) {
        if (evt.getSource() instanceof SBeanFieldText) {
            //System.out.println("Focus gained: " + ((SBeanFieldText) evt.getSource()).getName() + "!");
            computeFocusGained((SBeanFieldText) evt.getSource());
        }
    }

    @Override
    public void focusLost(FocusEvent evt) {
        if (evt.getSource() instanceof SBeanFieldText) {
            //System.out.println("Focus lost: " + ((SBeanFieldText) evt.getSource()).getName() + "!");
            computeFocusLost((SBeanFieldText) evt.getSource());
        }
    }

    @Override
    public void keyTyped(KeyEvent evt) {

    }

    @Override
    public void keyPressed(KeyEvent evt) {
        if (evt.getSource() instanceof SBeanFieldText) {
            //System.out.println("Key pressed: " + ((SBeanFieldText) evt.getSource()).getName() + "!");
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_TAB:
                    computeActionPerformed((SBeanFieldText) evt.getSource());
                    keyPressedTab((SBeanFieldText) evt.getSource());
                    break;
                case KeyEvent.VK_RIGHT:
                    keyPressedRight((SBeanFieldText) evt.getSource());
                    break;
                case KeyEvent.VK_LEFT:
                    keyPressedLeft((SBeanFieldText) evt.getSource());
                    break;
                case KeyEvent.VK_DOWN:
                    keyPressedDown((SBeanFieldText) evt.getSource());   // shows accounts chooser
                    break;
                case KeyEvent.VK_F5:
                    actionPick();
                    break;
                default:
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent evt) {
        if (evt.getSource() instanceof SBeanFieldText) {
            //System.out.println("Key released: " + ((SBeanFieldText) evt.getSource()).getName() + "!");
            keyReleased((SBeanFieldText) evt.getSource());
        }
    }
}
