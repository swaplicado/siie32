/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDialogFormerPayrollPicker.java
 *
 * Created on 7/12/2010, 04:30:30 PM
 */

package erp.mhrs.form;

import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.lib.table.STableRowCustom;
import java.awt.BorderLayout;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;

/**
 *
 * @author Sergio Flores
 */
public class SDialogFormerPayrollPicker extends javax.swing.JDialog {

    private int mnFormResult;
    private boolean mbFirstTime;
    private java.sql.Connection moConnectionOdbc;
    private java.text.SimpleDateFormat moDateFormat;

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moTablePanePayroll;
    private int[] manPayrollKey;
    private String msPayrollPeriod;
    private String msPayrollNumber;
    private String msPayrollDates;
    private String msPayrollNotes;
    private double mdPayrollNet;

    /** Creates new form SDialogFormerPayrollPicker */
    public SDialogFormerPayrollPicker(erp.client.SClientInterface client, java.sql.Connection connectionOdbc) {
        super(client.getFrame(), true);
        miClient = client;
        moConnectionOdbc = connectionOdbc;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importación de nóminas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrid.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar nómina:"));
        jpGrid.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(600, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        moTablePanePayroll = new STablePane(miClient);
        moTablePanePayroll.setDoubleClickAction(this, "actionOk");
        jpGrid.add(moTablePanePayroll, BorderLayout.CENTER);

        moDateFormat = new SimpleDateFormat("yyyyMMdd");

        aoTableColumns = new STableColumnForm[10];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período nómina", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Tipo nómina", 50);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "No. nómina", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha inicial", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha final", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Cerrada", STableConstants.WIDTH_BOOLEAN);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE_2X);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Notas", 250);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePanePayroll.addTableColumn(aoTableColumns[i]);
        }

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                moTablePanePayroll.getTable().requestFocus();
            }
        }
    }

    @SuppressWarnings("unchecked")
    private void populate() {
        String sql = "";
        Statement statement = null;
        ResultSet resultSet = null;

        try {
            int id_nomina = 0;
            int ejercicio = 0;
            int periodo = 0;
            int nomina_num = 0;
            String fecha_ini = "";
            String fecha_fin = "";
            boolean es_cerrada = false;
            String comentarios = "";
            int id_tipo = 0;
            String tipo_abr = "";
            double f_p = 0;
            double f_d = 0;

            moTablePanePayroll.createTable();
            moTablePanePayroll.clearTableRows();

            sql = "SELECT n.id_nomina, n.ejercicio, n.periodo, n.nomina_num, n.fecha_ini, n.fecha_fin, " +
                    "n.es_cerrada, n.comentarios, pt.id_tipo, pt.tipo_abr, " +
                    "(SELECT sum(m.monto) FROM nom_nominas_emp_movs_p AS m WHERE m.id_nomina = n.id_nomina) AS f_p, " +
                    "(SELECT sum(m.monto) FROM nom_nominas_emp_movs_d AS m WHERE m.id_nomina = n.id_nomina) AS f_d " +
                    "FROM nom_nominas AS n INNER JOIN nomt_periodo_pago AS pt ON n.fid_periodo_pago_tp = pt.id_tipo " +
                    "ORDER BY n.ejercicio DESC, n.periodo DESC, pt.id_tipo, n.nomina_num, n.id_nomina; ";

            statement = moConnectionOdbc.createStatement();
            resultSet = statement.executeQuery(sql);

            /*
            for (int i = 1; i <= resultSet.getMetaData().getColumnCount(); i++) {
                System.out.println("Catalogue name: " + resultSet.getMetaData().getCatalogName(i));
                System.out.println("Column class name: " + resultSet.getMetaData().getColumnClassName(i));
                System.out.println("Column display size: " + resultSet.getMetaData().getColumnDisplaySize(i));
                System.out.println("Column column label: " + resultSet.getMetaData().getColumnLabel(i));
                System.out.println("Column column name: " + resultSet.getMetaData().getColumnName(i));
                System.out.println("Column column type: " + resultSet.getMetaData().getColumnType(i));
                System.out.println("Column column type name: " + resultSet.getMetaData().getColumnTypeName(i));
            }
            */

            while (resultSet.next()) {
                STableRowCustom row = new STableRowCustom();

                id_nomina = resultSet.getInt("id_nomina");
                ejercicio = resultSet.getShort("ejercicio");
                periodo = resultSet.getShort("periodo");
                nomina_num = resultSet.getShort("nomina_num");
                fecha_ini = resultSet.getString("fecha_ini");
                fecha_fin = resultSet.getString("fecha_fin");
                es_cerrada = resultSet.getBoolean("es_cerrada");
                comentarios = resultSet.getString("comentarios");
                id_tipo = resultSet.getShort("id_tipo");
                tipo_abr = resultSet.getString("tipo_abr");
                f_p = resultSet.getDouble("f_p");
                f_d = resultSet.getDouble("f_d");

                row.setPrimaryKey(new int[] { id_nomina });
                row.getValues().add("" + ejercicio + "-" + (periodo >= 10 ? "" : "0") + periodo);
                row.getValues().add(tipo_abr.trim());
                row.getValues().add(nomina_num);
                row.getValues().add(moDateFormat.parse(fecha_ini));
                row.getValues().add(moDateFormat.parse(fecha_fin));
                row.getValues().add(es_cerrada);
                row.getValues().add(f_p);
                row.getValues().add(f_d);
                row.getValues().add(f_p - f_d);
                row.getValues().add(comentarios.trim());

                moTablePanePayroll.addTableRow(row);
            }

            moTablePanePayroll.renderTableRows();
            moTablePanePayroll.setTableRowSelection(0);
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    public void actionOk() {
        STableRowCustom row = (STableRowCustom) moTablePanePayroll.getSelectedTableRow();

        if (row == null) {
            miClient.showMsgBoxWarning("Se debe seleccionar una nomina.");
            moTablePanePayroll.getTable().requestFocus();
        }
        else {
            manPayrollKey = (int[]) row.getPrimaryKey();
            msPayrollPeriod = "" + row.getValues().get(0);
            msPayrollNumber = "" + row.getValues().get(1) + " " + row.getValues().get(2);
            msPayrollDates = miClient.getSessionXXX().getFormatters().getDateFormat().format((java.util.Date) row.getValues().get(3)) + " - " +
                    miClient.getSessionXXX().getFormatters().getDateFormat().format((java.util.Date) row.getValues().get(4));
            msPayrollNotes = (String) row.getValues().get(9);
            mdPayrollNet = (Double) row.getValues().get(8);

            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JPanel jpGrid;
    // End of variables declaration//GEN-END:variables

    public void resetForm() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        manPayrollKey = null;
        msPayrollPeriod = "";
        msPayrollNumber = "";
        msPayrollDates = "";
        msPayrollNotes = "";
        mdPayrollNet = 0;

        populate();
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public int[] getPayrollKey() {
        return manPayrollKey;
    }

    public String getPayrollPeriod() {
        return msPayrollPeriod;
    }

    public String getPayrollNumber() {
        return msPayrollNumber;
    }

    public String getPayrollDates() {
        return msPayrollDates;
    }

    public String getPayrollNotes() {
        return msPayrollNotes;
    }

    public double getPayrollNet() {
        return mdPayrollNet;
    }
}
