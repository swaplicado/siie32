/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mhrs.form;

import erp.SClient;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDataTax;
import erp.mfin.form.SDialogRecordPicker;
import erp.mhrs.data.SDataFormerPayroll;
import erp.mhrs.data.SDataFormerPayrollEmp;
import erp.mhrs.data.SDataFormerPayrollMove;
import erp.mhrs.data.SRowEmployee;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.fin.db.SFinUtils;
import erp.mod.hrs.db.SDbAccountingPayroll;
import erp.mod.hrs.db.SDbAccountingPayrollReceipt;
import erp.mod.hrs.db.SDbPayroll;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsFinUtils;
import erp.mod.utils.SDialogMessages;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridUtils;
import sa.lib.gui.SGuiClient;
import sa.lib.gui.SGuiConsts;
import sa.lib.gui.SGuiUtils;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Sergio Flores, Juan Barajas, Sergio Flores
 */
public class SDialogPayrollAccounting extends JDialog implements ActionListener {
    
    private static final int JOURNAL_VOUCHER_COLS = 5;
    private static final int JOURNAL_VOUCHER_COLS_INDEX = 8;
    
    private int mnFormResult;
    private boolean mbFirstTime;

    private erp.client.SClientInterface miClient;
    private erp.lib.table.STablePane moTablePaneEmpAvailable;
    private erp.lib.table.STablePane moTablePaneEmpSelected;
    private erp.mfin.form.SDialogRecordPicker moDialogRecordPicker;
    private erp.mfin.data.SDataRecord moCurrentRecord;
    private erp.mhrs.data.SDataFormerPayroll moFormerPayroll;
    private java.util.ArrayList<RecordEmployees> maRecordEmployeeses;
    private double mdTotalNetSelected;
    
    private SDbPayroll moPayroll;
    private SDbAccountingPayroll moAccountingPayroll;

    /** Creates new form SDialogPayrollAccounting
     * @param client
     * @param payroll
     */
    public SDialogPayrollAccounting(SClientInterface client, SDbPayroll payroll) {
        super(client.getFrame(), true);
        miClient = client;
        moPayroll = payroll;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPayroll = new javax.swing.JLabel();
        jtfPayrollPeriod = new javax.swing.JTextField();
        jtfPayrollNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPayrollDates = new javax.swing.JLabel();
        jtfPayrollDates = new javax.swing.JTextField();
        jlPayrollNet = new javax.swing.JLabel();
        jtfPayrollNet = new javax.swing.JTextField();
        jtfPayrollNetCur = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlPayrollNotes = new javax.swing.JLabel();
        jtfPayrollNotes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jpJournalVoucher = new javax.swing.JPanel();
        jpAccountingRecord = new javax.swing.JPanel();
        jlRecord = new javax.swing.JLabel();
        jtfRecordDate = new javax.swing.JTextField();
        jtfRecordBkc = new javax.swing.JTextField();
        jtfRecordBranch = new javax.swing.JTextField();
        jtfRecordNumber = new javax.swing.JTextField();
        jbPickRecord = new javax.swing.JButton();
        jlDummy3 = new javax.swing.JLabel();
        jpPaymentType = new javax.swing.JPanel();
        jlBankFilter = new javax.swing.JLabel();
        jcbBankFilter = new javax.swing.JComboBox();
        jlBankFilterHint = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jckAccountingGradual = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jlTotalAvailables = new javax.swing.JLabel();
        jpEmployeesSelected = new javax.swing.JPanel();
        jlTotalSelected = new javax.swing.JLabel();
        jpControls = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbAddAll = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Contabilización de nóminas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la nómina:"));
        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayroll.setText("Nómina:");
        jlPayroll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPayroll);

        jtfPayrollPeriod.setEditable(false);
        jtfPayrollPeriod.setText("2001-01");
        jtfPayrollPeriod.setFocusable(false);
        jtfPayrollPeriod.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jtfPayrollPeriod);

        jtfPayrollNumber.setEditable(false);
        jtfPayrollNumber.setText("QNA. 1");
        jtfPayrollNumber.setFocusable(false);
        jtfPayrollNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfPayrollNumber);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollDates.setText("Período nómina:");
        jlPayrollDates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollDates);

        jtfPayrollDates.setEditable(false);
        jtfPayrollDates.setText("01/01/2001 - 01/01/2001");
        jtfPayrollDates.setFocusable(false);
        jtfPayrollDates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfPayrollDates);

        jlPayrollNet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPayrollNet.setText("Total neto:");
        jlPayrollNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollNet);

        jtfPayrollNet.setEditable(false);
        jtfPayrollNet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayrollNet.setText("9,999,999.99");
        jtfPayrollNet.setFocusable(false);
        jtfPayrollNet.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfPayrollNet);

        jtfPayrollNetCur.setEditable(false);
        jtfPayrollNetCur.setText("MXN");
        jtfPayrollNetCur.setFocusable(false);
        jtfPayrollNetCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel5.add(jtfPayrollNetCur);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNotes.setText("Comentarios:");
        jlPayrollNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPayrollNotes);

        jtfPayrollNotes.setEditable(false);
        jtfPayrollNotes.setText("PAYROLL NOTES");
        jtfPayrollNotes.setFocusable(false);
        jtfPayrollNotes.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel6.add(jtfPayrollNotes);

        jPanel1.add(jPanel6);

        jpGrid.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles de la contabilización de la nómina:"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setLayout(new java.awt.BorderLayout());

        jpJournalVoucher.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpAccountingRecord.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecord.setText("Póliza contable:");
        jlRecord.setPreferredSize(new java.awt.Dimension(100, 23));
        jpAccountingRecord.add(jlRecord);

        jtfRecordDate.setEditable(false);
        jtfRecordDate.setText("01/01/2000");
        jtfRecordDate.setToolTipText("Fecha de la póliza contable");
        jtfRecordDate.setFocusable(false);
        jtfRecordDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordDate);

        jtfRecordBkc.setEditable(false);
        jtfRecordBkc.setText("BKC");
        jtfRecordBkc.setToolTipText("Centro contable");
        jtfRecordBkc.setFocusable(false);
        jtfRecordBkc.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBkc);

        jtfRecordBranch.setEditable(false);
        jtfRecordBranch.setText("BRA");
        jtfRecordBranch.setToolTipText("Sucursal de la empresa");
        jtfRecordBranch.setFocusable(false);
        jtfRecordBranch.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBranch);

        jtfRecordNumber.setEditable(false);
        jtfRecordNumber.setText("TP-000001");
        jtfRecordNumber.setToolTipText("Número de póliza contable");
        jtfRecordNumber.setFocusable(false);
        jtfRecordNumber.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordNumber);

        jbPickRecord.setText("...");
        jbPickRecord.setToolTipText("Seleccionar póliza contable");
        jbPickRecord.setPreferredSize(new java.awt.Dimension(23, 23));
        jpAccountingRecord.add(jbPickRecord);

        jlDummy3.setPreferredSize(new java.awt.Dimension(122, 23));
        jpAccountingRecord.add(jlDummy3);

        jpJournalVoucher.add(jpAccountingRecord);

        jpPaymentType.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlBankFilter.setText("Filtrar banco:");
        jlBankFilter.setPreferredSize(new java.awt.Dimension(100, 23));
        jpPaymentType.add(jlBankFilter);

        jcbBankFilter.setPreferredSize(new java.awt.Dimension(300, 23));
        jpPaymentType.add(jcbBankFilter);

        jlBankFilterHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlBankFilterHint.setText("Sólo al seleccionar recibos con la opción '>>' (Agregar todos)");
        jlBankFilterHint.setPreferredSize(new java.awt.Dimension(350, 23));
        jpPaymentType.add(jlBankFilterHint);

        jpJournalVoucher.add(jpPaymentType);

        jPanel8.add(jpJournalVoucher, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(2, 1));

        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jckAccountingGradual.setText("Contabilizar gradualmente");
        jckAccountingGradual.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jckAccountingGradual.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jckAccountingGradual.setPreferredSize(new java.awt.Dimension(200, 23));
        jPanel10.add(jckAccountingGradual);

        jPanel9.add(jPanel10);

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        jPanel9.add(jPanel11);

        jPanel8.add(jPanel9, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel8, java.awt.BorderLayout.NORTH);

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos pendientes de contabilizar:"));
        jpEmployeesAvailable.setPreferredSize(new java.awt.Dimension(450, 100));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());

        jlTotalAvailables.setText("Recibos pendientes...");
        jlTotalAvailables.setPreferredSize(new java.awt.Dimension(100, 20));
        jpEmployeesAvailable.add(jlTotalAvailables, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jpEmployeesAvailable, java.awt.BorderLayout.LINE_START);

        jpEmployeesSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos seleccionados para contabilizar:"));
        jpEmployeesSelected.setPreferredSize(new java.awt.Dimension(475, 100));
        jpEmployeesSelected.setLayout(new java.awt.BorderLayout());

        jlTotalSelected.setText("Recibos seleccionados...");
        jlTotalSelected.setPreferredSize(new java.awt.Dimension(100, 20));
        jpEmployeesSelected.add(jlTotalSelected, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jpEmployeesSelected, java.awt.BorderLayout.LINE_END);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel7.add(jlDummy01);

        jbAdd.setText(">");
        jbAdd.setToolTipText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAdd);

        jbAddAll.setText(">>");
        jbAddAll.setToolTipText("Agregar todos");
        jbAddAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAddAll);

        jbRemove.setText("<");
        jbRemove.setToolTipText("Remover");
        jbRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemove);

        jbRemoveAll.setText("<<");
        jbRemoveAll.setToolTipText("Remover todos");
        jbRemoveAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemoveAll);

        jpControls.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpControls, java.awt.BorderLayout.CENTER);

        jpGrid.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(1056, 689));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        moTablePaneEmpAvailable = new STablePaneGrid(miClient);
        moTablePaneEmpAvailable.setDoubleClickAction(this, "actionAdd");
        jpEmployeesAvailable.add(moTablePaneEmpAvailable, BorderLayout.CENTER);

        moTablePaneEmpSelected = new STablePaneGrid(miClient);
        moTablePaneEmpSelected.setDoubleClickAction(this, "actionRemove");
        jpEmployeesSelected.add(moTablePaneEmpSelected, BorderLayout.CENTER);

        moDialogRecordPicker = new SDialogRecordPicker(miClient, SDataConstants.FINX_REC_USER);
        moFormerPayroll = null;
        moCurrentRecord = null;

        i = 0;
        aoTableColumns = new STableColumnForm[8];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre empleado", 150);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Clave empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++].setCellRenderer(SGridUtils.CellRendererIntegerRaw);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código departamento", 50);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Banco", 100);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpAvailable.addTableColumn(aoTableColumns[i]);
        }

        i = 0;
        aoTableColumns = new STableColumnForm[13];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre empleado", 150);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Clave empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++].setCellRenderer(SGridUtils.CellRendererIntegerRaw);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Código departamento", 50);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Banco", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período póliza", STableConstants.WIDTH_YEAR_PERIOD);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio póliza", STableConstants.WIDTH_RECORD_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha póliza", STableConstants.WIDTH_DATE);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpSelected.addTableColumn(aoTableColumns[i]);
        }

        jbPickRecord.addActionListener(this);
        jbAdd.addActionListener(this);
        jbAddAll.addActionListener(this);
        jbRemove.addActionListener(this);
        jbRemoveAll.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                try {
                    showPayroll();
                    jbPickRecord.requestFocus();
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
            }
        }
    }

    private void computeTotals() {
        double amountAvailable = 0;
        double amountSelected = 0;
        
        for (int row = 0; row < moTablePaneEmpAvailable.getTableGuiRowCount(); row++) {
            amountAvailable = SLibUtils.roundAmount(amountAvailable + ((SRowEmployee) moTablePaneEmpAvailable.getTableRow(row)).getPayment());
        }
        
        for (int row = 0; row < moTablePaneEmpSelected.getTableGuiRowCount(); row++) {
            amountSelected = SLibUtils.roundAmount(amountSelected + ((SRowEmployee) moTablePaneEmpSelected.getTableRow(row)).getPayment());
        }
        
        jlTotalAvailables.setText("Recibos pendientes: " + SLibUtils.DecimalFormatInteger.format(moTablePaneEmpAvailable.getTableGuiRowCount()) + " | "
                + "Monto pendiente: $" + SLibUtils.getDecimalFormatAmount().format(amountAvailable) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode());
        
        jlTotalSelected.setText("Recibos seleccionados:  " + SLibUtils.DecimalFormatInteger.format(moTablePaneEmpSelected.getTableGuiRowCount()) + " | "
                + "Monto seleccionado: $" + SLibUtils.getDecimalFormatAmount().format(amountSelected) + " " + miClient.getSession().getSessionCustom().getLocalCurrencyCode());
    }
    
    @SuppressWarnings("unchecked")
    private void showPayroll() {
        // Display payroll:

        jtfPayrollPeriod.setText(moPayroll.composePayrollPeriod());
        jtfPayrollNumber.setText(moPayroll.composePayrollNumber());
        jtfPayrollDates.setText(moPayroll.composePayrollDates());
        jtfPayrollNotes.setText(moPayroll.getNotes());
        jtfPayrollNet.setText(SLibUtils.getDecimalFormatAmount().format(moPayroll.getAuxTotalNet()));

        jtfPayrollPeriod.setCaretPosition(0);
        jtfPayrollNumber.setCaretPosition(0);
        jtfPayrollDates.setCaretPosition(0);
        jtfPayrollNotes.setCaretPosition(0);
        jtfPayrollNet.setCaretPosition(0);
        
        jckAccountingGradual.setEnabled(!moPayroll.isAccounting()); // once payroll is bookkept this setting cannot be changed
        jckAccountingGradual.setSelected(moPayroll.isAccountingGradual());

        try {
            // Prepare payroll registry:

            moFormerPayroll = new SDataFormerPayroll();
            moFormerPayroll.setPkPayrollId(moPayroll.getPkPayrollId());
            moFormerPayroll.setYear(moPayroll.getPeriodYear());
            moFormerPayroll.setPeriod(moPayroll.getPeriod());
            moFormerPayroll.setNumber(moPayroll.getNumber());
            moFormerPayroll.setType(moPayroll.getPaymentType());
            moFormerPayroll.setNote(SLibUtils.textLeft(moPayroll.getNotes(), 100));
            moFormerPayroll.setDateBegin(moPayroll.getDateStart());
            moFormerPayroll.setDateEnd(moPayroll.getDateEnd());
            moFormerPayroll.setDatePayment(moPayroll.getDateEnd());
            moFormerPayroll.setDebit_r(0);
            moFormerPayroll.setCredit_r(0);
            moFormerPayroll.setIsRegular(moPayroll.isPayrollNormal());
            moFormerPayroll.setIsClosed(moPayroll.isClosed());
            moFormerPayroll.setIsDeleted(false);
            moFormerPayroll.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
            moFormerPayroll.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
            moFormerPayroll.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());

            // Prepare bank filter:

            HashSet<String> banksSet = new HashSet<>();
            boolean isEmptyBankAdded = false;

            // Show pending payroll receipts:

            String sql = "SELECT bp.bp, emp.id_emp, CAST(emp.num AS UNSIGNED INTEGER) AS _emp_num, dep.name, dep.code, dep.id_dep, "
                    + "p.fk_tp_pay, pr.ear_r, pr.ded_r, pr.pay_r, pr.pay_day_r, pr.day_wrk, pr.day_not_wrk_r, pr.day_pad, "
                    + "tpsal.name, tpsal.code, tpemp.name, tpemp.code, tpwrk.name, tpwrk.code, COALESCE(bnk.name, '') AS _bank "
                    + "FROM hrs_pay AS p "
                    + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                    + "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = pr.id_emp "
                    + "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = pr.fk_dep "
                    + "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = pr.id_emp "
                    + "INNER JOIN erp.hrss_tp_sal AS tpsal ON tpsal.id_tp_sal = pr.fk_tp_sal "
                    + "INNER JOIN erp.hrsu_tp_emp AS tpemp ON tpemp.id_tp_emp = pr.fk_tp_emp "
                    + "INNER JOIN erp.hrsu_tp_wrk AS tpwrk ON tpwrk.id_tp_wrk = pr.fk_tp_wrk "
                    + "LEFT OUTER JOIN erp.hrss_bank AS bnk ON emp.fk_bank_n = bnk.id_bank "
                    + "WHERE p.id_pay = " + moPayroll.getPkPayrollId() + " AND NOT pr.b_del AND "
                    + "pr.id_emp NOT IN (" // exclude payroll receipts already bookkept
                        + "SELECT apr.id_emp "
                        + "FROM hrs_acc_pay AS ap "
                        + "INNER JOIN hrs_acc_pay_rcp AS apr ON apr.id_pay = ap.id_pay AND apr.id_acc = ap.id_acc "
                        + "WHERE ap.id_pay = " + moPayroll.getPkPayrollId() + " AND NOT ap.b_del ORDER BY apr.id_emp) "
                    + "ORDER BY bp.bp, emp.id_emp ";

            try (Statement statement = miClient.getSession().getStatement()) {
                ResultSet resultSet = statement.executeQuery(sql);
                while (resultSet.next()) {
                    SRowEmployee row = new SRowEmployee();

                    row.setPrimaryKey(new int[] { resultSet.getInt("emp.id_emp") });
                    row.getValues().add(resultSet.getString("bp.bp")); // 0
                    row.getValues().add(resultSet.getInt("_emp_num")); // 1
                    row.getValues().add(resultSet.getString("dep.name")); // 2
                    row.getValues().add(resultSet.getString("dep.code")); // 3
                    row.getValues().add(resultSet.getDouble("pr.ear_r")); // 4
                    row.getValues().add(resultSet.getDouble("pr.ded_r")); // 5
                    row.getValues().add(resultSet.getDouble("pr.pay_r")); // 6
                    row.getValues().add(resultSet.getString("_bank")); // 7

                    row.setEmployeeCategory(resultSet.getString("tpwrk.code"));
                    row.setEmployeeType(resultSet.getString("tpemp.code"));
                    row.setSalaryType(SLibUtils.textLeft(resultSet.getString("tpsal.name"), 3)); // system's catalog, name can be truncated to length of 3
                    row.setBank(resultSet.getString("_bank"));
                    row.setSalary(resultSet.getDouble("pr.pay_day_r"));
                    row.setPayment(resultSet.getDouble("pr.pay_r"));
                    row.setDaysWorked(resultSet.getInt("pr.day_wrk"));
                    row.setDaysNotWorked(resultSet.getInt("pr.day_not_wrk_r"));
                    row.setDaysPayed(resultSet.getInt("pr.day_pad"));
                    row.setFkBizPartnerId(resultSet.getInt("emp.id_emp"));
                    row.setFkPaymentSystemTypeId(0); // attribute is obsolete!

                    moTablePaneEmpAvailable.addTableRow(row);

                    // Process bank filter:

                    if (row.getBank().isEmpty()) {
                        if (!isEmptyBankAdded) {
                            isEmptyBankAdded = true;
                            banksSet.add(SHrsConsts.EMPTY_BANK);
                        }
                    }
                    else {
                        banksSet.add(row.getBank());
                    }
                }

                moTablePaneEmpAvailable.renderTableRows();
                moTablePaneEmpAvailable.setTableRowSelection(0);

                // Set bank filter:

                Object[] banksArray = banksSet.toArray();
                Arrays.sort(banksArray);

                jcbBankFilter.removeAllItems();
                jcbBankFilter.addItem("- " + SUtilConsts.TXT_SELECT + " " + SGuiUtils.getLabelName(jlBankFilter) + " -");

                for (Object bank : banksArray) {
                    jcbBankFilter.addItem(bank);
                }
            }
            
            computeTotals();
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @SuppressWarnings("unchecked")
    private void prepareRecordEmployeesForAccounting() throws Exception {
        moFormerPayroll.getDbmsDataFormerPayrollEmps().clear();
        moFormerPayroll.getDbmsDataFormerPayrollMoves().clear();
        moFormerPayroll.getAuxDataRecords().clear();
        
        moAccountingPayroll = null;
        
        if (jckAccountingGradual.isSelected()) {
            moAccountingPayroll = SHrsFinUtils.getLastAccountingPayroll(miClient.getSession(), moPayroll.getPkPayrollId());
            
            if (moAccountingPayroll != null) {
                moAccountingPayroll.getChildReceipts().clear(); // preserve from being altered all payroll receipts already bookkept
            }
        }
        
        if (moAccountingPayroll == null) {
            moAccountingPayroll = new SDbAccountingPayroll();
            moAccountingPayroll.setPkPayrollId(moPayroll.getPkPayrollId());
            moAccountingPayroll.setAuxAccountingGradual(jckAccountingGradual.isSelected());
        }
        
        maRecordEmployeeses = new ArrayList<>();
        mdTotalNetSelected = 0;

        for (int i = 0; i < moTablePaneEmpSelected.getTableGuiRowCount(); i++) {
            SRowEmployee rowEmployee = (SRowEmployee) moTablePaneEmpSelected.getTableRow(i);
            Object[] recordKey = (Object[]) rowEmployee.getData(); // record primary key is in Data member, WTF!
            boolean add = true;
            ArrayList<Integer> employeeIds = null;

            for (RecordEmployees recordEmployees : maRecordEmployeeses) {
                if (SLibUtilities.compareKeys(recordEmployees.Record.getPrimaryKey(), recordKey)) {
                    add = false;
                    employeeIds = recordEmployees.EmployeeIds;
                    break;
                }
            }
            
            if (add) {
                SDataRecord record = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, recordKey, SLibConstants.EXEC_MODE_VERBOSE);
                
                if (!jckAccountingGradual.isSelected()) {
                    for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                        if (entry.getFkPayrollId_n() == moPayroll.getPkPayrollId() && !entry.getIsDeleted()) {
                            entry.setIsDeleted(true);
                            entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                            entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                        }
                    }
                }

                employeeIds = new ArrayList<>();
                maRecordEmployeeses.add(new RecordEmployees(record, employeeIds));
            }
            
            employeeIds.add(((int[]) rowEmployee.getPrimaryKey())[0]);

            SDataFormerPayrollEmp formerPayrollEmp = new SDataFormerPayrollEmp();
            formerPayrollEmp.setPkPayrollId(moPayroll.getPkPayrollId());
            formerPayrollEmp.setPkEmployeeId(((int[]) rowEmployee.getPrimaryKey())[0]);
            formerPayrollEmp.setEmployee((String) rowEmployee.getValues().get(0));
            formerPayrollEmp.setDepartment((String) rowEmployee.getValues().get(2));
            formerPayrollEmp.setDepartmentKey((String) rowEmployee.getValues().get(3));
            formerPayrollEmp.setEmployeeCategory(rowEmployee.getEmployeeCategory());
            formerPayrollEmp.setEmployeeType(rowEmployee.getEmployeeType());
            formerPayrollEmp.setSalaryType(rowEmployee.getSalaryType());
            formerPayrollEmp.setDebit((Double) rowEmployee.getValues().get(4));
            formerPayrollEmp.setCredit((Double) rowEmployee.getValues().get(5));
            
            mdTotalNetSelected = SLibUtils.roundAmount(mdTotalNetSelected + (Double) rowEmployee.getValues().get(6));
            
            formerPayrollEmp.setSalary(rowEmployee.getSalary());
            formerPayrollEmp.setDaysNotWorked(rowEmployee.getDaysNotWorked());
            formerPayrollEmp.setDaysWorked(rowEmployee.getDaysWorked());
            formerPayrollEmp.setDaysPayed(rowEmployee.getDaysPayed());
            formerPayrollEmp.setNumberSeries(SHrsConsts.CFD_SERIES);
            formerPayrollEmp.setNumber(0);
            formerPayrollEmp.setIsDeleted(false);
            formerPayrollEmp.setFkBizPartnerId_n(rowEmployee.getFkBizPartnerId());
            formerPayrollEmp.setFkPaymentSystemTypeId(SDataConstantsSys.TRNU_TP_PAY_SYS_NA);
            formerPayrollEmp.setFkYearId((Integer) recordKey[0]);
            formerPayrollEmp.setFkPeriodId((Integer) recordKey[1]);
            formerPayrollEmp.setFkBookkeepingCenterId((Integer) recordKey[2]);
            formerPayrollEmp.setFkRecordTypeId((String) recordKey[3]);
            formerPayrollEmp.setFkNumberId((Integer) recordKey[4]);

            moFormerPayroll.getDbmsDataFormerPayrollEmps().add(formerPayrollEmp);
            
            moAccountingPayroll.getChildReceipts().add(rowEmployee.getAccountingPayrollReceipt());
        }
    }

    private String composeSqlEmployeeIds(final ArrayList<Integer> employeeIds) {
        String sql = "";

        for (Integer employee : employeeIds) {
            sql += (sql.length() == 0 ? "" : ", ") + employee;
        }

        return sql;
    }

    private SDataRecordEntry createRecordEntry(Object recordPk, String concept,
            double debit, double credit, String accountId, String costCenterId,
            int itemId, int bpId, int bpbId, int[] taxKey, int[] sysAccountTypeKey, int[] sysMoveTypeKey, int[] sysMoveTypeKeyXXX) {
        SDataRecordEntry entry = new SDataRecordEntry();

        entry.setPkYearId((Integer) ((Object[]) recordPk)[0]);
        entry.setPkPeriodId((Integer) ((Object[]) recordPk)[1]);
        entry.setPkBookkeepingCenterId((Integer) ((Object[]) recordPk)[2]);
        entry.setPkRecordTypeId((String) ((Object[]) recordPk)[3]);
        entry.setPkNumberId((Integer) ((Object[]) recordPk)[4]);
        entry.setPkEntryId(0);
        entry.setConcept(concept);
        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setDebit(debit);
        entry.setCredit(credit);
        entry.setExchangeRate(1);
        entry.setExchangeRateSystem(1);
        entry.setDebitCy(debit);
        entry.setCreditCy(credit);
        entry.setUnits(0);
        entry.setSortingPosition(0);
        entry.setOccasionalFiscalId("");
        entry.setIsExchangeDifference(false);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);
        entry.setFkAccountIdXXX(accountId);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkSystemMoveClassId(sysMoveTypeKey[0]);
        entry.setFkSystemMoveTypeId(sysMoveTypeKey[1]);
        entry.setFkSystemAccountClassId(sysAccountTypeKey[0]);
        entry.setFkSystemAccountTypeId(sysAccountTypeKey[1]);
        entry.setFkSystemMoveCategoryIdXXX(sysMoveTypeKeyXXX[0]);
        entry.setFkSystemMoveTypeIdXXX(sysMoveTypeKeyXXX[1]);
        entry.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
        entry.setFkCostCenterIdXXX_n(costCenterId);
        entry.setFkCheckWalletId_n(0);
        entry.setFkCheckId_n(0);
        entry.setFkBizPartnerId_nr(bpId);
        entry.setFkBizPartnerBranchId_n(bpbId);
        entry.setFkReferenceCategoryId_n(0);
        entry.setFkCompanyBranchId_n(0);
        entry.setFkEntityId_n(0);
        entry.setFkTaxBasicId_n(taxKey[0]);
        entry.setFkTaxId_n(taxKey[1]);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(0);
        entry.setFkDpsDocId_n(0);
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);
        entry.setFkDiogYearId_n(0);
        entry.setFkDiogDocId_n(0);
        entry.setFkPayrollFormerId_n(0);
        entry.setFkPayrollId_n(moPayroll.getPkPayrollId());
        entry.setFkItemId_n(itemId);
        entry.setFkItemAuxId_n(0);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

        return entry;
    }

    @SuppressWarnings("unchecked")
    private void savePayrollAccounting() throws Exception {
        int nType = 0;
        int nMoveId = 0;
        int nEntryId = 0;
        int nResult = 0;
        int[] anSysAccountTypeKey = null;
        int[] anSysMoveTypeKey = null;
        int[] anSysMoveTypeKeyXXX = null;
        String sql = "";
        String sqlEmployeeIds = "";
        String conceptType = "";
        Statement oStatementCfg = null;
        ResultSet oResultSetCfg = null;
        Statement oStatementRec = null;
        ResultSet oResultSetRec = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;
        SDataRecord oRecord = null;
        SDataFormerPayrollMove oPayrollMove = null;

        double totalDebit = 0;
        double totalCredit = 0;
        
        HashMap<Integer, String> accountPksMap = new HashMap<>();
        HashMap<String, SDataAccount> accountsMap = new HashMap<>();
        HashMap<String, SDataAccount> ledgerAccountsMap = new HashMap<>();
        HashMap<Integer, String> costCenterPksMap = new HashMap<>();

        oStatementCfg = miClient.getSession().getStatement().getConnection().createStatement();
        oStatementRec = miClient.getSession().getStatement().getConnection().createStatement();
        SDialogMessages messages = new SDialogMessages((SGuiClient) miClient, "Inconvenientes y omisiones de configuración de contabilización", "Lista de inconvenientes y omisiones de configuración de contabilización:");
        
        if (SHrsFinUtils.validateAccountingSettingsForPayroll(miClient.getSession(), moPayroll.getPkPayrollId())) {
            prepareRecordEmployeesForAccounting();

            for (RecordEmployees recordEmployees : maRecordEmployeeses) {
                oRecord = recordEmployees.Record;
                sqlEmployeeIds = composeSqlEmployeeIds(recordEmployees.EmployeeIds);
                
                nEntryId = oRecord.getDbmsRecordEntries().size();
                
                /*
                iteration #1: processing of perceptions;
                iteration #2: processing of deductions.
                */

                for (nType = 1; nType <= 2; nType++) {
                    if (nType == 1) {
                        /* Perception:
                         * Accountable link level:
                         * 1. Global
                         * 2. By department
                         * 3. By employee
                         */
                        
                        conceptType = "percepción";

                        sql = "SELECT " + SModSysConsts.HRSS_TP_ACC_GBL + " AS _tp_acc, c.id_ear AS _id_concept, 0 AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "'' AS _ref_code, '' AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ear AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ear AS c ON c.id_ear = prc.fk_ear AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_GBL + " "
                                + "LEFT OUTER JOIN hrs_acc_ear AS ac ON ac.id_ear = prc.fk_ear AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND ac.id_ref = 0 "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "UNION "
                                + "SELECT " + SModSysConsts.HRSS_TP_ACC_DEP + " AS _tp_acc, c.id_ear AS _id_concept, pr.fk_dep AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "d.code AS _ref_code, d.name AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ear AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ear AS c ON c.id_ear = prc.fk_ear AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_DEP + " "
                                + "LEFT OUTER JOIN hrs_acc_ear AS ac ON ac.id_ear = prc.fk_ear AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND ac.id_ref = pr.fk_dep "
                                + "LEFT OUTER JOIN erp.hrsu_dep AS d ON d.id_dep = pr.fk_dep "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "UNION "
                                + "SELECT " + SModSysConsts.HRSS_TP_ACC_EMP + " AS _tp_acc, c.id_ear AS _id_concept, pr.id_emp AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "e.num AS _ref_code, b.bp AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ear AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ear AS c ON c.id_ear = prc.fk_ear AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_EMP + " "
                                + "LEFT OUTER JOIN hrs_acc_ear AS ac ON ac.id_ear = prc.fk_ear AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND ac.id_ref = pr.id_emp "
                                + "LEFT OUTER JOIN erp.hrsu_emp AS e ON e.id_emp = pr.id_emp "
                                + "LEFT OUTER JOIN erp.bpsu_bp AS b ON b.id_bp = pr.id_emp "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "ORDER BY _tp_acc, _concept, _concept_code, _id_concept, _ref, _ref_code, _id_ref;";
                    }
                    else {
                        /* Deduction:
                         * Accountable link level:
                         * 1. Global
                         * 2. By department
                         * 3. By employee
                         */
                        
                        conceptType = "deducción";

                        sql = "SELECT " + SModSysConsts.HRSS_TP_ACC_GBL + " AS _tp_acc, c.id_ded AS _id_concept, 0 AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "'' AS _ref_code, '' AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ded AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ded AS c ON c.id_ded = prc.fk_ded AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_GBL + " "
                                + "LEFT OUTER JOIN hrs_acc_ded AS ac ON ac.id_ded = prc.fk_ded AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND ac.id_ref = 0 "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "UNION "
                                + "SELECT " + SModSysConsts.HRSS_TP_ACC_DEP + " AS _tp_acc, c.id_ded AS _id_concept, pr.fk_dep AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "d.code AS _ref_code, d.name AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ded AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ded AS c ON c.id_ded = prc.fk_ded AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_DEP + " "
                                + "LEFT OUTER JOIN hrs_acc_ded AS ac ON ac.id_ded = prc.fk_ded AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND ac.id_ref = pr.fk_dep "
                                + "LEFT OUTER JOIN erp.hrsu_dep AS d ON d.id_dep = pr.fk_dep "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "UNION "
                                + "SELECT " + SModSysConsts.HRSS_TP_ACC_EMP + " AS _tp_acc, c.id_ded AS _id_concept, pr.id_emp AS _id_ref, "
                                + "c.code AS _concept_code, c.name AS _concept, c.name_abbr AS _concept_abbr, "
                                + "ac.fk_acc, ac.fk_cc_n, ac.fk_item_n, ac.fk_bp_n, ac.fk_tax_bas_n, ac.fk_tax_tax_n, "
                                + "e.num AS _ref_code, b.bp AS _ref "
                                + "FROM hrs_pay AS p "
                                + "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay "
                                + "INNER JOIN hrs_pay_rcp_ded AS prc ON prc.id_pay = pr.id_pay AND prc.id_emp = pr.id_emp "
                                + "INNER JOIN hrs_ded AS c ON c.id_ded = prc.fk_ded AND c.fk_tp_acc_cfg = " + SModSysConsts.HRSS_TP_ACC_EMP + " "
                                + "LEFT OUTER JOIN hrs_acc_ded AS ac ON ac.id_ded = prc.fk_ded AND ac.id_tp_acc = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND ac.id_ref = pr.id_emp "
                                + "LEFT OUTER JOIN erp.hrsu_emp AS e ON e.id_emp = pr.id_emp "
                                + "LEFT OUTER JOIN erp.bpsu_bp AS b ON b.id_bp = pr.id_emp "
                                + "WHERE NOT p.b_del AND NOT pr.b_del AND NOT prc.b_del AND (ac.b_del IS NULL OR NOT ac.b_del) AND "
                                + "p.id_pay = " + moPayroll.getPkPayrollId() + " AND pr.id_emp IN (" + sqlEmployeeIds + ") "
                                + "ORDER BY _tp_acc, _concept, _concept_code, _id_concept, _ref, _ref_code, _id_ref;";
                    }

                    oResultSetCfg = oStatementCfg.executeQuery(sql);
                    
                    while (oResultSetCfg.next()) {
                        int accountingType = oResultSetCfg.getInt("_tp_acc");
                        int conceptId = oResultSetCfg.getInt("_id_concept");
                        String conceptCode = oResultSetCfg.getString("_concept_code");
                        String concept = oResultSetCfg.getString("_concept");
                        String conceptAbbr = oResultSetCfg.getString("_concept_abbr");
                        int referenceId = oResultSetCfg.getInt("_id_ref");
                        String referenceCode = oResultSetCfg.getString("_ref_code");
                        String reference = oResultSetCfg.getString("_ref");
                        int accountId = oResultSetCfg.getInt("fk_acc");
                        int costCenterId = oResultSetCfg.getInt("fk_cc_n");
                        int itemId = oResultSetCfg.getInt("fk_item_n");
                        int bizPartnerId = oResultSetCfg.getInt("fk_bp_n");
                        int taxBasicId = oResultSetCfg.getInt("fk_tax_bas_n");
                        int taxTaxId = oResultSetCfg.getInt("fk_tax_tax_n");

                        String message = "La configuración de contabilización de la " + conceptType + " código '" + conceptCode + "', '" + concept + "' ('" + conceptAbbr + "'), ";
                        
                        switch (accountingType) {
                            case SModSysConsts.HRSS_TP_ACC_GBL: // global link
                                message += "del ámbito global, tiene un problema:\n";
                                break;
                            case SModSysConsts.HRSS_TP_ACC_DEP: // link by department
                                message += "del departamento código '" + referenceCode + "', '" + reference + "', tiene un problema:\n";
                                break;
                            case SModSysConsts.HRSS_TP_ACC_EMP: // link by employee
                                message += "del empleado clave '" + referenceCode + "', '" + reference + "', tiene un problema:\n";
                                break;
                            default:
                                // nothing
                        }

                        // Validate account:

                        if (accountId == 0) {
                            messages.appendMessage(message + "La 'cuenta contable' no ha sido especificada aún.");
                        }
                        else {
                            try {
                                // validates account and, if necessary, cost center:
                                SHrsFinUtils.validateAccount(miClient.getSession(), accountId, costCenterId, bizPartnerId, itemId, taxBasicId, taxTaxId);
                            }
                            catch (Exception e) {
                                messages.appendMessage(message + e.getMessage());
                            }
                        }

                        // Validate item:

                        SDataItem item = null;
                        
                        if (itemId > 0) {
                            item = (SDataItem) SDataUtilities.readRegistry(miClient, SDataConstants.ITMU_ITEM,  new int[] { itemId }, SLibConstants.EXEC_MODE_VERBOSE);
                            
                            if (item == null) {
                                messages.appendMessage(message + "El registro del 'ítem' (ID: " + itemId + ") no existe.");
                            }
                            else if (item.getIsDeleted()) {
                                messages.appendMessage(message + "El registro del 'ítem' (ID: " + itemId + ") está eliminado.");
                            }
                        }

                        // Validate business partner:

                        SDataBizPartner bizPartner = null;
                        
                        if (bizPartnerId == 0) {
                            if (accountingType == SModSysConsts.HRSS_TP_ACC_EMP) {
                                messages.appendMessage(message + "El 'asociado de negocios' no ha sido especificado aún.");
                            }
                        }
                        else {
                            bizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { bizPartnerId }, SLibConstants.EXEC_MODE_VERBOSE);
                            
                            if (bizPartner == null) {
                                messages.appendMessage(message + "El registro del 'asociado de negocios' (ID: " + bizPartnerId + ") no existe.");
                            }
                            else if (bizPartner.getIsDeleted()) {
                                messages.appendMessage(message + "El registro del 'asociado de negocios' (ID: " + bizPartnerId + ") está eliminado.");
                            }
                        }

                        // Validate tax:

                        SDataTax tax = null;
                        
                        if (taxBasicId != 0 && taxTaxId != 0) {
                            tax = (SDataTax) SDataUtilities.readRegistry(miClient, SDataConstants.FINU_TAX, new int[] { taxBasicId, taxTaxId }, SLibConstants.EXEC_MODE_VERBOSE);
                            
                            if (tax == null) {
                                messages.appendMessage(message + "El registro del 'impuesto' (ID: " + taxBasicId + "-" + taxTaxId + ") no existe.");
                            }
                            else if (tax.getIsDeleted()) {
                                messages.appendMessage(message + "El registro del 'impuesto' (ID: " + taxBasicId + "-" + taxTaxId + ") está eliminado.");
                            }
                        }

                        if (nType == 1) {
                            /* Perception:
                             * Accountable link level:
                             * 1. Global
                             * 2. By departatment
                             * 3. By employee
                             */

                            conceptType = "percepción";
                            
                            sql = "SELECT e.fk_tp_acc_rec AS f_tp_acc_rec, e.id_ear, e.name_abbr, 0 AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, SUM(pre.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ear AS e ON e.id_ear = pre.fk_ear " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND e.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND e.id_ear = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ") " +
                                    "GROUP BY e.id_ear, e.name_abbr " +
                                    "UNION " +
                                    "SELECT e.fk_tp_acc_rec AS f_tp_acc_rec, e.id_ear, e.name_abbr, dep.id_dep AS f_id_ref, dep.name AS f_ref, dep.code AS f_ref_cve, SUM(pre.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ear AS e ON e.id_ear = pre.fk_ear " +
                                    "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = pr.fk_dep " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND e.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND e.id_ear = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ")" +
                                    (accountingType == SModSysConsts.HRSS_TP_ACC_DEP ? (" AND dep.id_dep = " + referenceId + " ") : "") + 
                                    "GROUP BY e.id_ear, e.name_abbr, dep.id_dep, dep.name, dep.code " +
                                    "UNION " +
                                    "SELECT e.fk_tp_acc_rec AS f_tp_acc_rec, e.id_ear, e.name_abbr, bp.id_bp AS f_id_ref, bp.bp AS f_ref, '' AS f_ref_cve, SUM(pre.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ear AS pre ON pre.id_pay = pr.id_pay AND pre.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ear AS e ON e.id_ear = pre.fk_ear " +
                                    "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = pr.id_emp " +
                                    "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                    "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = pr.fk_dep " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND pre.b_del = 0 AND e.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND e.id_ear = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ") " + 
                                    ((accountingType == SModSysConsts.HRSS_TP_ACC_EMP) ? ("AND emp.id_emp = " + referenceId + " ") : (accountingType == SModSysConsts.HRSS_TP_ACC_DEP) ? ("AND dep.id_dep = " + referenceId + " ") : "") +
                                    "GROUP BY e.id_ear, e.name_abbr, bp.id_bp, bp.bp " +
                                    "ORDER BY f_tp_acc_rec, id_ear, f_ref;";
                        }
                        else {
                            /* Deduction:
                             * Accountable link level:
                             * 1. Global
                             * 2. By departatment
                             * 3. By employee
                             */
                            
                            conceptType = "deducción";

                            sql = "SELECT d.fk_tp_acc_rec AS f_tp_acc_rec, d.id_ded, d.name_abbr, 0 AS f_id_ref, '' AS f_ref, '' AS f_ref_cve, SUM(prd.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ded AS d ON d.id_ded = prd.fk_ded " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND prd.b_del = 0 AND d.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_GBL + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND d.id_ded = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ") " +
                                    "GROUP BY d.id_ded, d.name_abbr " +
                                    "UNION " +
                                    "SELECT d.fk_tp_acc_rec AS f_tp_acc_rec, d.id_ded, d.name_abbr, dep.id_dep AS f_id_ref, dep.name AS f_ref, dep.code AS f_ref_cve, SUM(prd.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ded AS d ON d.id_ded = prd.fk_ded " +
                                    "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = pr.fk_dep " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND prd.b_del = 0 AND d.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_DEP + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND d.id_ded = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ")" +
                                    (accountingType == SModSysConsts.HRSS_TP_ACC_DEP ? (" AND dep.id_dep = " + referenceId + " ") : "") +
                                    "GROUP BY d.id_ded, d.name_abbr, dep.id_dep, dep.name, dep.code " +
                                    "UNION " +
                                    "SELECT d.fk_tp_acc_rec AS f_tp_acc_rec, d.id_ded, d.name_abbr, bp.id_bp AS f_id_ref, bp.bp AS f_ref, emp.num AS f_ref_cve, SUM(prd.amt_r) AS f_amt " +
                                    "FROM hrs_pay AS p " +
                                    "INNER JOIN hrs_pay_rcp AS pr ON pr.id_pay = p.id_pay " +
                                    "INNER JOIN hrs_pay_rcp_ded AS prd ON prd.id_pay = pr.id_pay AND prd.id_emp = pr.id_emp " +
                                    "INNER JOIN hrs_ded AS d ON d.id_ded = prd.fk_ded " +
                                    "INNER JOIN erp.hrsu_emp AS emp ON emp.id_emp = pr.id_emp " +
                                    "INNER JOIN erp.bpsu_bp AS bp ON bp.id_bp = emp.id_emp " +
                                    "INNER JOIN erp.hrsu_dep AS dep ON dep.id_dep = pr.fk_dep " +
                                    "WHERE p.b_del = 0 AND pr.b_del = 0 AND prd.b_del = 0 AND d.fk_tp_acc_rec = " + SModSysConsts.HRSS_TP_ACC_EMP + " AND p.id_pay = " + moPayroll.getPkPayrollId() + " " +
                                    "AND d.id_ded = " + conceptId + " AND pr.id_emp IN (" + sqlEmployeeIds + ") " +
                                    ((accountingType == SModSysConsts.HRSS_TP_ACC_EMP) ? ("AND emp.id_emp = " + referenceId + " ") : (accountingType == SModSysConsts.HRSS_TP_ACC_DEP) ? ("AND dep.id_dep = " + referenceId + " ") : "") +
                                    "GROUP BY d.id_ded, d.name_abbr, bp.id_bp, bp.bp " +
                                    "ORDER BY f_tp_acc_rec, id_ded, f_ref;";
                        }

                        oResultSetRec = oStatementRec.executeQuery(sql);
                        while (oResultSetRec.next()) {
                            int accountingRecordType = oResultSetRec.getInt("f_tp_acc_rec");
                            referenceId = oResultSetRec.getInt("f_id_ref");
                            reference = oResultSetRec.getString("f_ref");
                            referenceCode = oResultSetRec.getString("f_ref_cve");
                            double amount = oResultSetRec.getDouble("f_amt");
                            double debit = 0;
                            double credit = 0;

                            // Set up record entry:
                            
                            String entryConcept = "";

                            switch (accountingRecordType) {
                                case SModSysConsts.HRSS_TP_ACC_GBL: // global link
                                    entryConcept = moPayroll.composePayrollNumber() + "; " + conceptAbbr;
                                    break;
                                case SModSysConsts.HRSS_TP_ACC_DEP: // link by department
                                case SModSysConsts.HRSS_TP_ACC_EMP: // link by employee
                                    entryConcept = moPayroll.composePayrollNumber() + "; " + conceptAbbr + "; " + referenceCode + ". " + reference;
                                    break;
                                default:
                                    // nothing
                            }

                            if (nType == 1) {
                                if (amount >= 0d) {
                                    debit = amount;
                                    credit = 0;
                                }
                                else {
                                    debit = 0;
                                    credit = -amount;
                                }
                            }
                            else {
                                if (amount >= 0d) {
                                    debit = 0;
                                    credit = amount;
                                }
                                else {
                                    debit = -amount;
                                    credit = 0;
                                }
                            }

                            totalDebit = SLibUtils.roundAmount(totalDebit + debit);
                            totalCredit = SLibUtils.roundAmount(totalCredit + credit);
                            
                            // Set up account:

                            String accountPk = "";
                            
                            if (accountId != 0) {
                                accountPk = accountPksMap.get(accountId);
                                
                                if (accountPk == null) {
                                    accountPk = SFinUtils.getAccountFormerIdXXX(miClient.getSession(), accountId);
                                    accountPksMap.put(accountId, accountPk);
                                }
                                
                                SDataAccount account = accountsMap.get(accountPk);
                                if (account == null) {
                                    account = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { accountPk }, SLibConstants.EXEC_MODE_VERBOSE);
                                    accountsMap.put(account.getPkAccountIdXXX(), account);
                                }

                                SDataAccount ledgerAccount = account.getDeep() == 1 ? account : ledgerAccountsMap.get(account.getDbmsPkAccountMajorId());
                                if (ledgerAccount == null) {
                                    ledgerAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { account.getDbmsPkAccountMajorId() }, SLibConstants.EXEC_MODE_VERBOSE);
                                    ledgerAccountsMap.put(ledgerAccount.getPkAccountIdXXX(), ledgerAccount);
                                }

                                switch (ledgerAccount.getFkAccountSystemTypeId()) {
                                    case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                                        anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;
                                        anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_INC_ADJ;
                                        anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                                        break;
                                    case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                                        anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;
                                        anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_DEC_ADJ;
                                        anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                                        break;
                                    case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                                        anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CDR_BAL;
                                        anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_INC_ADJ;
                                        anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                                        break;
                                    case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                                        anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_DBR_BAL;
                                        anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_DEC_ADJ;
                                        anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                                        break;
                                    default:
                                        anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_NA_NA;
                                        anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_JOU_DBT : SModSysConsts.FINS_TP_SYS_MOV_JOU_CDT;
                                        anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                                }
                            }
                            else {
                                anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_NA_NA;
                                anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_JOU_DBT : SModSysConsts.FINS_TP_SYS_MOV_JOU_CDT;
                                anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                            }

                            // Set up cost center:
                            
                            String costCenterPk = "";
                                    
                            if (costCenterId != 0) {
                                costCenterPk = costCenterPksMap.get(costCenterId);
                                
                                if (costCenterPk == null) {
                                    costCenterPk = SFinUtils.getCostCenterFormerIdXXX(miClient.getSession(), costCenterId);
                                    costCenterPksMap.put(costCenterId, costCenterPk);
                                }
                            }
                            
                            // Create record entry:
        
                            oRecord.getDbmsRecordEntries().add(createRecordEntry(oRecord.getPrimaryKey(), SLibUtilities.textLeft(entryConcept, 100),
                                    debit, credit, accountPk, costCenterPk, itemId,
                                    bizPartner == null ? 0 : bizPartner.getPkBizPartnerId(),
                                    bizPartner == null ? 0 : bizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId(),
                                    new int[] { taxBasicId, taxTaxId }, anSysAccountTypeKey, anSysMoveTypeKey, anSysMoveTypeKeyXXX));

                            // Create payroll move:

                            oPayrollMove = new SDataFormerPayrollMove();
                            oPayrollMove.setPkPayrollId(moPayroll.getPkPayrollId());
                            oPayrollMove.setPkMoveId(++nMoveId);
                            oPayrollMove.setType(nType);
                            oPayrollMove.setTransactionId(conceptId);
                            oPayrollMove.setTransaction(conceptAbbr);
                            oPayrollMove.setReferenceId(referenceId);
                            oPayrollMove.setReference(reference);
                            oPayrollMove.setReferenceKey(referenceCode);
                            oPayrollMove.setAmount(amount);
                            oPayrollMove.setFkYearId(oRecord.getPkYearId());
                            oPayrollMove.setFkPeriodId(oRecord.getPkPeriodId());
                            oPayrollMove.setFkBookkeepingCenterId(oRecord.getPkBookkeepingCenterId());
                            oPayrollMove.setFkRecordTypeId(oRecord.getPkRecordTypeId());
                            oPayrollMove.setFkNumberId(oRecord.getPkNumberId());
                            oPayrollMove.setFkEntryId(++nEntryId);

                            moFormerPayroll.getDbmsDataFormerPayrollMoves().add(oPayrollMove);
                        } // end record
                    } // end configuration
                } // end processing of perceptions and deductions

                moFormerPayroll.getAuxDataRecords().add(oRecord);
            }
        }
        
        if (messages.getMessagesCount() > 0) {
            if (messages.getMessagesCount() == 1) {
                throw new Exception(messages.getMessages()); // throw exception with a simple message
            }
            else {
                messages.setVisible(true);
                throw new Exception("Favor de corregir los inconvenientes y omisiones de configuración de contabilización de nóminas listados.");
            }
        }
        
        // Validate payroll accounting:
        
        if (jckAccountingGradual.isSelected()) {
            if (SLibUtils.roundAmount(totalDebit - totalCredit) != SLibUtils.roundAmount(mdTotalNetSelected)) {
                throw new Exception("¡Hay una diferencia entre el total neto a contabilizar, $" + SLibUtils.getDecimalFormatAmount().format(mdTotalNetSelected) +", y "
                        + "el monto neto de la afectación contable, $" + SLibUtils.getDecimalFormatAmount().format(totalDebit - totalCredit) +"!");
            }
        }
        else {
            if (SLibUtils.roundAmount(totalDebit - totalCredit) != SLibUtils.roundAmount(moPayroll.getAuxTotalNet())) {
                throw new Exception("¡Hay una diferencia entre el total neto de la nómina, $" + SLibUtils.getDecimalFormatAmount().format(moPayroll.getAuxTotalNet()) +", y "
                        + "el monto neto de la afectación contable, $" + SLibUtils.getDecimalFormatAmount().format(totalDebit - totalCredit) +"!");
            }
        }
        
        // Save accounting records where each payroll receipt was registered:
        
        moAccountingPayroll.save(miClient.getSession());
        
        // Save payroll accounting:
        
        moFormerPayroll.setDebit_r(totalDebit);
        moFormerPayroll.setCredit_r(totalCredit);
        moFormerPayroll.setIsAuxAccountingGradual(jckAccountingGradual.isSelected());

        oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
        oRequest.setPacket(moFormerPayroll);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            nResult = oResponse.getResultType();
            if (nResult != SLibConstants.DB_ACTION_SAVE_OK) {
                throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
            }
        }
        
        // Notify GUI:

        miClient.getGuiModule(SDataConstants.MOD_FIN).refreshCatalogues(SDataConstants.FIN_REC);
        miClient.getGuiModule(SDataConstants.MOD_HRS).refreshCatalogues(SDataConstants.HRS_SIE_PAY);
        ((SClient) miClient).getSession().notifySuscriptors(SModConsts.HRS_SIE_PAY);
        
        miClient.showMsgBoxInformation("Los recibos de nómina seleccionados han sido contabilizados.");
    }

    private void renderCurrentRecord() {
        if (moCurrentRecord == null) {
            jtfRecordDate.setText("");
            jtfRecordBranch.setText("");
            jtfRecordNumber.setText("");
        }
        else {
            jtfRecordDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moCurrentRecord.getDate()));
            jtfRecordBkc.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_BKC, new int[] { moCurrentRecord.getPkBookkeepingCenterId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordBranch.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moCurrentRecord.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordNumber.setText(moCurrentRecord.getPkRecordTypeId() + "-" + moCurrentRecord.getPkNumberId());
        }
    }

    public void actionPickRecord() {
        Object key = null;
        String message = "";

        moDialogRecordPicker.formReset();
        moDialogRecordPicker.setFilterKey(miClient.getSessionXXX().getWorkingDate());
        moDialogRecordPicker.formRefreshOptionPane();

        if (moCurrentRecord != null) {
            moDialogRecordPicker.setSelectedPrimaryKey(moCurrentRecord.getPrimaryKey());
        }

        moDialogRecordPicker.setFormVisible(true);

        if (moDialogRecordPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            key = moDialogRecordPicker.getSelectedPrimaryKey();

            // XXX set registry lock to accounting record

            moCurrentRecord = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, key, SLibConstants.EXEC_MODE_VERBOSE);
            
            if (moCurrentRecord == null) {
                message = "No se encontró la póliza contable seleccionada.";
            }
            else if (moCurrentRecord.getIsSystem()) {
                message = "No puede seleccionarse esta póliza contable porque es de sistema.";
            }
            else if (moCurrentRecord.getIsAudited()) {
                message = "No puede seleccionarse esta póliza contable porque está auditada.";
            }
            else if (moCurrentRecord.getIsAuthorized()) {
                message = "No puede seleccionarse esta póliza contable porque está autorizada.";
            }
            else if (!SDataUtilities.isPeriodOpen(miClient, moCurrentRecord.getDate())) {
                message = "No puede seleccionarse esta póliza contable porque su período contable correspondiente está cerrado.";
            }

            if (message.length() > 0) {
                miClient.showMsgBoxWarning(message);
                moCurrentRecord = null;
            }
            else {
                renderCurrentRecord();
            }
        }
    }
    
    private SDbAccountingPayrollReceipt createAccountingPayrollReceipt(int employeeId) {
        SDbAccountingPayrollReceipt accountingPayrollReceipt = new SDbAccountingPayrollReceipt();
        
        accountingPayrollReceipt.setPkPayrollId(moPayroll.getPkPayrollId());
        //accountingPayrollEmployee.setPkAccountingId(int n);
        accountingPayrollReceipt.setPkEmployeeId(employeeId);
        accountingPayrollReceipt.setFkRecordYearId(moCurrentRecord.getPkYearId());
        accountingPayrollReceipt.setFkRecordPeriodId(moCurrentRecord.getPkPeriodId());
        accountingPayrollReceipt.setFkRecordBookkeepingCenterId(moCurrentRecord.getPkBookkeepingCenterId());
        accountingPayrollReceipt.setFkRecordRecordTypeId(moCurrentRecord.getPkRecordTypeId());
        accountingPayrollReceipt.setFkRecordNumberId(moCurrentRecord.getPkNumberId());
        
        return accountingPayrollReceipt;
    }

    public boolean actionAdd() {
        boolean error = true;
        int index = moTablePaneEmpAvailable.getTable().getSelectedRow();

        if (index == -1) {
            miClient.showMsgBoxWarning("Seleccionar uno de los " + SGuiUtils.getLabelName(((TitledBorder) jpEmployeesAvailable.getBorder()).getTitle()) + ".");
            moTablePaneEmpAvailable.getTable().requestFocusInWindow();
        }
        else if (moCurrentRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlRecord.getText() + "'.");
            jbPickRecord.requestFocus();
        }
        else {
            SRowEmployee row = (SRowEmployee) moTablePaneEmpAvailable.getSelectedTableRow();
            row.setData(moCurrentRecord.getPrimaryKey());
            row.getValues().add(SLibUtils.DecimalFormatCalendarYear.format(moCurrentRecord.getPkYearId()) + "-" + SLibUtils.DecimalFormatCalendarMonth.format(moCurrentRecord.getPkPeriodId()));
            row.getValues().add(jtfRecordBkc.getText());
            row.getValues().add(jtfRecordBranch.getText());
            row.getValues().add(jtfRecordNumber.getText());
            row.getValues().add(moCurrentRecord.getDate());

            row.setAccountingPayrollReceipt(createAccountingPayrollReceipt(row.getFkBizPartnerId()));

            moTablePaneEmpAvailable.removeTableRow(index);
            moTablePaneEmpAvailable.renderTableRows();
            moTablePaneEmpAvailable.setTableRowSelection(index < moTablePaneEmpAvailable.getTableGuiRowCount() ? index : moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

            moTablePaneEmpSelected.addTableRow(row);
            moTablePaneEmpSelected.renderTableRows();
            moTablePaneEmpSelected.setTableRowSelection(moTablePaneEmpSelected.getTableGuiRowCount() - 1);

            error = false;
        }
        
        computeTotals();

        return !error;
    }

    public void actionAddAll() {
        int rows = moTablePaneEmpAvailable.getTableModel().getRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay " + SGuiUtils.getLabelName(((TitledBorder) jpEmployeesAvailable.getBorder()).getTitle()) + ".");
        }
        else if (moCurrentRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlRecord.getText() + "'.");
            jbPickRecord.requestFocus();
        }
        else {
            String bank = "";
            boolean bankSelected = jcbBankFilter.getSelectedIndex() > 0;

            if (bankSelected) {
                bank = jcbBankFilter.getSelectedItem().toString();

                if (bank.equals(SHrsConsts.EMPTY_BANK)) {
                    bank = "";
                }
            }

            int from = 0;
            int employeesAdded = 0;

            for (int row = 0; row < rows; row++) {
                moTablePaneEmpAvailable.setTableRowSelection(from);

                if (bankSelected) {
                    if (!((SRowEmployee) moTablePaneEmpAvailable.getSelectedTableRow()).getBank().equals(bank)) {
                        from++;
                        continue;
                    }
                }

                if (actionAdd()) {
                    employeesAdded++;
                }
                else {
                    break;
                }
            }
            
            if (bankSelected && employeesAdded == 0) {
                miClient.showMsgBoxInformation("Ninguno de los recibos pendientes coincide con el banco: '" + (!bank.isEmpty() ? bank : SHrsConsts.EMPTY_BANK) + "'.");
            }
        }
    }

    public boolean actionRemove() {
        boolean error = true;
        int index = moTablePaneEmpSelected.getTable().getSelectedRow();
        
        if (index == -1) {
            miClient.showMsgBoxWarning("Seleccionar uno de los " + SGuiUtils.getLabelName(((TitledBorder) jpEmployeesSelected.getBorder()).getTitle()) + ".");
            moTablePaneEmpSelected.getTable().requestFocusInWindow();
        }
        else {
            SRowEmployee row = (SRowEmployee) moTablePaneEmpSelected.getSelectedTableRow();
            for (int i = 1; i <= JOURNAL_VOUCHER_COLS; i++) {
                row.getValues().remove(JOURNAL_VOUCHER_COLS_INDEX);
            }

            moTablePaneEmpSelected.removeTableRow(index);
            moTablePaneEmpSelected.renderTableRows();
            moTablePaneEmpSelected.setTableRowSelection(index < moTablePaneEmpSelected.getTableGuiRowCount() ? index : moTablePaneEmpSelected.getTableGuiRowCount() - 1);

            moTablePaneEmpAvailable.addTableRow(row);
            moTablePaneEmpAvailable.renderTableRows();
            moTablePaneEmpAvailable.setTableRowSelection(moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

            error = false;
        }
        
        computeTotals();

        return !error;
    }

    public void actionRemoveAll() {
        int rows = moTablePaneEmpSelected.getTableModel().getRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay " + SGuiUtils.getLabelName(((TitledBorder) jpEmployeesSelected.getBorder()).getTitle()) + ".");
        }
        else {
            while (moTablePaneEmpSelected.getTableGuiRowCount() > 0) {
                moTablePaneEmpSelected.setTableRowSelection(0);
                if (!actionRemove()) {
                    break;
                }
            }
        }
    }

    public void actionOk() {
        String msg = "";
        boolean compute = true;
        int empAvailable = moTablePaneEmpAvailable.getTableGuiRowCount();

        if (moTablePaneEmpSelected.getTableGuiRowCount() == 0) {
            miClient.showMsgBoxWarning("No hay recibos seleccionados para contabilizar.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else if (empAvailable > 0 && (!jckAccountingGradual.isSelected() || miClient.showMsgBoxConfirm("Se optó por contabilizar gradualmente esta nómina.\n"
                + "¿Está seguro que se desea dejar para otra ocasión la contabilización "
                + (empAvailable == 1 ? "del recibo pendiente" : "de los " + empAvailable + " recibos pendientes") + " de seleccionar?") != JOptionPane.YES_OPTION)) {
            miClient.showMsgBoxWarning("Seleccionar " + (empAvailable == 1 ? "el recibo que queda pendiente" : "los " + empAvailable + " recibos que quedan pendientes") + " de contabilizar.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else {
            try {
                if (moCurrentRecord.getPkYearId() != moPayroll.getPeriodYear()) {
                    msg = "El año de la nómina es diferente al año de la póliza contable.\n";
                    if (miClient.showMsgBoxConfirm(msg + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                        compute = false;
                        miClient.showMsgBoxWarning(msg);
                        moTablePaneEmpAvailable.requestFocus();
                    }
                }
                else if (moCurrentRecord.getPkPeriodId() != moPayroll.getPeriod()) {
                    msg = "El periodo de la nómina es diferente al periodo de la póliza contable.\n";
                    if (miClient.showMsgBoxConfirm(msg + SGuiConsts.MSG_CNF_CONT) != JOptionPane.YES_OPTION) {
                        compute = false;
                        miClient.showMsgBoxWarning(msg);
                        moTablePaneEmpAvailable.requestFocus();
                    }
                }
                
                if (compute) {
                    setCursor(new Cursor(Cursor.WAIT_CURSOR));

                    savePayrollAccounting();

                    mnFormResult = SLibConstants.FORM_RESULT_OK;
                    setVisible(false);
                }
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAddAll;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPickRecord;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JComboBox jcbBankFilter;
    private javax.swing.JCheckBox jckAccountingGradual;
    private javax.swing.JLabel jlBankFilter;
    private javax.swing.JLabel jlBankFilterHint;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlPayroll;
    private javax.swing.JLabel jlPayrollDates;
    private javax.swing.JLabel jlPayrollNet;
    private javax.swing.JLabel jlPayrollNotes;
    private javax.swing.JLabel jlRecord;
    private javax.swing.JLabel jlTotalAvailables;
    private javax.swing.JLabel jlTotalSelected;
    private javax.swing.JPanel jpAccountingRecord;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JPanel jpEmployeesSelected;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpJournalVoucher;
    private javax.swing.JPanel jpPaymentType;
    private javax.swing.JTextField jtfPayrollDates;
    private javax.swing.JTextField jtfPayrollNet;
    private javax.swing.JTextField jtfPayrollNetCur;
    private javax.swing.JTextField jtfPayrollNotes;
    private javax.swing.JTextField jtfPayrollNumber;
    private javax.swing.JTextField jtfPayrollPeriod;
    private javax.swing.JTextField jtfRecordBkc;
    private javax.swing.JTextField jtfRecordBranch;
    private javax.swing.JTextField jtfRecordDate;
    private javax.swing.JTextField jtfRecordNumber;
    // End of variables declaration//GEN-END:variables

    public void resetForm() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfPayrollPeriod.setText("");
        jtfPayrollNumber.setText("");
        jtfPayrollDates.setText("");
        jtfPayrollNet.setText("");
        jtfPayrollNetCur.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfPayrollNotes.setText("");

        jtfRecordDate.setText("");
        jtfRecordBkc.setText("");
        jtfRecordBranch.setText("");
        jtfRecordNumber.setText("");

        moCurrentRecord = null;
        moTablePaneEmpAvailable.createTable();
        moTablePaneEmpSelected.createTable();
    }

    public int getFormResult() {
        return mnFormResult;
    }
    
    public boolean isAccountingGradual() {
        return jckAccountingGradual.isSelected();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickRecord) {
                actionPickRecord();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbAddAll) {
                actionAddAll();
            }
            else if (button == jbRemove) {
                actionRemove();
            }
            else if (button == jbRemoveAll) {
                actionRemoveAll();
            }
        }
    }
    
    private class RecordEmployees {
        
        SDataRecord Record;
        ArrayList<Integer> EmployeeIds;
        
        public RecordEmployees(final SDataRecord record, final ArrayList<Integer> employeeIds) {
            Record = record;
            EmployeeIds = employeeIds;
        }
    }
}
