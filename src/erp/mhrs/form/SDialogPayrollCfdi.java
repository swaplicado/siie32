/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package erp.mhrs.form;

import cfd.ver3.DCfdVer3Consts;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.gui.session.SSessionCustom;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.lib.table.STableRow;
import erp.mhrs.data.SHrsPayrollEmployeeReceipt;
import erp.mod.SModConsts;
import erp.mod.hrs.db.SDbConfig;
import erp.mod.hrs.db.SDbPayroll;
import erp.mod.hrs.db.SDbPayrollReceipt;
import erp.mod.hrs.db.SDbPayrollReceiptIssue;
import erp.mod.hrs.db.SHrsCfdUtils;
import erp.mtrn.data.SDataCfd;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sa.gui.util.SUtilConsts;
import sa.lib.SLibUtils;
import sa.lib.grid.SGridConsts;
import sa.lib.gui.SGuiUtils;

/**
 *
 * @author Sergio Flores, Juan Barajas, Sergio Flores
 */
public class SDialogPayrollCfdi extends JDialog implements ActionListener, ListSelectionListener {

    private int mnFormResult;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;

    private final erp.client.SClientInterface miClient;
    private final ArrayList<SHrsPayrollEmployeeReceipt> maHrsPayrollEmployeeReceipts;
    private erp.lib.form.SFormField moFieldDateIssue;
    private erp.lib.form.SFormField moFieldDatePayment;
    private erp.lib.form.SFormField moFieldCfdiRelatedUuid;
    private erp.lib.table.STablePaneGrid moTablePaneReceiptAvailable;
    private erp.lib.table.STablePaneGrid moTablePaneReceiptSelected;
    private erp.mod.hrs.db.SDbConfig moConfig;
    private java.util.ArrayList<int[]> manPayrollEmployeeReceiptKeys;
    private java.util.HashMap<Integer, String> moFilterDepartmentsMap;
    private erp.mhrs.form.SDialogPayrollCfdiPicker moPayrollCfdiPicker;

    /** Creates new form SDialogPayrollCfdi
     * @param client
     * @param hrsPayrollEmployeeReceipts
     */
    public SDialogPayrollCfdi(erp.client.SClientInterface client, ArrayList<SHrsPayrollEmployeeReceipt> hrsPayrollEmployeeReceipts) {
        super(client.getFrame(), true);
        miClient = client;
        maHrsPayrollEmployeeReceipts = hrsPayrollEmployeeReceipts;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPayroll = new javax.swing.JLabel();
        jtfPayrollPeriod = new javax.swing.JTextField();
        jtfPayrollNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPayrollDates = new javax.swing.JLabel();
        jtfPayrollDates = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlPayrollNotes = new javax.swing.JLabel();
        jtfPayrollNotes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jlTotalAvailables = new javax.swing.JLabel();
        jpEmployeesSelected = new javax.swing.JPanel();
        jlTotalSelected = new javax.swing.JLabel();
        jpControls = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbAddAll = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jlCfdiRelatedUuid = new javax.swing.JLabel();
        jtfCfdiRelatedUuid = new javax.swing.JTextField();
        jbCfdiRelatedPick = new javax.swing.JButton();
        jlCfdiRelatedHint = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jlFilterDepartment = new javax.swing.JLabel();
        jcbFilterDepartment = new javax.swing.JComboBox();
        jlFilterDepartmentHint = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jpAccountingRecord = new javax.swing.JPanel();
        jlDateIssue = new javax.swing.JLabel();
        jftDateIssue = new javax.swing.JFormattedTextField();
        jbDateIssue = new javax.swing.JButton();
        jpPaymentType = new javax.swing.JPanel();
        jlDatePayment = new javax.swing.JLabel();
        jftDatePayment = new javax.swing.JFormattedTextField();
        jbDatePayment = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jlCfdNotRequired = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generación de CFDI de nóminas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la nómina:"));
        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayroll.setText("Nómina:");
        jlPayroll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPayroll);

        jtfPayrollPeriod.setEditable(false);
        jtfPayrollPeriod.setText("2001-01");
        jtfPayrollPeriod.setFocusable(false);
        jtfPayrollPeriod.setPreferredSize(new java.awt.Dimension(70, 23));
        jPanel3.add(jtfPayrollPeriod);

        jtfPayrollNumber.setEditable(false);
        jtfPayrollNumber.setText("QNA. 1");
        jtfPayrollNumber.setFocusable(false);
        jtfPayrollNumber.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfPayrollNumber);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollDates.setText("Período nómina:");
        jlPayrollDates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollDates);

        jtfPayrollDates.setEditable(false);
        jtfPayrollDates.setText("01/01/2001 - 01/01/2001");
        jtfPayrollDates.setFocusable(false);
        jtfPayrollDates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfPayrollDates);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNotes.setText("Comentarios:");
        jlPayrollNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPayrollNotes);

        jtfPayrollNotes.setEditable(false);
        jtfPayrollNotes.setText("PAYROLL NOTES");
        jtfPayrollNotes.setFocusable(false);
        jtfPayrollNotes.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel6.add(jtfPayrollNotes);

        jPanel1.add(jPanel6);

        jpGrid.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles de la generación y timbrado de CFDI de la nómina:"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos disponibles:"));
        jpEmployeesAvailable.setPreferredSize(new java.awt.Dimension(375, 100));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());

        jlTotalAvailables.setText("n");
        jlTotalAvailables.setPreferredSize(new java.awt.Dimension(100, 20));
        jpEmployeesAvailable.add(jlTotalAvailables, java.awt.BorderLayout.SOUTH);

        jPanel4.add(jpEmployeesAvailable, java.awt.BorderLayout.LINE_START);

        jpEmployeesSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Recibos seleccionados:"));
        jpEmployeesSelected.setPreferredSize(new java.awt.Dimension(475, 100));
        jpEmployeesSelected.setLayout(new java.awt.BorderLayout());

        jlTotalSelected.setText("n");
        jlTotalSelected.setPreferredSize(new java.awt.Dimension(100, 20));
        jpEmployeesSelected.add(jlTotalSelected, java.awt.BorderLayout.PAGE_END);

        jPanel4.add(jpEmployeesSelected, java.awt.BorderLayout.LINE_END);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel7.add(jlDummy01);

        jbAdd.setText(">");
        jbAdd.setToolTipText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAdd);

        jbAddAll.setText(">>");
        jbAddAll.setToolTipText("Agregar todos");
        jbAddAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAddAll);

        jbRemove.setText("<");
        jbRemove.setToolTipText("Remover");
        jbRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemove);

        jbRemoveAll.setText("<<");
        jbRemoveAll.setToolTipText("Remover todos");
        jbRemoveAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemoveAll);

        jpControls.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpControls, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.GridLayout(2, 1, 0, 5));

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlCfdiRelatedUuid.setText("CFDI relacionado:");
        jlCfdiRelatedUuid.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel11.add(jlCfdiRelatedUuid);

        jtfCfdiRelatedUuid.setText("402A8A38-B980-412A-9485-29222D7095C4");
        jtfCfdiRelatedUuid.setToolTipText("UUID");
        jtfCfdiRelatedUuid.setPreferredSize(new java.awt.Dimension(273, 23));
        jPanel11.add(jtfCfdiRelatedUuid);

        jbCfdiRelatedPick.setText("...");
        jbCfdiRelatedPick.setToolTipText("Seleccionar CFDI relacionado");
        jbCfdiRelatedPick.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel11.add(jbCfdiRelatedPick);

        jlCfdiRelatedHint.setForeground(java.awt.Color.gray);
        jlCfdiRelatedHint.setText("(Para sustituir CFDI previos)");
        jlCfdiRelatedHint.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel11.add(jlCfdiRelatedHint);

        jPanel10.add(jPanel11);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFilterDepartment.setText("Filtro departamento:");
        jlFilterDepartment.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel12.add(jlFilterDepartment);

        jcbFilterDepartment.setPreferredSize(new java.awt.Dimension(300, 23));
        jPanel12.add(jcbFilterDepartment);

        jlFilterDepartmentHint.setForeground(java.awt.Color.gray);
        jlFilterDepartmentHint.setText("(Aplica al seleccionar recibos disponibles en grupo)");
        jlFilterDepartmentHint.setPreferredSize(new java.awt.Dimension(250, 23));
        jPanel12.add(jlFilterDepartmentHint);

        jPanel10.add(jPanel12);

        jPanel9.add(jPanel10, java.awt.BorderLayout.EAST);

        jPanel8.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpAccountingRecord.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDateIssue.setText("Fecha emisión:*");
        jlDateIssue.setPreferredSize(new java.awt.Dimension(100, 23));
        jpAccountingRecord.add(jlDateIssue);

        jftDateIssue.setText("dd/mm/yyyy");
        jftDateIssue.setPreferredSize(new java.awt.Dimension(75, 23));
        jpAccountingRecord.add(jftDateIssue);

        jbDateIssue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDateIssue.setToolTipText("Seleccionar fecha");
        jbDateIssue.setFocusable(false);
        jbDateIssue.setPreferredSize(new java.awt.Dimension(23, 23));
        jpAccountingRecord.add(jbDateIssue);

        jPanel8.add(jpAccountingRecord);

        jpPaymentType.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlDatePayment.setText("Fecha pago:*");
        jlDatePayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jpPaymentType.add(jlDatePayment);

        jftDatePayment.setText("dd/mm/yyyy");
        jftDatePayment.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPaymentType.add(jftDatePayment);

        jbDatePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDatePayment.setToolTipText("Seleccionar fecha");
        jbDatePayment.setFocusable(false);
        jbDatePayment.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPaymentType.add(jbDatePayment);

        jPanel8.add(jpPaymentType);

        jPanel9.add(jPanel8, java.awt.BorderLayout.WEST);

        jPanel4.add(jPanel9, java.awt.BorderLayout.NORTH);

        jpGrid.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel13.setLayout(new java.awt.GridLayout(1, 2));

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jlCfdNotRequired.setText("n");
        jlCfdNotRequired.setPreferredSize(new java.awt.Dimension(400, 23));
        jPanel14.add(jlCfdNotRequired);

        jPanel13.add(jPanel14);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        jPanel13.add(jPanel2);

        getContentPane().add(jPanel13, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(976, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed
    
    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        mvFields = new Vector<>();
        moConfig = (SDbConfig) miClient.getSession().readRegistry(SModConsts.HRS_CFG, new int[] { SUtilConsts.BPR_CO_ID });

        moFieldDateIssue = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jftDateIssue, jlDateIssue);
        moFieldDateIssue.setPickerButton(jbDateIssue);
        moFieldDatePayment = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jftDatePayment, jlDatePayment);
        moFieldDatePayment.setPickerButton(jbDatePayment);
        moFieldCfdiRelatedUuid = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_STRING, false, jtfCfdiRelatedUuid, jlCfdiRelatedUuid);

        mvFields.add(moFieldDateIssue);
        mvFields.add(moFieldDatePayment);
        mvFields.add(moFieldCfdiRelatedUuid);

        moTablePaneReceiptAvailable = new STablePaneGrid(miClient);
        moTablePaneReceiptAvailable.setDoubleClickAction(this, "actionPerformedAdd");
        jpEmployeesAvailable.add(moTablePaneReceiptAvailable, BorderLayout.CENTER);

        moTablePaneReceiptSelected = new STablePaneGrid(miClient);
        moTablePaneReceiptSelected.setDoubleClickAction(this, "actionPerformedRemove");
        jpEmployeesSelected.add(moTablePaneReceiptSelected, BorderLayout.CENTER);

        i = 0;
        aoTableColumns = new STableColumnForm[10];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 75);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número serie", 75);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha emisión", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha pago", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Método pago", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 200);
        
        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneReceiptAvailable.addTableColumn(aoTableColumns[i]);
        }

        i = 0;
        aoTableColumns = new STableColumnForm[11];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Empleado", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Clave", 75);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Número serie", 75);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha emisión", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha pago", STableConstants.WIDTH_DATE);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Método pago", 100);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "CFDI relacionado", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Departamento", 200);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneReceiptSelected.addTableColumn(aoTableColumns[i]);
        }

        jbAdd.addActionListener(this);
        jbAddAll.addActionListener(this);
        jbRemove.addActionListener(this);
        jbRemoveAll.addActionListener(this);
        jbDateIssue.addActionListener(this);
        jbDatePayment.addActionListener(this);
        jbCfdiRelatedPick.addActionListener(this);

        computeFilterDepartments();
        moPayrollCfdiPicker = new SDialogPayrollCfdiPicker(miClient);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                try {
                    if (maHrsPayrollEmployeeReceipts != null) {
                        populatePayroll();
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
            }
        }
    }
    
    @SuppressWarnings("unchecked")
    private void computeFilterDepartments() {
        moFilterDepartmentsMap = new HashMap<>();
        
        // create set of departments:
        
        if (!maHrsPayrollEmployeeReceipts.isEmpty()) {
            for (SHrsPayrollEmployeeReceipt receipt : maHrsPayrollEmployeeReceipts) {
                moFilterDepartmentsMap.putIfAbsent(receipt.getDepartmentId(), receipt.getDepartment());
            }
        }
        
        // populate filter combo box:
        
        jcbFilterDepartment.removeAllItems();
        
        if (moFilterDepartmentsMap.isEmpty()) {
            jcbFilterDepartment.setEnabled(false);
        }
        else {
            jcbFilterDepartment.addItem(new SFormComponentItem(null, "- " + SUtilConsts.TXT_SELECT + " " + SGuiUtils.getLabelName(jlFilterDepartment) + " -"));
            
            for (Integer departmentId : moFilterDepartmentsMap.keySet()) {
                jcbFilterDepartment.addItem(new SFormComponentItem(new int[] { departmentId }, moFilterDepartmentsMap.get(departmentId)));
            }
            
            jcbFilterDepartment.setEnabled(true);
        }
    }

    private void computeTotals() {
        jlTotalAvailables.setText("Recibos disponibles: " + SLibUtils.DecimalFormatInteger.format(moTablePaneReceiptAvailable.getTableGuiRowCount()));
        jlTotalSelected.setText("Recibos seleccionados: " + SLibUtils.DecimalFormatInteger.format(moTablePaneReceiptSelected.getTableGuiRowCount()));
    }
    
    @SuppressWarnings("unchecked")
    private void populatePayroll() {
        int cfdNotRequired = 0;
        
        if (!maHrsPayrollEmployeeReceipts.isEmpty()) {
            SHrsPayrollEmployeeReceipt receiptSample = maHrsPayrollEmployeeReceipts.get(0);
            
            jtfPayrollPeriod.setText(SLibUtils.DecimalFormatCalendarYear.format(receiptSample.getPeriodYear()) + "-" + SLibUtils.DecimalFormatCalendarMonth.format(receiptSample.getPeriod()));
            jtfPayrollNumber.setText(SDbPayroll.getPaymentTypeAbbr(receiptSample.getFkPaymentTypeId()) + " " + receiptSample.getPayrollNumber());
            jtfPayrollDates.setText(SLibUtils.DateFormatDate.format(receiptSample.getDateStart()) + " - " + SLibUtils.DateFormatDate.format(receiptSample.getDateEnd()));
            jtfPayrollNotes.setText(receiptSample.getNotes());
            
            jtfPayrollPeriod.setCaretPosition(0);
            jtfPayrollNumber.setCaretPosition(0);
            jtfPayrollDates.setCaretPosition(0);
            jtfPayrollNotes.setCaretPosition(0);
            
            try {
                for (SHrsPayrollEmployeeReceipt receipt : maHrsPayrollEmployeeReceipts) {
                    receipt.setPaymentTypeSys((String) SDataReadDescriptions.getField(miClient, SDataConstants.TRNU_TP_PAY_SYS, new int[] { receipt.getPaymentTypeSysId() }, SLibConstants.FIELD_TYPE_TEXT));
                    receipt.prepareTableRow();
                    
                    if (receipt.getPaymentTypeSysId() == SDataConstantsSys.TRNU_TP_PAY_SYS_NA) {
                        moTablePaneReceiptAvailable.addTableRow(receipt); // receipt not selected yet (2019-03-12, Sergio Flores: WTF! A bizarre solution!)
                    }
                    else {
                        moTablePaneReceiptSelected.addTableRow(receipt); // receipt previously selected
                    }
                }
                
                moTablePaneReceiptAvailable.renderTableRows();
                moTablePaneReceiptAvailable.setTableRowSelection(0);

                moTablePaneReceiptSelected.renderTableRows();
                moTablePaneReceiptSelected.setTableRowSelection(0);
                
                cfdNotRequired = SHrsCfdUtils.getReceiptCountCfdNotRequired(miClient.getSession(), receiptSample.getPkPayrollId());
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
        }
        
        computeTotals();
        
        jlCfdNotRequired.setText("Recibos que no requieren CFDI: " + SLibUtils.DecimalFormatInteger.format(cfdNotRequired));
    }
    
    @SuppressWarnings("unchecked")
    private void computePayroll() throws java.lang.Exception {
        manPayrollEmployeeReceiptKeys = new ArrayList<>();
        
        for (STableRow row : moTablePaneReceiptSelected.getGridRows()) {
            SHrsPayrollEmployeeReceipt receipt = (SHrsPayrollEmployeeReceipt) row;
            int[] issueKey = receipt.getRowPrimaryKey(); // primary key of issue of payroll receipt
            
            SDbPayrollReceiptIssue payrollReceiptIssue = (SDbPayrollReceiptIssue) miClient.getSession().readRegistry(SModConsts.HRS_PAY_RCP_ISS, issueKey); // only for massive updating of issuing data of receipts about to be issued
            
            if (!payrollReceiptIssue.isCfdEditable()) {
                throw new Exception("El recibo de '" + receipt.getEmployeeName() + "' no es modificable.");
            }
            else {
                if (payrollReceiptIssue.isCfdAnnulled()) {
                    // create a new payroll receipt issue:
                    SDbPayrollReceipt payrollReceipt = (SDbPayrollReceipt) miClient.getSession().readRegistry(SModConsts.HRS_PAY_RCP, issueKey);
                    payrollReceipt.updatePayrollReceiptIssue(miClient.getSession(), receipt.getDateOfIssue());
                    issueKey = payrollReceipt.getChildPayrollReceiptIssue().getPrimaryKey();
                }
            }
            
            payrollReceiptIssue.saveField(miClient.getSession().getStatement(), issueKey, SDbPayrollReceiptIssue.FIELD_NUMBER_SERIES, receipt.getNumberSeries());
            payrollReceiptIssue.saveField(miClient.getSession().getStatement(), issueKey, SDbPayrollReceiptIssue.FIELD_DATE_ISSUE, receipt.getDateOfIssue());
            payrollReceiptIssue.saveField(miClient.getSession().getStatement(), issueKey, SDbPayrollReceiptIssue.FIELD_DATE_PAYMENT, receipt.getDateOfPayment());
            payrollReceiptIssue.saveField(miClient.getSession().getStatement(), issueKey, SDbPayrollReceiptIssue.FIELD_TYPE_PAYMENT_SYS, receipt.getPaymentTypeSysId());
            payrollReceiptIssue.saveField(miClient.getSession().getStatement(), issueKey, SDbPayrollReceiptIssue.FIELD_TYPE_UUID_RELATED, receipt.getUuidToSubstitute());
            manPayrollEmployeeReceiptKeys.add(issueKey);
        }
    }

    private void actionPerformedDateIssue() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDateIssue.getDate(), moFieldDateIssue);
    }

    private void actionPerformedDatePayment() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDatePayment.getDate(), moFieldDatePayment);
    }

    private void actionPerformedCfdiRelatedPick() {
        int index = moTablePaneReceiptAvailable.getTable().getSelectedRow();

        if (index == -1) {
            miClient.showMsgBoxInformation(SGridConsts.MSG_SELECT_ROW);
            moTablePaneReceiptAvailable.getTable().requestFocusInWindow();
        }
        else {
            SHrsPayrollEmployeeReceipt employeeReceipt = (SHrsPayrollEmployeeReceipt) moTablePaneReceiptAvailable.getSelectedTableRow();
            
            moPayrollCfdiPicker.formReset();
            moPayrollCfdiPicker.setFilterKey(new Object[] { employeeReceipt.getPkEmployeeId(), SDataConstantsSys.TRNS_TP_CFD_PAYROLL, SDataConstantsSys.TRNS_ST_DPS_ANNULED });
            moPayrollCfdiPicker.formRefreshOptionPane();
            moPayrollCfdiPicker.setFormVisible(true);

            if (moPayrollCfdiPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
                SDataCfd cfd = (SDataCfd) SDataUtilities.readRegistry(miClient, SDataConstants.TRN_CFD, moPayrollCfdiPicker.getSelectedPrimaryKey(), SLibConstants.EXEC_MODE_VERBOSE);
                jtfCfdiRelatedUuid.setText(cfd.getUuid());
                jtfCfdiRelatedUuid.setCaretPosition(0);
                jtfCfdiRelatedUuid.requestFocusInWindow();
            }
        }
    }
    
    /**
     * Adds a recipt to be emitted.
     * Must be public in order to be invoked by double-clicking grid of available receipts.
     * @return 
     */
    public boolean actionPerformedAdd() {
        boolean error = true;
        int rows = moTablePaneReceiptAvailable.getTableGuiRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay recibos disponibles que agregar.");
        }
        else {
            int index = moTablePaneReceiptAvailable.getTable().getSelectedRow();

            if (index == -1) {
                miClient.showMsgBoxWarning("Se debe elegir un recibo disponible.");
                moTablePaneReceiptAvailable.getTable().requestFocusInWindow();
            }
            else if (moFieldDateIssue.getDate() == null) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDateIssue.getText() + "'.");
                jftDateIssue.requestFocusInWindow();
            }
            else if (moFieldDatePayment.getDate() == null) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDatePayment.getText() + "'.");
                jftDatePayment.requestFocusInWindow();
            }
            else if (!moFieldCfdiRelatedUuid.getString().isEmpty() && moFieldCfdiRelatedUuid.getString().length() != DCfdVer3Consts.LEN_UUID) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlCfdiRelatedUuid.getText() + "':\n"
                        + "debe ser de " + DCfdVer3Consts.LEN_UUID + " caracteres.");
                jtfCfdiRelatedUuid.requestFocusInWindow();
            }
            else {
                int xmlType = ((SSessionCustom) miClient.getSession().getSessionCustom()).getCfdTypeXmlTypes().get(SDataConstantsSys.TRNS_TP_CFD_PAYROLL);
                int paymentType = 0;

                if (xmlType == SDataConstantsSys.TRNS_TP_XML_CFDI_32) {
                    paymentType = SDataConstantsSys.TRNU_TP_PAY_SYS_NA;
                }
                else if (xmlType == SDataConstantsSys.TRNS_TP_XML_CFDI_33) {
                    paymentType = SDataConstantsSys.TRNU_TP_PAY_SYS_OTHER;
                }

                Object field = SDataReadDescriptions.getField(miClient, SDataConstants.TRNU_TP_PAY_SYS, new int[] { paymentType }, SLibConstants.FIELD_TYPE_TEXT);

                SHrsPayrollEmployeeReceipt row = (SHrsPayrollEmployeeReceipt) moTablePaneReceiptAvailable.getSelectedTableRow();
                row.setNumberSeries(moConfig.getNumberSeries());
                row.setDateOfIssue(moFieldDateIssue.getDate());
                row.setDateOfPayment(moFieldDatePayment.getDate());
                row.setPaymentTypeSysId(paymentType);
                row.setPaymentTypeSys((String) field);
                row.setUuidToSubstitute(moFieldCfdiRelatedUuid.getString());
                row.prepareTableRow();

                moTablePaneReceiptAvailable.removeTableRow(index);
                moTablePaneReceiptAvailable.renderTableRows();
                moTablePaneReceiptAvailable.setTableRowSelection(index < moTablePaneReceiptAvailable.getTableGuiRowCount() ? index : moTablePaneReceiptAvailable.getTableGuiRowCount() - 1);

                moTablePaneReceiptSelected.addTableRow(row);
                moTablePaneReceiptSelected.renderTableRows();
                moTablePaneReceiptSelected.setTableRowSelection(moTablePaneReceiptSelected.getTableGuiRowCount() - 1);

                computeTotals();
                error = false;
            }
        }

        return !error;
    }

    /**
     * Adds all recipts to be emitted.
     * @return 
     */
    private void actionPerformedAddAll() {
        int rows = moTablePaneReceiptAvailable.getTableGuiRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay recibos disponibles que agregar.");
        }
        else if (moFieldDateIssue.getDate() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDateIssue.getText() + "'.");
            jftDateIssue.requestFocusInWindow();
        }
        else if (moFieldDatePayment.getDate() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDatePayment.getText() + "'.");
            jftDatePayment.requestFocusInWindow();
        }
        else if (!moFieldCfdiRelatedUuid.getString().isEmpty() && rows > 1) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_NOT_REQ + "'" + jlCfdiRelatedUuid.getText() + "':\n"
                    + "este campo sólo se puede especificar cuando se agrega un recibo a la vez.");
            jtfCfdiRelatedUuid.requestFocusInWindow();
        }
        else if (!moFieldCfdiRelatedUuid.getString().isEmpty() && moFieldCfdiRelatedUuid.getString().length() != DCfdVer3Consts.LEN_UUID) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_VALUE_DIF + "'" + jlCfdiRelatedUuid.getText() + "':\n"
                    + "debe ser de " + DCfdVer3Consts.LEN_UUID + " caracteres.");
            jtfCfdiRelatedUuid.requestFocusInWindow();
        }
        else {
            int from = 0;
            int processed = 0;
            int filterDepartmentId = jcbFilterDepartment.getSelectedIndex() <= 0 ? 0 : ((int[]) ((SFormComponentItem) jcbFilterDepartment.getSelectedItem()).getPrimaryKey())[0];

            for (int row = 0; row < rows; row++) {
                moTablePaneReceiptAvailable.setTableRowSelection(from);

                if (filterDepartmentId != 0 && filterDepartmentId != ((SHrsPayrollEmployeeReceipt) moTablePaneReceiptAvailable.getSelectedTableRow()).getDepartmentId()) {
                    from++; // skip current row and go next
                }
                else {
                    if (actionPerformedAdd()) {
                        processed++;
                    }
                    else {
                        from++; // skip current row and go next
                    }
                }
            }

            if (processed == 0) {
                miClient.showMsgBoxWarning("¡No se agregó ningún recibo disponible!");
            }
        }
    }

    /**
     * Removes a recipt about to be emitted.
     * Must be public in order to be invoked by double-clicking grid of selected receipts.
     * @return 
     */
    public boolean actionPerformedRemove() {
        boolean error = true;
        int rows = moTablePaneReceiptSelected.getTableGuiRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay recibos seleccionados que remover.");
        }
        else {
            int index = moTablePaneReceiptSelected.getTable().getSelectedRow();
            
            if (index == -1) {
                miClient.showMsgBoxWarning("Se debe elegir un recibo seleccionado.");
                moTablePaneReceiptSelected.getTable().requestFocusInWindow();
            }
            else {
                SHrsPayrollEmployeeReceipt row = (SHrsPayrollEmployeeReceipt) moTablePaneReceiptSelected.getSelectedTableRow();
                for (int i = 1; i <= 5; i++) {
                    row.getValues().remove(4);
                }

                moTablePaneReceiptSelected.removeTableRow(index);
                moTablePaneReceiptSelected.renderTableRows();
                moTablePaneReceiptSelected.setTableRowSelection(index < moTablePaneReceiptSelected.getTableGuiRowCount() ? index : moTablePaneReceiptSelected.getTableGuiRowCount() - 1);

                row.prepareTableRow();
                moTablePaneReceiptAvailable.addTableRow(row);
                moTablePaneReceiptAvailable.renderTableRows();
                moTablePaneReceiptAvailable.setTableRowSelection(moTablePaneReceiptAvailable.getTableGuiRowCount() - 1);

                computeTotals();
                error = false;
            }
        }
        
        return !error;
    }

    /**
     * Removes all recipts about to be emitted.
     * @return 
     */
    private void actionPerformedRemoveAll() {
        int rows = moTablePaneReceiptSelected.getTableGuiRowCount();
        
        if (rows == 0) {
            miClient.showMsgBoxWarning("No hay recibos seleccionados que remover.");
        }
        else {
            int from = 0;
            int processed = 0;

            for (int row = 0; row < rows; row++) {
                moTablePaneReceiptSelected.setTableRowSelection(from);

                if (actionPerformedRemove()) {
                    processed++;
                }
                else {
                    from++; // skip current row and go next
                }
            }

            if (processed == 0) {
                miClient.showMsgBoxWarning("¡No se removió ningún recibo seleccionado!");
            }
        }
    }
    
    public void actionOk() {
        Cursor cursor = null;

        if (moTablePaneReceiptSelected.getTableGuiRowCount() == 0) {
            miClient.showMsgBoxWarning("No hay empleados seleccionados.");
            moTablePaneReceiptAvailable.requestFocusInWindow();
        }
        else {
            try {
                cursor = miClient.getFrame().getCursor();
                miClient.getFrame().setCursor(new Cursor(Cursor.WAIT_CURSOR));

                computePayroll();

                mnFormResult = SLibConstants.FORM_RESULT_OK;
                setVisible(false);
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                miClient.getFrame().setCursor(cursor);
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAddAll;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbCfdiRelatedPick;
    private javax.swing.JButton jbDateIssue;
    private javax.swing.JButton jbDatePayment;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JComboBox jcbFilterDepartment;
    private javax.swing.JFormattedTextField jftDateIssue;
    private javax.swing.JFormattedTextField jftDatePayment;
    private javax.swing.JLabel jlCfdNotRequired;
    private javax.swing.JLabel jlCfdiRelatedHint;
    private javax.swing.JLabel jlCfdiRelatedUuid;
    private javax.swing.JLabel jlDateIssue;
    private javax.swing.JLabel jlDatePayment;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlFilterDepartment;
    private javax.swing.JLabel jlFilterDepartmentHint;
    private javax.swing.JLabel jlPayroll;
    private javax.swing.JLabel jlPayrollDates;
    private javax.swing.JLabel jlPayrollNotes;
    private javax.swing.JLabel jlTotalAvailables;
    private javax.swing.JLabel jlTotalSelected;
    private javax.swing.JPanel jpAccountingRecord;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JPanel jpEmployeesSelected;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpPaymentType;
    private javax.swing.JTextField jtfCfdiRelatedUuid;
    private javax.swing.JTextField jtfPayrollDates;
    private javax.swing.JTextField jtfPayrollNotes;
    private javax.swing.JTextField jtfPayrollNumber;
    private javax.swing.JTextField jtfPayrollPeriod;
    // End of variables declaration//GEN-END:variables

    public void resetForm() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfPayrollPeriod.setText("");
        jtfPayrollNumber.setText("");
        jtfPayrollDates.setText("");
        jtfPayrollNotes.setText("");

        moFieldDateIssue.setDate(miClient.getSession().getCurrentDate());
        moFieldDatePayment.setDate(null);
        moFieldCfdiRelatedUuid.setString("");

        moTablePaneReceiptAvailable.createTable(this);
        moTablePaneReceiptAvailable.clearTableRows();
        moTablePaneReceiptSelected.createTable();
        moTablePaneReceiptSelected.clearTableRows();
    }

    public int getFormResult() {
        return mnFormResult;
    }

    public ArrayList<int[]> getPayrollEmployeeReceiptKeys() {
        return manPayrollEmployeeReceiptKeys;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbAdd) {
                actionPerformedAdd();
            }
            else if (button == jbAddAll) {
                actionPerformedAddAll();
            }
            else if (button == jbRemove) {
                actionPerformedRemove();
            }
            else if (button == jbRemoveAll) {
                actionPerformedRemoveAll();
            }
            else if (button == jbDateIssue) {
                actionPerformedDateIssue();
            }
            else if (button == jbDatePayment) {
                actionPerformedDatePayment();
            }
            else if (button == jbCfdiRelatedPick) {
                actionPerformedCfdiRelatedPick();
            }
        }
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() instanceof DefaultListSelectionModel) {
            jtfCfdiRelatedUuid.setText("");
        }
    }
}
