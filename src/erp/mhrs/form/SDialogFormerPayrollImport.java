/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package erp.mhrs.form;

import erp.SClient;
import erp.client.SClientInterface;
import erp.data.SDataConstants;
import erp.data.SDataConstantsSys;
import erp.data.SDataReadDescriptions;
import erp.data.SDataUtilities;
import erp.lib.SLibConstants;
import erp.lib.SLibUtilities;
import erp.lib.data.SDataRegistry;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePaneGrid;
import erp.mbps.data.SDataBizPartner;
import erp.mfin.data.SDataAccount;
import erp.mfin.data.SDataCostCenter;
import erp.mfin.data.SDataRecord;
import erp.mfin.data.SDataRecordEntry;
import erp.mfin.data.SDataTax;
import erp.mfin.form.SDialogRecordPicker;
import erp.mhrs.data.SDataFormerPayroll;
import erp.mhrs.data.SDataFormerPayrollEmp;
import erp.mhrs.data.SDataFormerPayrollMove;
import erp.mhrs.data.SRowEmployee;
import erp.mitm.data.SDataItem;
import erp.mod.SModConsts;
import erp.mod.SModSysConsts;
import erp.mod.hrs.db.SHrsConsts;
import erp.mod.hrs.db.SHrsFormerConsts;
import erp.mod.hrs.db.SHrsFormerPayroll;
import erp.mtrn.data.SCfdUtils;
import erp.server.SServerConstants;
import erp.server.SServerRequest;
import erp.server.SServerResponse;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Vector;
import javax.swing.JButton;
import sa.lib.SLibUtils;
import sa.lib.srv.SSrvConsts;

/**
 *
 * @author Sergio Flores
 */
public class SDialogFormerPayrollImport extends javax.swing.JDialog implements java.awt.event.ActionListener {

    private int mnFormResult;
    private boolean mbFirstTime;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private java.text.SimpleDateFormat moDateFormat;
    private java.sql.Connection moConnectionOdbc;

    private erp.client.SClientInterface miClient;
    private erp.lib.form.SFormField moFieldFkPaymentSystemTypeId;
    private erp.lib.form.SFormField moFieldDate;
    private erp.lib.form.SFormField moFieldDatePayment;
    private erp.lib.table.STablePane moTablePaneEmpAvailable;
    private erp.lib.table.STablePane moTablePaneEmpSelected;
    private int mnPayrollId;
    private java.lang.String msPayType;
    private java.lang.String msPayTypeAbbr;
    private erp.mhrs.form.SDialogFormerPayrollPicker moFormerPayrollPicker;
    private erp.mfin.form.SDialogRecordPicker moDialogRecordPicker;
    private erp.mfin.data.SDataRecord moCurrentRecord;
    private erp.mhrs.data.SDataFormerPayroll moFormerPayroll;
    private SHrsFormerPayroll moHrsFormerPayroll;
    private java.util.Vector<java.lang.Object[]> mvRecords; // idx 0: record registry (SDataRecord); idx 1: selected employees (Vector<Integer>)

    /** Creates new form SDialogFormerPayrollPicker
     * @param client 
     */
    public SDialogFormerPayrollImport(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpGrid = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jlPayroll = new javax.swing.JLabel();
        jtfPayrollPeriod = new javax.swing.JTextField();
        jtfPayrollNumber = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jlPayrollDates = new javax.swing.JLabel();
        jtfPayrollDates = new javax.swing.JTextField();
        jlPayrollNet = new javax.swing.JLabel();
        jtfPayrollNet = new javax.swing.JTextField();
        jtfPayrollNetCur = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jlPayrollNotes = new javax.swing.JLabel();
        jtfPayrollNotes = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jpAccountingRecord = new javax.swing.JPanel();
        jlRecord = new javax.swing.JLabel();
        jtfRecordDate = new javax.swing.JTextField();
        jtfRecordBkc = new javax.swing.JTextField();
        jtfRecordBranch = new javax.swing.JTextField();
        jtfRecordNumber = new javax.swing.JTextField();
        jbPickRecord = new javax.swing.JButton();
        jlDummy3 = new javax.swing.JLabel();
        jlDate = new javax.swing.JLabel();
        jtfDate = new javax.swing.JFormattedTextField();
        jbDate = new javax.swing.JButton();
        jpPaymentType = new javax.swing.JPanel();
        jlFkPaymentSystemTypeId = new javax.swing.JLabel();
        jcbFkPaymentSystemTypeId = new javax.swing.JComboBox();
        jlDummy2 = new javax.swing.JLabel();
        jlDatePayment = new javax.swing.JLabel();
        jtfDatePayment = new javax.swing.JFormattedTextField();
        jbDatePayment = new javax.swing.JButton();
        jpEmployeesAvailable = new javax.swing.JPanel();
        jpEmployeesSelected = new javax.swing.JPanel();
        jpControls = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jlDummy01 = new javax.swing.JLabel();
        jbAdd = new javax.swing.JButton();
        jbAddAll = new javax.swing.JButton();
        jbRemove = new javax.swing.JButton();
        jbRemoveAll = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOk = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Importación de nóminas");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jpGrid.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos de la nómina:"));
        jPanel1.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayroll.setText("Nómina:");
        jlPayroll.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jlPayroll);

        jtfPayrollPeriod.setEditable(false);
        jtfPayrollPeriod.setText("2001-01");
        jtfPayrollPeriod.setFocusable(false);
        jtfPayrollPeriod.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel3.add(jtfPayrollPeriod);

        jtfPayrollNumber.setEditable(false);
        jtfPayrollNumber.setText("QNA. 1");
        jtfPayrollNumber.setFocusable(false);
        jtfPayrollNumber.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel3.add(jtfPayrollNumber);

        jPanel1.add(jPanel3);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollDates.setText("Período nómina:");
        jlPayrollDates.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollDates);

        jtfPayrollDates.setEditable(false);
        jtfPayrollDates.setText("01/01/2001 - 01/01/2001");
        jtfPayrollDates.setFocusable(false);
        jtfPayrollDates.setPreferredSize(new java.awt.Dimension(150, 23));
        jPanel5.add(jtfPayrollDates);

        jlPayrollNet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlPayrollNet.setText("Total neto:");
        jlPayrollNet.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel5.add(jlPayrollNet);

        jtfPayrollNet.setEditable(false);
        jtfPayrollNet.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jtfPayrollNet.setText("9,999,999.99");
        jtfPayrollNet.setFocusable(false);
        jtfPayrollNet.setPreferredSize(new java.awt.Dimension(125, 23));
        jPanel5.add(jtfPayrollNet);

        jtfPayrollNetCur.setEditable(false);
        jtfPayrollNetCur.setText("MXN");
        jtfPayrollNetCur.setFocusable(false);
        jtfPayrollNetCur.setPreferredSize(new java.awt.Dimension(35, 23));
        jPanel5.add(jtfPayrollNetCur);

        jPanel1.add(jPanel5);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlPayrollNotes.setText("Comentarios:");
        jlPayrollNotes.setPreferredSize(new java.awt.Dimension(100, 23));
        jPanel6.add(jlPayrollNotes);

        jtfPayrollNotes.setEditable(false);
        jtfPayrollNotes.setText("PAYROLL NOTES");
        jtfPayrollNotes.setFocusable(false);
        jtfPayrollNotes.setPreferredSize(new java.awt.Dimension(650, 23));
        jPanel6.add(jtfPayrollNotes);

        jPanel1.add(jPanel6);

        jpGrid.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles de la importación de la nómina:"));
        jPanel4.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        jpAccountingRecord.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlRecord.setText("Póliza contable:");
        jlRecord.setPreferredSize(new java.awt.Dimension(100, 23));
        jpAccountingRecord.add(jlRecord);

        jtfRecordDate.setEditable(false);
        jtfRecordDate.setText("01/01/2000");
        jtfRecordDate.setToolTipText("Fecha de la póliza contable");
        jtfRecordDate.setFocusable(false);
        jtfRecordDate.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordDate);

        jtfRecordBkc.setEditable(false);
        jtfRecordBkc.setText("BKC");
        jtfRecordBkc.setToolTipText("Centro contable");
        jtfRecordBkc.setFocusable(false);
        jtfRecordBkc.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBkc);

        jtfRecordBranch.setEditable(false);
        jtfRecordBranch.setText("BRA");
        jtfRecordBranch.setToolTipText("Sucursal de la empresa");
        jtfRecordBranch.setFocusable(false);
        jtfRecordBranch.setPreferredSize(new java.awt.Dimension(35, 23));
        jpAccountingRecord.add(jtfRecordBranch);

        jtfRecordNumber.setEditable(false);
        jtfRecordNumber.setText("TP-000001");
        jtfRecordNumber.setToolTipText("Número de póliza contable");
        jtfRecordNumber.setFocusable(false);
        jtfRecordNumber.setPreferredSize(new java.awt.Dimension(65, 23));
        jpAccountingRecord.add(jtfRecordNumber);

        jbPickRecord.setText("...");
        jbPickRecord.setToolTipText("Seleccionar póliza contable");
        jbPickRecord.setPreferredSize(new java.awt.Dimension(23, 23));
        jpAccountingRecord.add(jbPickRecord);

        jlDummy3.setPreferredSize(new java.awt.Dimension(122, 23));
        jpAccountingRecord.add(jlDummy3);

        jlDate.setText("Fecha emisión:*");
        jlDate.setPreferredSize(new java.awt.Dimension(100, 23));
        jpAccountingRecord.add(jlDate);

        jtfDate.setText("dd/mm/yyyy");
        jtfDate.setPreferredSize(new java.awt.Dimension(75, 23));
        jpAccountingRecord.add(jtfDate);

        jbDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDate.setToolTipText("Seleccionar fecha");
        jbDate.setFocusable(false);
        jbDate.setPreferredSize(new java.awt.Dimension(23, 23));
        jpAccountingRecord.add(jbDate);

        jPanel8.add(jpAccountingRecord);

        jpPaymentType.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));

        jlFkPaymentSystemTypeId.setText("Método de pago:");
        jlFkPaymentSystemTypeId.setPreferredSize(new java.awt.Dimension(100, 23));
        jpPaymentType.add(jlFkPaymentSystemTypeId);

        jcbFkPaymentSystemTypeId.setPreferredSize(new java.awt.Dimension(215, 23));
        jpPaymentType.add(jcbFkPaymentSystemTypeId);

        jlDummy2.setPreferredSize(new java.awt.Dimension(150, 23));
        jpPaymentType.add(jlDummy2);

        jlDatePayment.setText("Fecha pago:*");
        jlDatePayment.setPreferredSize(new java.awt.Dimension(100, 23));
        jpPaymentType.add(jlDatePayment);

        jtfDatePayment.setText("dd/mm/yyyy");
        jtfDatePayment.setPreferredSize(new java.awt.Dimension(75, 23));
        jpPaymentType.add(jtfDatePayment);

        jbDatePayment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/cal_cal.gif"))); // NOI18N
        jbDatePayment.setToolTipText("Seleccionar fecha");
        jbDatePayment.setFocusable(false);
        jbDatePayment.setPreferredSize(new java.awt.Dimension(23, 23));
        jpPaymentType.add(jbDatePayment);

        jPanel8.add(jpPaymentType);

        jPanel4.add(jPanel8, java.awt.BorderLayout.NORTH);

        jpEmployeesAvailable.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados disponibles:"));
        jpEmployeesAvailable.setPreferredSize(new java.awt.Dimension(350, 100));
        jpEmployeesAvailable.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jpEmployeesAvailable, java.awt.BorderLayout.LINE_START);

        jpEmployeesSelected.setBorder(javax.swing.BorderFactory.createTitledBorder("Empleados seleccionados:"));
        jpEmployeesSelected.setPreferredSize(new java.awt.Dimension(475, 100));
        jpEmployeesSelected.setLayout(new java.awt.BorderLayout());
        jPanel4.add(jpEmployeesSelected, java.awt.BorderLayout.LINE_END);

        jpControls.setLayout(new java.awt.BorderLayout());

        jPanel7.setLayout(new java.awt.GridLayout(5, 1, 0, 5));
        jPanel7.add(jlDummy01);

        jbAdd.setText(">");
        jbAdd.setToolTipText("Agregar");
        jbAdd.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAdd);

        jbAddAll.setText(">>");
        jbAddAll.setToolTipText("Agregar todos");
        jbAddAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbAddAll);

        jbRemove.setText("<");
        jbRemove.setToolTipText("Remover");
        jbRemove.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemove);

        jbRemoveAll.setText("<<");
        jbRemoveAll.setToolTipText("Remover todos");
        jbRemoveAll.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel7.add(jbRemoveAll);

        jpControls.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        jPanel4.add(jpControls, java.awt.BorderLayout.CENTER);

        jpGrid.add(jPanel4, java.awt.BorderLayout.CENTER);

        getContentPane().add(jpGrid, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOk.setText("Aceptar");
        jbOk.setToolTipText("[Ctrl + Enter]");
        jbOk.setPreferredSize(new java.awt.Dimension(75, 23));
        jbOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOkActionPerformed(evt);
            }
        });
        jPanel2.add(jbOk);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });
        jPanel2.add(jbCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        setSize(new java.awt.Dimension(976, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void jbOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOkActionPerformed
        actionOk();
    }//GEN-LAST:event_jbOkActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        actionCancel();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void initComponentsExtra() {
        int i = 0;
        STableColumnForm[] aoTableColumns = null;

        mvFields = new Vector<>();

        moFieldFkPaymentSystemTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkPaymentSystemTypeId, jlFkPaymentSystemTypeId);
        moFieldDate = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, true, jtfDate, jlDate);
        moFieldDate.setPickerButton(jbDate);
        moFieldDatePayment = new erp.lib.form.SFormField(miClient, SLibConstants.DATA_TYPE_DATE, false, jtfDatePayment, jlDatePayment);
        moFieldDatePayment.setPickerButton(jbDatePayment);

        mvFields.add(moFieldFkPaymentSystemTypeId);
        mvFields.add(moFieldDate);
        mvFields.add(moFieldDatePayment);

        moTablePaneEmpAvailable = new STablePaneGrid(miClient);
        moTablePaneEmpAvailable.setDoubleClickAction(this, "actionAdd");
        jpEmployeesAvailable.add(moTablePaneEmpAvailable, BorderLayout.CENTER);

        moTablePaneEmpSelected = new STablePaneGrid(miClient);
        moTablePaneEmpSelected.setDoubleClickAction(this, "actionRemove");
        jpEmployeesSelected.add(moTablePaneEmpSelected, BorderLayout.CENTER);

        moDateFormat = new SimpleDateFormat("yyyyMMdd");

        connectOdbc();

        mnPayrollId = 0;
        msPayType = "";
        msPayTypeAbbr = "";
        moFormerPayrollPicker = new SDialogFormerPayrollPicker(miClient, moConnectionOdbc);
        moDialogRecordPicker = new SDialogRecordPicker(miClient, SDataConstants.FINX_REC_USER);
        moFormerPayroll = null;
        moCurrentRecord = null;
        mvRecords = new Vector<>();

        i = 0;
        aoTableColumns = new STableColumnForm[7];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre empleado", 250);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Número empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre departamento", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Código departamento", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpAvailable.addTableColumn(aoTableColumns[i]);
        }

        i = 0;
        aoTableColumns = new STableColumnForm[12];
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre empleado", 250);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Número empleado", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Nombre departamento", 150);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_INTEGER, "Código departamento", STableConstants.WIDTH_NUM_SMALLINT);
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Percepciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Deducciones $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i] = new STableColumnForm(SLibConstants.DATA_TYPE_DOUBLE, "Total neto $", STableConstants.WIDTH_VALUE);
        aoTableColumns[i++].setCellRenderer(miClient.getSessionXXX().getFormatters().getTableCellRendererValue());
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Período póliza", STableConstants.WIDTH_YEAR_PERIOD);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Centro contable", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", STableConstants.WIDTH_CODE_COB);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Folio póliza", STableConstants.WIDTH_RECORD_NUM);
        aoTableColumns[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE, "Fecha póliza", STableConstants.WIDTH_DATE);

        for (i = 0; i < aoTableColumns.length; i++) {
            moTablePaneEmpSelected.addTableColumn(aoTableColumns[i]);
        }

        jbPickRecord.addActionListener(this);
        jbAdd.addActionListener(this);
        jbAddAll.addActionListener(this);
        jbRemove.addActionListener(this);
        jbRemoveAll.addActionListener(this);
        jbDate.addActionListener(this);
        jbDatePayment.addActionListener(this);

        SFormUtilities.createActionMap(rootPane, this, "actionOk", "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);
        SFormUtilities.createActionMap(rootPane, this, "actionCancel", "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void actionDate() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDate.getDate(), moFieldDate);
    }

    private void actionDatePayment() {
        miClient.getGuiDatePickerXXX().pickDate(moFieldDatePayment.getDate(), moFieldDatePayment);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;

            if (miClient.getSessionXXX().getCurrentCompanyBranchId() == 0) {
                miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_SESSION_BRANCH);
                actionCancel();
            }
            else {
                try {
                    connectOdbc();

                    if (moConnectionOdbc == null || moConnectionOdbc.isClosed()) {
                        miClient.showMsgBoxWarning("No se pudo establecer la conexión con el origen de datos ODBC '" + miClient.getSessionXXX().getParamsCompany().getFormerSystemOdbc() + "'.");
                        actionCancel();
                    }
                    else {
                        moFormerPayrollPicker.resetForm();
                        moFormerPayrollPicker.setVisible(true);

                        if (moFormerPayrollPicker.getFormResult() != SLibConstants.FORM_RESULT_OK) {
                            actionCancel();
                        }
                        else {
                            populatePayroll();
                            jbPickRecord.requestFocus();
                        }
                    }
                }
                catch (Exception e) {
                    SLibUtilities.renderException(this, e);
                }
            }
        }
    }

    @SuppressWarnings("deprecation")
    private void connectOdbc() {
        try {
            if (moConnectionOdbc == null || moConnectionOdbc.isClosed()) {
                moConnectionOdbc = erp.mod.hrs.db.SHrsFormerUtils.getConnectionOdbc(miClient);
            }
        }
        catch (Exception e) {
            SLibUtilities.printOutException(this, e);
            miClient.showMsgBoxWarning("Es posible que el origen de datos ODBC '" + miClient.getSessionXXX().getParamsCompany().getFormerSystemOdbc() + "' no esté configurado en esta PC.");
        }
    }

    private void disconnectOdbc() {
        try {
            if (moConnectionOdbc != null && !moConnectionOdbc.isClosed()) {
                moConnectionOdbc.close();
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    @SuppressWarnings("unchecked")
    private void populatePayroll() {
        String sql = "";
        Statement statement = null;
        ResultSet resultSet = null;

        int ejercicio = 0;
        int periodo = 0;
        int nomina_num = 0;
        int fid_periodo_pago_tp = 0;
        int dias_laborables = 0;
        String fecha_ini = "";
        String fecha_fin = "";
        String comentarios = "";
        boolean es_normal = false;
        boolean es_cerrada = false;

        int id_empleado = 0;
        String empleado = "";
        int id_departamento = 0;
        String departamento = "";
        int departamento_cve = 0;
        int mapBp = 0;
        double f_per = 0;
        double f_ded = 0;
        SDataBizPartner bizPartner = null;

        // Display payroll:

        mnPayrollId = moFormerPayrollPicker.getPayrollKey()[0];

        jtfPayrollPeriod.setText(moFormerPayrollPicker.getPayrollPeriod());
        jtfPayrollNumber.setText(moFormerPayrollPicker.getPayrollNumber());
        jtfPayrollDates.setText(moFormerPayrollPicker.getPayrollDates());
        jtfPayrollNotes.setText(moFormerPayrollPicker.getPayrollNotes());
        jtfPayrollNet.setText(miClient.getSessionXXX().getFormatters().getDecimalsValueFormat().format(moFormerPayrollPicker.getPayrollNet()));

        jtfPayrollPeriod.setCaretPosition(0);
        jtfPayrollNumber.setCaretPosition(0);
        jtfPayrollDates.setCaretPosition(0);
        jtfPayrollNotes.setCaretPosition(0);
        jtfPayrollNet.setCaretPosition(0);

        try {
            statement = moConnectionOdbc.createStatement();

            sql = "select ejercicio, periodo, nomina_num, fid_periodo_pago_tp, comentarios, fecha_ini, fecha_fin, es_normal, es_cerrada " +
                    "from nom_nominas where id_nomina = " + mnPayrollId + "; ";

            resultSet = statement.executeQuery(sql);
            if (!resultSet.next()) {
                throw new Exception("No fue posible leer el registro de la nómina.");
            }
            else {
                // Prepare payroll registry:

                ejercicio = resultSet.getInt("ejercicio");
                periodo = resultSet.getInt("periodo");
                nomina_num = resultSet.getInt("nomina_num");
                fid_periodo_pago_tp = resultSet.getInt("fid_periodo_pago_tp");
                comentarios = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("comentarios")), 100);
                fecha_ini = resultSet.getString("fecha_ini");
                fecha_fin = resultSet.getString("fecha_fin");
                es_normal = resultSet.getBoolean("es_normal");
                es_cerrada = resultSet.getBoolean("es_cerrada");

                switch (fid_periodo_pago_tp) {
                    case 1:
                        msPayType = SHrsFormerConsts.PAY_WEE;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_WEE_ABB;
                        break;
                    case 2:
                        msPayType = SHrsFormerConsts.PAY_FOR;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_FOR_ABB;
                        break;
                    case 3:
                        msPayType = SHrsFormerConsts.PAY_MON;
                        msPayTypeAbbr = SHrsFormerConsts.PAY_MON_ABB;
                        break;
                    default:
                }

                moFormerPayroll = new SDataFormerPayroll();
                moFormerPayroll.setPkPayrollId(mnPayrollId);
                moFormerPayroll.setYear(ejercicio);
                moFormerPayroll.setPeriod(periodo);
                moFormerPayroll.setNumber(nomina_num);
                moFormerPayroll.setType(msPayType);
                moFormerPayroll.setNote(comentarios);
                moFormerPayroll.setDateBegin(moDateFormat.parse(fecha_ini));
                moFormerPayroll.setDateEnd(moDateFormat.parse(fecha_fin));
                moFormerPayroll.setDebit_r(0);
                moFormerPayroll.setCredit_r(0);
                moFormerPayroll.setIsRegular(es_normal);
                moFormerPayroll.setIsClosed(es_cerrada);
                moFormerPayroll.setIsDeleted(false);
                moFormerPayroll.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                moFormerPayroll.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                moFormerPayroll.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());

                // Display payroll data:

                sql = "SELECT e.id_empleado, e.empleado, d.id_departamento, d.departamento, d.departamento_cve, " +
                        "COALESCE((SELECT sum(m.monto) FROM nom_nominas_emp_movs_p AS m WHERE m.id_nomina = ne.id_nomina AND m.id_empleado = ne.id_empleado), 0.0) AS f_per, " +
                        "COALESCE((SELECT sum(m.monto) FROM nom_nominas_emp_movs_d AS m WHERE m.id_nomina = ne.id_nomina AND m.id_empleado = ne.id_empleado), 0.0) AS f_ded, " +
                        "ne.sueldo, ne.sueldo_fijo, ne.salario_b, ne.salario_bc, n.dias_laborables, ne.dias_laborados, ne.dias_pagados, " +
                        "st.detalle, et.clave, ec.categoria, e.map_bp " +
                        "FROM nom_nominas_emp AS ne INNER JOIN nom_nominas AS n ON ne.id_nomina = n.id_nomina " +
                        "INNER JOIN nom_empleados AS e ON ne.id_empleado = e.id_empleado " +
                        "INNER JOIN nom_departamentos AS d ON ne.fid_departamento = d.id_departamento " +
                        "INNER JOIN nom_catalogos_det AS st ON ne.fid_salario_tp = st.id_detalle AND st.id_catalogo = 107 " +   // 107 = tipos de salario
                        "INNER JOIN nom_empleados_tipo AS et ON ne.fid_empleado_tp = et.id_empleado_tipo " +
                        "INNER JOIN nom_empleados_cat AS ec ON ne.fid_empleado_cat = ec.id_categoria " +
                        "WHERE ne.id_nomina = " + mnPayrollId + " " +
                        "ORDER BY e.empleado, e.id_empleado, d.departamento, d.id_departamento; ";

                resultSet = statement.executeQuery(sql);
                while (resultSet.next()) {
                    SRowEmployee row = new SRowEmployee();

                    id_empleado = resultSet.getInt("id_empleado");
                    empleado = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("empleado")), 155);
                    id_departamento = resultSet.getInt("id_departamento");
                    departamento = SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("departamento")), 50);
                    departamento_cve = SLibUtilities.parseInt(resultSet.getString("departamento_cve"));
                    f_per = resultSet.getDouble("f_per");
                    f_ded = resultSet.getDouble("f_ded");

                    row.setPrimaryKey(new int[] { id_empleado });
                    row.getValues().add(empleado);
                    row.getValues().add(id_empleado);
                    row.getValues().add(departamento);
                    row.getValues().add(departamento_cve);
                    row.getValues().add(f_per);
                    row.getValues().add(f_ded);
                    row.getValues().add(SLibUtils.roundAmount(f_per - f_ded));

                    if (fid_periodo_pago_tp == SModSysConsts.HRSS_TP_PAY_WEE) {
                        // Pay weekly:

                        row.setSalary((resultSet.getDouble("salario_b") * 365d) / 12d);
                    }
                    else {
                        // Pay biweekly or monthly:

                        row.setSalary(resultSet.getDouble("sueldo"));
                    }
                    
                    row.setPayment(SLibUtils.roundAmount(f_per - f_ded));

                    dias_laborables = resultSet.getInt("dias_laborables");
                    row.setDaysWorked(resultSet.getInt("dias_laborados"));
                    row.setDaysNotWorked(dias_laborables - row.getDaysWorked());
                    row.setDaysPayed(resultSet.getInt("dias_pagados"));
                    row.setSalaryType(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("detalle")), 10));
                    row.setEmployeeType(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("clave")), 10));
                    row.setEmployeeCategory(SLibUtilities.textLeft(SLibUtilities.textTrim(resultSet.getString("categoria")), 10));

                    // Validate business partner for current employee:

                    mapBp = resultSet.getInt("map_bp");

                    if (mapBp == 0) {
                        throw new Exception("No se ha especificado el ID del asociado de negocios del empleado '" + empleado + " (" + id_empleado + ")'.");
                    }
                    else {
                        bizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { mapBp }, SLibConstants.EXEC_MODE_VERBOSE);
                        if (bizPartner == null) {
                            throw new Exception("El asociado de negocios (ID = " + mapBp + ") del empleado '" + empleado + " (" + id_empleado + ")' tiene un inconveniente:\nEl registro no existe.");
                        }
                        else if (bizPartner.getIsDeleted()) {
                            throw new Exception("El asociado de negocios (ID = " + mapBp + ") del empleado '" + empleado + " (" + id_empleado + ")' tiene un inconveniente:\nEl registro está eliminado.");
                        }
                    }

                    row.setFkBizPartnerId(mapBp);

                    moTablePaneEmpAvailable.addTableRow(row);
                }

                moTablePaneEmpAvailable.renderTableRows();
                moTablePaneEmpAvailable.setTableRowSelection(0);
            }
        }
        catch (Exception e) {
            SLibUtilities.renderException(this, e);
        }
    }

    private boolean readRecord(Object key) {
        moCurrentRecord = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, key, SLibConstants.EXEC_MODE_VERBOSE);
        return true;
    }

    private void renderRecord() {
        if (moCurrentRecord == null) {
            jtfRecordDate.setText("");
            jtfRecordBranch.setText("");
            jtfRecordNumber.setText("");
        }
        else {
            jtfRecordDate.setText(miClient.getSessionXXX().getFormatters().getDateFormat().format(moCurrentRecord.getDate()));
            jtfRecordBkc.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.FIN_BKC, new int[] { moCurrentRecord.getPkBookkeepingCenterId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordBranch.setText(SDataReadDescriptions.getCatalogueDescription(miClient, SDataConstants.BPSU_BPB, new int[] { moCurrentRecord.getFkCompanyBranchId() }, SLibConstants.DESCRIPTION_CODE));
            jtfRecordNumber.setText(moCurrentRecord.getPkRecordTypeId() + "-" + moCurrentRecord.getPkNumberId());
        }
    }

    @SuppressWarnings("unchecked")
    private void initPayrollRecords() {
        boolean add = false;
        Object[] recordKey = null;
        Vector<Integer> employees = null;
        SDataRecord record = null;
        SDataFormerPayrollEmp formerPayrollEmp = null;
        SRowEmployee row = null;

        mvRecords.clear();
        moFormerPayroll.getDbmsDataFormerPayrollEmps().clear();
        moFormerPayroll.getDbmsDataFormerPayrollMoves().clear();

        for (int i = 0; i < moTablePaneEmpSelected.getTableGuiRowCount(); i++) {
            add = true;
            row = (SRowEmployee) moTablePaneEmpSelected.getTableRow(i);
            recordKey = (Object[]) row.getData();

            for (Object[] records : mvRecords) {
                if (SLibUtilities.compareKeys(((SDataRecord) records[0]).getPrimaryKey(), recordKey)) {
                    add = false;
                    employees = (Vector<Integer>) records[1];
                }
            }

            if (add) {
                record = (SDataRecord) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_REC, recordKey, SLibConstants.EXEC_MODE_VERBOSE);
                for (SDataRecordEntry entry : record.getDbmsRecordEntries()) {
                    if (entry.getFkPayrollId_n() == mnPayrollId && !entry.getIsDeleted()) {
                        entry.setIsDeleted(true);
                        entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
                        entry.setFkUserDeleteId(miClient.getSession().getUser().getPkUserId());
                    }
                }

                employees = new Vector<Integer>();
                employees.add(((int[]) row.getPrimaryKey())[0]);

                mvRecords.add(new Object[] { record, employees });
            }
            else {
                employees.add(((int[]) row.getPrimaryKey())[0]);
            }

            formerPayrollEmp = new SDataFormerPayrollEmp();
            formerPayrollEmp.setPkPayrollId(mnPayrollId);
            formerPayrollEmp.setPkEmployeeId(((int[]) row.getPrimaryKey())[0]);
            formerPayrollEmp.setEmployee((String) row.getValues().get(0));
            formerPayrollEmp.setDepartment((String) row.getValues().get(2));
            formerPayrollEmp.setDepartmentKey("" + (Integer) row.getValues().get(3));
            formerPayrollEmp.setEmployeeCategory(row.getEmployeeCategory());
            formerPayrollEmp.setEmployeeType(row.getEmployeeType());
            formerPayrollEmp.setSalaryType(row.getSalaryType());
            formerPayrollEmp.setDebit((Double) row.getValues().get(4));
            formerPayrollEmp.setCredit((Double) row.getValues().get(5));
            formerPayrollEmp.setSalary(row.getSalary());
            formerPayrollEmp.setDaysNotWorked(row.getDaysNotWorked());
            formerPayrollEmp.setDaysWorked(row.getDaysWorked());
            formerPayrollEmp.setDaysPayed(row.getDaysPayed());
            formerPayrollEmp.setNumberSeries(SHrsConsts.CFD_SERIES);
            formerPayrollEmp.setNumber(0);
            formerPayrollEmp.setIsDeleted(false);
            formerPayrollEmp.setFkBizPartnerId_n(row.getFkBizPartnerId());
            formerPayrollEmp.setFkPaymentSystemTypeId(row.getFkPaymentSystemTypeId());
            formerPayrollEmp.setFkYearId((Integer) recordKey[0]);
            formerPayrollEmp.setFkPeriodId((Integer) recordKey[1]);
            formerPayrollEmp.setFkBookkeepingCenterId((Integer) recordKey[2]);
            formerPayrollEmp.setFkRecordTypeId((String) recordKey[3]);
            formerPayrollEmp.setFkNumberId((Integer) recordKey[4]);

            moFormerPayroll.getDbmsDataFormerPayrollEmps().add(formerPayrollEmp);
        }
    }

    private java.lang.String composeEmployeeQuery(java.util.Vector<java.lang.Integer> employees) {
        String sql = "";

        for (Integer employee : employees) {
            sql += (sql.length() == 0 ? "" : ", ") + employee;
        }

        return sql;
    }

    private erp.mfin.data.SDataRecordEntry createRecordEntry(java.lang.Object recordPk, java.lang.String concept,
            double debit, double credit, java.lang.String accountId, java.lang.String costCenterId,
            int itemId, int bpId, int bpbId, int[] taxKey, int[] sysAccountTypeKey, int[] sysMoveTypeKey, int[] sysMoveTypeKeyXXX) {
        SDataRecordEntry entry = new SDataRecordEntry();

        entry.setPkYearId((Integer) ((Object[]) recordPk)[0]);
        entry.setPkPeriodId((Integer) ((Object[]) recordPk)[1]);
        entry.setPkBookkeepingCenterId((Integer) ((Object[]) recordPk)[2]);
        entry.setPkRecordTypeId((String) ((Object[]) recordPk)[3]);
        entry.setPkNumberId((Integer) ((Object[]) recordPk)[4]);
        entry.setPkEntryId(0);
        entry.setConcept(concept);
        entry.setReference("");
        entry.setIsReferenceTax(false);
        entry.setDebit(debit);
        entry.setCredit(credit);
        entry.setExchangeRate(1);
        entry.setExchangeRateSystem(1);
        entry.setDebitCy(debit);
        entry.setCreditCy(credit);
        entry.setUnits(0);
        entry.setSortingPosition(0);
        entry.setIsSystem(true);
        entry.setIsDeleted(false);
        entry.setFkAccountIdXXX(accountId);
        entry.setFkAccountingMoveTypeId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[0]);
        entry.setFkAccountingMoveClassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[1]);
        entry.setFkAccountingMoveSubclassId(SDataConstantsSys.FINS_CLS_ACC_MOV_JOURNAL[2]);
        entry.setFkSystemMoveClassId(sysMoveTypeKey[0]);
        entry.setFkSystemMoveTypeId(sysMoveTypeKey[1]);
        entry.setFkSystemAccountClassId(sysAccountTypeKey[0]);
        entry.setFkSystemAccountTypeId(sysAccountTypeKey[1]);
        entry.setFkSystemMoveCategoryIdXXX(sysMoveTypeKeyXXX[0]);
        entry.setFkSystemMoveTypeIdXXX(sysMoveTypeKeyXXX[1]);
        entry.setFkCurrencyId(miClient.getSessionXXX().getParamsErp().getFkCurrencyId());
        entry.setFkCostCenterIdXXX_n(costCenterId);
        entry.setFkCheckWalletId_n(0);
        entry.setFkCheckId_n(0);
        entry.setFkBizPartnerId_nr(bpId);
        entry.setFkBizPartnerBranchId_n(bpbId);
        entry.setFkReferenceCategoryId_n(0);
        entry.setFkCompanyBranchId_n(0);
        entry.setFkEntityId_n(0);
        entry.setFkTaxBasicId_n(taxKey[0]);
        entry.setFkTaxId_n(taxKey[1]);
        entry.setFkYearId_n(0);
        entry.setFkDpsYearId_n(0);
        entry.setFkDpsDocId_n(0);
        entry.setFkDpsAdjustmentYearId_n(0);
        entry.setFkDpsAdjustmentDocId_n(0);
        entry.setFkDiogYearId_n(0);
        entry.setFkDiogDocId_n(0);
        entry.setFkPayrollFormerId_n(mnPayrollId);
        entry.setFkItemId_n(itemId);
        entry.setFkItemAuxId_n(0);
        entry.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        entry.setFkUserEditId(miClient.getSession().getUser().getPkUserId());

        return entry;
    }

    @SuppressWarnings({"unchecked", "deprecation"})
    private void computePayroll() throws java.lang.Exception {
        int nType = 0;
        int nMoveId = 0;
        int nEntryId = 0;
        int nResult = 0;
        int[] anSysAccountTypeKey = null;
        int[] anSysMoveTypeKey = null;
        int[] anSysMoveTypeKeyXXX = null;
        String sSql = "";
        String sMsg = "";
        String sVal = "";
        String sType = "";
        String sEmployees = "";
        Statement oStatement = null;
        ResultSet oResultSet = null;
        SServerRequest oRequest = null;
        SServerResponse oResponse = null;
        SDataRecord oRecord = null;
        SDataFormerPayrollMove oPayrollMove = null;
        SDataAccount oAccount = null;
        SDataAccount oLedgerAccount = null;
        SDataCostCenter oCostCenter = null;
        SDataBizPartner oBizPartner = null;
        SDataTax oTax = null;
        SDataRegistry[] aoItems = null;

        double dDebit_r = 0;
        double dCredit_r = 0;

        int nF_id_tipo = 0;
        int nF_id_aux = 0;
        String sF_aux = "";
        int nF_id_ref = 0;
        String sF_ref = "";
        String sF_ref_cve = "";
        String sMap_acc = "";
        String sMap_cc = "";
        String sMap_item = "";
        int nMap_bp = 0;
        int nMap_impto_bas = 0;
        int nMap_impto = 0;
        double dF_mto = 0;
        String concept = "";
        double debit = 0;
        double credit = 0;

        connectOdbc();
        oStatement = moConnectionOdbc.createStatement();

        initPayrollRecords();

        for (Object[] records : mvRecords) {
            oRecord = (SDataRecord) records[0];
            sEmployees = composeEmployeeQuery((Vector<Integer>) records[1]);
            nEntryId = oRecord.getDbmsRecordEntries().size();

            for (nType = 1; nType <= 2; nType++) {
                if (nType == 1) {
                    /* Perception:
                     * Accountable link level:
                     * 1. Global
                     * 2. By departatment
                     * 3. By employee
                     */

                    sSql = "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_percepcion as f_id_aux, rtrim(x.percepcion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, '' as f_ref, '' as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_p as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_percepciones as x on m.fid_percepcion = x.id_percepcion " +
                            "inner join nom_vinculo_contable_p as v on x.id_percepcion = v.id_percepcion " +
                            "where v.id_ambito_vinc_contab_tp = 1 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_percepcion, rtrim(x.percepcion_vinc_contab), " +
                            "v.id_referencia, v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "union " +
                            "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_percepcion as f_id_aux, rtrim(x.percepcion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, rtrim(r.departamento) as f_ref, rtrim(r.departamento_cve) as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_p as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_percepciones as x on m.fid_percepcion = x.id_percepcion " +
                            "inner join nom_vinculo_contable_p as v on x.id_percepcion = v.id_percepcion " +
                            "inner join nom_departamentos as r on n.fid_departamento = r.id_departamento and v.id_referencia = r.id_departamento " +
                            "where v.id_ambito_vinc_contab_tp = 2 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_percepcion, rtrim(x.percepcion_vinc_contab), " +
                            "v.id_referencia, rtrim(r.departamento), rtrim(r.departamento_cve), v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "union " +
                            "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_percepcion as f_id_aux, rtrim(x.percepcion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, rtrim(r.empleado) as f_ref, '' as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_p as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_percepciones as x on m.fid_percepcion = x.id_percepcion " +
                            "inner join nom_vinculo_contable_p as v on x.id_percepcion = v.id_percepcion " +
                            "inner join nom_empleados as r on n.id_empleado = r.id_empleado and v.id_referencia = r.id_empleado " +
                            "where v.id_ambito_vinc_contab_tp = 3 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_percepcion, rtrim(x.percepcion_vinc_contab), " +
                            "v.id_referencia, rtrim(r.empleado), v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "order by f_id_tipo, f_id_aux, f_ref; ";
                    sType = "percepción";
                }
                else {
                    /* Deduction:
                     * Accountable link level:
                     * 1. Global
                     * 2. By departatment
                     * 3. By employee
                     */

                    sSql = "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_deduccion as f_id_aux, rtrim(x.deduccion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, '' as f_ref, '' as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_d as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_deducciones as x on m.fid_deduccion = x.id_deduccion " +
                            "inner join nom_vinculo_contable_d as v on x.id_deduccion = v.id_deduccion " +
                            "where v.id_ambito_vinc_contab_tp = 1 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_deduccion, rtrim(x.deduccion_vinc_contab), " +
                            "v.id_referencia, v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "union " +
                            "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_deduccion as f_id_aux, rtrim(x.deduccion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, rtrim(r.departamento) as f_ref, rtrim(r.departamento_cve) as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_d as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_deducciones as x on m.fid_deduccion = x.id_deduccion " +
                            "inner join nom_vinculo_contable_d as v on x.id_deduccion = v.id_deduccion " +
                            "inner join nom_departamentos as r on n.fid_departamento = r.id_departamento and v.id_referencia = r.id_departamento " +
                            "where v.id_ambito_vinc_contab_tp = 2 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_deduccion, rtrim(x.deduccion_vinc_contab), " +
                            "v.id_referencia, rtrim(r.departamento), rtrim(r.departamento_cve), v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "union " +
                            "select v.id_ambito_vinc_contab_tp as f_id_tipo, x.id_deduccion as f_id_aux, rtrim(x.deduccion_vinc_contab) as f_aux, " +
                            "v.id_referencia as f_id_ref, rtrim(r.empleado) as f_ref, '' as f_ref_cve, " +
                            "v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto, sum(m.monto) as f_mto " +
                            "from nom_nominas_emp as n " +
                            "inner join nom_nominas_emp_movs_d as m on n.id_nomina = m.id_nomina and n.id_empleado = m.id_empleado " +
                            "inner join nom_deducciones as x on m.fid_deduccion = x.id_deduccion " +
                            "inner join nom_vinculo_contable_d as v on x.id_deduccion = v.id_deduccion " +
                            "inner join nom_empleados as r on n.id_empleado = r.id_empleado and v.id_referencia = r.id_empleado " +
                            "where v.id_ambito_vinc_contab_tp = 3 and n.id_nomina = " + mnPayrollId + " and n.id_empleado in (" + sEmployees + ") " +
                            "group by v.id_ambito_vinc_contab_tp, x.id_deduccion, rtrim(x.deduccion_vinc_contab), " +
                            "v.id_referencia, rtrim(r.empleado), v.map_acc, v.map_cc, v.map_item, v.map_bp, v.map_impto_bas, v.map_impto " +
                            "" +
                            "order by f_id_tipo, f_id_aux, f_ref; ";
                    sType = "deducción";
                }

                oResultSet = oStatement.executeQuery(sSql);
                while (oResultSet.next()) {
                    nF_id_tipo = oResultSet.getInt("f_id_tipo");
                    nF_id_aux = oResultSet.getInt("f_id_aux");
                    sF_aux = oResultSet.getString("f_aux");
                    nF_id_ref = oResultSet.getInt("f_id_ref");
                    sF_ref = oResultSet.getString("f_ref");
                    sF_ref_cve = oResultSet.getString("f_ref_cve");
                    sMap_acc = SLibUtilities.textTrim(oResultSet.getString("map_acc"));
                    sMap_cc = SLibUtilities.textTrim(oResultSet.getString("map_cc"));
                    sMap_item = SLibUtilities.textTrim(oResultSet.getString("map_item"));
                    nMap_bp = oResultSet.getInt("map_bp");
                    nMap_impto_bas = oResultSet.getInt("map_impto_bas");
                    nMap_impto = oResultSet.getInt("map_impto");
                    dF_mto = oResultSet.getDouble("f_mto");

                    oAccount = null;
                    oCostCenter = null;
                    oBizPartner = null;
                    oTax = null;
                    aoItems = null;

                    switch (nF_id_tipo) {
                        case 1: // global link
                            sMsg = "La configuración de importación para la " + sType + " No. " + nF_id_aux + " '" + sF_aux + "'\ndel campo ";
                            break;
                        case 2: // link by department
                            sMsg = "La configuración de importación para la " + sType + " No. " + nF_id_aux + " '" + sF_aux + "',\ndel departamento No. " + sF_ref_cve + " '" + sF_ref + "' (" + nF_id_ref + "), del campo ";
                            break;
                        case 3: // link by employee
                            sMsg = "La configuración de importación para la " + sType + " No. " + nF_id_aux + " '" + sF_aux + "',\ndel empleado No. " + nF_id_ref + " '" + sF_ref + "', del campo ";
                            break;
                        default:
                    }

                    // Validate account:

                    if (sMap_acc.length() == 0) {
                        throw new Exception(sMsg + "'cuenta contable' no ha sido especificada aún.");
                    }
                    else {
                        oAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { sMap_acc }, SLibConstants.EXEC_MODE_VERBOSE);
                        sVal = SDataUtilities.validateAccount(miClient, oAccount, null);
                        if (sVal.length() != 0) {
                            throw new Exception(sMsg + "'cuenta contable' ('" + sMap_acc + "') tiene un inconveniente:\n" + sVal);
                        }

                        oLedgerAccount = (SDataAccount) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_ACC, new Object[] { oAccount.getDbmsPkLedgerAccountIdXXX() }, SLibConstants.EXEC_MODE_VERBOSE);
                    }

                    // Validate cost center:

                    if (sMap_cc.length() > 0) {
                        oCostCenter = (SDataCostCenter) SDataUtilities.readRegistry(miClient, SDataConstants.FIN_CC, new Object[] { sMap_cc }, SLibConstants.EXEC_MODE_VERBOSE);
                        sVal = SDataUtilities.validateCostCenter(miClient, oCostCenter, null);
                        if (sVal.length() != 0) {
                            throw new Exception(sMsg + "'centro de costo' ('" + sMap_cc + "') tiene un inconveniente:\n" + sVal);
                        }
                    }
                    else if (oAccount.getDbmsIsRequiredCostCenter()) {
                        throw new Exception(sMsg + "'centro de costo' ('" + sMap_cc + "') tiene un inconveniente:\nLa cuenta contable correspondiente '" + sMap_acc + "' requiere de un centro de costo.");
                    }

                    // Validate item:

                    if (sMap_item.length() > 0) {
                        aoItems = SDataUtilities.readRegistriesByKey(miClient, SDataConstants.ITMU_ITEM, sMap_item, SLibConstants.EXEC_MODE_VERBOSE);
                        if (aoItems == null) {
                            throw new Exception(sMsg + "'ítem' ('" + sMap_item + "') tiene un inconveniente:\nEl registro no existe.");
                        }
                        else if (aoItems.length != 1) {
                            throw new Exception(sMsg + "'ítem' ('" + sMap_item + "') tiene un inconveniente:\nSe encontraron " + aoItems.length + " registros.");
                        }
                        else if (aoItems[0].getIsDeleted()) {
                            throw new Exception(sMsg + "'ítem' ('" + sMap_item + "') tiene un inconveniente:\nEl registro está eliminado.");
                        }
                    }

                    // Validate business partner:

                    if (nMap_bp == 0) {
                        if (nF_id_tipo == 3) {
                            throw new Exception(sMsg + "'asociado de negocios' ('" + nMap_bp + "') tiene un inconveniente:\nNo se ha especificado el asociado de negocios.");
                        }
                    }
                    else {
                        oBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[] { nMap_bp }, SLibConstants.EXEC_MODE_VERBOSE);
                        if (oBizPartner == null) {
                            throw new Exception(sMsg + "'asociado de negocios' ('" + nMap_bp + "') tiene un inconveniente:\nEl registro no existe.");
                        }
                        else if (oBizPartner.getIsDeleted()) {
                            throw new Exception(sMsg + "'asociado de negocios' ('" + nMap_bp + "') tiene un inconveniente:\nEl registro está eliminado.");
                        }
                    }

                    // Validate tax:

                    if (nMap_impto_bas != 0 && nMap_impto != 0) {
                        oTax = (SDataTax) SDataUtilities.readRegistry(miClient, SDataConstants.FINU_TAX, new int[] { nMap_impto_bas, nMap_impto }, SLibConstants.EXEC_MODE_VERBOSE);
                        if (oTax == null) {
                            throw new Exception(sMsg + "'impuesto' ('" + nMap_impto_bas + ", " + nMap_impto + "') tiene un inconveniente:\nEl registro no existe.");
                        }
                        else if (oTax.getIsDeleted()) {
                            throw new Exception(sMsg + "'impuesto' ('" + nMap_impto_bas + ", " + nMap_impto + "') tiene un inconveniente:\nEl registro está eliminado.");
                        }
                    }

                    // Create record entry:

                    switch (nF_id_tipo) {
                        case 1: // global link
                            concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + sF_aux;
                            break;
                        case 2: // link by department
                            concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + sF_aux + "; " + sF_ref_cve + ". " + sF_ref;
                            break;
                        case 3: // link by employee
                            concept = msPayTypeAbbr + ". " + moFormerPayroll.getNumber() + "; " + sF_aux + "; " + nF_id_ref + ". " + sF_ref;
                            break;
                        default:
                    }

                    if (nType == 1) {
                        if (dF_mto >= 0d) {
                            debit = dF_mto;
                            credit = 0;
                        }
                        else {
                            debit = 0;
                            credit = -dF_mto;
                        }
                    }
                    else {
                        if (dF_mto >= 0d) {
                            debit = 0;
                            credit = dF_mto;
                        }
                        else {
                            debit = -dF_mto;
                            credit = 0;
                        }
                    }

                    dDebit_r += debit;
                    dCredit_r += credit;

                    switch (oLedgerAccount.getFkAccountSystemTypeId()) {
                        case SDataConstantsSys.FINS_TP_ACC_SYS_SUP:
                            anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_SUP_BAL;
                            anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_SUP_BAL_INC_ADJ;
                            anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_SUP;
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CUS:
                            anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CUS_BAL;
                            anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CUS_BAL_DEC_ADJ;
                            anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CUS;
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_CDR:
                            anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_CDR_BAL;
                            anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_DEC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_CDR_BAL_INC_ADJ;
                            anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_CDR;
                            break;
                        case SDataConstantsSys.FINS_TP_ACC_SYS_DBR:
                            anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_BPR_DBR_BAL;
                            anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_INC_ADJ : SModSysConsts.FINS_TP_SYS_MOV_DBR_BAL_DEC_ADJ;
                            anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_BPS_DBR;
                            break;
                        default:
                            anSysAccountTypeKey = SModSysConsts.FINS_TP_SYS_ACC_NA_NA;
                            anSysMoveTypeKey = debit >= 0 ? SModSysConsts.FINS_TP_SYS_MOV_JOU_DBT : SModSysConsts.FINS_TP_SYS_MOV_JOU_CDT;
                            anSysMoveTypeKeyXXX = SDataConstantsSys.FINS_TP_SYS_MOV_NA;
                    }

                    oRecord.getDbmsRecordEntries().add(createRecordEntry(oRecord.getPrimaryKey(), SLibUtilities.textLeft(concept, 100),
                            debit, credit, sMap_acc, sMap_cc, aoItems == null ? 0 : ((SDataItem) aoItems[0]).getPkItemId(),
                            oBizPartner == null ? 0 : oBizPartner.getPkBizPartnerId(),
                            oBizPartner == null ? 0 : oBizPartner.getDbmsBizPartnerBranches().get(0).getPkBizPartnerBranchId(),
                            new int[] { nMap_impto_bas, nMap_impto }, anSysAccountTypeKey, anSysMoveTypeKey, anSysMoveTypeKeyXXX));

                    // Create payroll move:

                    oPayrollMove = new SDataFormerPayrollMove();
                    oPayrollMove.setPkPayrollId(mnPayrollId);
                    oPayrollMove.setPkMoveId(++nMoveId);
                    oPayrollMove.setType(nType);
                    oPayrollMove.setTransactionId(nF_id_aux);
                    oPayrollMove.setTransaction(sF_aux);
                    oPayrollMove.setReferenceId(nF_id_ref);
                    oPayrollMove.setReference(sF_ref);
                    oPayrollMove.setReferenceKey(sF_ref_cve);
                    oPayrollMove.setAmount(dF_mto);
                    oPayrollMove.setFkYearId(oRecord.getPkYearId());
                    oPayrollMove.setFkPeriodId(oRecord.getPkPeriodId());
                    oPayrollMove.setFkBookkeepingCenterId(oRecord.getPkBookkeepingCenterId());
                    oPayrollMove.setFkRecordTypeId(oRecord.getPkRecordTypeId());
                    oPayrollMove.setFkNumberId(oRecord.getPkNumberId());
                    oPayrollMove.setFkEntryId(++nEntryId);

                    moFormerPayroll.getDbmsDataFormerPayrollMoves().add(oPayrollMove);
                }
            }

            moFormerPayroll.getAuxDataRecords().add(oRecord);
        }

        moFormerPayroll.setDatePayment(moFieldDatePayment.getDate());
        moFormerPayroll.setDebit_r(dDebit_r);
        moFormerPayroll.setCredit_r(dCredit_r);

        oRequest = new SServerRequest(SServerConstants.REQ_DB_ACTION_SAVE);
        oRequest.setPacket(moFormerPayroll);
        oResponse = miClient.getSessionXXX().request(oRequest);

        if (oResponse.getResponseType() != SSrvConsts.RESP_TYPE_OK) {
            throw new Exception(oResponse.getMessage());
        }
        else {
            nResult = oResponse.getResultType();
            if (nResult != SLibConstants.DB_ACTION_SAVE_OK) {
                throw new Exception(SLibConstants.MSG_ERR_DB_REG_SAVE + (oResponse.getMessage().length() == 0 ? "" : "\n" + oResponse.getMessage()));
            }
        }

        miClient.getGuiModule(SDataConstants.MOD_FIN).refreshCatalogues(SDataConstants.FIN_REC);
        miClient.getGuiModule(SDataConstants.MOD_HRS).refreshCatalogues(SDataConstants.HRS_SIE_PAY);
        miClient.showMsgBoxInformation("La nómina ha sido importada.");

        // Obtain payroll structure:

        moHrsFormerPayroll = erp.mod.hrs.db.SHrsFormerUtils.readHrsFormerPayroll((SClientInterface) miClient, miClient.getSession().getStatement(), mnPayrollId, miClient.getSession().getConfigCompany().getCompanyId(), moFieldDate.getDate(), moFieldDatePayment.getDate());
        SCfdUtils.computeCfdiPayroll(miClient, moHrsFormerPayroll, false); // generate all CFDI

        miClient.getGuiModule(SDataConstants.MOD_FIN).refreshCatalogues(SDataConstants.FIN_REC);
        miClient.getGuiModule(SDataConstants.MOD_HRS).refreshCatalogues(SDataConstants.HRS_SIE_PAY);
        ((SClient) miClient).getSession().notifySuscriptors(SModConsts.HRS_SIE_PAY);
    }

    public void actionPickRecord() {
        Object key = null;
        String message = "";

        moDialogRecordPicker.formReset();
        moDialogRecordPicker.setFilterKey(miClient.getSessionXXX().getWorkingDate());
        moDialogRecordPicker.formRefreshOptionPane();

        if (moCurrentRecord != null) {
            moDialogRecordPicker.setSelectedPrimaryKey(moCurrentRecord.getPrimaryKey());
        }

        moDialogRecordPicker.setFormVisible(true);

        if (moDialogRecordPicker.getFormResult() == SLibConstants.FORM_RESULT_OK) {
            key = moDialogRecordPicker.getSelectedPrimaryKey();

            // XXX set registry lock to accounting record

            if (readRecord(key)) {
                if (moCurrentRecord != null) {
                    if (moCurrentRecord.getIsSystem()) {
                        message = "No puede seleccionarse esta póliza contable porque es de sistema.";
                    }
                    else if (moCurrentRecord.getIsAudited()) {
                        message = "No puede seleccionarse esta póliza contable porque está auditada.";
                    }
                    else if (moCurrentRecord.getIsAuthorized()) {
                        message = "No puede seleccionarse esta póliza contable porque está autorizada.";
                    }
                    else if (!SDataUtilities.isPeriodOpen(miClient, moCurrentRecord.getDate())) {
                        message = "No puede seleccionarse esta póliza contable porque su período contable correspondiente está cerrado.";
                    }

                    if (message.length() > 0) {
                        miClient.showMsgBoxWarning(message);
                        moCurrentRecord = null;
                    }
                    else {
                        renderRecord();
                    }
                }
            }
        }
    }

    public boolean actionAdd() {
        int index = 0;
        boolean error = true;
        SRowEmployee row = null;

        if (moCurrentRecord == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlRecord.getText() + "'.");
            jbPickRecord.requestFocus();
        }
        else if (jcbFkPaymentSystemTypeId.getSelectedIndex() == 0) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlFkPaymentSystemTypeId.getText() + "'.");
            jcbFkPaymentSystemTypeId.requestFocus();
        }
        else {
            index = moTablePaneEmpAvailable.getTable().getSelectedRow();
            if (index != -1) {
                row = (SRowEmployee) moTablePaneEmpAvailable.getSelectedTableRow();
                row.setData(moCurrentRecord.getPrimaryKey());
                row.setFkPaymentSystemTypeId(moFieldFkPaymentSystemTypeId.getKeyAsIntArray()[0]);
                row.getValues().add("" + moCurrentRecord.getPkYearId() + "-" + (moCurrentRecord.getPkPeriodId() >= 10 ? "" : "0") + moCurrentRecord.getPkPeriodId());
                row.getValues().add(jtfRecordBkc.getText());
                row.getValues().add(jtfRecordBranch.getText());
                row.getValues().add(jtfRecordNumber.getText());
                row.getValues().add(moCurrentRecord.getDate());

                moTablePaneEmpAvailable.removeTableRow(index);
                moTablePaneEmpAvailable.renderTableRows();
                moTablePaneEmpAvailable.setTableRowSelection(index < moTablePaneEmpAvailable.getTableGuiRowCount() ? index : moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

                moTablePaneEmpSelected.addTableRow(row);
                moTablePaneEmpSelected.renderTableRows();
                moTablePaneEmpSelected.setTableRowSelection(moTablePaneEmpSelected.getTableGuiRowCount() - 1);

                error = false;
            }
        }

        return !error;
    }

    public void actionAddAll() {
        while (moTablePaneEmpAvailable.getTableGuiRowCount() > 0) {
            moTablePaneEmpAvailable.setTableRowSelection(0);
            if (!actionAdd()) {
                break;
            }
        }
    }

    public boolean actionRemove() {
        int index = 0;
        boolean error = true;
        SRowEmployee row = null;

        index = moTablePaneEmpSelected.getTable().getSelectedRow();
        if (index != -1) {
            row = (SRowEmployee) moTablePaneEmpSelected.getSelectedTableRow();
            for (int i = 1; i <= 5; i++) {
                row.getValues().remove(7);
            }

            moTablePaneEmpSelected.removeTableRow(index);
            moTablePaneEmpSelected.renderTableRows();
            moTablePaneEmpSelected.setTableRowSelection(index < moTablePaneEmpSelected.getTableGuiRowCount() ? index : moTablePaneEmpSelected.getTableGuiRowCount() - 1);

            moTablePaneEmpAvailable.addTableRow(row);
            moTablePaneEmpAvailable.renderTableRows();
            moTablePaneEmpAvailable.setTableRowSelection(moTablePaneEmpAvailable.getTableGuiRowCount() - 1);

            error = false;
        }

        return !error;
    }

    public void actionRemoveAll() {
        while (moTablePaneEmpSelected.getTableGuiRowCount() > 0) {
            moTablePaneEmpSelected.setTableRowSelection(0);
            if (!actionRemove()) {
                break;
            }
        }
    }

    public void actionOk() {
        Cursor cursor = null;

        if (moTablePaneEmpSelected.getTableGuiColumnCount() == 0) {
            miClient.showMsgBoxWarning("No hay empleados seleccionados.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else if (moTablePaneEmpAvailable.getTableGuiRowCount() > 0) {
            miClient.showMsgBoxWarning("Se debe seleccionar todos los empleados disponibles.");
            moTablePaneEmpAvailable.requestFocus();
        }
        else if (moFieldDate.getDate() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDate.getText() + "'.");
            jtfDate.requestFocus();
        }
        else if (moFieldDatePayment.getDate() == null) {
            miClient.showMsgBoxWarning(SLibConstants.MSG_ERR_GUI_FIELD_EMPTY + "'" + jlDatePayment.getText() + "'.");
            jtfDatePayment.requestFocus();
        }
        else {
            try {
                miClient.getFrame().setCursor(new Cursor(Cursor.WAIT_CURSOR));

                computePayroll();

                mnFormResult = SLibConstants.FORM_RESULT_OK;
                disconnectOdbc();
                setVisible(false);
            }
            catch (Exception e) {
                SLibUtilities.renderException(this, e);
            }
            finally {
                miClient.getFrame().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }

    public void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        disconnectOdbc();
        setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JButton jbAdd;
    private javax.swing.JButton jbAddAll;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDate;
    private javax.swing.JButton jbDatePayment;
    private javax.swing.JButton jbOk;
    private javax.swing.JButton jbPickRecord;
    private javax.swing.JButton jbRemove;
    private javax.swing.JButton jbRemoveAll;
    private javax.swing.JComboBox jcbFkPaymentSystemTypeId;
    private javax.swing.JLabel jlDate;
    private javax.swing.JLabel jlDatePayment;
    private javax.swing.JLabel jlDummy01;
    private javax.swing.JLabel jlDummy2;
    private javax.swing.JLabel jlDummy3;
    private javax.swing.JLabel jlFkPaymentSystemTypeId;
    private javax.swing.JLabel jlPayroll;
    private javax.swing.JLabel jlPayrollDates;
    private javax.swing.JLabel jlPayrollNet;
    private javax.swing.JLabel jlPayrollNotes;
    private javax.swing.JLabel jlRecord;
    private javax.swing.JPanel jpAccountingRecord;
    private javax.swing.JPanel jpControls;
    private javax.swing.JPanel jpEmployeesAvailable;
    private javax.swing.JPanel jpEmployeesSelected;
    private javax.swing.JPanel jpGrid;
    private javax.swing.JPanel jpPaymentType;
    private javax.swing.JFormattedTextField jtfDate;
    private javax.swing.JFormattedTextField jtfDatePayment;
    private javax.swing.JTextField jtfPayrollDates;
    private javax.swing.JTextField jtfPayrollNet;
    private javax.swing.JTextField jtfPayrollNetCur;
    private javax.swing.JTextField jtfPayrollNotes;
    private javax.swing.JTextField jtfPayrollNumber;
    private javax.swing.JTextField jtfPayrollPeriod;
    private javax.swing.JTextField jtfRecordBkc;
    private javax.swing.JTextField jtfRecordBranch;
    private javax.swing.JTextField jtfRecordDate;
    private javax.swing.JTextField jtfRecordNumber;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    public void resetForm() {
        mnFormResult = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        jtfPayrollPeriod.setText("");
        jtfPayrollNumber.setText("");
        jtfPayrollDates.setText("");
        jtfPayrollNet.setText("");
        jtfPayrollNetCur.setText(miClient.getSessionXXX().getParamsErp().getDbmsDataCurrency().getKey());
        jtfPayrollNotes.setText("");

        jtfRecordDate.setText("");
        jtfRecordBkc.setText("");
        jtfRecordBranch.setText("");
        jtfRecordNumber.setText("");

        SFormUtilities.populateComboBox(miClient, jcbFkPaymentSystemTypeId, SDataConstants.TRNU_TP_PAY_SYS);
        moFieldFkPaymentSystemTypeId.setFieldValue(new int[] { 0 });
        moFieldDate.setDate(miClient.getSession().getCurrentDate());
        moFieldDatePayment.setDate(null);

        moCurrentRecord = null;
        moTablePaneEmpAvailable.createTable();
        moTablePaneEmpAvailable.clearTableRows();
        moTablePaneEmpSelected.createTable();
        moTablePaneEmpSelected.clearTableRows();
    }

    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof JButton) {
            JButton button = (JButton) e.getSource();

            if (button == jbPickRecord) {
                actionPickRecord();
            }
            else if (button == jbAdd) {
                actionAdd();
            }
            else if (button == jbAddAll) {
                actionAddAll();
            }
            else if (button == jbRemove) {
                actionRemove();
            }
            else if (button == jbRemoveAll) {
                actionRemoveAll();
            }
            else if (button == jbDate) {
                actionDate();
            }
            else if (button == jbDatePayment) {
                actionDatePayment();
            }
        }
    }
}
