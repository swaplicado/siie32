/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SFormCustomerConfig.java
 *
 * Created on 10/11/2009
 */

package erp.mmkt.form;

import erp.data.SDataConstants;
import erp.data.SDataUtilities;
import erp.data.SProcConstants;
import erp.lib.SLibConstants;
import erp.lib.form.SFormComboBoxGroup;
import erp.lib.form.SFormComponentItem;
import erp.lib.form.SFormField;
import erp.lib.form.SFormUtilities;
import erp.lib.form.SFormValidation;
import erp.lib.table.STableColumnForm;
import erp.lib.table.STableConstants;
import erp.lib.table.STablePane;
import erp.mbps.data.SDataBizPartner;
import erp.mmkt.data.SDataCustomerBranchConfig;
import erp.mmkt.data.SDataCustomerBranchConfigRow;
import erp.mmkt.data.SDataCustomerConfig;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Vector;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

/**
 *
 * @author Néstor Ávalos, Sergio Flores
 */
public class SFormCustomerConfig extends javax.swing.JDialog implements erp.lib.form.SFormInterface, java.awt.event.ActionListener {

    private int mnFormType;
    private int mnFormResult;
    private int mnFormStatus;
    private boolean mbFirstTime;
    private boolean mbResetingForm;
    private java.util.Vector<erp.lib.form.SFormField> mvFields;
    private erp.client.SClientInterface miClient;

    private erp.mmkt.data.SDataCustomerConfig moCustomerConfiguration;
    private erp.mbps.data.SDataBizPartner moBizPartner = null;
    private erp.mbps.data.SDataBizPartnerBranch  moBizPartnerBranch = null;

    private erp.lib.form.SFormComboBoxGroup moComboboxGrpMarketSegment;
    private erp.lib.form.SFormField moFieldPkCustomerId;
    private erp.lib.form.SFormField moFieldFkCustomerTypeId;
    private erp.lib.form.SFormField moFieldFkMarketSegmentId;
    private erp.lib.form.SFormField moFieldFkMarketSubsegmentId;
    private erp.lib.form.SFormField moFieldFkDistributionChannelId;
    private erp.lib.form.SFormField moFieldFkSalesAgentId_n;
    private erp.lib.form.SFormField moFieldIsFreeDiscountDoc;
    private erp.lib.form.SFormField moFieldIsFreeCommissions;
    private erp.lib.form.SFormField moFieldIsSignRestricted;
    private erp.lib.form.SFormField moFieldIsSignImmex;
    private erp.lib.form.SFormField moFieldIsSkipSignForeignCurrencyRestriction;
    private erp.lib.form.SFormField moFieldIsDeleted;

    private erp.lib.table.STablePane moCusBranchConfigPane;

    private int mnParamPkBizPartnerId;
    private java.lang.String msParamBizPartnerDescription;

    /** Creates new form SFormCustomerConfig
     * @param client
     */
    public SFormCustomerConfig(erp.client.SClientInterface client) {
        super(client.getFrame(), true);
        miClient = client;
        mnFormType = SDataConstants.MKT_CFG_CUS;

        initComponents();
        initComponentsExtra();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jlPkCustomerId = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jcbPkCustomerId = new javax.swing.JComboBox<SFormComponentItem>();
        jbPkCustomerId = new javax.swing.JButton();
        jlFkCustomerTypeId = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jcbFkCustomerTypeId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkCustomerTypeId = new javax.swing.JButton();
        jlFkMarketSegmentId = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jcbFkMarketSegmentId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkMarketSegmentId = new javax.swing.JButton();
        jlFkMarketSubsegmentId = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jcbFkMarketSubsegmentId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkMarketSubsegmentId = new javax.swing.JButton();
        jlFkDistributionChannelId = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jcbFkDistributionChannelId = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkDistributionChannelId = new javax.swing.JButton();
        jlFkSalesAgentId_n = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jcbFkSalesAgentId_n = new javax.swing.JComboBox<SFormComponentItem>();
        jbFkSalesAgentId_n = new javax.swing.JButton();
        jckIsFreeDiscountDoc = new javax.swing.JCheckBox();
        jckIsFreeCommissions = new javax.swing.JCheckBox();
        jckIsSignRestricted = new javax.swing.JCheckBox();
        jlIsSignRestrictedHint = new javax.swing.JLabel();
        jckIsSignImmex = new javax.swing.JCheckBox();
        jlIsSignImmexHint = new javax.swing.JLabel();
        jckIsSkipSignForeignCurrencyRestriction = new javax.swing.JCheckBox();
        jckIsDeleted = new javax.swing.JCheckBox();
        jpCusBranchConfig = new javax.swing.JPanel();
        jpNotesAction = new javax.swing.JPanel();
        jbNewCusBranchConfig = new javax.swing.JButton();
        jbModifyCusBranchConfig = new javax.swing.JButton();
        jbDeleteCusBranchConfig = new javax.swing.JButton();
        jbAddCusBranchConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuración de cliente");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 33));
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        jbOK.setText("Aceptar");
        jbOK.setToolTipText("[Ctrl + Enter]");
        jbOK.setPreferredSize(new java.awt.Dimension(75, 23));
        jPanel1.add(jbOK);

        jbCancel.setText("Cancelar");
        jbCancel.setToolTipText("[Escape]");
        jPanel1.add(jbCancel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del registro:"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(10, 2, 5, 5));

        jlPkCustomerId.setForeground(java.awt.Color.blue);
        jlPkCustomerId.setText("Cliente: *");
        jPanel4.add(jlPkCustomerId);

        jPanel6.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel6.add(jcbPkCustomerId, java.awt.BorderLayout.CENTER);

        jbPkCustomerId.setText("...");
        jbPkCustomerId.setToolTipText("Seleccionar cliente");
        jbPkCustomerId.setFocusable(false);
        jbPkCustomerId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel6.add(jbPkCustomerId, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel6);

        jlFkCustomerTypeId.setText("Tipo de cliente: *");
        jPanel4.add(jlFkCustomerTypeId);

        jPanel7.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel7.add(jcbFkCustomerTypeId, java.awt.BorderLayout.CENTER);

        jbFkCustomerTypeId.setText("...");
        jbFkCustomerTypeId.setToolTipText("Seleccionar tipo de cliente");
        jbFkCustomerTypeId.setFocusable(false);
        jbFkCustomerTypeId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel7.add(jbFkCustomerTypeId, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel7);

        jlFkMarketSegmentId.setText("Segmento de mercado del cliente: *");
        jPanel4.add(jlFkMarketSegmentId);

        jPanel8.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel8.add(jcbFkMarketSegmentId, java.awt.BorderLayout.CENTER);

        jbFkMarketSegmentId.setText("...");
        jbFkMarketSegmentId.setToolTipText("Seleccionar segmento de mercado del cliente");
        jbFkMarketSegmentId.setFocusable(false);
        jbFkMarketSegmentId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel8.add(jbFkMarketSegmentId, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel8);

        jlFkMarketSubsegmentId.setText("Subsegmento de mercado del cliente: *");
        jPanel4.add(jlFkMarketSubsegmentId);

        jPanel10.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel10.add(jcbFkMarketSubsegmentId, java.awt.BorderLayout.CENTER);

        jbFkMarketSubsegmentId.setText("...");
        jbFkMarketSubsegmentId.setToolTipText("Seleccionar subsegmento de mercado del cliente");
        jbFkMarketSubsegmentId.setFocusable(false);
        jbFkMarketSubsegmentId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel10.add(jbFkMarketSubsegmentId, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel10);

        jlFkDistributionChannelId.setText("Canal de distribución del cliente: *");
        jPanel4.add(jlFkDistributionChannelId);

        jPanel9.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel9.add(jcbFkDistributionChannelId, java.awt.BorderLayout.CENTER);

        jbFkDistributionChannelId.setText("...");
        jbFkDistributionChannelId.setToolTipText("Seleccionar canal de distribución del cliente");
        jbFkDistributionChannelId.setFocusable(false);
        jbFkDistributionChannelId.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel9.add(jbFkDistributionChannelId, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel9);

        jlFkSalesAgentId_n.setText("Agente de ventas del cliente:");
        jPanel4.add(jlFkSalesAgentId_n);

        jPanel5.setLayout(new java.awt.BorderLayout(5, 5));

        jPanel5.add(jcbFkSalesAgentId_n, java.awt.BorderLayout.CENTER);

        jbFkSalesAgentId_n.setText("...");
        jbFkSalesAgentId_n.setToolTipText("Seleccionar agente de ventas del cliente");
        jbFkSalesAgentId_n.setFocusable(false);
        jbFkSalesAgentId_n.setPreferredSize(new java.awt.Dimension(23, 23));
        jPanel5.add(jbFkSalesAgentId_n, java.awt.BorderLayout.EAST);

        jPanel4.add(jPanel5);

        jckIsFreeDiscountDoc.setText("Sin descuento");
        jPanel4.add(jckIsFreeDiscountDoc);

        jckIsFreeCommissions.setText("Sin comisiones");
        jPanel4.add(jckIsFreeCommissions);

        jckIsSignRestricted.setText("Es cliente restringido al timbrar CFDI");
        jPanel4.add(jckIsSignRestricted);

        jlIsSignRestrictedHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlIsSignRestrictedHint.setText("(Validar permiso especial al timbrar CFDI de facturas.)");
        jPanel4.add(jlIsSignRestrictedHint);

        jckIsSignImmex.setText("Es cliente IMMEX al timbrar CFDI");
        jPanel4.add(jckIsSignImmex);

        jlIsSignImmexHint.setForeground(java.awt.SystemColor.textInactiveText);
        jlIsSignImmexHint.setText("(Validar permiso especial al timbrar CFDI de facturas.)");
        jPanel4.add(jlIsSignImmexHint);

        jckIsSkipSignForeignCurrencyRestriction.setText("Omitir restricción de timbrado de CFDI en moneda extranjera");
        jPanel4.add(jckIsSkipSignForeignCurrencyRestriction);

        jckIsDeleted.setForeground(java.awt.Color.red);
        jckIsDeleted.setText("Registro eliminado");
        jPanel4.add(jckIsDeleted);

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jpCusBranchConfig.setBorder(javax.swing.BorderFactory.createTitledBorder("Sucursales de cliente:"));
        jpCusBranchConfig.setLayout(new java.awt.BorderLayout());

        jpNotesAction.setPreferredSize(new java.awt.Dimension(771, 23));
        jpNotesAction.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jbNewCusBranchConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_new.gif"))); // NOI18N
        jbNewCusBranchConfig.setToolTipText("Crear");
        jbNewCusBranchConfig.setEnabled(false);
        jbNewCusBranchConfig.setFocusable(false);
        jbNewCusBranchConfig.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbNewCusBranchConfig);

        jbModifyCusBranchConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_edit.gif"))); // NOI18N
        jbModifyCusBranchConfig.setToolTipText("Modificar");
        jbModifyCusBranchConfig.setFocusable(false);
        jbModifyCusBranchConfig.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbModifyCusBranchConfig);

        jbDeleteCusBranchConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_delete.gif"))); // NOI18N
        jbDeleteCusBranchConfig.setToolTipText("Eliminar");
        jbDeleteCusBranchConfig.setFocusable(false);
        jbDeleteCusBranchConfig.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbDeleteCusBranchConfig);

        jbAddCusBranchConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/erp/img/icon_std_insert.gif"))); // NOI18N
        jbAddCusBranchConfig.setToolTipText("Agregar sucursales");
        jbAddCusBranchConfig.setFocusable(false);
        jbAddCusBranchConfig.setPreferredSize(new java.awt.Dimension(23, 23));
        jpNotesAction.add(jbAddCusBranchConfig);

        jpCusBranchConfig.add(jpNotesAction, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jpCusBranchConfig, java.awt.BorderLayout.CENTER);

        setSize(new java.awt.Dimension(736, 489));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        windowActivated();
    }//GEN-LAST:event_formWindowActivated

    private void initComponentsExtra() {
        int i = 0;
        erp.lib.table.STableColumnForm tableColumnsCob[];

        moComboboxGrpMarketSegment = new SFormComboBoxGroup(miClient);
        mvFields = new Vector<>();
        moCusBranchConfigPane = new STablePane(miClient);
        moCusBranchConfigPane.setDoubleClickAction(this, "publicActionConfigCobEdit");
        jpCusBranchConfig.add(moCusBranchConfigPane, BorderLayout.CENTER);

        moFieldPkCustomerId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbPkCustomerId, jlPkCustomerId);
        moFieldFkCustomerTypeId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkCustomerTypeId, jlFkCustomerTypeId);
        moFieldFkMarketSegmentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkMarketSegmentId, jlFkMarketSegmentId);
        moFieldFkMarketSubsegmentId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkMarketSubsegmentId, jlFkMarketSubsegmentId);
        moFieldFkDistributionChannelId = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, true, jcbFkDistributionChannelId, jlFkDistributionChannelId);
        moFieldFkSalesAgentId_n = new SFormField(miClient, SLibConstants.DATA_TYPE_KEY, false, jcbFkSalesAgentId_n, jlFkSalesAgentId_n);
        moFieldIsFreeDiscountDoc = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeDiscountDoc);
        moFieldIsFreeCommissions = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsFreeCommissions);
        moFieldIsSignRestricted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsSignRestricted);
        moFieldIsSignImmex = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsSignImmex);
        moFieldIsSkipSignForeignCurrencyRestriction = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsSkipSignForeignCurrencyRestriction);
        moFieldIsDeleted = new SFormField(miClient, SLibConstants.DATA_TYPE_BOOLEAN, false, jckIsDeleted);

        mvFields.add(moFieldPkCustomerId);
        mvFields.add(moFieldFkCustomerTypeId);
        mvFields.add(moFieldFkMarketSegmentId);
        mvFields.add(moFieldFkMarketSubsegmentId);
        mvFields.add(moFieldFkDistributionChannelId);
        mvFields.add(moFieldFkSalesAgentId_n);
        mvFields.add(moFieldIsFreeDiscountDoc);
        mvFields.add(moFieldIsFreeCommissions);
        mvFields.add(moFieldIsSignRestricted);
        mvFields.add(moFieldIsSignImmex);
        mvFields.add(moFieldIsSkipSignForeignCurrencyRestriction);
        mvFields.add(moFieldIsDeleted);

        jbOK.addActionListener(this);
        jbCancel.addActionListener(this);
        jbPkCustomerId.addActionListener(this);
        jbFkCustomerTypeId.addActionListener(this);
        jbFkSalesAgentId_n.addActionListener(this);
        jbFkMarketSegmentId.addActionListener(this);
        jbFkMarketSubsegmentId.addActionListener(this);
        jbFkDistributionChannelId.addActionListener(this);
        jbAddCusBranchConfig.addActionListener(this);
        jbDeleteCusBranchConfig.addActionListener(this);

        i = 0;
        tableColumnsCob = new STableColumnForm[10];
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Sucursal empresa", 150);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Ruta de ventas", 200);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Agente de ventas", 200);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_BOOLEAN, "Eliminado", STableConstants.WIDTH_BOOLEAN);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. creación", STableConstants.WIDTH_USER);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Creación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. modificación", STableConstants.WIDTH_USER);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Modificación", STableConstants.WIDTH_DATE_TIME);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_STRING, "Usr. eliminación", STableConstants.WIDTH_USER);
        tableColumnsCob[i++] = new STableColumnForm(SLibConstants.DATA_TYPE_DATE_TIME, "Eliminación", STableConstants.WIDTH_DATE_TIME);
        for (i = 0; i < tableColumnsCob.length; i++) {
            moCusBranchConfigPane.addTableColumn(tableColumnsCob[i]);
        }
        moCusBranchConfigPane.createTable(null);

        AbstractAction actionOk = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionOk(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionOk, "ok", KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK);

        AbstractAction actionCancel = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) { actionCancel(); }
        };

        SFormUtilities.putActionMap(getRootPane(), actionCancel, "cancel", KeyEvent.VK_ESCAPE, 0);
    }

    private void windowActivated() {
        if (mbFirstTime) {
            mbFirstTime = false;
            if (jcbPkCustomerId.isEnabled()) jcbPkCustomerId.requestFocus(); else jcbFkCustomerTypeId.requestFocus();

            if (moCustomerConfiguration == null) {
                readParamsCompanyInformation();
            }
        }
    }

    private void actionOk() {
        SFormValidation validation = formValidate();

        if (validation.getIsError()) {
            if (validation.getComponent() != null) {
                validation.getComponent().requestFocus();
            }
            if (validation.getMessage().length() > 0) {
                miClient.showMsgBoxWarning(validation.getMessage());
            }
        }
        else {
            mnFormResult = SLibConstants.FORM_RESULT_OK;
            setVisible(false);
        }
    }

    private void actionPkCustomerId() {
        miClient.pickOption(SDataConstants.BPSX_BP_CUS, moFieldPkCustomerId, null);
    }

    private void actionFkCustomerTypeId() {
        miClient.pickOption(SDataConstants.MKTU_TP_CUS, moFieldFkCustomerTypeId, null);
    }

    private void actionFkMarketSegmentId() {
        miClient.pickOption(SDataConstants.MKTU_MKT_SEGM, moFieldFkMarketSegmentId, null);
    }

    private void actionFkMarketSubsegmentId() {
        miClient.pickOption(SDataConstants.MKTU_MKT_SEGM_SUB, moFieldFkMarketSubsegmentId, moFieldFkMarketSegmentId.getKey());
    }

    private void actionFkDistributionChannelId() {
        miClient.pickOption(SDataConstants.MKTU_DIST_CHAN, moFieldFkDistributionChannelId, null);
    }

    private void actionFkSalesAgentId_n() {
        miClient.pickOption(SDataConstants.BPSX_BP_ATT_SAL_AGT, moFieldFkSalesAgentId_n, null);
    }

    private void actionCustomerConfigCobEdit() {
        int index = moCusBranchConfigPane.getTable().getSelectedRow();
        
        if (index != -1) {
            SDataCustomerBranchConfig customerBranchConfig = (SDataCustomerBranchConfig) moCusBranchConfigPane.getTableRow(index).getData();
            
            SFormCustomerBranchConfig formCustomerBranchConfig = new SFormCustomerBranchConfig(miClient);
            formCustomerBranchConfig.setValue(1, jcbPkCustomerId.isEnabled() ? moFieldPkCustomerId.getKeyAsIntArray()[0] : mnParamPkBizPartnerId);
            formCustomerBranchConfig.formRefreshCatalogues();
            formCustomerBranchConfig.formReset();
            formCustomerBranchConfig.setRegistry(customerBranchConfig);
            formCustomerBranchConfig.setVisible(true);
            
            if (formCustomerBranchConfig.getFormResult() == erp.lib.SLibConstants.FORM_RESULT_OK) {
                customerBranchConfig = (SDataCustomerBranchConfig) formCustomerBranchConfig.getRegistry();

                moBizPartner.getDbmsBizPartnerBranches().get(index + 1).setDbmsDataCustomerBranchConfig(customerBranchConfig);
                moCusBranchConfigPane.setTableRow(new SDataCustomerBranchConfigRow(customerBranchConfig), index);
                moCusBranchConfigPane.renderTableRows();
            }
        }
    }

    private void actionDeleteCusBranchConfig() {
        int index = moCusBranchConfigPane.getTable().getSelectedRow();

        if (index != -1) {
            if (miClient.showMsgBoxConfirm(SLibConstants.MSG_CNF_REG_DELETE) == JOptionPane.YES_OPTION) {
                SDataCustomerBranchConfig cusBranchConfig = (SDataCustomerBranchConfig) moCusBranchConfigPane.getTableRow(index).getData();
                
                if (cusBranchConfig.getDbmsSalesAgent().length() > 0) {
                    int nPosition = 0;
                    
                    for (int i = 0; i<moBizPartner.getDbmsBizPartnerBranches().size(); i++) {
                        int nPkCustomerVector = moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig().getPkCustomerBranchId();
                        int nPkCustomerGrid = cusBranchConfig.getPkCustomerBranchId();
                        if (nPkCustomerVector == nPkCustomerGrid) {
                            nPosition = i;
                            break;
                        }
                    }
                    moBizPartner.getDbmsBizPartnerBranches().get(nPosition).getDbmsDataCustomerBranchConfig().setIsDeleted(true);
                }
                
                moCusBranchConfigPane.removeTableRow(index);
                moCusBranchConfigPane.renderTableRows();

                if (moCusBranchConfigPane.getTableGuiRowCount() > 0) {
                    moCusBranchConfigPane.setTableRowSelection(index < moCusBranchConfigPane.getTableGuiRowCount() ? index : moCusBranchConfigPane.getTableGuiRowCount() - 1);
                }
            }
        }
    }

    private void actionAddCusBranchConfig() {
        SDataCustomerBranchConfig customerBranchConfig = null;

        if (jcbPkCustomerId.getSelectedIndex() > 0) {
            SDataBizPartner bizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, moFieldPkCustomerId.getKey(), SLibConstants.EXEC_MODE_SILENT);

            if (bizPartner != null) {
                for (int i = 1; i < bizPartner.getDbmsBizPartnerBranches().size(); i++) {
                    boolean exists = false;
                    moBizPartnerBranch = bizPartner.getDbmsBizPartnerBranches().get(i);

                    for (int j = 0; j < moCusBranchConfigPane.getTableGuiRowCount(); j++) {
                        customerBranchConfig = (SDataCustomerBranchConfig) moCusBranchConfigPane.getTableRow(j).getData();
                        if (moBizPartnerBranch.getPkBizPartnerBranchId() == customerBranchConfig.getPkCustomerBranchId()) {
                            exists = true;
                            break;
                        }
                    }

                    if (!exists) {
                        // Add branch:

                        if (moBizPartnerBranch.getDbmsDataCustomerBranchConfig() != null) {
                            moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig().setIsDeleted(false);
                            moCusBranchConfigPane.addTableRow(new SDataCustomerBranchConfigRow(moBizPartnerBranch.getDbmsDataCustomerBranchConfig()));
                        }
                        else {
                            customerBranchConfig = new SDataCustomerBranchConfig();
                            customerBranchConfig.setPkCustomerBranchId(moBizPartnerBranch.getPkBizPartnerBranchId());
                            customerBranchConfig.setDbmsCustomerBranch(moBizPartnerBranch.getBizPartnerBranch());
                            customerBranchConfig.setDbmsSalesRoute("");
                            customerBranchConfig.setDbmsSalesAgent("");
                            customerBranchConfig.setFkSalesRouteId(1);
                            customerBranchConfig.setFkSalesAgentId_n(1);
                            customerBranchConfig.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
                            customerBranchConfig.setFkUserEditId(1);
                            customerBranchConfig.setFkUserDeleteId(1);
                            customerBranchConfig.setDbmsUserNew(miClient.getSessionXXX().getUser().getUser());
                            customerBranchConfig.setDbmsUserEdit("(n/a)");
                            customerBranchConfig.setDbmsUserDelete("(n/a)");
                            customerBranchConfig.setUserNewTs(miClient.getSessionXXX().getWorkingDate());

                            moCusBranchConfigPane.addTableRow(new SDataCustomerBranchConfigRow(customerBranchConfig));
                        }
                        
                        moCusBranchConfigPane.renderTableRows();
                        int index = moCusBranchConfigPane.getTableGuiRowCount() - 1;
                        moCusBranchConfigPane.getTable().setRowSelectionInterval(index, index);
                        moCusBranchConfigPane.getVerticalScrollBar().setValue((index + 1) * moCusBranchConfigPane.getTable().getRowHeight());
                    }
                }
            }
        }
        else {
            miClient.showMsgBoxWarning("No se ha seleccionado un cliente.");
        }
    }

    private void actionCancel() {
        mnFormResult = SLibConstants.FORM_RESULT_CANCEL;
        setVisible(false);
    }

    private void readParamsCompanyInformation() {
        moFieldFkCustomerTypeId.setFieldValue(miClient.getSessionXXX().getParamsCompany().getFkDefaultCustomerTypeId_n() > 0 ?
            new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultCustomerTypeId_n() } : new int[] { 0 });
        moFieldFkMarketSegmentId.setFieldValue(miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSegmentId_n() > 0 ?
            new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSegmentId_n() } : new int[] { 0 });
        moFieldFkMarketSubsegmentId.setFieldValue(miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSubsegmentId_n() > 0 ?
            new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSegmentId_n(),
            miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSubsegmentId_n() } : new int[] { 0, 0 });
        moFieldFkDistributionChannelId.setFieldValue(miClient.getSessionXXX().getParamsCompany().getFkDefaultDistributionChannelId_n() > 0 ?
            new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultDistributionChannelId_n() } : new int[] { 0 });
    }

    private void readCustomerBranchConfig() {
        moBizPartner = (SDataBizPartner) SDataUtilities.readRegistry(miClient, SDataConstants.BPSU_BP, new int[]{moCustomerConfiguration.getPkCustomerId()}, SLibConstants.EXEC_MODE_SILENT);

        if (moBizPartner != null) {
            for (int i = 0; i < moBizPartner.getDbmsBizPartnerBranches().size(); i++) {
                moBizPartnerBranch = moBizPartner.getDbmsBizPartnerBranches().get(i);
            }
        }
    }

    public void publicActionConfigCobEdit() {
        actionCustomerConfigCobEdit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jbAddCusBranchConfig;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDeleteCusBranchConfig;
    private javax.swing.JButton jbFkCustomerTypeId;
    private javax.swing.JButton jbFkDistributionChannelId;
    private javax.swing.JButton jbFkMarketSegmentId;
    private javax.swing.JButton jbFkMarketSubsegmentId;
    private javax.swing.JButton jbFkSalesAgentId_n;
    private javax.swing.JButton jbModifyCusBranchConfig;
    private javax.swing.JButton jbNewCusBranchConfig;
    private javax.swing.JButton jbOK;
    private javax.swing.JButton jbPkCustomerId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkCustomerTypeId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkDistributionChannelId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkMarketSegmentId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkMarketSubsegmentId;
    private javax.swing.JComboBox<SFormComponentItem> jcbFkSalesAgentId_n;
    private javax.swing.JComboBox<SFormComponentItem> jcbPkCustomerId;
    private javax.swing.JCheckBox jckIsDeleted;
    private javax.swing.JCheckBox jckIsFreeCommissions;
    private javax.swing.JCheckBox jckIsFreeDiscountDoc;
    private javax.swing.JCheckBox jckIsSignImmex;
    private javax.swing.JCheckBox jckIsSignRestricted;
    private javax.swing.JCheckBox jckIsSkipSignForeignCurrencyRestriction;
    private javax.swing.JLabel jlFkCustomerTypeId;
    private javax.swing.JLabel jlFkDistributionChannelId;
    private javax.swing.JLabel jlFkMarketSegmentId;
    private javax.swing.JLabel jlFkMarketSubsegmentId;
    private javax.swing.JLabel jlFkSalesAgentId_n;
    private javax.swing.JLabel jlIsSignImmexHint;
    private javax.swing.JLabel jlIsSignRestrictedHint;
    private javax.swing.JLabel jlPkCustomerId;
    private javax.swing.JPanel jpCusBranchConfig;
    private javax.swing.JPanel jpNotesAction;
    // End of variables declaration//GEN-END:variables

    @Override
    public void formClearRegistry() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void formReset() {
        mnFormResult = SLibConstants.UNDEFINED;
        mnFormStatus = SLibConstants.UNDEFINED;
        mbFirstTime = true;

        moCustomerConfiguration = null;

        for (int i = 0; i < mvFields.size(); i++) {
            ((erp.lib.form.SFormField) mvFields.get(i)).resetField();
        }

        moCusBranchConfigPane.createTable(null);
        moCusBranchConfigPane.clearTableRows();

        jcbPkCustomerId.setEnabled(true);
        jcbPkCustomerId.setFocusable(true);
        jbPkCustomerId.setEnabled(true);

        moComboboxGrpMarketSegment.reset();
        //moFieldFkMarketSegmentId.setKey(new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSegmentId_n() });
        //moFieldFkMarketSubsegmentId.setKey(new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultMarketSubsegmentId_n() });
        //moFieldFkDistributionChannelId.setKey(new int[] { miClient.getSessionXXX().getParamsCompany().getFkDefaultDistributionChannelId_n() });

        jckIsDeleted.setEnabled(false);
    }

    @Override
    public void formRefreshCatalogues() {
        moComboboxGrpMarketSegment.clear();
        moComboboxGrpMarketSegment.addComboBox(SDataConstants.MKTU_MKT_SEGM, jcbFkMarketSegmentId, jbFkMarketSegmentId);
        moComboboxGrpMarketSegment.addComboBox(SDataConstants.MKTU_MKT_SEGM_SUB, jcbFkMarketSubsegmentId, jbFkMarketSubsegmentId);

        SFormUtilities.populateComboBox(miClient, jcbPkCustomerId, SDataConstants.BPSX_BP_CUS);
        SFormUtilities.populateComboBox(miClient, jcbFkCustomerTypeId, SDataConstants.MKTU_TP_CUS);
        SFormUtilities.populateComboBox(miClient, jcbFkDistributionChannelId, SDataConstants.MKTU_DIST_CHAN);
        SFormUtilities.populateComboBox(miClient, jcbFkSalesAgentId_n, SDataConstants.BPSX_BP_ATT_SAL_AGT);
    }

    @Override
    public erp.lib.form.SFormValidation formValidate() {
        SFormValidation validation = new SFormValidation();

        for (int i = 0; i < mvFields.size(); i++) {
            if (!((erp.lib.form.SFormField) mvFields.get(i)).validateField()) {
                validation.setIsError(true);
                validation.setComponent(((erp.lib.form.SFormField) mvFields.get(i)).getComponent());
                break;
            }
        }

        if (!validation.getIsError()) {
            if (moCustomerConfiguration == null) {
                if (SDataUtilities.callProcedureVal(miClient, SProcConstants.MKT_CFG_CUS_VAL,
                        new Object[] { moFieldPkCustomerId.getKeyAsIntArray()[0] },
                        SLibConstants.EXEC_MODE_VERBOSE) > 0) {
                    validation.setMessage("El registro actual ya existe");
                    validation.setComponent(jcbPkCustomerId);
                }
            }
        }
        if (!validation.getIsError()) {
            for (int i = 0; i < moCusBranchConfigPane.getTableGuiRowCount(); i++) {
                 SDataCustomerBranchConfig oDataCustomerBranchConfig = (SDataCustomerBranchConfig) moCusBranchConfigPane.getTableRow(i).getData();
                 if (oDataCustomerBranchConfig.getDbmsSalesRoute().length() > 0) {
                 }
                 else {
                     validation.setMessage("No se ha especificado la configuración de comercialización para algunas sucursales del cliente..");
                 }
            }
        }

        return validation;
    }

    @Override
    public void setFormStatus(int status) {
        mnFormStatus = status;
    }

    @Override
    public void setFormVisible(boolean visible) {
        setVisible(visible);
    }

    @Override
    public int getFormStatus() {
        return mnFormStatus;
    }

    @Override
    public int getFormResult() {
        return mnFormResult;
    }

    @Override
    public void setRegistry(erp.lib.data.SDataRegistry registry) {
        int i = 0;
        SDataCustomerBranchConfigRow dataCustomerConfigCobRow = null;
        moCustomerConfiguration = (SDataCustomerConfig) registry;

        moFieldPkCustomerId.setFieldValue(new int[] { moCustomerConfiguration.getPkCustomerId() });
        moFieldFkCustomerTypeId.setFieldValue(new int[] { moCustomerConfiguration.getFkCustomerTypeId() });
        moFieldFkMarketSegmentId.setFieldValue(new int[] { moCustomerConfiguration.getFkMarketSegmentId() });
        moFieldFkMarketSubsegmentId.setFieldValue(new int[] { moCustomerConfiguration.getFkMarketSegmentId(), moCustomerConfiguration.getFkMarketSubsegmentId() });
        moFieldFkDistributionChannelId.setFieldValue(new int[] { moCustomerConfiguration.getFkDistributionChannelId() });
        moFieldFkSalesAgentId_n.setFieldValue(new int[] { moCustomerConfiguration.getFkSalesAgentId_n() });
        moFieldIsFreeDiscountDoc.setFieldValue(moCustomerConfiguration.getIsFreeDiscountDoc());
        moFieldIsFreeCommissions.setFieldValue(moCustomerConfiguration.getIsFreeCommissions());
        moFieldIsSignRestricted.setFieldValue(moCustomerConfiguration.getIsSignRestricted());
        moFieldIsSignImmex.setFieldValue(moCustomerConfiguration.getIsSignImmex());
        moFieldIsSkipSignForeignCurrencyRestriction.setFieldValue(moCustomerConfiguration.getIsSkipSignForeignCurrencyRestriction());
        moFieldIsDeleted.setFieldValue(moCustomerConfiguration.getIsDeleted());

        readCustomerBranchConfig();
        
        for (i = 1; i < moBizPartner.getDbmsBizPartnerBranches().size(); i++) {
            if (moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig() != null) {
                if (!moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig().getIsDeleted()) {
                    dataCustomerConfigCobRow = new SDataCustomerBranchConfigRow(moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig());
                    moCusBranchConfigPane.addTableRow(dataCustomerConfigCobRow);
                }
            }
        }

        jcbPkCustomerId.setEnabled(false);
        jcbPkCustomerId.setFocusable(false);
        jbPkCustomerId.setEnabled(false);
        jckIsDeleted.setEnabled(true);
    }

    @Override
    public erp.lib.data.SDataRegistry getRegistry() {
        if (moCustomerConfiguration == null) {
            moCustomerConfiguration = new SDataCustomerConfig();
            moCustomerConfiguration.setFkUserNewId(miClient.getSession().getUser().getPkUserId());
        }
        else {
            moCustomerConfiguration.setFkUserEditId(miClient.getSession().getUser().getPkUserId());
        }

        moCustomerConfiguration.setPkCustomerId(moFieldPkCustomerId.getKeyAsIntArray()[0]);
        moCustomerConfiguration.setFkCustomerTypeId(moFieldFkCustomerTypeId.getKeyAsIntArray()[0]);
        moCustomerConfiguration.setFkMarketSegmentId(moFieldFkMarketSegmentId.getKeyAsIntArray()[0]);
        moCustomerConfiguration.setFkMarketSubsegmentId(moFieldFkMarketSubsegmentId.getKeyAsIntArray()[1]);
        moCustomerConfiguration.setFkDistributionChannelId(moFieldFkDistributionChannelId.getKeyAsIntArray()[0]);
        moCustomerConfiguration.setFkSalesAgentId_n(moFieldFkSalesAgentId_n.getKeyAsIntArray()[0]);
        moCustomerConfiguration.setIsFreeDiscountDoc(moFieldIsFreeDiscountDoc.getBoolean());
        moCustomerConfiguration.setIsFreeCommissions(moFieldIsFreeCommissions.getBoolean());
        moCustomerConfiguration.setIsSignRestricted(moFieldIsSignRestricted.getBoolean());
        moCustomerConfiguration.setIsSignImmex(moFieldIsSignImmex.getBoolean());
        moCustomerConfiguration.setIsSkipSignForeignCurrencyRestriction(moFieldIsSkipSignForeignCurrencyRestriction.getBoolean());
        moCustomerConfiguration.setIsDeleted(moFieldIsDeleted.getBoolean());

        for (int i = 1; i < moBizPartner.getDbmsBizPartnerBranches().size(); i++) {
             if (moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig() != null) {
                 moBizPartner.getDbmsBizPartnerBranches().get(i).setDbmsDataCustomerBranchConfig(moBizPartner.getDbmsBizPartnerBranches().get(i).getDbmsDataCustomerBranchConfig());
             }
        }

        moCustomerConfiguration.setIsRegistryEdited(true);
        moBizPartner.setDbmsDataCustomerConfig(moCustomerConfiguration);

        return moBizPartner;
    }

    @Override
    public void setValue(int type, Object value) {
        if (type == SDataConstants.BPSU_BP) {
            msParamBizPartnerDescription = (String) value;
        }
        else if (type == SDataConstants.BPSX_BP_CUS) {
            mnParamPkBizPartnerId = (Integer) value;
        }
    }

    @Override
    public Object getValue(int type) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public javax.swing.JLabel getTimeoutLabel() {
        return null;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() instanceof javax.swing.JButton) {
            javax.swing.JButton button = (javax.swing.JButton) e.getSource();

            if (button == jbOK) {
                actionOk();
            }
            else if (button == jbCancel) {
                actionCancel();
            }
            else if (button == jbPkCustomerId) {
                actionPkCustomerId();
            }
            else if (button == jbFkCustomerTypeId) {
                actionFkCustomerTypeId();
            }
            else if (button == jbFkMarketSegmentId) {
                actionFkMarketSegmentId();
            }
            else if (button == jbFkMarketSubsegmentId) {
                actionFkMarketSubsegmentId();
            }
            else if (button == jbFkDistributionChannelId) {
                actionFkDistributionChannelId();
            }
            else if (button == jbFkSalesAgentId_n) {
                actionFkSalesAgentId_n();
            }
            else if (button == jbDeleteCusBranchConfig) {
                actionDeleteCusBranchConfig();
            }
            else if (button == jbAddCusBranchConfig) {
                actionAddCusBranchConfig();
            }
        }
    }
}
